/*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a, b) {
    "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function(a) {
        if (!a.document) throw new Error("jQuery requires a window with a document");
        return b(a);
    } : b(a);
}("undefined" != typeof window ? window : this, function(a, b) {
    function r(a) {
        var b = "length" in a && a.length, c = m.type(a);
        return "function" !== c && !m.isWindow(a) && (!(1 !== a.nodeType || !b) || ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a));
    }
    function w(a, b, c) {
        if (m.isFunction(b)) return m.grep(a, function(a, d) {
            return !!b.call(a, d, a) !== c;
        });
        if (b.nodeType) return m.grep(a, function(a) {
            return a === b !== c;
        });
        if ("string" == typeof b) {
            if (v.test(b)) return m.filter(b, a, c);
            b = m.filter(b, a);
        }
        return m.grep(a, function(a) {
            return m.inArray(a, b) >= 0 !== c;
        });
    }
    function D(a, b) {
        do {
            a = a[b];
        } while (a && 1 !== a.nodeType);
        return a;
    }
    function G(a) {
        var b = F[a] = {};
        return m.each(a.match(E) || [], function(a, c) {
            b[c] = !0;
        }), b;
    }
    function I() {
        y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), 
        a.detachEvent("onload", J));
    }
    function J() {
        (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), 
        m.ready());
    }
    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = "data-" + b.replace(N, "-$1").toLowerCase();
            if ("string" == typeof (c = a.getAttribute(d))) {
                try {
                    c = "true" === c || "false" !== c && ("null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c);
                } catch (e) {}
                m.data(a, b, c);
            } else c = void 0;
        }
        return c;
    }
    function P(a) {
        var b;
        for (b in a) if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
        return !0;
    }
    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f, g, h = m.expando, i = a.nodeType, j = i ? m.cache : a, k = i ? a[h] : a[h] && h;
            if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), 
            j[k] || (j[k] = i ? {} : {
                toJSON: m.noop
            }), ("object" == typeof b || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), 
            g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), 
            "string" == typeof b ? null == (f = g[b]) && (f = g[m.camelCase(b)]) : f = g, f;
        }
    }
    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d, e, f = a.nodeType, g = f ? m.cache : a, h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [ b ] : (b = m.camelCase(b), 
                    b = b in d ? [ b ] : b.split(" ")), e = b.length;
                    for (;e--; ) delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d)) return;
                }
                (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([ a ], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);
            }
        }
    }
    function aa() {
        return !0;
    }
    function ba() {
        return !1;
    }
    function ca() {
        try {
            return y.activeElement;
        } catch (a) {}
    }
    function da(a) {
        var b = ea.split("|"), c = a.createDocumentFragment();
        if (c.createElement) for (;b.length; ) c.createElement(b.pop());
        return c;
    }
    function ua(a, b) {
        var c, d, e = 0, f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || "*") : void 0;
        if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ua(d, b));
        return void 0 === b || b && m.nodeName(a, b) ? m.merge([ a ], f) : f;
    }
    function va(a) {
        W.test(a.type) && (a.defaultChecked = a.checked);
    }
    function wa(a, b) {
        return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
    }
    function xa(a) {
        return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a;
    }
    function ya(a) {
        var b = pa.exec(a.type);
        return b ? a.type = b[1] : a.removeAttribute("type"), a;
    }
    function za(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));
    }
    function Aa(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c, d, e, f = m._data(a), g = m._data(b, f), h = f.events;
            if (h) {
                delete g.handle, g.events = {};
                for (c in h) for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d]);
            }
            g.data && (g.data = m.extend({}, g.data));
        }
    }
    function Ba(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
                e = m._data(b);
                for (d in e.events) m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando);
            }
            "script" === c && b.text !== a.text ? (xa(b).text = a.text, ya(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), 
            k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, 
            b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
        }
    }
    function Ea(b, c) {
        var d, e = m(c.createElement(b)).appendTo(c.body), f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");
        return e.detach(), f;
    }
    function Fa(a) {
        var b = y, c = Da[a];
        return c || (c = Ea(a, b), "none" !== c && c || (Ca = (Ca || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), 
        b = (Ca[0].contentWindow || Ca[0].contentDocument).document, b.write(), b.close(), 
        c = Ea(a, b), Ca.detach()), Da[a] = c), c;
    }
    function La(a, b) {
        return {
            get: function() {
                var c = a();
                if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);
            }
        };
    }
    function Ua(a, b) {
        if (b in a) return b;
        for (var c = b.charAt(0).toUpperCase() + b.slice(1), d = b, e = Ta.length; e--; ) if ((b = Ta[e] + c) in a) return b;
        return d;
    }
    function Va(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), 
        c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fa(d.nodeName)))) : (e = U(d), 
        (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
        for (g = 0; h > g; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
        return a;
    }
    function Wa(a, b, c) {
        var d = Pa.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
    }
    function Xa(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) "margin" === c && (g += m.css(a, c + T[f], !0, e)), 
        d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), 
        "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
        return g;
    }
    function Ya(a, b, c) {
        var d = !0, e = "width" === b ? a.offsetWidth : a.offsetHeight, f = Ia(a), g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (e = Ja(a, b, f), (0 > e || null == e) && (e = a.style[b]), Ha.test(e)) return e;
            d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
        }
        return e + Xa(a, b, c || (g ? "border" : "content"), d, f) + "px";
    }
    function Za(a, b, c, d, e) {
        return new Za.prototype.init(a, b, c, d, e);
    }
    function fb() {
        return setTimeout(function() {
            $a = void 0;
        }), $a = m.now();
    }
    function gb(a, b) {
        var c, d = {
            height: a
        }, e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b) c = T[e], d["margin" + c] = d["padding" + c] = a;
        return b && (d.opacity = d.width = a), d;
    }
    function hb(a, b, c) {
        for (var d, e = (eb[b] || []).concat(eb["*"]), f = 0, g = e.length; g > f; f++) if (d = e[f].call(c, b, a)) return d;
    }
    function ib(a, b, c) {
        var d, e, f, g, h, i, j, n = this, o = {}, p = a.style, q = a.nodeType && U(a), r = m._data(a, "fxshow");
        c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, 
        h.empty.fire = function() {
            h.unqueued || i();
        }), h.unqueued++, n.always(function() {
            n.always(function() {
                h.unqueued--, m.queue(a, "fx").length || h.empty.fire();
            });
        })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [ p.overflow, p.overflowX, p.overflowY ], 
        j = m.css(a, "display"), "inline" === ("none" === j ? m._data(a, "olddisplay") || Fa(a.nodeName) : j) && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fa(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), 
        c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function() {
            p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];
        }));
        for (d in b) if (e = b[d], ab.exec(e)) {
            if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {
                if ("show" !== e || !r || void 0 === r[d]) continue;
                q = !0;
            }
            o[d] = r && r[d] || m.style(a, d);
        } else j = void 0;
        if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fa(a.nodeName) : j) && (p.display = j); else {
            r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), 
            q ? m(a).show() : n.done(function() {
                m(a).hide();
            }), n.done(function() {
                var b;
                m._removeData(a, "fxshow");
                for (b in o) m.style(a, b, o[b]);
            });
            for (d in o) g = hb(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, 
            g.start = "width" === d || "height" === d ? 1 : 0));
        }
    }
    function jb(a, b) {
        var c, d, e, f, g;
        for (c in a) if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], 
        f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), (g = m.cssHooks[d]) && "expand" in g) {
            f = g.expand(f), delete a[d];
            for (c in f) c in a || (a[c] = f[c], b[c] = e);
        } else b[d] = e;
    }
    function kb(a, b, c) {
        var d, e, f = 0, g = db.length, h = m.Deferred().always(function() {
            delete i.elem;
        }), i = function() {
            if (e) return !1;
            for (var b = $a || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);
            return h.notifyWith(a, [ j, f, c ]), 1 > f && i ? c : (h.resolveWith(a, [ j ]), 
            !1);
        }, j = h.promise({
            elem: a,
            props: m.extend({}, b),
            opts: m.extend(!0, {
                specialEasing: {}
            }, c),
            originalProperties: b,
            originalOptions: c,
            startTime: $a || fb(),
            duration: c.duration,
            tweens: [],
            createTween: function(b, c) {
                var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                return j.tweens.push(d), d;
            },
            stop: function(b) {
                var c = 0, d = b ? j.tweens.length : 0;
                if (e) return this;
                for (e = !0; d > c; c++) j.tweens[c].run(1);
                return b ? h.resolveWith(a, [ j, b ]) : h.rejectWith(a, [ j, b ]), this;
            }
        }), k = j.props;
        for (jb(k, j.opts.specialEasing); g > f; f++) if (d = db[f].call(j, a, k, j.opts)) return d;
        return m.map(k, hb, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, {
            elem: a,
            anim: j,
            queue: j.opts.queue
        })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
    }
    function Lb(a) {
        return function(b, c) {
            "string" != typeof b && (c = b, b = "*");
            var d, e = 0, f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c)) for (;d = f[e++]; ) "+" === d.charAt(0) ? (d = d.slice(1) || "*", 
            (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        };
    }
    function Mb(a, b, c, d) {
        function g(h) {
            var i;
            return e[h] = !0, m.each(a[h] || [], function(a, h) {
                var j = h(b, c, d);
                return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), 
                g(j), !1);
            }), i;
        }
        var e = {}, f = a === Ib;
        return g(b.dataTypes[0]) || !e["*"] && g("*");
    }
    function Nb(a, b) {
        var c, d, e = m.ajaxSettings.flatOptions || {};
        for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a;
    }
    function Ob(a, b, c) {
        for (var d, e, f, g, h = a.contents, i = a.dataTypes; "*" === i[0]; ) i.shift(), 
        void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
        if (e) for (g in h) if (h[g] && h[g].test(e)) {
            i.unshift(g);
            break;
        }
        if (i[0] in c) f = i[0]; else {
            for (g in c) {
                if (!i[0] || a.converters[g + " " + i[0]]) {
                    f = g;
                    break;
                }
                d || (d = g);
            }
            f = f || d;
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
    }
    function Pb(a, b, c, d) {
        var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
        if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        for (;f; ) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), 
        i = f, f = k.shift()) if ("*" === f) f = i; else if ("*" !== i && i !== f) {
            if (!(g = j[i + " " + f] || j["* " + f])) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
                !0 === g ? g = j[e] : !0 !== j[e] && (f = h[0], k.unshift(h[1]));
                break;
            }
            if (!0 !== g) if (g && a.throws) b = g(b); else try {
                b = g(b);
            } catch (l) {
                return {
                    state: "parsererror",
                    error: g ? l : "No conversion from " + i + " to " + f
                };
            }
        }
        return {
            state: "success",
            data: b
        };
    }
    function Vb(a, b, c, d) {
        var e;
        if (m.isArray(b)) m.each(b, function(b, e) {
            c || Rb.test(a) ? d(a, e) : Vb(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d);
        }); else if (c || "object" !== m.type(b)) d(a, b); else for (e in b) Vb(a + "[" + e + "]", b[e], c, d);
    }
    function Zb() {
        try {
            return new a.XMLHttpRequest();
        } catch (b) {}
    }
    function $b() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP");
        } catch (b) {}
    }
    function dc(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType && (a.defaultView || a.parentWindow);
    }
    var c = [], d = c.slice, e = c.concat, f = c.push, g = c.indexOf, h = {}, i = h.toString, j = h.hasOwnProperty, k = {}, l = "1.11.3", m = function(a, b) {
        return new m.fn.init(a, b);
    }, n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, o = /^-ms-/, p = /-([\da-z])/gi, q = function(a, b) {
        return b.toUpperCase();
    };
    m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: "",
        length: 0,
        toArray: function() {
            return d.call(this);
        },
        get: function(a) {
            return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
        },
        pushStack: function(a) {
            var b = m.merge(this.constructor(), a);
            return b.prevObject = this, b.context = this.context, b;
        },
        each: function(a, b) {
            return m.each(this, a, b);
        },
        map: function(a) {
            return this.pushStack(m.map(this, function(b, c) {
                return a.call(b, c, b);
            }));
        },
        slice: function() {
            return this.pushStack(d.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(a) {
            var b = this.length, c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [ this[c] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor(null);
        },
        push: f,
        sort: c.sort,
        splice: c.splice
    }, m.extend = m.fn.extend = function() {
        var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = !1;
        for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || m.isFunction(g) || (g = {}), 
        h === i && (g = this, h--); i > h; h++) if (null != (e = arguments[h])) for (d in e) a = g[d], 
        c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, 
        f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
        return g;
    }, m.extend({
        expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(a) {
            throw new Error(a);
        },
        noop: function() {},
        isFunction: function(a) {
            return "function" === m.type(a);
        },
        isArray: Array.isArray || function(a) {
            return "array" === m.type(a);
        },
        isWindow: function(a) {
            return null != a && a == a.window;
        },
        isNumeric: function(a) {
            return !m.isArray(a) && a - parseFloat(a) + 1 >= 0;
        },
        isEmptyObject: function(a) {
            var b;
            for (b in a) return !1;
            return !0;
        },
        isPlainObject: function(a) {
            var b;
            if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;
            try {
                if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;
            } catch (c) {
                return !1;
            }
            if (k.ownLast) for (b in a) return j.call(a, b);
            for (b in a) ;
            return void 0 === b || j.call(a, b);
        },
        type: function(a) {
            return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a;
        },
        globalEval: function(b) {
            b && m.trim(b) && (a.execScript || function(b) {
                a.eval.call(a, b);
            })(b);
        },
        camelCase: function(a) {
            return a.replace(o, "ms-").replace(p, q);
        },
        nodeName: function(a, b) {
            return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
        },
        each: function(a, b, c) {
            var e = 0, f = a.length, g = r(a);
            if (c) {
                if (g) for (;f > e && !1 !== b.apply(a[e], c); e++) ; else for (e in a) if (!1 === b.apply(a[e], c)) break;
            } else if (g) for (;f > e && !1 !== b.call(a[e], e, a[e]); e++) ; else for (e in a) if (!1 === b.call(a[e], e, a[e])) break;
            return a;
        },
        trim: function(a) {
            return null == a ? "" : (a + "").replace(n, "");
        },
        makeArray: function(a, b) {
            var c = b || [];
            return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [ a ] : a) : f.call(c, a)), 
            c;
        },
        inArray: function(a, b, c) {
            var d;
            if (b) {
                if (g) return g.call(b, a, c);
                for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) if (c in b && b[c] === a) return c;
            }
            return -1;
        },
        merge: function(a, b) {
            for (var c = +b.length, d = 0, e = a.length; c > d; ) a[e++] = b[d++];
            if (c !== c) for (;void 0 !== b[d]; ) a[e++] = b[d++];
            return a.length = e, a;
        },
        grep: function(a, b, c) {
            for (var e = [], f = 0, g = a.length, h = !c; g > f; f++) !b(a[f], f) !== h && e.push(a[f]);
            return e;
        },
        map: function(a, b, c) {
            var d, f = 0, g = a.length, h = r(a), i = [];
            if (h) for (;g > f; f++) null != (d = b(a[f], f, c)) && i.push(d); else for (f in a) null != (d = b(a[f], f, c)) && i.push(d);
            return e.apply([], i);
        },
        guid: 1,
        proxy: function(a, b) {
            var c, e, f;
            return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), 
            e = function() {
                return a.apply(b || this, c.concat(d.call(arguments)));
            }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;
        },
        now: function() {
            return +new Date();
        },
        support: k
    }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(a, b) {
        h["[object " + b + "]"] = b.toLowerCase();
    });
    var s = function(a) {
        function ga(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, 
            "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;
            if (!e && p) {
                if (11 !== k && (f = _.exec(a))) if (j = f[1]) {
                    if (9 === k) {
                        if (!(h = b.getElementById(j)) || !h.parentNode) return d;
                        if (h.id === j) return d.push(h), d;
                    } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), 
                    d;
                } else {
                    if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;
                    if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), 
                    d;
                }
                if (c.qsa && (!q || !q.test(a))) {
                    if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
                        o = g(a), (r = b.getAttribute("id")) ? s = r.replace(ba, "\\$&") : b.setAttribute("id", s), 
                        s = "[id='" + s + "'] ", l = o.length;
                        for (;l--; ) o[l] = s + ra(o[l]);
                        w = aa.test(a) && pa(b.parentNode) || b, x = o.join(",");
                    }
                    if (x) try {
                        return H.apply(d, w.querySelectorAll(x)), d;
                    } catch (y) {} finally {
                        r || b.removeAttribute("id");
                    }
                }
            }
            return i(a.replace(R, "$1"), b, d, e);
        }
        function ha() {
            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
            }
            var a = [];
            return b;
        }
        function ia(a) {
            return a[u] = !0, a;
        }
        function ja(a) {
            var b = n.createElement("div");
            try {
                return !!a(b);
            } catch (c) {
                return !1;
            } finally {
                b.parentNode && b.parentNode.removeChild(b), b = null;
            }
        }
        function ka(a, b) {
            for (var c = a.split("|"), e = a.length; e--; ) d.attrHandle[c[e]] = b;
        }
        function la(a, b) {
            var c = b && a, d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);
            if (d) return d;
            if (c) for (;c = c.nextSibling; ) if (c === b) return -1;
            return a ? 1 : -1;
        }
        function oa(a) {
            return ia(function(b) {
                return b = +b, ia(function(c, d) {
                    for (var e, f = a([], c.length, b), g = f.length; g--; ) c[e = f[g]] && (c[e] = !(d[e] = c[e]));
                });
            });
        }
        function pa(a) {
            return a && void 0 !== a.getElementsByTagName && a;
        }
        function qa() {}
        function ra(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
            return d;
        }
        function sa(a, b, c) {
            var d = b.dir, e = c && "parentNode" === d, f = x++;
            return b.first ? function(b, c, f) {
                for (;b = b[d]; ) if (1 === b.nodeType || e) return a(b, c, f);
            } : function(b, c, g) {
                var h, i, j = [ w, f ];
                if (g) {
                    for (;b = b[d]; ) if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
                } else for (;b = b[d]; ) if (1 === b.nodeType || e) {
                    if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];
                    if (i[d] = j, j[2] = a(b, c, g)) return !0;
                }
            };
        }
        function ta(a) {
            return a.length > 1 ? function(b, c, d) {
                for (var e = a.length; e--; ) if (!a[e](b, c, d)) return !1;
                return !0;
            } : a[0];
        }
        function ua(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++) ga(a, b[d], c);
            return c;
        }
        function va(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), 
            j && b.push(h));
            return g;
        }
        function wa(a, b, c, d, e, f) {
            return d && !d[u] && (d = wa(d)), e && !e[u] && (e = wa(e, f)), ia(function(f, g, h, i) {
                var j, k, l, m = [], n = [], o = g.length, p = f || ua(b || "*", h.nodeType ? [ h ] : h, []), q = !a || !f && b ? p : va(p, m, a, h, i), r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c && c(q, r, h, i), d) {
                    j = va(r, n), d(j, [], h, i), k = j.length;
                    for (;k--; ) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [], k = r.length;
                            for (;k--; ) (l = r[k]) && j.push(q[k] = l);
                            e(null, r = [], j, i);
                        }
                        k = r.length;
                        for (;k--; ) (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                    }
                } else r = va(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);
            });
        }
        function xa(a) {
            for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sa(function(a) {
                return a === b;
            }, h, !0), l = sa(function(a) {
                return J(b, a) > -1;
            }, h, !0), m = [ function(a, c, d) {
                var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                return b = null, e;
            } ]; f > i; i++) if (c = d.relative[a[i].type]) m = [ sa(ta(m), c) ]; else {
                if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
                    for (e = ++i; f > e && !d.relative[a[e].type]; e++) ;
                    return wa(i > 1 && ta(m), i > 1 && ra(a.slice(0, i - 1).concat({
                        value: " " === a[i - 2].type ? "*" : ""
                    })).replace(R, "$1"), c, e > i && xa(a.slice(i, e)), f > e && xa(a = a.slice(e)), f > e && ra(a));
                }
                m.push(c);
            }
            return ta(m);
        }
        function ya(a, b) {
            var c = b.length > 0, e = a.length > 0, f = function(f, g, h, i, k) {
                var l, m, o, p = 0, q = "0", r = f && [], s = [], t = j, u = f || e && d.find.TAG("*", k), v = w += null == t ? 1 : Math.random() || .1, x = u.length;
                for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                    if (e && l) {
                        m = 0;
                        for (;o = a[m++]; ) if (o(l, g, h)) {
                            i.push(l);
                            break;
                        }
                        k && (w = v);
                    }
                    c && ((l = !o && l) && p--, f && r.push(l));
                }
                if (p += q, c && q !== p) {
                    m = 0;
                    for (;o = b[m++]; ) o(r, s, g, h);
                    if (f) {
                        if (p > 0) for (;q--; ) r[q] || s[q] || (s[q] = F.call(i));
                        s = va(s);
                    }
                    H.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && ga.uniqueSort(i);
                }
                return k && (w = v, j = t), r;
            };
            return c ? ia(f) : f;
        }
        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date(), v = a.document, w = 0, x = 0, y = ha(), z = ha(), A = ha(), B = function(a, b) {
            return a === b && (l = !0), 0;
        }, C = 1 << 31, D = {}.hasOwnProperty, E = [], F = E.pop, G = E.push, H = E.push, I = E.slice, J = function(a, b) {
            for (var c = 0, d = a.length; d > c; c++) if (a[c] === b) return c;
            return -1;
        }, K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", L = "[\\x20\\t\\r\\n\\f]", M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", N = M.replace("w", "w#"), O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]", P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)", Q = new RegExp(L + "+", "g"), R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"), S = new RegExp("^" + L + "*," + L + "*"), T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"), U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"), V = new RegExp(P), W = new RegExp("^" + N + "$"), X = {
            ID: new RegExp("^#(" + M + ")"),
            CLASS: new RegExp("^\\.(" + M + ")"),
            TAG: new RegExp("^(" + M.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + O),
            PSEUDO: new RegExp("^" + P),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + K + ")$", "i"),
            needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
        }, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/, _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, aa = /[+~]/, ba = /'|\\/g, ca = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"), da = function(a, b, c) {
            var d = "0x" + b - 65536;
            return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
        }, ea = function() {
            m();
        };
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;
        } catch (fa) {
            H = {
                apply: E.length ? function(a, b) {
                    G.apply(a, I.call(b));
                } : function(a, b) {
                    for (var c = a.length, d = 0; a[c++] = b[d++]; ) ;
                    a.length = c - 1;
                }
            };
        }
        c = ga.support = {}, f = ga.isXML = function(a) {
            var b = a && (a.ownerDocument || a).documentElement;
            return !!b && "HTML" !== b.nodeName;
        }, m = ga.setDocument = function(a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, 
            e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", ea, !1) : e.attachEvent && e.attachEvent("onunload", ea)), 
            p = !f(g), c.attributes = ja(function(a) {
                return a.className = "i", !a.getAttribute("className");
            }), c.getElementsByTagName = ja(function(a) {
                return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length;
            }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = ja(function(a) {
                return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;
            }), c.getById ? (d.find.ID = function(a, b) {
                if (void 0 !== b.getElementById && p) {
                    var c = b.getElementById(a);
                    return c && c.parentNode ? [ c ] : [];
                }
            }, d.filter.ID = function(a) {
                var b = a.replace(ca, da);
                return function(a) {
                    return a.getAttribute("id") === b;
                };
            }) : (delete d.find.ID, d.filter.ID = function(a) {
                var b = a.replace(ca, da);
                return function(a) {
                    var c = void 0 !== a.getAttributeNode && a.getAttributeNode("id");
                    return c && c.value === b;
                };
            }), d.find.TAG = c.getElementsByTagName ? function(a, b) {
                return void 0 !== b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
            } : function(a, b) {
                var c, d = [], e = 0, f = b.getElementsByTagName(a);
                if ("*" === a) {
                    for (;c = f[e++]; ) 1 === c.nodeType && d.push(c);
                    return d;
                }
                return f;
            }, d.find.CLASS = c.getElementsByClassName && function(a, b) {
                return p ? b.getElementsByClassName(a) : void 0;
            }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (ja(function(a) {
                o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", 
                a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), 
                a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), 
                a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), 
                a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
            }), ja(function(a) {
                var b = g.createElement("input");
                b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), 
                a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), 
                q.push(",.*:");
            })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function(a) {
                c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P);
            }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), 
            b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function(a, b) {
                var c = 9 === a.nodeType ? a.documentElement : a, d = b && b.parentNode;
                return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
            } : function(a, b) {
                if (b) for (;b = b.parentNode; ) if (b === a) return !0;
                return !1;
            }, B = b ? function(a, b) {
                if (a === b) return l = !0, 0;
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                return d || (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 
                1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);
            } : function(a, b) {
                if (a === b) return l = !0, 0;
                var c, d = 0, e = a.parentNode, f = b.parentNode, h = [ a ], i = [ b ];
                if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;
                if (e === f) return la(a, b);
                c = a;
                for (;c = c.parentNode; ) h.unshift(c);
                c = b;
                for (;c = c.parentNode; ) i.unshift(c);
                for (;h[d] === i[d]; ) d++;
                return d ? la(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
            }, g) : n;
        }, ga.matches = function(a, b) {
            return ga(a, null, null, b);
        }, ga.matchesSelector = function(a, b) {
            if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
                var d = s.call(a, b);
                if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
            } catch (e) {}
            return ga(b, n, null, [ a ]).length > 0;
        }, ga.contains = function(a, b) {
            return (a.ownerDocument || a) !== n && m(a), t(a, b);
        }, ga.attr = function(a, b) {
            (a.ownerDocument || a) !== n && m(a);
            var e = d.attrHandle[b.toLowerCase()], f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
            return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
        }, ga.error = function(a) {
            throw new Error("Syntax error, unrecognized expression: " + a);
        }, ga.uniqueSort = function(a) {
            var b, d = [], e = 0, f = 0;
            if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
                for (;b = a[f++]; ) b === a[f] && (e = d.push(f));
                for (;e--; ) a.splice(d[e], 1);
            }
            return k = null, a;
        }, e = ga.getText = function(a) {
            var b, c = "", d = 0, f = a.nodeType;
            if (f) {
                if (1 === f || 9 === f || 11 === f) {
                    if ("string" == typeof a.textContent) return a.textContent;
                    for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
                } else if (3 === f || 4 === f) return a.nodeValue;
            } else for (;b = a[d++]; ) c += e(b);
            return c;
        }, d = ga.selectors = {
            cacheLength: 50,
            createPseudo: ia,
            match: X,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(a) {
                    return a[1] = a[1].replace(ca, da), a[3] = (a[3] || a[4] || a[5] || "").replace(ca, da), 
                    "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
                },
                CHILD: function(a) {
                    return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), 
                    a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), 
                    a;
                },
                PSEUDO: function(a) {
                    var b, c = !a[6] && a[2];
                    return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), 
                    a[2] = c.slice(0, b)), a.slice(0, 3));
                }
            },
            filter: {
                TAG: function(a) {
                    var b = a.replace(ca, da).toLowerCase();
                    return "*" === a ? function() {
                        return !0;
                    } : function(a) {
                        return a.nodeName && a.nodeName.toLowerCase() === b;
                    };
                },
                CLASS: function(a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function(a) {
                        return b.test("string" == typeof a.className && a.className || void 0 !== a.getAttribute && a.getAttribute("class") || "");
                    });
                },
                ATTR: function(a, b, c) {
                    return function(d) {
                        var e = ga.attr(d, a);
                        return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
                    };
                },
                CHILD: function(a, b, c, d, e) {
                    var f = "nth" !== a.slice(0, 3), g = "last" !== a.slice(-4), h = "of-type" === b;
                    return 1 === d && 0 === e ? function(a) {
                        return !!a.parentNode;
                    } : function(b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode, r = h && b.nodeName.toLowerCase(), s = !i && !h;
                        if (q) {
                            if (f) {
                                for (;p; ) {
                                    l = b;
                                    for (;l = l[p]; ) if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                    o = p = "only" === a && !o && "nextSibling";
                                }
                                return !0;
                            }
                            if (o = [ g ? q.firstChild : q.lastChild ], g && s) {
                                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], 
                                l = n && q.childNodes[n];
                                for (;l = ++n && l && l[p] || (m = n = 0) || o.pop(); ) if (1 === l.nodeType && ++m && l === b) {
                                    k[a] = [ w, n, m ];
                                    break;
                                }
                            } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1]; else for (;(l = ++n && l && l[p] || (m = n = 0) || o.pop()) && ((h ? l.nodeName.toLowerCase() !== r : 1 !== l.nodeType) || !++m || (s && ((l[u] || (l[u] = {}))[a] = [ w, m ]), 
                            l !== b)); ) ;
                            return (m -= e) === d || m % d == 0 && m / d >= 0;
                        }
                    };
                },
                PSEUDO: function(a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);
                    return e[u] ? e(b) : e.length > 1 ? (c = [ a, a, "", b ], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function(a, c) {
                        for (var d, f = e(a, b), g = f.length; g--; ) d = J(a, f[g]), a[d] = !(c[d] = f[g]);
                    }) : function(a) {
                        return e(a, 0, c);
                    }) : e;
                }
            },
            pseudos: {
                not: ia(function(a) {
                    var b = [], c = [], d = h(a.replace(R, "$1"));
                    return d[u] ? ia(function(a, b, c, e) {
                        for (var f, g = d(a, null, e, []), h = a.length; h--; ) (f = g[h]) && (a[h] = !(b[h] = f));
                    }) : function(a, e, f) {
                        return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
                    };
                }),
                has: ia(function(a) {
                    return function(b) {
                        return ga(a, b).length > 0;
                    };
                }),
                contains: ia(function(a) {
                    return a = a.replace(ca, da), function(b) {
                        return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                    };
                }),
                lang: ia(function(a) {
                    return W.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(ca, da).toLowerCase(), 
                    function(b) {
                        var c;
                        do {
                            if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return (c = c.toLowerCase()) === a || 0 === c.indexOf(a + "-");
                        } while ((b = b.parentNode) && 1 === b.nodeType);
                        return !1;
                    };
                }),
                target: function(b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id;
                },
                root: function(a) {
                    return a === o;
                },
                focus: function(a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                },
                enabled: function(a) {
                    return !1 === a.disabled;
                },
                disabled: function(a) {
                    return !0 === a.disabled;
                },
                checked: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && !!a.checked || "option" === b && !!a.selected;
                },
                selected: function(a) {
                    return a.parentNode && a.parentNode.selectedIndex, !0 === a.selected;
                },
                empty: function(a) {
                    for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(a) {
                    return !d.pseudos.empty(a);
                },
                header: function(a) {
                    return Z.test(a.nodeName);
                },
                input: function(a) {
                    return Y.test(a.nodeName);
                },
                button: function(a) {
                    var b = a.nodeName.toLowerCase();
                    return "input" === b && "button" === a.type || "button" === b;
                },
                text: function(a) {
                    var b;
                    return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
                },
                first: oa(function() {
                    return [ 0 ];
                }),
                last: oa(function(a, b) {
                    return [ b - 1 ];
                }),
                eq: oa(function(a, b, c) {
                    return [ 0 > c ? c + b : c ];
                }),
                even: oa(function(a, b) {
                    for (var c = 0; b > c; c += 2) a.push(c);
                    return a;
                }),
                odd: oa(function(a, b) {
                    for (var c = 1; b > c; c += 2) a.push(c);
                    return a;
                }),
                lt: oa(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; --d >= 0; ) a.push(d);
                    return a;
                }),
                gt: oa(function(a, b, c) {
                    for (var d = 0 > c ? c + b : c; ++d < b; ) a.push(d);
                    return a;
                })
            }
        }, d.pseudos.nth = d.pseudos.eq;
        for (b in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) d.pseudos[b] = function(a) {
            return function(b) {
                return "input" === b.nodeName.toLowerCase() && b.type === a;
            };
        }(b);
        for (b in {
            submit: !0,
            reset: !0
        }) d.pseudos[b] = function(a) {
            return function(b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a;
            };
        }(b);
        qa.prototype = d.filters = d.pseudos, d.setFilters = new qa(), g = ga.tokenize = function(a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) return b ? 0 : k.slice(0);
            h = a, i = [], j = d.preFilter;
            for (;h; ) {
                (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), 
                c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({
                    value: c,
                    type: e[0].replace(R, " ")
                }), h = h.slice(c.length));
                for (g in d.filter) !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), 
                f.push({
                    value: c,
                    type: g,
                    matches: e
                }), h = h.slice(c.length));
                if (!c) break;
            }
            return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
        };
        return h = ga.compile = function(a, b) {
            var c, d = [], e = [], f = A[a + " "];
            if (!f) {
                b || (b = g(a)), c = b.length;
                for (;c--; ) f = xa(b[c]), f[u] ? d.push(f) : e.push(f);
                f = A(a, ya(e, d)), f.selector = a;
            }
            return f;
        }, i = ga.select = function(a, b, e, f) {
            var i, j, k, l, m, n = "function" == typeof a && a, o = !f && g(a = n.selector || a);
            if (e = e || [], 1 === o.length) {
                if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
                    if (!(b = (d.find.ID(k.matches[0].replace(ca, da), b) || [])[0])) return e;
                    n && (b = b.parentNode), a = a.slice(j.shift().value.length);
                }
                i = X.needsContext.test(a) ? 0 : j.length;
                for (;i-- && (k = j[i], !d.relative[l = k.type]); ) if ((m = d.find[l]) && (f = m(k.matches[0].replace(ca, da), aa.test(j[0].type) && pa(b.parentNode) || b))) {
                    if (j.splice(i, 1), !(a = f.length && ra(j))) return H.apply(e, f), e;
                    break;
                }
            }
            return (n || h(a, o))(f, b, !p, e, aa.test(a) && pa(b.parentNode) || b), e;
        }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, 
        m(), c.sortDetached = ja(function(a) {
            return 1 & a.compareDocumentPosition(n.createElement("div"));
        }), ja(function(a) {
            return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
        }) || ka("type|href|height|width", function(a, b, c) {
            return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
        }), c.attributes && ja(function(a) {
            return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
        }) || ka("value", function(a, b, c) {
            return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
        }), ja(function(a) {
            return null == a.getAttribute("disabled");
        }) || ka(K, function(a, b, c) {
            var d;
            return c ? void 0 : !0 === a[b] ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
        }), ga;
    }(a);
    m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, 
    m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;
    var t = m.expr.match.needsContext, u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, v = /^.[^:#\[\.,]*$/;
    m.filter = function(a, b, c) {
        var d = b[0];
        return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [ d ] : [] : m.find.matches(a, m.grep(b, function(a) {
            return 1 === a.nodeType;
        }));
    }, m.fn.extend({
        find: function(a) {
            var b, c = [], d = this, e = d.length;
            if ("string" != typeof a) return this.pushStack(m(a).filter(function() {
                for (b = 0; e > b; b++) if (m.contains(d[b], this)) return !0;
            }));
            for (b = 0; e > b; b++) m.find(a, d[b], c);
            return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, 
            c;
        },
        filter: function(a) {
            return this.pushStack(w(this, a || [], !1));
        },
        not: function(a) {
            return this.pushStack(w(this, a || [], !0));
        },
        is: function(a) {
            return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;
        }
    });
    var x, y = a.document, z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;
    (m.fn.init = function(a, b) {
        var c, d;
        if (!a) return this;
        if ("string" == typeof a) {
            if (!(c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [ null, a, null ] : z.exec(a)) || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
            if (c[1]) {
                if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), 
                u.test(c[1]) && m.isPlainObject(b)) for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                return this;
            }
            if ((d = y.getElementById(c[2])) && d.parentNode) {
                if (d.id !== c[2]) return x.find(a);
                this.length = 1, this[0] = d;
            }
            return this.context = y, this.selector = a, this;
        }
        return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? void 0 !== x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, 
        this.context = a.context), m.makeArray(a, this));
    }).prototype = m.fn, x = m(y);
    var B = /^(?:parents|prev(?:Until|All))/, C = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    m.extend({
        dir: function(a, b, c) {
            for (var d = [], e = a[b]; e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c)); ) 1 === e.nodeType && d.push(e), 
            e = e[b];
            return d;
        },
        sibling: function(a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c;
        }
    }), m.fn.extend({
        has: function(a) {
            var b, c = m(a, this), d = c.length;
            return this.filter(function() {
                for (b = 0; d > b; b++) if (m.contains(this, c[b])) return !0;
            });
        },
        closest: function(a, b) {
            for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                f.push(c);
                break;
            }
            return this.pushStack(f.length > 1 ? m.unique(f) : f);
        },
        index: function(a) {
            return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(a, b) {
            return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
        },
        addBack: function(a) {
            return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
        }
    });
    m.each({
        parent: function(a) {
            var b = a.parentNode;
            return b && 11 !== b.nodeType ? b : null;
        },
        parents: function(a) {
            return m.dir(a, "parentNode");
        },
        parentsUntil: function(a, b, c) {
            return m.dir(a, "parentNode", c);
        },
        next: function(a) {
            return D(a, "nextSibling");
        },
        prev: function(a) {
            return D(a, "previousSibling");
        },
        nextAll: function(a) {
            return m.dir(a, "nextSibling");
        },
        prevAll: function(a) {
            return m.dir(a, "previousSibling");
        },
        nextUntil: function(a, b, c) {
            return m.dir(a, "nextSibling", c);
        },
        prevUntil: function(a, b, c) {
            return m.dir(a, "previousSibling", c);
        },
        siblings: function(a) {
            return m.sibling((a.parentNode || {}).firstChild, a);
        },
        children: function(a) {
            return m.sibling(a.firstChild);
        },
        contents: function(a) {
            return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);
        }
    }, function(a, b) {
        m.fn[a] = function(c, d) {
            var e = m.map(this, b, c);
            return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), 
            this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), 
            this.pushStack(e);
        };
    });
    var E = /\S+/g, F = {};
    m.Callbacks = function(a) {
        a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b, c, d, e, f, g, h = [], i = !a.once && [], j = function(l) {
            for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) if (!1 === h[f].apply(l[0], l[1]) && a.stopOnFalse) {
                c = !1;
                break;
            }
            b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());
        }, k = {
            add: function() {
                if (h) {
                    var d = h.length;
                    !function f(b) {
                        m.each(b, function(b, c) {
                            var d = m.type(c);
                            "function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c);
                        });
                    }(arguments), b ? e = h.length : c && (g = d, j(c));
                }
                return this;
            },
            remove: function() {
                return h && m.each(arguments, function(a, c) {
                    for (var d; (d = m.inArray(c, h, d)) > -1; ) h.splice(d, 1), b && (e >= d && e--, 
                    f >= d && f--);
                }), this;
            },
            has: function(a) {
                return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
            },
            empty: function() {
                return h = [], e = 0, this;
            },
            disable: function() {
                return h = i = c = void 0, this;
            },
            disabled: function() {
                return !h;
            },
            lock: function() {
                return i = void 0, c || k.disable(), this;
            },
            locked: function() {
                return !i;
            },
            fireWith: function(a, c) {
                return !h || d && !i || (c = c || [], c = [ a, c.slice ? c.slice() : c ], b ? i.push(c) : j(c)), 
                this;
            },
            fire: function() {
                return k.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!d;
            }
        };
        return k;
    }, m.extend({
        Deferred: function(a) {
            var b = [ [ "resolve", "done", m.Callbacks("once memory"), "resolved" ], [ "reject", "fail", m.Callbacks("once memory"), "rejected" ], [ "notify", "progress", m.Callbacks("memory") ] ], c = "pending", d = {
                state: function() {
                    return c;
                },
                always: function() {
                    return e.done(arguments).fail(arguments), this;
                },
                then: function() {
                    var a = arguments;
                    return m.Deferred(function(c) {
                        m.each(b, function(b, f) {
                            var g = m.isFunction(a[b]) && a[b];
                            e[f[1]](function() {
                                var a = g && g.apply(this, arguments);
                                a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [ a ] : arguments);
                            });
                        }), a = null;
                    }).promise();
                },
                promise: function(a) {
                    return null != a ? m.extend(a, d) : d;
                }
            }, e = {};
            return d.pipe = d.then, m.each(b, function(a, f) {
                var g = f[2], h = f[3];
                d[f[1]] = g.add, h && g.add(function() {
                    c = h;
                }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function() {
                    return e[f[0] + "With"](this === e ? d : this, arguments), this;
                }, e[f[0] + "With"] = g.fireWith;
            }), d.promise(e), a && a.call(e, e), e;
        },
        when: function(a) {
            var i, j, k, b = 0, c = d.call(arguments), e = c.length, f = 1 !== e || a && m.isFunction(a.promise) ? e : 0, g = 1 === f ? a : m.Deferred(), h = function(a, b, c) {
                return function(e) {
                    b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                };
            };
            if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
            return f || g.resolveWith(k, c), g.promise();
        }
    });
    var H;
    m.fn.ready = function(a) {
        return m.ready.promise().done(a), this;
    }, m.extend({
        isReady: !1,
        readyWait: 1,
        holdReady: function(a) {
            a ? m.readyWait++ : m.ready(!0);
        },
        ready: function(a) {
            if (!0 === a ? !--m.readyWait : !m.isReady) {
                if (!y.body) return setTimeout(m.ready);
                m.isReady = !0, !0 !== a && --m.readyWait > 0 || (H.resolveWith(y, [ m ]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), 
                m(y).off("ready")));
            }
        }
    });
    m.ready.promise = function(b) {
        if (!H) if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready); else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), 
        a.addEventListener("load", J, !1); else {
            y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
            var c = !1;
            try {
                c = null == a.frameElement && y.documentElement;
            } catch (d) {}
            c && c.doScroll && function e() {
                if (!m.isReady) {
                    try {
                        c.doScroll("left");
                    } catch (a) {
                        return setTimeout(e, 50);
                    }
                    I(), m.ready();
                }
            }();
        }
        return H.promise(b);
    };
    var L, K = "undefined";
    for (L in m(k)) break;
    k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function() {
        var a, b, c, d;
        (c = y.getElementsByTagName("body")[0]) && c.style && (b = y.createElement("div"), 
        d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
        c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", 
        k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));
    }), function() {
        var a = y.createElement("div");
        if (null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete a.test;
            } catch (b) {
                k.deleteExpando = !1;
            }
        }
        a = null;
    }(), m.acceptData = function(a) {
        var b = m.noData[(a.nodeName + " ").toLowerCase()], c = +a.nodeType || 1;
        return (1 === c || 9 === c) && (!b || !0 !== b && a.getAttribute("classid") === b);
    };
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, N = /([A-Z])/g;
    m.extend({
        cache: {},
        noData: {
            "applet ": !0,
            "embed ": !0,
            "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        },
        hasData: function(a) {
            return !!(a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando]) && !P(a);
        },
        data: function(a, b, c) {
            return Q(a, b, c);
        },
        removeData: function(a, b) {
            return R(a, b);
        },
        _data: function(a, b, c) {
            return Q(a, b, c, !0);
        },
        _removeData: function(a, b) {
            return R(a, b, !0);
        }
    }), m.fn.extend({
        data: function(a, b) {
            var c, d, e, f = this[0], g = f && f.attributes;
            if (void 0 === a) {
                if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
                    c = g.length;
                    for (;c--; ) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), 
                    O(f, d, e[d])));
                    m._data(f, "parsedAttrs", !0);
                }
                return e;
            }
            return "object" == typeof a ? this.each(function() {
                m.data(this, a);
            }) : arguments.length > 1 ? this.each(function() {
                m.data(this, a, b);
            }) : f ? O(f, a, m.data(f, a)) : void 0;
        },
        removeData: function(a) {
            return this.each(function() {
                m.removeData(this, a);
            });
        }
    }), m.extend({
        queue: function(a, b, c) {
            var d;
            return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), 
            d || []) : void 0;
        },
        dequeue: function(a, b) {
            b = b || "fx";
            var c = m.queue(a, b), d = c.length, e = c.shift(), f = m._queueHooks(a, b), g = function() {
                m.dequeue(a, b);
            };
            "inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), 
            delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
        },
        _queueHooks: function(a, b) {
            var c = b + "queueHooks";
            return m._data(a, c) || m._data(a, c, {
                empty: m.Callbacks("once memory").add(function() {
                    m._removeData(a, b + "queue"), m._removeData(a, c);
                })
            });
        }
    }), m.fn.extend({
        queue: function(a, b) {
            var c = 2;
            return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function() {
                var c = m.queue(this, a, b);
                m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
            });
        },
        dequeue: function(a) {
            return this.each(function() {
                m.dequeue(this, a);
            });
        },
        clearQueue: function(a) {
            return this.queue(a || "fx", []);
        },
        promise: function(a, b) {
            var c, d = 1, e = m.Deferred(), f = this, g = this.length, h = function() {
                --d || e.resolveWith(f, [ f ]);
            };
            "string" != typeof a && (b = a, a = void 0), a = a || "fx";
            for (;g--; ) (c = m._data(f[g], a + "queueHooks")) && c.empty && (d++, c.empty.add(h));
            return h(), e.promise(b);
        }
    });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, T = [ "Top", "Right", "Bottom", "Left" ], U = function(a, b) {
        return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);
    }, V = m.access = function(a, b, c, d, e, f, g) {
        var h = 0, i = a.length, j = null == c;
        if ("object" === m.type(c)) {
            e = !0;
            for (h in c) m.access(a, b, h, c[h], !0, f, g);
        } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), 
        b = null) : (j = b, b = function(a, b, c) {
            return j.call(m(a), c);
        })), b)) for (;i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
        return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
    }, W = /^(?:checkbox|radio)$/i;
    !function() {
        var a = y.createElement("input"), b = y.createElement("div"), c = y.createDocumentFragment();
        if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, 
        k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, 
        a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, 
        b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, 
        c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", 
        k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, 
        b.attachEvent && (b.attachEvent("onclick", function() {
            k.noCloneEvent = !1;
        }), b.cloneNode(!0).click()), null == k.deleteExpando) {
            k.deleteExpando = !0;
            try {
                delete b.test;
            } catch (d) {
                k.deleteExpando = !1;
            }
        }
    }(), function() {
        var b, c, d = y.createElement("div");
        for (b in {
            submit: !0,
            change: !0,
            focusin: !0
        }) c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = !1 === d.attributes[c].expando);
        d = null;
    }();
    var X = /^(?:input|select|textarea)$/i, Y = /^key/, Z = /^(?:mouse|pointer|contextmenu)|click/, $ = /^(?:focusinfocus|focusoutblur)$/, _ = /^([^.]*)(?:\.(.+)|)$/;
    m.event = {
        global: {},
        add: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m._data(a);
            if (r) {
                c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), 
                (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function(a) {
                    return typeof m === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);
                }, k.elem = a), b = (b || "").match(E) || [ "" ], h = b.length;
                for (;h--; ) f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), 
                o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, 
                j = m.event.special[o] || {}, l = m.extend({
                    type: o,
                    origType: q,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && m.expr.match.needsContext.test(e),
                    namespace: p.join(".")
                }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && !1 !== j.setup.call(a, d, p, k) || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), 
                j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), 
                m.event.global[o] = !0);
                a = null;
            }
        },
        remove: function(a, b, c, d, e) {
            var f, g, h, i, j, k, l, n, o, p, q, r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                b = (b || "").match(E) || [ "" ], j = b.length;
                for (;j--; ) if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), 
                o) {
                    l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], 
                    h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;
                    for (;f--; ) g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), 
                    g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                    i && !n.length && (l.teardown && !1 !== l.teardown.call(a, p, r.handle) || m.removeEvent(a, o, r.handle), 
                    delete k[o]);
                } else for (o in k) m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));
            }
        },
        trigger: function(b, c, d, e) {
            var f, g, h, i, k, l, n, o = [ d || y ], p = j.call(b, "type") ? b.type : b, q = j.call(b, "namespace") ? b.namespace.split(".") : [];
            if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), 
            p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b), 
            b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            b.result = void 0, b.target || (b.target = d), c = null == c ? [ b ] : m.makeArray(c, [ b ]), 
            k = m.event.special[p] || {}, e || !k.trigger || !1 !== k.trigger.apply(d, c))) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), 
                    l = h;
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);
                }
                n = 0;
                for (;(h = o[n++]) && !b.isPropagationStopped(); ) b.type = n > 1 ? i : k.bindType || p, 
                f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), 
                (f = g && h[g]) && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), !1 === b.result && b.preventDefault());
                if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || !1 === k._default.apply(o.pop(), c)) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
                    l = d[g], l && (d[g] = null), m.event.triggered = p;
                    try {
                        d[p]();
                    } catch (r) {}
                    m.event.triggered = void 0, l && (d[g] = l);
                }
                return b.result;
            }
        },
        dispatch: function(a) {
            a = m.event.fix(a);
            var b, c, e, f, g, h = [], i = d.call(arguments), j = (m._data(this, "events") || {})[a.type] || [], k = m.event.special[a.type] || {};
            if (i[0] = a, a.delegateTarget = this, !k.preDispatch || !1 !== k.preDispatch.call(this, a)) {
                h = m.event.handlers.call(this, a, j), b = 0;
                for (;(f = h[b++]) && !a.isPropagationStopped(); ) {
                    a.currentTarget = f.elem, g = 0;
                    for (;(e = f.handlers[g++]) && !a.isImmediatePropagationStopped(); ) (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, 
                    a.data = e.data, void 0 !== (c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i)) && !1 === (a.result = c) && (a.preventDefault(), 
                    a.stopPropagation()));
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result;
            }
        },
        handlers: function(a, b) {
            var c, d, e, f, g = [], h = b.delegateCount, i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type)) for (;i != this; i = i.parentNode || this) if (1 === i.nodeType && (!0 !== i.disabled || "click" !== a.type)) {
                for (e = [], f = 0; h > f; f++) d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [ i ]).length), 
                e[c] && e.push(d);
                e.length && g.push({
                    elem: i,
                    handlers: e
                });
            }
            return h < b.length && g.push({
                elem: this,
                handlers: b.slice(h)
            }), g;
        },
        fix: function(a) {
            if (a[m.expando]) return a;
            var b, c, d, e = a.type, f = a, g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), 
            d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;
            for (;b--; ) c = d[b], a[c] = f[c];
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), 
            a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), 
                a;
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function(a, b) {
                var c, d, e, f = b.button, g = b.fromElement;
                return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, 
                e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), 
                a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), 
                !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), 
                a;
            }
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== ca() && this.focus) try {
                        return this.focus(), !1;
                    } catch (a) {}
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    return this === ca() && this.blur ? (this.blur(), !1) : void 0;
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), 
                    !1) : void 0;
                },
                _default: function(a) {
                    return m.nodeName(a.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                }
            }
        },
        simulate: function(a, b, c, d) {
            var e = m.extend(new m.Event(), c, {
                type: a,
                isSimulated: !0,
                originalEvent: {}
            });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
        }
    }, m.removeEvent = y.removeEventListener ? function(a, b, c) {
        a.removeEventListener && a.removeEventListener(b, c, !1);
    } : function(a, b, c) {
        var d = "on" + b;
        a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c));
    }, m.Event = function(a, b) {
        return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, 
        this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && !1 === a.returnValue ? aa : ba) : this.type = a, 
        b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);
    }, m.Event.prototype = {
        isDefaultPrevented: ba,
        isPropagationStopped: ba,
        isImmediatePropagationStopped: ba,
        preventDefault: function() {
            var a = this.originalEvent;
            this.isDefaultPrevented = aa, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
        },
        stopPropagation: function() {
            var a = this.originalEvent;
            this.isPropagationStopped = aa, a && (a.stopPropagation && a.stopPropagation(), 
            a.cancelBubble = !0);
        },
        stopImmediatePropagation: function() {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = aa, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, m.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(a, b) {
        m.event.special[a] = {
            delegateType: b,
            bindType: b,
            handle: function(a) {
                var c, d = this, e = a.relatedTarget, f = a.handleObj;
                return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), 
                a.type = b), c;
            }
        };
    }), k.submitBubbles || (m.event.special.submit = {
        setup: function() {
            return !m.nodeName(this, "form") && void m.event.add(this, "click._submit keypress._submit", function(a) {
                var b = a.target, c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;
                c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function(a) {
                    a._submit_bubble = !0;
                }), m._data(c, "submitBubbles", !0));
            });
        },
        postDispatch: function(a) {
            a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));
        },
        teardown: function() {
            return !m.nodeName(this, "form") && void m.event.remove(this, "._submit");
        }
    }), k.changeBubbles || (m.event.special.change = {
        setup: function() {
            return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function(a) {
                "checked" === a.originalEvent.propertyName && (this._just_changed = !0);
            }), m.event.add(this, "click._change", function(a) {
                this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);
            })), !1) : void m.event.add(this, "beforeactivate._change", function(a) {
                var b = a.target;
                X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function(a) {
                    !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);
                }), m._data(b, "changeBubbles", !0));
            });
        },
        handle: function(a) {
            var b = a.target;
            return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;
        },
        teardown: function() {
            return m.event.remove(this, "._change"), !X.test(this.nodeName);
        }
    }), k.focusinBubbles || m.each({
        focus: "focusin",
        blur: "focusout"
    }, function(a, b) {
        var c = function(a) {
            m.event.simulate(b, a.target, m.event.fix(a), !0);
        };
        m.event.special[b] = {
            setup: function() {
                var d = this.ownerDocument || this, e = m._data(d, b);
                e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
            },
            teardown: function() {
                var d = this.ownerDocument || this, e = m._data(d, b) - 1;
                e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));
            }
        };
    }), m.fn.extend({
        on: function(a, b, c, d, e) {
            var f, g;
            if ("object" == typeof a) {
                "string" != typeof b && (c = c || b, b = void 0);
                for (f in a) this.on(f, b, c, a[f], e);
                return this;
            }
            if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, 
            c = void 0) : (d = c, c = b, b = void 0)), !1 === d) d = ba; else if (!d) return this;
            return 1 === e && (g = d, d = function(a) {
                return m().off(a), g.apply(this, arguments);
            }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function() {
                m.event.add(this, a, d, c, b);
            });
        },
        one: function(a, b, c, d) {
            return this.on(a, b, c, d, 1);
        },
        off: function(a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), 
            this;
            if ("object" == typeof a) {
                for (e in a) this.off(e, b, a[e]);
                return this;
            }
            return (!1 === b || "function" == typeof b) && (c = b, b = void 0), !1 === c && (c = ba), 
            this.each(function() {
                m.event.remove(this, a, c, b);
            });
        },
        trigger: function(a, b) {
            return this.each(function() {
                m.event.trigger(a, b, this);
            });
        },
        triggerHandler: function(a, b) {
            var c = this[0];
            return c ? m.event.trigger(a, b, c, !0) : void 0;
        }
    });
    var ea = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", fa = / jQuery\d+="(?:null|\d+)"/g, ga = new RegExp("<(?:" + ea + ")[\\s/>]", "i"), ha = /^\s+/, ia = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, ja = /<([\w:]+)/, ka = /<tbody/i, la = /<|&#?\w+;/, ma = /<(?:script|style|link)/i, na = /checked\s*(?:[^=]|=\s*.checked.)/i, oa = /^$|\/(?:java|ecma)script/i, pa = /^true\/(.*)/, qa = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, ra = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        area: [ 1, "<map>", "</map>" ],
        param: [ 1, "<object>", "</object>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: k.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
    }, sa = da(y), ta = sa.appendChild(y.createElement("div"));
    ra.optgroup = ra.option, ra.tbody = ra.tfoot = ra.colgroup = ra.caption = ra.thead, 
    ra.th = ra.td;
    m.extend({
        clone: function(a, b, c) {
            var d, e, f, g, h, i = m.contains(a.ownerDocument, a);
            if (k.html5Clone || m.isXMLDoc(a) || !ga.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (ta.innerHTML = a.outerHTML, 
            ta.removeChild(f = ta.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ua(f), 
            h = ua(a), g = 0; null != (e = h[g]); ++g) d[g] && Ba(e, d[g]);
            if (b) if (c) for (h = h || ua(a), d = d || ua(f), g = 0; null != (e = h[g]); g++) Aa(e, d[g]); else Aa(a, f);
            return d = ua(f, "script"), d.length > 0 && za(d, !i && ua(a, "script")), d = h = e = null, 
            f;
        },
        buildFragment: function(a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = da(b), p = [], q = 0; n > q; q++) if ((f = a[q]) || 0 === f) if ("object" === m.type(f)) m.merge(p, f.nodeType ? [ f ] : f); else if (la.test(f)) {
                h = h || o.appendChild(b.createElement("div")), i = (ja.exec(f) || [ "", "" ])[1].toLowerCase(), 
                l = ra[i] || ra._default, h.innerHTML = l[1] + f.replace(ia, "<$1></$2>") + l[2], 
                e = l[0];
                for (;e--; ) h = h.lastChild;
                if (!k.leadingWhitespace && ha.test(f) && p.push(b.createTextNode(ha.exec(f)[0])), 
                !k.tbody) {
                    f = "table" !== i || ka.test(f) ? "<table>" !== l[1] || ka.test(f) ? 0 : h : h.firstChild, 
                    e = f && f.childNodes.length;
                    for (;e--; ) m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j);
                }
                m.merge(p, h.childNodes), h.textContent = "";
                for (;h.firstChild; ) h.removeChild(h.firstChild);
                h = o.lastChild;
            } else p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ua(p, "input"), va), q = 0;
            for (;f = p[q++]; ) if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), 
            h = ua(o.appendChild(f), "script"), g && za(h), c)) {
                e = 0;
                for (;f = h[e++]; ) oa.test(f.type || "") && c.push(f);
            }
            return h = null, o;
        },
        cleanData: function(a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) if ((b || m.acceptData(d)) && (f = d[i], 
            g = f && j[f])) {
                if (g.events) for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : d[i] = null, 
                c.push(f));
            }
        }
    }), m.fn.extend({
        text: function(a) {
            return V(this, function(a) {
                return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));
            }, null, a, arguments.length);
        },
        append: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    wa(this, a).appendChild(a);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, function(a) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var b = wa(this, a);
                    b.insertBefore(a, b.firstChild);
                }
            });
        },
        before: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this);
            });
        },
        after: function() {
            return this.domManip(arguments, function(a) {
                this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
            });
        },
        remove: function(a, b) {
            for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) b || 1 !== c.nodeType || m.cleanData(ua(c)), 
            c.parentNode && (b && m.contains(c.ownerDocument, c) && za(ua(c, "script")), c.parentNode.removeChild(c));
            return this;
        },
        empty: function() {
            for (var a, b = 0; null != (a = this[b]); b++) {
                1 === a.nodeType && m.cleanData(ua(a, !1));
                for (;a.firstChild; ) a.removeChild(a.firstChild);
                a.options && m.nodeName(a, "select") && (a.options.length = 0);
            }
            return this;
        },
        clone: function(a, b) {
            return a = null != a && a, b = null == b ? a : b, this.map(function() {
                return m.clone(this, a, b);
            });
        },
        html: function(a) {
            return V(this, function(a) {
                var b = this[0] || {}, c = 0, d = this.length;
                if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fa, "") : void 0;
                if (!("string" != typeof a || ma.test(a) || !k.htmlSerialize && ga.test(a) || !k.leadingWhitespace && ha.test(a) || ra[(ja.exec(a) || [ "", "" ])[1].toLowerCase()])) {
                    a = a.replace(ia, "<$1></$2>");
                    try {
                        for (;d > c; c++) b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ua(b, !1)), 
                        b.innerHTML = a);
                        b = 0;
                    } catch (e) {}
                }
                b && this.empty().append(a);
            }, null, a, arguments.length);
        },
        replaceWith: function() {
            var a = arguments[0];
            return this.domManip(arguments, function(b) {
                a = this.parentNode, m.cleanData(ua(this)), a && a.replaceChild(b, this);
            }), a && (a.length || a.nodeType) ? this : this.remove();
        },
        detach: function(a) {
            return this.remove(a, !0);
        },
        domManip: function(a, b) {
            a = e.apply([], a);
            var c, d, f, g, h, i, j = 0, l = this.length, n = this, o = l - 1, p = a[0], q = m.isFunction(p);
            if (q || l > 1 && "string" == typeof p && !k.checkClone && na.test(p)) return this.each(function(c) {
                var d = n.eq(c);
                q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
            });
            if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 
            1 === i.childNodes.length && (i = c), c)) {
                for (g = m.map(ua(i, "script"), xa), f = g.length; l > j; j++) d = i, j !== o && (d = m.clone(d, !0, !0), 
                f && m.merge(g, ua(d, "script"))), b.call(this[j], d, j);
                if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, ya), j = 0; f > j; j++) d = g[j], 
                oa.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qa, "")));
                i = c = null;
            }
            return this;
        }
    }), m.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(a, b) {
        m.fn[a] = function(a) {
            for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) c = d === h ? this : this.clone(!0), 
            m(g[d])[b](c), f.apply(e, c.get());
            return this.pushStack(e);
        };
    });
    var Ca, Da = {};
    !function() {
        var a;
        k.shrinkWrapBlocks = function() {
            if (null != a) return a;
            a = !1;
            var b, c, d;
            return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), 
            d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
            c.appendChild(d).appendChild(b), typeof b.style.zoom !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", 
            b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), 
            c.removeChild(d), a) : void 0;
        };
    }();
    var Ia, Ja, Ga = /^margin/, Ha = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"), Ka = /^(top|right|bottom|left)$/;
    a.getComputedStyle ? (Ia = function(b) {
        return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);
    }, Ja = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ia(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), 
        Ha.test(g) && Ga.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, 
        g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "";
    }) : y.documentElement.currentStyle && (Ia = function(a) {
        return a.currentStyle;
    }, Ja = function(a, b, c) {
        var d, e, f, g, h = a.style;
        return c = c || Ia(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), 
        Ha.test(g) && !Ka.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), 
        h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), 
        void 0 === g ? g : g + "" || "auto";
    });
    !function() {
        function i() {
            var b, c, d, i;
            (c = y.getElementsByTagName("body")[0]) && c.style && (b = y.createElement("div"), 
            d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
            c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", 
            e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, 
            f = "4px" === (a.getComputedStyle(b, null) || {
                width: "4px"
            }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", 
            i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), 
            b.removeChild(i)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", 
            i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", 
            g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", 
            g = 0 === i[0].offsetHeight), c.removeChild(d));
        }
        var b, c, d, e, f, g, h;
        (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        d = b.getElementsByTagName("a")[0], c = d && d.style) && (c.cssText = "float:left;opacity:.5", 
        k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", 
        b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, 
        k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, 
        m.extend(k, {
            reliableHiddenOffsets: function() {
                return null == g && i(), g;
            },
            boxSizingReliable: function() {
                return null == f && i(), f;
            },
            pixelPosition: function() {
                return null == e && i(), e;
            },
            reliableMarginRight: function() {
                return null == h && i(), h;
            }
        }));
    }(), m.swap = function(a, b, c, d) {
        var e, f, g = {};
        for (f in b) g[f] = a.style[f], a.style[f] = b[f];
        e = c.apply(a, d || []);
        for (f in b) a.style[f] = g[f];
        return e;
    };
    var Ma = /alpha\([^)]*\)/i, Na = /opacity\s*=\s*([^)]*)/, Oa = /^(none|table(?!-c[ea]).+)/, Pa = new RegExp("^(" + S + ")(.*)$", "i"), Qa = new RegExp("^([+-])=(" + S + ")", "i"), Ra = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, Sa = {
        letterSpacing: "0",
        fontWeight: "400"
    }, Ta = [ "Webkit", "O", "Moz", "ms" ];
    m.extend({
        cssHooks: {
            opacity: {
                get: function(a, b) {
                    if (b) {
                        var c = Ja(a, "opacity");
                        return "" === c ? "1" : c;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: k.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e, f, g, h = m.camelCase(b), i = a.style;
                if (b = m.cssProps[h] || (m.cssProps[h] = Ua(i, h)), g = m.cssHooks[b] || m.cssHooks[h], 
                void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (f = typeof c, "string" === f && (e = Qa.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), 
                f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), 
                k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), 
                !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {
                    i[b] = c;
                } catch (j) {}
            }
        },
        css: function(a, b, c, d) {
            var e, f, g, h = m.camelCase(b);
            return b = m.cssProps[h] || (m.cssProps[h] = Ua(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], 
            g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Ja(a, b, d)), "normal" === f && b in Sa && (f = Sa[b]), 
            "" === c || c ? (e = parseFloat(f), !0 === c || m.isNumeric(e) ? e || 0 : f) : f;
        }
    }), m.each([ "height", "width" ], function(a, b) {
        m.cssHooks[b] = {
            get: function(a, c, d) {
                return c ? Oa.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Ra, function() {
                    return Ya(a, b, d);
                }) : Ya(a, b, d) : void 0;
            },
            set: function(a, c, d) {
                var e = d && Ia(a);
                return Wa(a, c, d ? Xa(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);
            }
        };
    }), k.opacity || (m.cssHooks.opacity = {
        get: function(a, b) {
            return Na.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";
        },
        set: function(a, b) {
            var c = a.style, d = a.currentStyle, e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "", f = d && d.filter || c.filter || "";
            c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Ma, "")) && c.removeAttribute && (c.removeAttribute("filter"), 
            "" === b || d && !d.filter) || (c.filter = Ma.test(f) ? f.replace(Ma, e) : f + " " + e);
        }
    }), m.cssHooks.marginRight = La(k.reliableMarginRight, function(a, b) {
        return b ? m.swap(a, {
            display: "inline-block"
        }, Ja, [ a, "marginRight" ]) : void 0;
    }), m.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(a, b) {
        m.cssHooks[a + b] = {
            expand: function(c) {
                for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [ c ]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                return e;
            }
        }, Ga.test(a) || (m.cssHooks[a + b].set = Wa);
    }), m.fn.extend({
        css: function(a, b) {
            return V(this, function(a, b, c) {
                var d, e, f = {}, g = 0;
                if (m.isArray(b)) {
                    for (d = Ia(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);
                    return f;
                }
                return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
            }, a, b, arguments.length > 1);
        },
        show: function() {
            return Va(this, !0);
        },
        hide: function() {
            return Va(this);
        },
        toggle: function(a) {
            return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                U(this) ? m(this).show() : m(this).hide();
            });
        }
    });
    m.Tween = Za, Za.prototype = {
        constructor: Za,
        init: function(a, b, c, d, e, f) {
            this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), 
            this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px");
        },
        cur: function() {
            var a = Za.propHooks[this.prop];
            return a && a.get ? a.get(this) : Za.propHooks._default.get(this);
        },
        run: function(a) {
            var b, c = Za.propHooks[this.prop];
            return this.options.duration ? this.pos = b = m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, 
            this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            c && c.set ? c.set(this) : Za.propHooks._default.set(this), this;
        }
    }, Za.prototype.init.prototype = Za.prototype, Za.propHooks = {
        _default: {
            get: function(a) {
                var b;
                return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), 
                b && "auto" !== b ? b : 0) : a.elem[a.prop];
            },
            set: function(a) {
                m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
            }
        }
    }, Za.propHooks.scrollTop = Za.propHooks.scrollLeft = {
        set: function(a) {
            a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
        }
    }, m.easing = {
        linear: function(a) {
            return a;
        },
        swing: function(a) {
            return .5 - Math.cos(a * Math.PI) / 2;
        }
    }, m.fx = Za.prototype.init, m.fx.step = {};
    var $a, _a, ab = /^(?:toggle|show|hide)$/, bb = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"), cb = /queueHooks$/, db = [ ib ], eb = {
        "*": [ function(a, b) {
            var c = this.createTween(a, b), d = c.cur(), e = bb.exec(b), f = e && e[3] || (m.cssNumber[a] ? "" : "px"), g = (m.cssNumber[a] || "px" !== f && +d) && bb.exec(m.css(c.elem, a)), h = 1, i = 20;
            if (g && g[3] !== f) {
                f = f || g[3], e = e || [], g = +d || 1;
                do {
                    h = h || ".5", g /= h, m.style(c.elem, a, g + f);
                } while (h !== (h = c.cur() / d) && 1 !== h && --i);
            }
            return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), 
            c;
        } ]
    };
    m.Animation = m.extend(kb, {
        tweener: function(a, b) {
            m.isFunction(a) ? (b = a, a = [ "*" ]) : a = a.split(" ");
            for (var c, d = 0, e = a.length; e > d; d++) c = a[d], eb[c] = eb[c] || [], eb[c].unshift(b);
        },
        prefilter: function(a, b) {
            b ? db.unshift(a) : db.push(a);
        }
    }), m.speed = function(a, b, c) {
        var d = a && "object" == typeof a ? m.extend({}, a) : {
            complete: c || !c && b || m.isFunction(a) && a,
            duration: a,
            easing: c && b || b && !m.isFunction(b) && b
        };
        return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, 
        (null == d.queue || !0 === d.queue) && (d.queue = "fx"), d.old = d.complete, d.complete = function() {
            m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);
        }, d;
    }, m.fn.extend({
        fadeTo: function(a, b, c, d) {
            return this.filter(U).css("opacity", 0).show().end().animate({
                opacity: b
            }, a, c, d);
        },
        animate: function(a, b, c, d) {
            var e = m.isEmptyObject(a), f = m.speed(b, c, d), g = function() {
                var b = kb(this, m.extend({}, a), f);
                (e || m._data(this, "finish")) && b.stop(!0);
            };
            return g.finish = g, e || !1 === f.queue ? this.each(g) : this.queue(f.queue, g);
        },
        stop: function(a, b, c) {
            var d = function(a) {
                var b = a.stop;
                delete a.stop, b(c);
            };
            return "string" != typeof a && (c = b, b = a, a = void 0), b && !1 !== a && this.queue(a || "fx", []), 
            this.each(function() {
                var b = !0, e = null != a && a + "queueHooks", f = m.timers, g = m._data(this);
                if (e) g[e] && g[e].stop && d(g[e]); else for (e in g) g[e] && g[e].stop && cb.test(e) && d(g[e]);
                for (e = f.length; e--; ) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), 
                b = !1, f.splice(e, 1));
                (b || !c) && m.dequeue(this, a);
            });
        },
        finish: function(a) {
            return !1 !== a && (a = a || "fx"), this.each(function() {
                var b, c = m._data(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = m.timers, g = d ? d.length : 0;
                for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), 
                b = f.length; b--; ) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), 
                f.splice(b, 1));
                for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);
                delete c.finish;
            });
        }
    }), m.each([ "toggle", "show", "hide" ], function(a, b) {
        var c = m.fn[b];
        m.fn[b] = function(a, d, e) {
            return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);
        };
    }), m.each({
        slideDown: gb("show"),
        slideUp: gb("hide"),
        slideToggle: gb("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(a, b) {
        m.fn[a] = function(a, c, d) {
            return this.animate(b, a, c, d);
        };
    }), m.timers = [], m.fx.tick = function() {
        var a, b = m.timers, c = 0;
        for ($a = m.now(); c < b.length; c++) (a = b[c])() || b[c] !== a || b.splice(c--, 1);
        b.length || m.fx.stop(), $a = void 0;
    }, m.fx.timer = function(a) {
        m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
    }, m.fx.interval = 13, m.fx.start = function() {
        _a || (_a = setInterval(m.fx.tick, m.fx.interval));
    }, m.fx.stop = function() {
        clearInterval(_a), _a = null;
    }, m.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, m.fn.delay = function(a, b) {
        return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function(b, c) {
            var d = setTimeout(b, a);
            c.stop = function() {
                clearTimeout(d);
            };
        });
    }, function() {
        var a, b, c, d, e;
        b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
        d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), 
        a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, 
        k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), 
        k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, 
        c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), 
        k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), 
        k.radioValue = "t" === a.value;
    }();
    var lb = /\r/g;
    m.fn.extend({
        val: function(a) {
            var b, c, d, e = this[0];
            return arguments.length ? (d = m.isFunction(a), this.each(function(c) {
                var e;
                1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function(a) {
                    return null == a ? "" : a + "";
                })), (b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()]) && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
            })) : e ? (b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, 
            "string" == typeof c ? c.replace(lb, "") : null == c ? "" : c)) : void 0;
        }
    }), m.extend({
        valHooks: {
            option: {
                get: function(a) {
                    var b = m.find.attr(a, "value");
                    return null != b ? b : m.trim(m.text(a));
                }
            },
            select: {
                get: function(a) {
                    for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) if (c = d[i], 
                    !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {
                        if (b = m(c).val(), f) return b;
                        g.push(b);
                    }
                    return g;
                },
                set: function(a, b) {
                    for (var c, d, e = a.options, f = m.makeArray(b), g = e.length; g--; ) if (d = e[g], 
                    m.inArray(m.valHooks.option.get(d), f) >= 0) try {
                        d.selected = c = !0;
                    } catch (h) {
                        d.scrollHeight;
                    } else d.selected = !1;
                    return c || (a.selectedIndex = -1), e;
                }
            }
        }
    }), m.each([ "radio", "checkbox" ], function() {
        m.valHooks[this] = {
            set: function(a, b) {
                return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;
            }
        }, k.checkOn || (m.valHooks[this].get = function(a) {
            return null === a.getAttribute("value") ? "on" : a.value;
        });
    });
    var mb, nb, ob = m.expr.attrHandle, pb = /^(?:checked|selected)$/i, qb = k.getSetAttribute, rb = k.input;
    m.fn.extend({
        attr: function(a, b) {
            return V(this, m.attr, a, b, arguments.length > 1);
        },
        removeAttr: function(a) {
            return this.each(function() {
                m.removeAttr(this, a);
            });
        }
    }), m.extend({
        attr: function(a, b, c) {
            var d, e, f = a.nodeType;
            if (a && 3 !== f && 8 !== f && 2 !== f) return typeof a.getAttribute === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), 
            d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nb : mb)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), 
            null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), 
            c) : void m.removeAttr(a, b));
        },
        removeAttr: function(a, b) {
            var c, d, e = 0, f = b && b.match(E);
            if (f && 1 === a.nodeType) for (;c = f[e++]; ) d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rb && qb || !pb.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), 
            a.removeAttribute(qb ? c : d);
        },
        attrHooks: {
            type: {
                set: function(a, b) {
                    if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
                        var c = a.value;
                        return a.setAttribute("type", b), c && (a.value = c), b;
                    }
                }
            }
        }
    }), nb = {
        set: function(a, b, c) {
            return !1 === b ? m.removeAttr(a, c) : rb && qb || !pb.test(c) ? a.setAttribute(!qb && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, 
            c;
        }
    }, m.each(m.expr.match.bool.source.match(/\w+/g), function(a, b) {
        var c = ob[b] || m.find.attr;
        ob[b] = rb && qb || !pb.test(b) ? function(a, b, d) {
            var e, f;
            return d || (f = ob[b], ob[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, 
            ob[b] = f), e;
        } : function(a, b, c) {
            return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;
        };
    }), rb && qb || (m.attrHooks.value = {
        set: function(a, b, c) {
            return m.nodeName(a, "input") ? void (a.defaultValue = b) : mb && mb.set(a, b, c);
        }
    }), qb || (mb = {
        set: function(a, b, c) {
            var d = a.getAttributeNode(c);
            return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", 
            "value" === c || b === a.getAttribute(c) ? b : void 0;
        }
    }, ob.id = ob.name = ob.coords = function(a, b, c) {
        var d;
        return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;
    }, m.valHooks.button = {
        get: function(a, b) {
            var c = a.getAttributeNode(b);
            return c && c.specified ? c.value : void 0;
        },
        set: mb.set
    }, m.attrHooks.contenteditable = {
        set: function(a, b, c) {
            mb.set(a, "" !== b && b, c);
        }
    }, m.each([ "width", "height" ], function(a, b) {
        m.attrHooks[b] = {
            set: function(a, c) {
                return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
            }
        };
    })), k.style || (m.attrHooks.style = {
        get: function(a) {
            return a.style.cssText || void 0;
        },
        set: function(a, b) {
            return a.style.cssText = b + "";
        }
    });
    var sb = /^(?:input|select|textarea|button|object)$/i, tb = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function(a, b) {
            return V(this, m.prop, a, b, arguments.length > 1);
        },
        removeProp: function(a) {
            return a = m.propFix[a] || a, this.each(function() {
                try {
                    this[a] = void 0, delete this[a];
                } catch (b) {}
            });
        }
    }), m.extend({
        propFix: {
            for: "htmlFor",
            class: "className"
        },
        prop: function(a, b, c) {
            var d, e, f, g = a.nodeType;
            if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, 
            e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
        },
        propHooks: {
            tabIndex: {
                get: function(a) {
                    var b = m.find.attr(a, "tabindex");
                    return b ? parseInt(b, 10) : sb.test(a.nodeName) || tb.test(a.nodeName) && a.href ? 0 : -1;
                }
            }
        }
    }), k.hrefNormalized || m.each([ "href", "src" ], function(a, b) {
        m.propHooks[b] = {
            get: function(a) {
                return a.getAttribute(b, 4);
            }
        };
    }), k.optSelected || (m.propHooks.selected = {
        get: function(a) {
            var b = a.parentNode;
            return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
        }
    }), m.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        m.propFix[this.toLowerCase()] = this;
    }), k.enctype || (m.propFix.enctype = "encoding");
    var ub = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function(a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).addClass(a.call(this, b, this.className));
            });
            if (j) for (b = (a || "").match(E) || []; i > h; h++) if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ub, " ") : " ")) {
                f = 0;
                for (;e = b[f++]; ) d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                g = m.trim(d), c.className !== g && (c.className = g);
            }
            return this;
        },
        removeClass: function(a) {
            var b, c, d, e, f, g, h = 0, i = this.length, j = 0 === arguments.length || "string" == typeof a && a;
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).removeClass(a.call(this, b, this.className));
            });
            if (j) for (b = (a || "").match(E) || []; i > h; h++) if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ub, " ") : "")) {
                f = 0;
                for (;e = b[f++]; ) for (;d.indexOf(" " + e + " ") >= 0; ) d = d.replace(" " + e + " ", " ");
                g = a ? m.trim(d) : "", c.className !== g && (c.className = g);
            }
            return this;
        },
        toggleClass: function(a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function(c) {
                m(this).toggleClass(a.call(this, c, this.className, b), b);
            } : function() {
                if ("string" === c) for (var b, d = 0, e = m(this), f = a.match(E) || []; b = f[d++]; ) e.hasClass(b) ? e.removeClass(b) : e.addClass(b); else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), 
                this.className = this.className || !1 === a ? "" : m._data(this, "__className__") || "");
            });
        },
        hasClass: function(a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ub, " ").indexOf(b) >= 0) return !0;
            return !1;
        }
    }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(a, b) {
        m.fn[b] = function(a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
        };
    }), m.fn.extend({
        hover: function(a, b) {
            return this.mouseenter(a).mouseleave(b || a);
        },
        bind: function(a, b, c) {
            return this.on(a, null, b, c);
        },
        unbind: function(a, b) {
            return this.off(a, null, b);
        },
        delegate: function(a, b, c, d) {
            return this.on(b, a, c, d);
        },
        undelegate: function(a, b, c) {
            return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
        }
    });
    var vb = m.now(), wb = /\?/, xb = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    m.parseJSON = function(b) {
        if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
        var c, d = null, e = m.trim(b + "");
        return e && !m.trim(e.replace(xb, function(a, b, e, f) {
            return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "");
        })) ? Function("return " + e)() : m.error("Invalid JSON: " + b);
    }, m.parseXML = function(b) {
        var c, d;
        if (!b || "string" != typeof b) return null;
        try {
            a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), 
            c.async = "false", c.loadXML(b));
        } catch (e) {
            c = void 0;
        }
        return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), 
        c;
    };
    var yb, zb, Ab = /#.*$/, Bb = /([?&])_=[^&]*/, Cb = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Db = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Eb = /^(?:GET|HEAD)$/, Fb = /^\/\//, Gb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, Hb = {}, Ib = {}, Jb = "*/".concat("*");
    try {
        zb = location.href;
    } catch (Kb) {
        zb = y.createElement("a"), zb.href = "", zb = zb.href;
    }
    yb = Gb.exec(zb.toLowerCase()) || [];
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zb,
            type: "GET",
            isLocal: Db.test(yb[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Jb,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": m.parseJSON,
                "text xml": m.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(a, b) {
            return b ? Nb(Nb(a, m.ajaxSettings), b) : Nb(m.ajaxSettings, a);
        },
        ajaxPrefilter: Lb(Hb),
        ajaxTransport: Lb(Ib),
        ajax: function(a, b) {
            function x(a, b, c, d) {
                var j, r, s, u, w, x = b;
                2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, 
                j = a >= 200 && 300 > a || 304 === a, c && (u = Ob(k, v, c)), u = Pb(k, u, v, j), 
                j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), 
                (w = v.getResponseHeader("etag")) && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, 
                r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), 
                v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [ r, x, v ]) : o.rejectWith(l, [ v, x, s ]), 
                v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [ v, k, j ? r : s ]), 
                p.fireWith(l, [ v, x ]), h && (n.trigger("ajaxComplete", [ v, k ]), --m.active || m.event.trigger("ajaxStop")));
            }
            "object" == typeof a && (b = a, a = void 0), b = b || {};
            var c, d, e, f, g, h, i, j, k = m.ajaxSetup({}, b), l = k.context || k, n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event, o = m.Deferred(), p = m.Callbacks("once memory"), q = k.statusCode || {}, r = {}, s = {}, t = 0, u = "canceled", v = {
                readyState: 0,
                getResponseHeader: function(a) {
                    var b;
                    if (2 === t) {
                        if (!j) {
                            j = {};
                            for (;b = Cb.exec(f); ) j[b[1].toLowerCase()] = b[2];
                        }
                        b = j[a.toLowerCase()];
                    }
                    return null == b ? null : b;
                },
                getAllResponseHeaders: function() {
                    return 2 === t ? f : null;
                },
                setRequestHeader: function(a, b) {
                    var c = a.toLowerCase();
                    return t || (a = s[c] = s[c] || a, r[a] = b), this;
                },
                overrideMimeType: function(a) {
                    return t || (k.mimeType = a), this;
                },
                statusCode: function(a) {
                    var b;
                    if (a) if (2 > t) for (b in a) q[b] = [ q[b], a[b] ]; else v.always(a[v.status]);
                    return this;
                },
                abort: function(a) {
                    var b = a || u;
                    return i && i.abort(b), x(0, b), this;
                }
            };
            if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zb) + "").replace(Ab, "").replace(Fb, yb[1] + "//"), 
            k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [ "" ], 
            null == k.crossDomain && (c = Gb.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yb[1] && c[2] === yb[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yb[3] || ("http:" === yb[1] ? "80" : "443")))), 
            k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), 
            Mb(Hb, k, b, v), 2 === t) return v;
            h = m.event && k.global, h && 0 == m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), 
            k.hasContent = !Eb.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wb.test(e) ? "&" : "?") + k.data, 
            delete k.data), !1 === k.cache && (k.url = Bb.test(e) ? e.replace(Bb, "$1_=" + vb++) : e + (wb.test(e) ? "&" : "?") + "_=" + vb++)), 
            k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), 
            m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && !1 !== k.contentType || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), 
            v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jb + "; q=0.01" : "") : k.accepts["*"]);
            for (d in k.headers) v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (!1 === k.beforeSend.call(l, v, k) || 2 === t)) return v.abort();
            u = "abort";
            for (d in {
                success: 1,
                error: 1,
                complete: 1
            }) v[d](k[d]);
            if (i = Mb(Ib, k, b, v)) {
                v.readyState = 1, h && n.trigger("ajaxSend", [ v, k ]), k.async && k.timeout > 0 && (g = setTimeout(function() {
                    v.abort("timeout");
                }, k.timeout));
                try {
                    t = 1, i.send(r, x);
                } catch (w) {
                    if (!(2 > t)) throw w;
                    x(-1, w);
                }
            } else x(-1, "No Transport");
            return v;
        },
        getJSON: function(a, b, c) {
            return m.get(a, b, c, "json");
        },
        getScript: function(a, b) {
            return m.get(a, void 0, b, "script");
        }
    }), m.each([ "get", "post" ], function(a, b) {
        m[b] = function(a, c, d, e) {
            return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({
                url: a,
                type: b,
                dataType: e,
                data: c,
                success: d
            });
        };
    }), m._evalUrl = function(a) {
        return m.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            async: !1,
            global: !1,
            throws: !0
        });
    }, m.fn.extend({
        wrapAll: function(a) {
            if (m.isFunction(a)) return this.each(function(b) {
                m(this).wrapAll(a.call(this, b));
            });
            if (this[0]) {
                var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                    for (var a = this; a.firstChild && 1 === a.firstChild.nodeType; ) a = a.firstChild;
                    return a;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(a) {
            return this.each(m.isFunction(a) ? function(b) {
                m(this).wrapInner(a.call(this, b));
            } : function() {
                var b = m(this), c = b.contents();
                c.length ? c.wrapAll(a) : b.append(a);
            });
        },
        wrap: function(a) {
            var b = m.isFunction(a);
            return this.each(function(c) {
                m(this).wrapAll(b ? a.call(this, c) : a);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);
            }).end();
        }
    }), m.expr.filters.hidden = function(a) {
        return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"));
    }, m.expr.filters.visible = function(a) {
        return !m.expr.filters.hidden(a);
    };
    var Qb = /%20/g, Rb = /\[\]$/, Sb = /\r?\n/g, Tb = /^(?:submit|button|image|reset|file)$/i, Ub = /^(?:input|select|textarea|keygen)/i;
    m.param = function(a, b) {
        var c, d = [], e = function(a, b) {
            b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
        };
        if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function() {
            e(this.name, this.value);
        }); else for (c in a) Vb(c, a[c], b, e);
        return d.join("&").replace(Qb, "+");
    }, m.fn.extend({
        serialize: function() {
            return m.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var a = m.prop(this, "elements");
                return a ? m.makeArray(a) : this;
            }).filter(function() {
                var a = this.type;
                return this.name && !m(this).is(":disabled") && Ub.test(this.nodeName) && !Tb.test(a) && (this.checked || !W.test(a));
            }).map(function(a, b) {
                var c = m(this).val();
                return null == c ? null : m.isArray(c) ? m.map(c, function(a) {
                    return {
                        name: b.name,
                        value: a.replace(Sb, "\r\n")
                    };
                }) : {
                    name: b.name,
                    value: c.replace(Sb, "\r\n")
                };
            }).get();
        }
    }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function() {
        return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zb() || $b();
    } : Zb;
    var Wb = 0, Xb = {}, Yb = m.ajaxSettings.xhr();
    a.attachEvent && a.attachEvent("onunload", function() {
        for (var a in Xb) Xb[a](void 0, !0);
    }), k.cors = !!Yb && "withCredentials" in Yb, (Yb = k.ajax = !!Yb) && m.ajaxTransport(function(a) {
        if (!a.crossDomain || k.cors) {
            var b;
            return {
                send: function(c, d) {
                    var e, f = a.xhr(), g = ++Wb;
                    if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) f[e] = a.xhrFields[e];
                    a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                    for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
                    f.send(a.hasContent && a.data || null), b = function(c, e) {
                        var h, i, j;
                        if (b && (e || 4 === f.readyState)) if (delete Xb[g], b = void 0, f.onreadystatechange = m.noop, 
                        e) 4 !== f.readyState && f.abort(); else {
                            j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);
                            try {
                                i = f.statusText;
                            } catch (k) {
                                i = "";
                            }
                            h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;
                        }
                        j && d(h, i, j, f.getAllResponseHeaders());
                    }, a.async ? 4 === f.readyState ? setTimeout(b) : f.onreadystatechange = Xb[g] = b : b();
                },
                abort: function() {
                    b && b(void 0, !0);
                }
            };
        }
    });
    m.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function(a) {
                return m.globalEval(a), a;
            }
        }
    }), m.ajaxPrefilter("script", function(a) {
        void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);
    }), m.ajaxTransport("script", function(a) {
        if (a.crossDomain) {
            var b, c = y.head || m("head")[0] || y.documentElement;
            return {
                send: function(d, e) {
                    b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), 
                    b.src = a.url, b.onload = b.onreadystatechange = function(a, c) {
                        (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, 
                        b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"));
                    }, c.insertBefore(b, c.firstChild);
                },
                abort: function() {
                    b && b.onload(void 0, !0);
                }
            };
        }
    });
    var _b = [], ac = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var a = _b.pop() || m.expando + "_" + vb++;
            return this[a] = !0, a;
        }
    }), m.ajaxPrefilter("json jsonp", function(b, c, d) {
        var e, f, g, h = !1 !== b.jsonp && (ac.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ac.test(b.data) && "data");
        return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, 
        h ? b[h] = b[h].replace(ac, "$1" + e) : !1 !== b.jsonp && (b.url += (wb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), 
        b.converters["script json"] = function() {
            return g || m.error(e + " was not called"), g[0];
        }, b.dataTypes[0] = "json", f = a[e], a[e] = function() {
            g = arguments;
        }, d.always(function() {
            a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _b.push(e)), g && m.isFunction(f) && f(g[0]), 
            g = f = void 0;
        }), "script") : void 0;
    }), m.parseHTML = function(a, b, c) {
        if (!a || "string" != typeof a) return null;
        "boolean" == typeof b && (c = b, b = !1), b = b || y;
        var d = u.exec(a), e = !c && [];
        return d ? [ b.createElement(d[1]) ] : (d = m.buildFragment([ a ], b, e), e && e.length && m(e).remove(), 
        m.merge([], d.childNodes));
    };
    var bc = m.fn.load;
    m.fn.load = function(a, b, c) {
        if ("string" != typeof a && bc) return bc.apply(this, arguments);
        var d, e, f, g = this, h = a.indexOf(" ");
        return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, 
        b = void 0) : b && "object" == typeof b && (f = "POST"), g.length > 0 && m.ajax({
            url: a,
            type: f,
            dataType: "html",
            data: b
        }).done(function(a) {
            e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
        }).complete(c && function(a, b) {
            g.each(c, e || [ a.responseText, b, a ]);
        }), this;
    }, m.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(a, b) {
        m.fn[b] = function(a) {
            return this.on(b, a);
        };
    }), m.expr.filters.animated = function(a) {
        return m.grep(m.timers, function(b) {
            return a === b.elem;
        }).length;
    };
    var cc = a.document.documentElement;
    m.offset = {
        setOffset: function(a, b, c) {
            var d, e, f, g, h, i, j, k = m.css(a, "position"), l = m(a), n = {};
            "static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), 
            i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [ f, i ]) > -1, 
            j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), 
            m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), 
            null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n);
        }
    }, m.fn.extend({
        offset: function(a) {
            if (arguments.length) return void 0 === a ? this : this.each(function(b) {
                m.offset.setOffset(this, a, b);
            });
            var b, c, d = {
                top: 0,
                left: 0
            }, e = this[0], f = e && e.ownerDocument;
            return f ? (b = f.documentElement, m.contains(b, e) ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()), 
            c = dc(f), {
                top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0),
                left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0)
            }) : d) : void 0;
        },
        position: function() {
            if (this[0]) {
                var a, b, c = {
                    top: 0,
                    left: 0
                }, d = this[0];
                return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), 
                b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), 
                c.left += m.css(a[0], "borderLeftWidth", !0)), {
                    top: b.top - c.top - m.css(d, "marginTop", !0),
                    left: b.left - c.left - m.css(d, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var a = this.offsetParent || cc; a && !m.nodeName(a, "html") && "static" === m.css(a, "position"); ) a = a.offsetParent;
                return a || cc;
            });
        }
    }), m.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(a, b) {
        var c = /Y/.test(b);
        m.fn[a] = function(d) {
            return V(this, function(a, d, e) {
                var f = dc(a);
                return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);
            }, a, d, arguments.length, null);
        };
    }), m.each([ "top", "left" ], function(a, b) {
        m.cssHooks[b] = La(k.pixelPosition, function(a, c) {
            return c ? (c = Ja(a, b), Ha.test(c) ? m(a).position()[b] + "px" : c) : void 0;
        });
    }), m.each({
        Height: "height",
        Width: "width"
    }, function(a, b) {
        m.each({
            padding: "inner" + a,
            content: b,
            "": "outer" + a
        }, function(c, d) {
            m.fn[d] = function(d, e) {
                var f = arguments.length && (c || "boolean" != typeof d), g = c || (!0 === d || !0 === e ? "margin" : "border");
                return V(this, function(b, c, d) {
                    var e;
                    return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, 
                    Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);
                }, b, f ? d : void 0, f, null);
            };
        });
    }), m.fn.size = function() {
        return this.length;
    }, m.fn.andSelf = m.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
        return m;
    });
    var ec = a.jQuery, fc = a.$;
    return m.noConflict = function(b) {
        return a.$ === m && (a.$ = fc), b && a.jQuery === m && (a.jQuery = ec), m;
    }, typeof b === K && (a.jQuery = a.$ = m), m;
});

/*
 AngularJS v1.4.14
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(R, U, x) {
    "use strict";
    function B(a) {
        return function() {
            var d, b = arguments[0];
            d = "[" + (a ? a + ":" : "") + b + "] http://errors.angularjs.org/1.4.14/" + (a ? a + "/" : "") + b;
            for (b = 1; b < arguments.length; b++) {
                d = d + (1 == b ? "?" : "&") + "p" + (b - 1) + "=";
                var e, c = encodeURIComponent;
                e = arguments[b];
                e = "function" == typeof e ? e.toString().replace(/ \{[\s\S]*$/, "") : void 0 === e ? "undefined" : "string" != typeof e ? JSON.stringify(e) : e;
                d += c(e);
            }
            return Error(d);
        };
    }
    function Aa(a) {
        if (null == a || Ya(a)) return !1;
        if (L(a) || H(a) || D && a instanceof D) return !0;
        var b = "length" in Object(a) && a.length;
        return P(b) && (0 <= b && (b - 1 in a || a instanceof Array) || "function" == typeof a.item);
    }
    function p(a, b, d) {
        var c, e;
        if (a) if (G(a)) for (c in a) "prototype" == c || "length" == c || "name" == c || a.hasOwnProperty && !a.hasOwnProperty(c) || b.call(d, a[c], c, a); else if (L(a) || Aa(a)) {
            var f = "object" != typeof a;
            c = 0;
            for (e = a.length; c < e; c++) (f || c in a) && b.call(d, a[c], c, a);
        } else if (a.forEach && a.forEach !== p) a.forEach(b, d, a); else if (nc(a)) for (c in a) b.call(d, a[c], c, a); else if ("function" == typeof a.hasOwnProperty) for (c in a) a.hasOwnProperty(c) && b.call(d, a[c], c, a); else for (c in a) sa.call(a, c) && b.call(d, a[c], c, a);
        return a;
    }
    function oc(a, b, d) {
        for (var c = Object.keys(a).sort(), e = 0; e < c.length; e++) b.call(d, a[c[e]], c[e]);
        return c;
    }
    function pc(a) {
        return function(b, d) {
            a(d, b);
        };
    }
    function Xd() {
        return ++mb;
    }
    function Mb(a, b, d) {
        for (var c = a.$$hashKey, e = 0, f = b.length; e < f; ++e) {
            var g = b[e];
            if (K(g) || G(g)) for (var h = Object.keys(g), k = 0, m = h.length; k < m; k++) {
                var l = h[k], n = g[l];
                d && K(n) ? ea(n) ? a[l] = new Date(n.valueOf()) : La(n) ? a[l] = new RegExp(n) : n.nodeName ? a[l] = n.cloneNode(!0) : Nb(n) ? a[l] = n.clone() : (K(a[l]) || (a[l] = L(n) ? [] : {}), 
                Mb(a[l], [ n ], !0)) : a[l] = n;
            }
        }
        c ? a.$$hashKey = c : delete a.$$hashKey;
        return a;
    }
    function N(a) {
        return Mb(a, ta.call(arguments, 1), !1);
    }
    function Yd(a) {
        return Mb(a, ta.call(arguments, 1), !0);
    }
    function ca(a) {
        return parseInt(a, 10);
    }
    function Ob(a, b) {
        return N(Object.create(a), b);
    }
    function v() {}
    function Za(a) {
        return a;
    }
    function ma(a) {
        return function() {
            return a;
        };
    }
    function qc(a) {
        return G(a.toString) && a.toString !== na;
    }
    function r(a) {
        return void 0 === a;
    }
    function u(a) {
        return void 0 !== a;
    }
    function K(a) {
        return null !== a && "object" == typeof a;
    }
    function nc(a) {
        return null !== a && "object" == typeof a && !rc(a);
    }
    function H(a) {
        return "string" == typeof a;
    }
    function P(a) {
        return "number" == typeof a;
    }
    function ea(a) {
        return "[object Date]" === na.call(a);
    }
    function G(a) {
        return "function" == typeof a;
    }
    function La(a) {
        return "[object RegExp]" === na.call(a);
    }
    function Ya(a) {
        return a && a.window === a;
    }
    function $a(a) {
        return a && a.$evalAsync && a.$watch;
    }
    function Ma(a) {
        return "boolean" == typeof a;
    }
    function sc(a) {
        return a && P(a.length) && Zd.test(na.call(a));
    }
    function Nb(a) {
        return !(!a || !(a.nodeName || a.prop && a.attr && a.find));
    }
    function $d(a) {
        var b = {};
        a = a.split(",");
        var d;
        for (d = 0; d < a.length; d++) b[a[d]] = !0;
        return b;
    }
    function oa(a) {
        return M(a.nodeName || a[0] && a[0].nodeName);
    }
    function ab(a, b) {
        var d = a.indexOf(b);
        0 <= d && a.splice(d, 1);
        return d;
    }
    function Na(a, b) {
        function d(a, b) {
            var e, d = b.$$hashKey;
            if (L(a)) {
                e = 0;
                for (var f = a.length; e < f; e++) b.push(c(a[e]));
            } else if (nc(a)) for (e in a) b[e] = c(a[e]); else if (a && "function" == typeof a.hasOwnProperty) for (e in a) a.hasOwnProperty(e) && (b[e] = c(a[e])); else for (e in a) sa.call(a, e) && (b[e] = c(a[e]));
            d ? b.$$hashKey = d : delete b.$$hashKey;
            return b;
        }
        function c(a) {
            if (!K(a)) return a;
            var b = e.indexOf(a);
            if (-1 !== b) return f[b];
            if (Ya(a) || $a(a)) throw Ba("cpws");
            var c, b = !1;
            L(a) ? (c = [], b = !0) : sc(a) ? c = new a.constructor(a) : ea(a) ? c = new Date(a.getTime()) : La(a) ? (c = new RegExp(a.source, a.toString().match(/[^\/]*$/)[0]), 
            c.lastIndex = a.lastIndex) : "[object Blob]" === na.call(a) ? c = new a.constructor([ a ], {
                type: a.type
            }) : G(a.cloneNode) ? c = a.cloneNode(!0) : (c = Object.create(rc(a)), b = !0);
            e.push(a);
            f.push(c);
            return b ? d(a, c) : c;
        }
        var e = [], f = [];
        if (b) {
            if (sc(b)) throw Ba("cpta");
            if (a === b) throw Ba("cpi");
            L(b) ? b.length = 0 : p(b, function(a, c) {
                "$$hashKey" !== c && delete b[c];
            });
            e.push(a);
            f.push(b);
            return d(a, b);
        }
        return c(a);
    }
    function fa(a, b) {
        if (L(a)) {
            b = b || [];
            for (var d = 0, c = a.length; d < c; d++) b[d] = a[d];
        } else if (K(a)) for (d in b = b || {}, a) "$" === d.charAt(0) && "$" === d.charAt(1) || (b[d] = a[d]);
        return b || a;
    }
    function la(a, b) {
        if (a === b) return !0;
        if (null === a || null === b) return !1;
        if (a !== a && b !== b) return !0;
        var c, d = typeof a;
        if (d == typeof b && "object" == d) {
            if (!L(a)) {
                if (ea(a)) return !!ea(b) && la(a.getTime(), b.getTime());
                if (La(a)) return !!La(b) && a.toString() == b.toString();
                if ($a(a) || $a(b) || Ya(a) || Ya(b) || L(b) || ea(b) || La(b)) return !1;
                d = Z();
                for (c in a) if ("$" !== c.charAt(0) && !G(a[c])) {
                    if (!la(a[c], b[c])) return !1;
                    d[c] = !0;
                }
                for (c in b) if (!(c in d) && "$" !== c.charAt(0) && u(b[c]) && !G(b[c])) return !1;
                return !0;
            }
            if (!L(b)) return !1;
            if ((d = a.length) == b.length) {
                for (c = 0; c < d; c++) if (!la(a[c], b[c])) return !1;
                return !0;
            }
        }
        return !1;
    }
    function bb(a, b, d) {
        return a.concat(ta.call(b, d));
    }
    function tc(a, b) {
        var d = 2 < arguments.length ? ta.call(arguments, 2) : [];
        return !G(b) || b instanceof RegExp ? b : d.length ? function() {
            return arguments.length ? b.apply(a, bb(d, arguments, 0)) : b.apply(a, d);
        } : function() {
            return arguments.length ? b.apply(a, arguments) : b.call(a);
        };
    }
    function ae(a, b) {
        var d = b;
        "string" == typeof a && "$" === a.charAt(0) && "$" === a.charAt(1) ? d = x : Ya(b) ? d = "$WINDOW" : b && U === b ? d = "$DOCUMENT" : $a(b) && (d = "$SCOPE");
        return d;
    }
    function cb(a, b) {
        if (r(a)) return x;
        P(b) || (b = b ? 2 : null);
        return JSON.stringify(a, ae, b);
    }
    function uc(a) {
        return H(a) ? JSON.parse(a) : a;
    }
    function vc(a, b) {
        a = a.replace(be, "");
        var d = Date.parse("Jan 01, 1970 00:00:00 " + a) / 6e4;
        return isNaN(d) ? b : d;
    }
    function Pb(a, b, d) {
        d = d ? -1 : 1;
        var c = a.getTimezoneOffset();
        b = vc(b, c);
        d *= b - c;
        a = new Date(a.getTime());
        a.setMinutes(a.getMinutes() + d);
        return a;
    }
    function ua(a) {
        a = D(a).clone();
        try {
            a.empty();
        } catch (b) {}
        var d = D("<div>").append(a).html();
        try {
            return a[0].nodeType === Oa ? M(d) : d.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(a, b) {
                return "<" + M(b);
            });
        } catch (c) {
            return M(d);
        }
    }
    function wc(a) {
        try {
            return decodeURIComponent(a);
        } catch (b) {}
    }
    function xc(a) {
        var b = {};
        p((a || "").split("&"), function(a) {
            var c, e, f;
            a && (e = a = a.replace(/\+/g, "%20"), c = a.indexOf("="), -1 !== c && (e = a.substring(0, c), 
            f = a.substring(c + 1)), e = wc(e), u(e) && (f = !u(f) || wc(f), sa.call(b, e) ? L(b[e]) ? b[e].push(f) : b[e] = [ b[e], f ] : b[e] = f));
        });
        return b;
    }
    function Qb(a) {
        var b = [];
        p(a, function(a, c) {
            L(a) ? p(a, function(a) {
                b.push(ha(c, !0) + (!0 === a ? "" : "=" + ha(a, !0)));
            }) : b.push(ha(c, !0) + (!0 === a ? "" : "=" + ha(a, !0)));
        });
        return b.length ? b.join("&") : "";
    }
    function nb(a) {
        return ha(a, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function ha(a, b) {
        return encodeURIComponent(a).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, b ? "%20" : "+");
    }
    function ce(a, b) {
        var d, c, e = Pa.length;
        for (c = 0; c < e; ++c) if (d = Pa[c] + b, H(d = a.getAttribute(d))) return d;
        return null;
    }
    function de(a, b) {
        var d, c, e = {};
        p(Pa, function(b) {
            b += "app";
            !d && a.hasAttribute && a.hasAttribute(b) && (d = a, c = a.getAttribute(b));
        });
        p(Pa, function(b) {
            b += "app";
            var e;
            !d && (e = a.querySelector("[" + b.replace(":", "\\:") + "]")) && (d = e, c = e.getAttribute(b));
        });
        d && (e.strictDi = null !== ce(d, "strict-di"), b(d, c ? [ c ] : [], e));
    }
    function yc(a, b, d) {
        K(d) || (d = {});
        d = N({
            strictDi: !1
        }, d);
        var c = function() {
            a = D(a);
            if (a.injector()) {
                var c = a[0] === U ? "document" : ua(a);
                throw Ba("btstrpd", c.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            b = b || [];
            b.unshift([ "$provide", function(b) {
                b.value("$rootElement", a);
            } ]);
            d.debugInfoEnabled && b.push([ "$compileProvider", function(a) {
                a.debugInfoEnabled(!0);
            } ]);
            b.unshift("ng");
            c = db(b, d.strictDi);
            c.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function(a, b, c, d) {
                a.$apply(function() {
                    b.data("$injector", d);
                    c(b)(a);
                });
            } ]);
            return c;
        }, e = /^NG_ENABLE_DEBUG_INFO!/, f = /^NG_DEFER_BOOTSTRAP!/;
        R && e.test(R.name) && (d.debugInfoEnabled = !0, R.name = R.name.replace(e, ""));
        if (R && !f.test(R.name)) return c();
        R.name = R.name.replace(f, "");
        da.resumeBootstrap = function(a) {
            p(a, function(a) {
                b.push(a);
            });
            return c();
        };
        G(da.resumeDeferredBootstrap) && da.resumeDeferredBootstrap();
    }
    function ee() {
        R.name = "NG_ENABLE_DEBUG_INFO!" + R.name;
        R.location.reload();
    }
    function fe(a) {
        a = da.element(a).injector();
        if (!a) throw Ba("test");
        return a.get("$$testability");
    }
    function zc(a, b) {
        b = b || "_";
        return a.replace(ge, function(a, c) {
            return (c ? b : "") + a.toLowerCase();
        });
    }
    function pb(a, b, d) {
        if (!a) throw Ba("areq", b || "?", d || "required");
        return a;
    }
    function Ra(a, b, d) {
        d && L(a) && (a = a[a.length - 1]);
        pb(G(a), b, "not a function, got " + (a && "object" == typeof a ? a.constructor.name || "Object" : typeof a));
        return a;
    }
    function Sa(a, b) {
        if ("hasOwnProperty" === a) throw Ba("badname", b);
    }
    function Bc(a, b, d) {
        if (!b) return a;
        b = b.split(".");
        for (var c, e = a, f = b.length, g = 0; g < f; g++) c = b[g], a && (a = (e = a)[c]);
        return !d && G(a) ? tc(e, a) : a;
    }
    function qb(a) {
        for (var c, b = a[0], d = a[a.length - 1], e = 1; b !== d && (b = b.nextSibling); e++) (c || a[e] !== b) && (c || (c = D(ta.call(a, 0, e))), 
        c.push(b));
        return c || a;
    }
    function Z() {
        return Object.create(null);
    }
    function ie(a) {
        function b(a, b, c) {
            return a[b] || (a[b] = c());
        }
        var d = B("$injector"), c = B("ng");
        a = b(a, "angular", Object);
        a.$$minErr = a.$$minErr || B;
        return b(a, "module", function() {
            var a = {};
            return function(f, g, h) {
                if ("hasOwnProperty" === f) throw c("badname", "module");
                g && a.hasOwnProperty(f) && (a[f] = null);
                return b(a, f, function() {
                    function a(b, d, e, f) {
                        f || (f = c);
                        return function() {
                            f[e || "push"]([ b, d, arguments ]);
                            return t;
                        };
                    }
                    function b(a, d) {
                        return function(b, e) {
                            e && G(e) && (e.$$moduleName = f);
                            c.push([ a, d, arguments ]);
                            return t;
                        };
                    }
                    if (!g) throw d("nomod", f);
                    var c = [], e = [], J = [], z = a("$injector", "invoke", "push", e), t = {
                        _invokeQueue: c,
                        _configBlocks: e,
                        _runBlocks: J,
                        requires: g,
                        name: f,
                        provider: b("$provide", "provider"),
                        factory: b("$provide", "factory"),
                        service: b("$provide", "service"),
                        value: a("$provide", "value"),
                        constant: a("$provide", "constant", "unshift"),
                        decorator: b("$provide", "decorator"),
                        animation: b("$animateProvider", "register"),
                        filter: b("$filterProvider", "register"),
                        controller: b("$controllerProvider", "register"),
                        directive: b("$compileProvider", "directive"),
                        config: z,
                        run: function(a) {
                            J.push(a);
                            return this;
                        }
                    };
                    h && z(h);
                    return t;
                });
            };
        });
    }
    function eb(a) {
        return a.replace(Hf, function(a, d, c, e) {
            return e ? c.toUpperCase() : c;
        }).replace(If, "Moz$1");
    }
    function Kc(a) {
        a = a.nodeType;
        return 1 === a || !a || 9 === a;
    }
    function Lc(a, b) {
        var d, c, e = b.createDocumentFragment(), f = [];
        if (Tb.test(a)) {
            d = d || e.appendChild(b.createElement("div"));
            c = (Jf.exec(a) || [ "", "" ])[1].toLowerCase();
            c = ja[c] || ja._default;
            d.innerHTML = c[1] + a.replace(Kf, "<$1></$2>") + c[2];
            for (c = c[0]; c--; ) d = d.lastChild;
            f = bb(f, d.childNodes);
            d = e.firstChild;
            d.textContent = "";
        } else f.push(b.createTextNode(a));
        e.textContent = "";
        e.innerHTML = "";
        p(f, function(a) {
            e.appendChild(a);
        });
        return e;
    }
    function Mc(a, b) {
        var d = a.parentNode;
        d && d.replaceChild(b, a);
        b.appendChild(a);
    }
    function S(a) {
        if (a instanceof S) return a;
        var b;
        H(a) && (a = T(a), b = !0);
        if (!(this instanceof S)) {
            if (b && "<" != a.charAt(0)) throw Ub("nosel");
            return new S(a);
        }
        if (b) {
            b = U;
            var d;
            a = (d = Lf.exec(a)) ? [ b.createElement(d[1]) ] : (d = Lc(a, b)) ? d.childNodes : [];
        }
        Nc(this, a);
    }
    function Vb(a) {
        return a.cloneNode(!0);
    }
    function tb(a, b) {
        b || ub(a);
        if (a.querySelectorAll) for (var d = a.querySelectorAll("*"), c = 0, e = d.length; c < e; c++) ub(d[c]);
    }
    function Oc(a, b, d, c) {
        if (u(c)) throw Ub("offargs");
        var e = (c = vb(a)) && c.events, f = c && c.handle;
        if (f) if (b) {
            var g = function(b) {
                var c = e[b];
                u(d) && ab(c || [], d);
                u(d) && c && 0 < c.length || (a.removeEventListener(b, f, !1), delete e[b]);
            };
            p(b.split(" "), function(a) {
                g(a);
                wb[a] && g(wb[a]);
            });
        } else for (b in e) "$destroy" !== b && a.removeEventListener(b, f, !1), delete e[b];
    }
    function ub(a, b) {
        var d = a.ng339, c = d && fb[d];
        c && (b ? delete c.data[b] : (c.handle && (c.events.$destroy && c.handle({}, "$destroy"), 
        Oc(a)), delete fb[d], a.ng339 = x));
    }
    function vb(a, b) {
        var d = a.ng339, d = d && fb[d];
        b && !d && (a.ng339 = d = ++Mf, d = fb[d] = {
            events: {},
            data: {},
            handle: x
        });
        return d;
    }
    function Wb(a, b, d) {
        if (Kc(a)) {
            var c = u(d), e = !c && b && !K(b), f = !b;
            a = (a = vb(a, !e)) && a.data;
            if (c) a[b] = d; else {
                if (f) return a;
                if (e) return a && a[b];
                N(a, b);
            }
        }
    }
    function xb(a, b) {
        return !!a.getAttribute && -1 < (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + b + " ");
    }
    function yb(a, b) {
        b && a.setAttribute && p(b.split(" "), function(b) {
            a.setAttribute("class", T((" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + T(b) + " ", " ")));
        });
    }
    function zb(a, b) {
        if (b && a.setAttribute) {
            var d = (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            p(b.split(" "), function(a) {
                a = T(a);
                -1 === d.indexOf(" " + a + " ") && (d += a + " ");
            });
            a.setAttribute("class", T(d));
        }
    }
    function Nc(a, b) {
        if (b) if (b.nodeType) a[a.length++] = b; else {
            var d = b.length;
            if ("number" == typeof d && b.window !== b) {
                if (d) for (var c = 0; c < d; c++) a[a.length++] = b[c];
            } else a[a.length++] = b;
        }
    }
    function Pc(a, b) {
        return Ab(a, "$" + (b || "ngController") + "Controller");
    }
    function Ab(a, b, d) {
        9 == a.nodeType && (a = a.documentElement);
        for (b = L(b) ? b : [ b ]; a; ) {
            for (var c = 0, e = b.length; c < e; c++) if (u(d = D.data(a, b[c]))) return d;
            a = a.parentNode || 11 === a.nodeType && a.host;
        }
    }
    function Qc(a) {
        for (tb(a, !0); a.firstChild; ) a.removeChild(a.firstChild);
    }
    function Xb(a, b) {
        b || tb(a);
        var d = a.parentNode;
        d && d.removeChild(a);
    }
    function Nf(a, b) {
        b = b || R;
        "complete" === b.document.readyState ? b.setTimeout(a) : D(b).on("load", a);
    }
    function Rc(a, b) {
        var d = Bb[b.toLowerCase()];
        return d && Sc[oa(a)] && d;
    }
    function Of(a, b) {
        var d = function(c, d) {
            c.isDefaultPrevented = function() {
                return c.defaultPrevented;
            };
            var f = b[d || c.type], g = f ? f.length : 0;
            if (g) {
                if (r(c.immediatePropagationStopped)) {
                    var h = c.stopImmediatePropagation;
                    c.stopImmediatePropagation = function() {
                        c.immediatePropagationStopped = !0;
                        c.stopPropagation && c.stopPropagation();
                        h && h.call(c);
                    };
                }
                c.isImmediatePropagationStopped = function() {
                    return !0 === c.immediatePropagationStopped;
                };
                var k = f.specialHandlerWrapper || Pf;
                1 < g && (f = fa(f));
                for (var m = 0; m < g; m++) c.isImmediatePropagationStopped() || k(a, c, f[m]);
            }
        };
        d.elem = a;
        return d;
    }
    function Pf(a, b, d) {
        d.call(a, b);
    }
    function Qf(a, b, d) {
        var c = b.relatedTarget;
        c && (c === a || Rf.call(a, c)) || d.call(a, b);
    }
    function Ef() {
        this.$get = function() {
            return N(S, {
                hasClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return xb(a, b);
                },
                addClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return zb(a, b);
                },
                removeClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return yb(a, b);
                }
            });
        };
    }
    function Da(a, b) {
        var d = a && a.$$hashKey;
        if (d) return "function" == typeof d && (d = a.$$hashKey()), d;
        d = typeof a;
        return d = "function" == d || "object" == d && null !== a ? a.$$hashKey = d + ":" + (b || Xd)() : d + ":" + a;
    }
    function Ta(a, b) {
        if (b) {
            var d = 0;
            this.nextUid = function() {
                return ++d;
            };
        }
        p(a, this.put, this);
    }
    function Sf(a) {
        return (a = a.toString().replace(Tc, "").match(Uc)) ? "function(" + (a[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
    }
    function db(a, b) {
        function d(a) {
            return function(b, c) {
                if (!K(b)) return a(b, c);
                p(b, pc(a));
            };
        }
        function c(a, b) {
            Sa(a, "service");
            (G(b) || L(b)) && (b = J.instantiate(b));
            if (!b.$get) throw Ea("pget", a);
            return n[a + "Provider"] = b;
        }
        function e(a, b) {
            return function() {
                var c = t.invoke(b, this);
                if (r(c)) throw Ea("undef", a);
                return c;
            };
        }
        function f(a, b, d) {
            return c(a, {
                $get: !1 !== d ? e(a, b) : b
            });
        }
        function g(a) {
            pb(r(a) || L(a), "modulesToLoad", "not an array");
            var c, b = [];
            p(a, function(a) {
                function d(a) {
                    var b, c;
                    b = 0;
                    for (c = a.length; b < c; b++) {
                        var e = a[b], f = J.get(e[0]);
                        f[e[1]].apply(f, e[2]);
                    }
                }
                if (!l.get(a)) {
                    l.put(a, !0);
                    try {
                        H(a) ? (c = Sb(a), b = b.concat(g(c.requires)).concat(c._runBlocks), d(c._invokeQueue), 
                        d(c._configBlocks)) : G(a) ? b.push(J.invoke(a)) : L(a) ? b.push(J.invoke(a)) : Ra(a, "module");
                    } catch (e) {
                        throw L(a) && (a = a[a.length - 1]), e.message && e.stack && -1 == e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack), 
                        Ea("modulerr", a, e.stack || e.message || e);
                    }
                }
            });
            return b;
        }
        function h(a, c) {
            function d(b, e) {
                if (a.hasOwnProperty(b)) {
                    if (a[b] === k) throw Ea("cdep", b + " <- " + m.join(" <- "));
                    return a[b];
                }
                try {
                    return m.unshift(b), a[b] = k, a[b] = c(b, e);
                } catch (f) {
                    throw a[b] === k && delete a[b], f;
                } finally {
                    m.shift();
                }
            }
            function e(a, c, f, g) {
                "string" == typeof f && (g = f, f = null);
                var m, l, q, k = [], h = db.$$annotate(a, b, g);
                l = 0;
                for (m = h.length; l < m; l++) {
                    q = h[l];
                    if ("string" != typeof q) throw Ea("itkn", q);
                    k.push(f && f.hasOwnProperty(q) ? f[q] : d(q, g));
                }
                L(a) && (a = a[m]);
                return a.apply(c, k);
            }
            return {
                invoke: e,
                instantiate: function(a, b, c) {
                    var d = Object.create((L(a) ? a[a.length - 1] : a).prototype || null);
                    a = e(a, d, b, c);
                    return K(a) || G(a) ? a : d;
                },
                get: d,
                annotate: db.$$annotate,
                has: function(b) {
                    return n.hasOwnProperty(b + "Provider") || a.hasOwnProperty(b);
                }
            };
        }
        b = !0 === b;
        var k = {}, m = [], l = new Ta([], !0), n = {
            $provide: {
                provider: d(c),
                factory: d(f),
                service: d(function(a, b) {
                    return f(a, [ "$injector", function(a) {
                        return a.instantiate(b);
                    } ]);
                }),
                value: d(function(a, b) {
                    return f(a, ma(b), !1);
                }),
                constant: d(function(a, b) {
                    Sa(a, "constant");
                    n[a] = b;
                    z[a] = b;
                }),
                decorator: function(a, b) {
                    var c = J.get(a + "Provider"), d = c.$get;
                    c.$get = function() {
                        var a = t.invoke(d, c);
                        return t.invoke(b, null, {
                            $delegate: a
                        });
                    };
                }
            }
        }, J = n.$injector = h(n, function(a, b) {
            da.isString(b) && m.push(b);
            throw Ea("unpr", m.join(" <- "));
        }), z = {}, t = z.$injector = h(z, function(a, b) {
            var c = J.get(a + "Provider", b);
            return t.invoke(c.$get, c, x, a);
        });
        p(g(a), function(a) {
            a && t.invoke(a);
        });
        return t;
    }
    function Ve() {
        var a = !0;
        this.disableAutoScrolling = function() {
            a = !1;
        };
        this.$get = [ "$window", "$location", "$rootScope", function(b, d, c) {
            function e(a) {
                var b = null;
                Array.prototype.some.call(a, function(a) {
                    if ("a" === oa(a)) return b = a, !0;
                });
                return b;
            }
            function f(a) {
                if (a) {
                    a.scrollIntoView();
                    var c;
                    c = g.yOffset;
                    G(c) ? c = c() : Nb(c) ? (c = c[0], c = "fixed" !== b.getComputedStyle(c).position ? 0 : c.getBoundingClientRect().bottom) : P(c) || (c = 0);
                    c && (a = a.getBoundingClientRect().top, b.scrollBy(0, a - c));
                } else b.scrollTo(0, 0);
            }
            function g(a) {
                a = H(a) ? a : d.hash();
                var b;
                a ? (b = h.getElementById(a)) ? f(b) : (b = e(h.getElementsByName(a))) ? f(b) : "top" === a && f(null) : f(null);
            }
            var h = b.document;
            a && c.$watch(function() {
                return d.hash();
            }, function(a, b) {
                a === b && "" === a || Nf(function() {
                    c.$evalAsync(g);
                });
            });
            return g;
        } ];
    }
    function gb(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        L(a) && (a = a.join(" "));
        L(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function Tf(a) {
        H(a) && (a = a.split(" "));
        var b = Z();
        p(a, function(a) {
            a.length && (b[a] = !0);
        });
        return b;
    }
    function Fa(a) {
        return K(a) ? a : {};
    }
    function Uf(a, b, d, c) {
        function e(a) {
            try {
                a.apply(null, ta.call(arguments, 1));
            } finally {
                if (0 === --t) for (;A.length; ) try {
                    A.pop()();
                } catch (b) {
                    d.error(b);
                }
            }
        }
        function f() {
            F = null;
            g();
            h();
        }
        function g() {
            a: {
                try {
                    q = l.state;
                    break a;
                } catch (a) {}
                q = void 0;
            }
            q = r(q) ? null : q;
            la(q, C) && (q = C);
            C = q;
        }
        function h() {
            w === k.url() && y === q || (w = k.url(), y = q, p(Q, function(a) {
                a(k.url(), q);
            }));
        }
        var k = this, m = a.location, l = a.history, n = a.setTimeout, J = a.clearTimeout, z = {};
        k.isMock = !1;
        var t = 0, A = [];
        k.$$completeOutstandingRequest = e;
        k.$$incOutstandingRequestCount = function() {
            t++;
        };
        k.notifyWhenNoOutstandingRequests = function(a) {
            0 === t ? a() : A.push(a);
        };
        var q, y, w = m.href, V = b.find("base"), F = null;
        g();
        y = q;
        k.url = function(b, d, e) {
            r(e) && (e = null);
            m !== a.location && (m = a.location);
            l !== a.history && (l = a.history);
            if (b) {
                var f = y === e;
                if (w === b && (!c.history || f)) return k;
                var h = w && Ga(w) === Ga(b);
                w = b;
                y = e;
                if (!c.history || h && f) {
                    h && !F || (F = b);
                    d ? m.replace(b) : h ? (d = m, e = b.indexOf("#"), e = -1 === e ? "" : b.substr(e), 
                    d.hash = e) : m.href = b;
                    m.href !== b && (F = b);
                } else l[d ? "replaceState" : "pushState"](e, "", b), g(), y = q;
                return k;
            }
            return F || m.href.replace(/%27/g, "'");
        };
        k.state = function() {
            return q;
        };
        var Q = [], E = !1, C = null;
        k.onUrlChange = function(b) {
            if (!E) {
                c.history && D(a).on("popstate", f);
                D(a).on("hashchange", f);
                E = !0;
            }
            Q.push(b);
            return b;
        };
        k.$$applicationDestroyed = function() {
            D(a).off("hashchange popstate", f);
        };
        k.$$checkUrlChange = h;
        k.baseHref = function() {
            var a = V.attr("href");
            return a ? a.replace(/^(https?\:)?\/\/[^\/]*/, "") : "";
        };
        k.defer = function(a, b) {
            var c;
            t++;
            c = n(function() {
                delete z[c];
                e(a);
            }, b || 0);
            z[c] = !0;
            return c;
        };
        k.defer.cancel = function(a) {
            return !!z[a] && (delete z[a], J(a), e(v), !0);
        };
    }
    function bf() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function(a, b, d, c) {
            return new Uf(a, c, b, d);
        } ];
    }
    function cf() {
        this.$get = function() {
            function a(a, c) {
                function e(a) {
                    a != n && (J ? J == a && (J = a.n) : J = a, f(a.n, a.p), f(a, n), n = a, n.n = null);
                }
                function f(a, b) {
                    a != b && (a && (a.p = b), b && (b.n = a));
                }
                if (a in b) throw B("$cacheFactory")("iid", a);
                var g = 0, h = N({}, c, {
                    id: a
                }), k = Z(), m = c && c.capacity || Number.MAX_VALUE, l = Z(), n = null, J = null;
                return b[a] = {
                    put: function(a, b) {
                        if (!r(b)) {
                            if (m < Number.MAX_VALUE) {
                                e(l[a] || (l[a] = {
                                    key: a
                                }));
                            }
                            a in k || g++;
                            k[a] = b;
                            g > m && this.remove(J.key);
                            return b;
                        }
                    },
                    get: function(a) {
                        if (m < Number.MAX_VALUE) {
                            var b = l[a];
                            if (!b) return;
                            e(b);
                        }
                        return k[a];
                    },
                    remove: function(a) {
                        if (m < Number.MAX_VALUE) {
                            var b = l[a];
                            if (!b) return;
                            b == n && (n = b.p);
                            b == J && (J = b.n);
                            f(b.n, b.p);
                            delete l[a];
                        }
                        a in k && (delete k[a], g--);
                    },
                    removeAll: function() {
                        k = Z();
                        g = 0;
                        l = Z();
                        n = J = null;
                    },
                    destroy: function() {
                        l = h = k = null;
                        delete b[a];
                    },
                    info: function() {
                        return N({}, h, {
                            size: g
                        });
                    }
                };
            }
            var b = {};
            a.info = function() {
                var a = {};
                p(b, function(b, e) {
                    a[e] = b.info();
                });
                return a;
            };
            a.get = function(a) {
                return b[a];
            };
            return a;
        };
    }
    function yf() {
        this.$get = [ "$cacheFactory", function(a) {
            return a("templates");
        } ];
    }
    function Cc(a, b) {
        function d(a, b, c) {
            var d = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/, e = Z();
            p(a, function(a, f) {
                if (a in l) e[f] = l[a]; else {
                    var g = a.match(d);
                    if (!g) throw ga("iscp", b, f, a, c ? "controller bindings definition" : "isolate scope definition");
                    e[f] = {
                        mode: g[1][0],
                        collection: "*" === g[2],
                        optional: "?" === g[3],
                        attrName: g[4] || f
                    };
                    g[4] && (l[a] = e[f]);
                }
            });
            return e;
        }
        function c(a) {
            var b = a.charAt(0);
            if (!b || b !== M(b)) throw ga("baddir", a);
            if (a !== a.trim()) throw ga("baddir", a);
        }
        var e = {}, f = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, g = /(([\w\-]+)(?:\:([^;]+))?;?)/, h = $d("ngSrc,ngSrcset,src,srcset"), k = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, m = /^(on[a-z]+|formaction)$/, l = Z();
        this.directive = function z(b, d) {
            Sa(b, "directive");
            H(b) ? (c(b), pb(d, "directiveFactory"), e.hasOwnProperty(b) || (e[b] = [], a.factory(b + "Directive", [ "$injector", "$exceptionHandler", function(a, c) {
                var d = [];
                p(e[b], function(e, f) {
                    try {
                        var g = a.invoke(e);
                        G(g) ? g = {
                            compile: ma(g)
                        } : !g.compile && g.link && (g.compile = ma(g.link));
                        g.priority = g.priority || 0;
                        g.index = f;
                        g.name = g.name || b;
                        g.require = g.require || g.controller && g.name;
                        g.restrict = g.restrict || "EA";
                        g.$$moduleName = e.$$moduleName;
                        d.push(g);
                    } catch (h) {
                        c(h);
                    }
                });
                return d;
            } ])), e[b].push(d)) : p(b, pc(z));
            return this;
        };
        this.aHrefSanitizationWhitelist = function(a) {
            return u(a) ? (b.aHrefSanitizationWhitelist(a), this) : b.aHrefSanitizationWhitelist();
        };
        this.imgSrcSanitizationWhitelist = function(a) {
            return u(a) ? (b.imgSrcSanitizationWhitelist(a), this) : b.imgSrcSanitizationWhitelist();
        };
        var n = !0;
        this.debugInfoEnabled = function(a) {
            return u(a) ? (n = a, this) : n;
        };
        this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function(a, b, c, l, y, w, V, F, Q, E) {
            function C(a, b) {
                try {
                    a.addClass(b);
                } catch (c) {}
            }
            function I(a, b, c, d, e) {
                a instanceof D || (a = D(a));
                for (var f = /\S+/, g = 0, h = a.length; g < h; g++) {
                    var k = a[g];
                    k.nodeType === Oa && k.nodeValue.match(f) && Mc(k, a[g] = U.createElement("span"));
                }
                var m = W(a, b, a, c, d, e);
                I.$$addScopeClass(a);
                var l = null;
                return function(b, c, d) {
                    pb(b, "scope");
                    e && e.needsNewScope && (b = b.$parent.$new());
                    d = d || {};
                    var f = d.parentBoundTranscludeFn, g = d.transcludeControllers;
                    d = d.futureParentElement;
                    f && f.$$boundTransclude && (f = f.$$boundTransclude);
                    l || (l = (d = d && d[0]) && "foreignobject" !== oa(d) && d.toString().match(/SVG/) ? "svg" : "html");
                    d = "html" !== l ? D(Yb(l, D("<div>").append(a).html())) : c ? Qa.clone.call(a) : a;
                    if (g) for (var h in g) d.data("$" + h + "Controller", g[h].instance);
                    I.$$addScopeInfo(d, b);
                    c && c(d, b);
                    m && m(b, d, d, f);
                    return d;
                };
            }
            function W(a, b, c, d, e, f) {
                function g(a, c, d, e) {
                    var f, k, m, l, n, E, A;
                    if (q) for (A = Array(c.length), l = 0; l < h.length; l += 3) f = h[l], A[f] = c[f]; else A = c;
                    l = 0;
                    for (n = h.length; l < n; ) k = A[h[l++]], c = h[l++], f = h[l++], c ? (c.scope ? (m = a.$new(), 
                    I.$$addScopeInfo(D(k), m)) : m = a, E = c.transcludeOnThisElement ? O(a, c.transclude, e) : !c.templateOnThisElement && e ? e : !e && b ? O(a, b) : null, 
                    c(f, m, k, d, E)) : f && f(a, k.childNodes, x, e);
                }
                for (var k, m, l, n, q, h = [], E = 0; E < a.length; E++) {
                    k = new da();
                    m = ia(a[E], [], k, 0 === E ? d : x, e);
                    (f = m.length ? $(m, a[E], k, b, c, null, [], [], f) : null) && f.scope && I.$$addScopeClass(k.$$element);
                    k = f && f.terminal || !(l = a[E].childNodes) || !l.length ? null : W(l, f ? (f.transcludeOnThisElement || !f.templateOnThisElement) && f.transclude : b);
                    (f || k) && (h.push(E, f, k), n = !0, q = q || f);
                    f = null;
                }
                return n ? g : null;
            }
            function O(a, b, c) {
                return function(d, e, f, g, h) {
                    d || (d = a.$new(!1, h), d.$$transcluded = !0);
                    return b(d, e, {
                        parentBoundTranscludeFn: c,
                        transcludeControllers: f,
                        futureParentElement: g
                    });
                };
            }
            function ia(a, b, c, d, e) {
                var k, h = c.$attr;
                switch (a.nodeType) {
                  case 1:
                    k = oa(a);
                    qa(b, va(k), "E", d, e);
                    for (var m, l, n, q, E = a.attributes, A = 0, w = E && E.length; A < w; A++) {
                        var I = !1, y = !1;
                        m = E[A];
                        l = m.name;
                        n = T(m.value);
                        m = va(l);
                        (q = ja.test(m)) && (l = l.replace(Wc, "").substr(8).replace(/_(.)/g, function(a, b) {
                            return b.toUpperCase();
                        }));
                        (m = m.match(ka)) && B(m[1]) && (I = l, y = l.substr(0, l.length - 5) + "end", l = l.substr(0, l.length - 6));
                        m = va(l.toLowerCase());
                        h[m] = l;
                        !q && c.hasOwnProperty(m) || (c[m] = n, Rc(a, m) && (c[m] = !0));
                        X(a, b, n, m, q);
                        qa(b, m, "A", d, e, I, y);
                    }
                    "input" === k && "hidden" === a.getAttribute("type") && a.setAttribute("autocomplete", "off");
                    a = a.className;
                    K(a) && (a = a.animVal);
                    if (H(a) && "" !== a) for (;k = g.exec(a); ) m = va(k[2]), qa(b, m, "C", d, e) && (c[m] = T(k[3])), 
                    a = a.substr(k.index + k[0].length);
                    break;

                  case Oa:
                    if (11 === Ha) for (;a.parentNode && a.nextSibling && a.nextSibling.nodeType === Oa; ) a.nodeValue += a.nextSibling.nodeValue, 
                    a.parentNode.removeChild(a.nextSibling);
                    P(b, a.nodeValue);
                    break;

                  case 8:
                    try {
                        (k = f.exec(a.nodeValue)) && (m = va(k[1]), qa(b, m, "M", d, e) && (c[m] = T(k[2])));
                    } catch (O) {}
                }
                b.sort(wa);
                return b;
            }
            function Ua(a, b, c) {
                var d = [], e = 0;
                if (b && a.hasAttribute && a.hasAttribute(b)) do {
                    if (!a) throw ga("uterdir", b, c);
                    1 == a.nodeType && (a.hasAttribute(b) && e++, a.hasAttribute(c) && e--);
                    d.push(a);
                    a = a.nextSibling;
                } while (0 < e); else d.push(a);
                return D(d);
            }
            function s(a, b, c) {
                return function(d, e, f, g, h) {
                    e = Ua(e[0], b, c);
                    return a(d, e, f, g, h);
                };
            }
            function $(a, b, d, e, f, g, h, m, l) {
                function n(a, b, c, d) {
                    if (a) {
                        c && (a = s(a, c, d));
                        a.require = r.require;
                        a.directiveName = u;
                        (C === r || r.$$isolateScope) && (a = ba(a, {
                            isolateScope: !0
                        }));
                        h.push(a);
                    }
                    if (b) {
                        c && (b = s(b, c, d));
                        b.require = r.require;
                        b.directiveName = u;
                        (C === r || r.$$isolateScope) && (b = ba(b, {
                            isolateScope: !0
                        }));
                        m.push(b);
                    }
                }
                function q(a, b, c, d) {
                    var e;
                    if (H(b)) {
                        var f = b.match(k);
                        b = b.substring(f[0].length);
                        var g = f[1] || f[3], f = "?" === f[2];
                        "^^" === g ? c = c.parent() : e = (e = d && d[b]) && e.instance;
                        e || (d = "$" + b + "Controller", e = g ? c.inheritedData(d) : c.data(d));
                        if (!e && !f) throw ga("ctreq", b, a);
                    } else if (L(b)) for (e = [], g = 0, f = b.length; g < f; g++) e[g] = q(a, b[g], c, d);
                    return e || null;
                }
                function E(a, b, c, d, e, f) {
                    var h, g = Z();
                    for (h in d) {
                        var k = d[h], m = {
                            $scope: k === C || k.$$isolateScope ? e : f,
                            $element: a,
                            $attrs: b,
                            $transclude: c
                        }, l = k.controller;
                        "@" == l && (l = b[k.name]);
                        m = w(l, m, !0, k.controllerAs);
                        g[k.name] = m;
                        a.data("$" + k.name + "Controller", m.instance);
                    }
                    return g;
                }
                function y(a, c, e, f, g) {
                    function k(a, b, c) {
                        var d;
                        $a(a) || (c = b, b = a, a = x);
                        Q && (d = w);
                        c || (c = Q ? F.parent() : F);
                        return g(a, b, d, c, Ua);
                    }
                    var l, n, A, w, O, F, ia;
                    b === e ? (f = d, F = d.$$element) : (F = D(e), f = new da(F, d));
                    A = c;
                    C ? n = c.$new(!0) : t && (A = c.$parent);
                    g && (O = k, O.$$boundTransclude = g);
                    z && (w = E(F, f, O, z, n, c));
                    C && (I.$$addScopeInfo(F, n, !0, !(W && (W === C || W === C.$$originalDirective))), 
                    I.$$addScopeClass(F, !0), n.$$isolateBindings = C.$$isolateBindings, (ia = aa(c, f, n, n.$$isolateBindings, C)) && n.$on("$destroy", ia));
                    for (var Vc in w) {
                        ia = z[Vc];
                        var V = w[Vc], p = ia.$$bindings.bindToController;
                        V.identifier && p && (l = aa(A, f, V.instance, p, ia));
                        var r = V();
                        r !== V.instance && (V.instance = r, F.data("$" + ia.name + "Controller", r), l && l(), 
                        l = aa(A, f, V.instance, p, ia));
                    }
                    B = 0;
                    for (M = h.length; B < M; B++) l = h[B], ca(l, l.isolateScope ? n : c, F, f, l.require && q(l.directiveName, l.require, F, w), O);
                    var Ua = c;
                    C && (C.template || null === C.templateUrl) && (Ua = n);
                    a && a(Ua, e.childNodes, x, g);
                    for (B = m.length - 1; 0 <= B; B--) l = m[B], ca(l, l.isolateScope ? n : c, F, f, l.require && q(l.directiveName, l.require, F, w), O);
                }
                l = l || {};
                for (var r, u, v, wa, O = -Number.MAX_VALUE, t = l.newScopeDirective, z = l.controllerDirectives, C = l.newIsolateScopeDirective, W = l.templateDirective, F = l.nonTlbTranscludeDirective, V = !1, p = !1, Q = l.hasElementTranscludeDirective, $ = d.$$element = D(b), qa = e, B = 0, M = a.length; B < M; B++) {
                    r = a[B];
                    var N = r.$$start, P = r.$$end;
                    N && ($ = Ua(b, N, P));
                    v = x;
                    if (O > r.priority) break;
                    (v = r.scope) && (r.templateUrl || (K(v) ? (Va("new/isolated scope", C || t, r, $), 
                    C = r) : Va("new/isolated scope", C, r, $)), t = t || r);
                    u = r.name;
                    !r.templateUrl && r.controller && (v = r.controller, z = z || Z(), Va("'" + u + "' controller", z[u], r, $), 
                    z[u] = r);
                    (v = r.transclude) && (V = !0, r.$$tlb || (Va("transclusion", F, r, $), F = r), 
                    "element" == v ? (Q = !0, O = r.priority, v = $, $ = d.$$element = D(U.createComment(" " + u + ": " + d[u] + " ")), 
                    b = $[0], Y(f, ta.call(v, 0), b), qa = I(v, e, O, g && g.name, {
                        nonTlbTranscludeDirective: F
                    })) : (v = D(Vb(b)).contents(), $.empty(), qa = I(v, e, x, x, {
                        needsNewScope: r.$$isolateScope || r.$$newScope
                    })));
                    if (r.template) if (p = !0, Va("template", W, r, $), W = r, v = G(r.template) ? r.template($, d) : r.template, 
                    v = ha(v), r.replace) {
                        g = r;
                        v = Tb.test(v) ? Xc(Yb(r.templateNamespace, T(v))) : [];
                        b = v[0];
                        if (1 != v.length || 1 !== b.nodeType) throw ga("tplrt", u, "");
                        Y(f, $, b);
                        v = {
                            $attr: {}
                        };
                        var S = ia(b, [], v), Vf = a.splice(B + 1, a.length - (B + 1));
                        (C || t) && Yc(S, C, t);
                        a = a.concat(S).concat(Vf);
                        R(d, v);
                        M = a.length;
                    } else $.html(v);
                    if (r.templateUrl) p = !0, Va("template", W, r, $), W = r, r.replace && (g = r), 
                    y = Wf(a.splice(B, a.length - B), $, d, f, V && qa, h, m, {
                        controllerDirectives: z,
                        newScopeDirective: t !== r && t,
                        newIsolateScopeDirective: C,
                        templateDirective: W,
                        nonTlbTranscludeDirective: F
                    }), M = a.length; else if (r.compile) try {
                        wa = r.compile($, d, qa), G(wa) ? n(null, wa, N, P) : wa && n(wa.pre, wa.post, N, P);
                    } catch (X) {
                        c(X, ua($));
                    }
                    r.terminal && (y.terminal = !0, O = Math.max(O, r.priority));
                }
                y.scope = t && !0 === t.scope;
                y.transcludeOnThisElement = V;
                y.templateOnThisElement = p;
                y.transclude = qa;
                l.hasElementTranscludeDirective = Q;
                return y;
            }
            function Yc(a, b, c) {
                for (var d = 0, e = a.length; d < e; d++) a[d] = Ob(a[d], {
                    $$isolateScope: b,
                    $$newScope: c
                });
            }
            function qa(b, f, g, h, k, m, l) {
                if (f === k) return null;
                k = null;
                if (e.hasOwnProperty(f)) {
                    var n;
                    f = a.get(f + "Directive");
                    for (var q = 0, E = f.length; q < E; q++) try {
                        if (n = f[q], (r(h) || h > n.priority) && -1 != n.restrict.indexOf(g)) {
                            m && (n = Ob(n, {
                                $$start: m,
                                $$end: l
                            }));
                            if (!n.$$bindings) {
                                var w = n, I = n, y = n.name, O = {
                                    isolateScope: null,
                                    bindToController: null
                                };
                                K(I.scope) && (!0 === I.bindToController ? (O.bindToController = d(I.scope, y, !0), 
                                O.isolateScope = {}) : O.isolateScope = d(I.scope, y, !1));
                                K(I.bindToController) && (O.bindToController = d(I.bindToController, y, !0));
                                if (K(O.bindToController)) {
                                    var t = I.controller, C = I.controllerAs;
                                    if (!t) throw ga("noctrl", y);
                                    var F;
                                    a: {
                                        var I = t, W = C;
                                        if (W && H(W)) F = W; else {
                                            if (H(I)) {
                                                var ia = Zc.exec(I);
                                                if (ia) {
                                                    F = ia[3];
                                                    break a;
                                                }
                                            }
                                            F = void 0;
                                        }
                                    }
                                    if (!F) throw ga("noident", y);
                                }
                                var V = w.$$bindings = O;
                                K(V.isolateScope) && (n.$$isolateBindings = V.isolateScope);
                            }
                            b.push(n);
                            k = n;
                        }
                    } catch (p) {
                        c(p);
                    }
                }
                return k;
            }
            function B(b) {
                if (e.hasOwnProperty(b)) for (var c = a.get(b + "Directive"), d = 0, f = c.length; d < f; d++) if (b = c[d], 
                b.multiElement) return !0;
                return !1;
            }
            function R(a, b) {
                var c = b.$attr, d = a.$attr, e = a.$$element;
                p(a, function(d, e) {
                    "$" != e.charAt(0) && (b[e] && b[e] !== d && (d += ("style" === e ? ";" : " ") + b[e]), 
                    a.$set(e, d, !0, c[e]));
                });
                p(b, function(b, f) {
                    "class" == f ? (C(e, b), a.class = (a.class ? a.class + " " : "") + b) : "style" == f ? (e.attr("style", e.attr("style") + ";" + b), 
                    a.style = (a.style ? a.style + ";" : "") + b) : "$" == f.charAt(0) || a.hasOwnProperty(f) || (a[f] = b, 
                    d[f] = c[f]);
                });
            }
            function Wf(a, b, c, d, e, f, g, h) {
                var m, n, k = [], E = b[0], A = a.shift(), w = Ob(A, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: A
                }), I = G(A.templateUrl) ? A.templateUrl(b, c) : A.templateUrl, y = A.templateNamespace;
                b.empty();
                l(I).then(function(l) {
                    var q, t;
                    l = ha(l);
                    if (A.replace) {
                        l = Tb.test(l) ? Xc(Yb(y, T(l))) : [];
                        q = l[0];
                        if (1 != l.length || 1 !== q.nodeType) throw ga("tplrt", A.name, I);
                        l = {
                            $attr: {}
                        };
                        Y(d, b, q);
                        var z = ia(q, [], l);
                        K(A.scope) && Yc(z, !0);
                        a = z.concat(a);
                        R(c, l);
                    } else q = E, b.html(l);
                    a.unshift(w);
                    m = $(a, q, c, e, b, A, f, g, h);
                    p(d, function(a, c) {
                        a == q && (d[c] = b[0]);
                    });
                    for (n = W(b[0].childNodes, e); k.length; ) {
                        l = k.shift();
                        t = k.shift();
                        var F = k.shift(), V = k.shift(), z = b[0];
                        if (!l.$$destroyed) {
                            if (t !== E) {
                                var Q = t.className;
                                h.hasElementTranscludeDirective && A.replace || (z = Vb(q));
                                Y(F, D(t), z);
                                C(D(z), Q);
                            }
                            t = m.transcludeOnThisElement ? O(l, m.transclude, V) : V;
                            m(n, l, z, d, t);
                        }
                    }
                    k = null;
                });
                return function(a, b, c, d, e) {
                    a = e;
                    b.$$destroyed || (k ? k.push(b, c, d, a) : (m.transcludeOnThisElement && (a = O(b, m.transclude, e)), 
                    m(n, b, c, d, a)));
                };
            }
            function wa(a, b) {
                var c = b.priority - a.priority;
                return 0 !== c ? c : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index;
            }
            function Va(a, b, c, d) {
                function e(a) {
                    return a ? " (module: " + a + ")" : "";
                }
                if (b) throw ga("multidir", b.name, e(b.$$moduleName), c.name, e(c.$$moduleName), a, ua(d));
            }
            function P(a, c) {
                var d = b(c, !0);
                d && a.push({
                    priority: 0,
                    compile: function(a) {
                        a = a.parent();
                        var b = !!a.length;
                        b && I.$$addBindingClass(a);
                        return function(a, c) {
                            var e = c.parent();
                            b || I.$$addBindingClass(e);
                            I.$$addBindingInfo(e, d.expressions);
                            a.$watch(d, function(a) {
                                c[0].nodeValue = a;
                            });
                        };
                    }
                });
            }
            function Yb(a, b) {
                a = M(a || "html");
                switch (a) {
                  case "svg":
                  case "math":
                    var c = U.createElement("div");
                    c.innerHTML = "<" + a + ">" + b + "</" + a + ">";
                    return c.childNodes[0].childNodes;

                  default:
                    return b;
                }
            }
            function S(a, b) {
                if ("srcdoc" == b) return F.HTML;
                var c = oa(a);
                return "xlinkHref" == b || "form" == c && "action" == b || "img" != c && ("src" == b || "ngSrc" == b) ? F.RESOURCE_URL : void 0;
            }
            function X(a, c, d, e, f) {
                var g = S(a, e);
                f = h[e] || f;
                var k = b(d, !0, g, f);
                if (k) {
                    if ("multiple" === e && "select" === oa(a)) throw ga("selmulti", ua(a));
                    c.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(a, c, h) {
                                    c = h.$$observers || (h.$$observers = Z());
                                    if (m.test(e)) throw ga("nodomevents");
                                    var l = h[e];
                                    l !== d && (k = l && b(l, !0, g, f), d = l);
                                    k && (h[e] = k(a), (c[e] || (c[e] = [])).$$inter = !0, (h.$$observers && h.$$observers[e].$$scope || a).$watch(k, function(a, b) {
                                        "class" === e && a != b ? h.$updateClass(a, b) : h.$set(e, a);
                                    }));
                                }
                            };
                        }
                    });
                }
            }
            function Y(a, b, c) {
                var g, h, d = b[0], e = b.length, f = d.parentNode;
                if (a) for (g = 0, h = a.length; g < h; g++) if (a[g] == d) {
                    a[g++] = c;
                    h = g + e - 1;
                    for (var k = a.length; g < k; g++, h++) h < k ? a[g] = a[h] : delete a[g];
                    a.length -= e - 1;
                    a.context === d && (a.context = c);
                    break;
                }
                f && f.replaceChild(c, d);
                a = U.createDocumentFragment();
                a.appendChild(d);
                D.hasData(d) && (D.data(c, D.data(d)), pa ? (Rb = !0, pa.cleanData([ d ])) : delete D.cache[d[D.expando]]);
                d = 1;
                for (e = b.length; d < e; d++) f = b[d], D(f).remove(), a.appendChild(f), delete b[d];
                b[0] = c;
                b.length = 1;
            }
            function ba(a, b) {
                return N(function() {
                    return a.apply(null, arguments);
                }, a, b);
            }
            function ca(a, b, d, e, f, g) {
                try {
                    a(b, d, e, f, g);
                } catch (h) {
                    c(h, ua(d));
                }
            }
            function aa(a, c, d, e, f) {
                var g = [];
                p(e, function(e, h) {
                    var l, n, q, A, k = e.attrName, m = e.optional;
                    switch (e.mode) {
                      case "@":
                        m || sa.call(c, k) || (d[h] = c[k] = void 0);
                        c.$observe(k, function(a) {
                            H(a) && (d[h] = a);
                        });
                        c.$$observers[k].$$scope = a;
                        l = c[k];
                        H(l) ? d[h] = b(l)(a) : Ma(l) && (d[h] = l);
                        break;

                      case "=":
                        if (!sa.call(c, k)) {
                            if (m) break;
                            c[k] = void 0;
                        }
                        if (m && !c[k]) break;
                        n = y(c[k]);
                        A = n.literal ? la : function(a, b) {
                            return a === b || a !== a && b !== b;
                        };
                        q = n.assign || function() {
                            l = d[h] = n(a);
                            throw ga("nonassign", c[k], k, f.name);
                        };
                        l = d[h] = n(a);
                        m = function(b) {
                            A(b, d[h]) || (A(b, l) ? q(a, b = d[h]) : d[h] = b);
                            return l = b;
                        };
                        m.$stateful = !0;
                        m = e.collection ? a.$watchCollection(c[k], m) : a.$watch(y(c[k], m), null, n.literal);
                        g.push(m);
                        break;

                      case "&":
                        n = c.hasOwnProperty(k) ? y(c[k]) : v;
                        if (n === v && m) break;
                        d[h] = function(b) {
                            return n(a, b);
                        };
                    }
                });
                return g.length && function() {
                    for (var a = 0, b = g.length; a < b; ++a) g[a]();
                };
            }
            var da = function(a, b) {
                if (b) {
                    var d, e, f, c = Object.keys(b);
                    d = 0;
                    for (e = c.length; d < e; d++) f = c[d], this[f] = b[f];
                } else this.$attr = {};
                this.$$element = a;
            };
            da.prototype = {
                $normalize: va,
                $addClass: function(a) {
                    a && 0 < a.length && Q.addClass(this.$$element, a);
                },
                $removeClass: function(a) {
                    a && 0 < a.length && Q.removeClass(this.$$element, a);
                },
                $updateClass: function(a, b) {
                    var c = $c(a, b);
                    c && c.length && Q.addClass(this.$$element, c);
                    (c = $c(b, a)) && c.length && Q.removeClass(this.$$element, c);
                },
                $set: function(a, b, d, e) {
                    var f = Rc(this.$$element[0], a), g = ad[a], h = a;
                    f ? (this.$$element.prop(a, b), e = f) : g && (this[g] = b, h = g);
                    this[a] = b;
                    e ? this.$attr[a] = e : (e = this.$attr[a]) || (this.$attr[a] = e = zc(a, "-"));
                    f = oa(this.$$element);
                    if ("a" === f && "href" === a || "img" === f && "src" === a) this[a] = b = E(b, "src" === a); else if ("img" === f && "srcset" === a && u(b)) {
                        for (var f = "", g = T(b), k = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, k = /\s/.test(g) ? k : /(,)/, g = g.split(k), k = Math.floor(g.length / 2), m = 0; m < k; m++) var l = 2 * m, f = f + E(T(g[l]), !0), f = f + " " + T(g[l + 1]);
                        g = T(g[2 * m]).split(/\s/);
                        f += E(T(g[0]), !0);
                        2 === g.length && (f += " " + T(g[1]));
                        this[a] = b = f;
                    }
                    !1 !== d && (null === b || r(b) ? this.$$element.removeAttr(e) : this.$$element.attr(e, b));
                    (a = this.$$observers) && p(a[h], function(a) {
                        try {
                            a(b);
                        } catch (d) {
                            c(d);
                        }
                    });
                },
                $observe: function(a, b) {
                    var c = this, d = c.$$observers || (c.$$observers = Z()), e = d[a] || (d[a] = []);
                    e.push(b);
                    V.$evalAsync(function() {
                        e.$$inter || !c.hasOwnProperty(a) || r(c[a]) || b(c[a]);
                    });
                    return function() {
                        ab(e, b);
                    };
                }
            };
            var ea = b.startSymbol(), fa = b.endSymbol(), ha = "{{" == ea && "}}" == fa ? Za : function(a) {
                return a.replace(/\{\{/g, ea).replace(/}}/g, fa);
            }, ja = /^ngAttr[A-Z]/, ka = /^(.+)Start$/;
            I.$$addBindingInfo = n ? function(a, b) {
                var c = a.data("$binding") || [];
                L(b) ? c = c.concat(b) : c.push(b);
                a.data("$binding", c);
            } : v;
            I.$$addBindingClass = n ? function(a) {
                C(a, "ng-binding");
            } : v;
            I.$$addScopeInfo = n ? function(a, b, c, d) {
                a.data(c ? d ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope", b);
            } : v;
            I.$$addScopeClass = n ? function(a, b) {
                C(a, b ? "ng-isolate-scope" : "ng-scope");
            } : v;
            return I;
        } ];
    }
    function va(a) {
        return eb(a.replace(Wc, ""));
    }
    function $c(a, b) {
        var d = "", c = a.split(/\s+/), e = b.split(/\s+/), f = 0;
        a: for (;f < c.length; f++) {
            for (var g = c[f], h = 0; h < e.length; h++) if (g == e[h]) continue a;
            d += (0 < d.length ? " " : "") + g;
        }
        return d;
    }
    function Xc(a) {
        a = D(a);
        var b = a.length;
        if (1 >= b) return a;
        for (;b--; ) 8 === a[b].nodeType && Xf.call(a, b, 1);
        return a;
    }
    function df() {
        var a = {}, b = !1;
        this.register = function(b, c) {
            Sa(b, "controller");
            K(b) ? N(a, b) : a[b] = c;
        };
        this.allowGlobals = function() {
            b = !0;
        };
        this.$get = [ "$injector", "$window", function(d, c) {
            function e(a, b, c, d) {
                if (!a || !K(a.$scope)) throw B("$controller")("noscp", d, b);
                a.$scope[b] = c;
            }
            return function(f, g, h, k) {
                var m, l, n;
                h = !0 === h;
                k && H(k) && (n = k);
                if (H(f)) {
                    k = f.match(Zc);
                    if (!k) throw Yf("ctrlfmt", f);
                    l = k[1];
                    n = n || k[3];
                    f = a.hasOwnProperty(l) ? a[l] : Bc(g.$scope, l, !0) || (b ? Bc(c, l, !0) : x);
                    Ra(f, l, !0);
                }
                if (h) return h = (L(f) ? f[f.length - 1] : f).prototype, m = Object.create(h || null), 
                n && e(g, n, m, l || f.name), N(function() {
                    var a = d.invoke(f, m, g, l);
                    a !== m && (K(a) || G(a)) && (m = a, n && e(g, n, m, l || f.name));
                    return m;
                }, {
                    instance: m,
                    identifier: n
                });
                m = d.instantiate(f, g, l);
                n && e(g, n, m, l || f.name);
                return m;
            };
        } ];
    }
    function ef() {
        this.$get = [ "$window", function(a) {
            return D(a.document);
        } ];
    }
    function ff() {
        this.$get = [ "$log", function(a) {
            return function(b, d) {
                a.error.apply(a, arguments);
            };
        } ];
    }
    function Zb(a) {
        return K(a) ? ea(a) ? a.toISOString() : cb(a) : a;
    }
    function lf() {
        this.$get = function() {
            return function(a) {
                if (!a) return "";
                var b = [];
                oc(a, function(a, c) {
                    null === a || r(a) || (L(a) ? p(a, function(a, d) {
                        b.push(ha(c) + "=" + ha(Zb(a)));
                    }) : b.push(ha(c) + "=" + ha(Zb(a))));
                });
                return b.join("&");
            };
        };
    }
    function mf() {
        this.$get = function() {
            return function(a) {
                function b(a, e, f) {
                    null === a || r(a) || (L(a) ? p(a, function(a, c) {
                        b(a, e + "[" + (K(a) ? c : "") + "]");
                    }) : K(a) && !ea(a) ? oc(a, function(a, c) {
                        b(a, e + (f ? "" : "[") + c + (f ? "" : "]"));
                    }) : d.push(ha(e) + "=" + ha(Zb(a))));
                }
                if (!a) return "";
                var d = [];
                b(a, "", !0);
                return d.join("&");
            };
        };
    }
    function $b(a, b) {
        if (H(a)) {
            var d = a.replace(Zf, "").trim();
            if (d) {
                var c = b("Content-Type");
                (c = c && 0 === c.indexOf(bd)) || (c = (c = d.match($f)) && ag[c[0]].test(d));
                c && (a = uc(d));
            }
        }
        return a;
    }
    function cd(a) {
        var d, b = Z();
        H(a) ? p(a.split("\n"), function(a) {
            d = a.indexOf(":");
            var e = M(T(a.substr(0, d)));
            a = T(a.substr(d + 1));
            e && (b[e] = b[e] ? b[e] + ", " + a : a);
        }) : K(a) && p(a, function(a, d) {
            var f = M(d), g = T(a);
            f && (b[f] = b[f] ? b[f] + ", " + g : g);
        });
        return b;
    }
    function dd(a) {
        var b;
        return function(d) {
            b || (b = cd(a));
            return d ? (d = b[M(d)], void 0 === d && (d = null), d) : b;
        };
    }
    function ed(a, b, d, c) {
        if (G(c)) return c(a, b, d);
        p(c, function(c) {
            a = c(a, b, d);
        });
        return a;
    }
    function kf() {
        var a = this.defaults = {
            transformResponse: [ $b ],
            transformRequest: [ function(a) {
                return K(a) && "[object File]" !== na.call(a) && "[object Blob]" !== na.call(a) && "[object FormData]" !== na.call(a) ? cb(a) : a;
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: fa(ac),
                put: fa(ac),
                patch: fa(ac)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer"
        }, b = !1;
        this.useApplyAsync = function(a) {
            return u(a) ? (b = !!a, this) : b;
        };
        var d = !0;
        this.useLegacyPromiseExtensions = function(a) {
            return u(a) ? (d = !!a, this) : d;
        };
        var c = this.interceptors = [];
        this.$get = [ "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", function(e, f, g, h, k, m) {
            function l(b) {
                function c(a) {
                    var b = N({}, a);
                    b.data = ed(a.data, a.headers, a.status, f.transformResponse);
                    a = a.status;
                    return 200 <= a && 300 > a ? b : k.reject(b);
                }
                function e(a, b) {
                    var c, d = {};
                    p(a, function(a, e) {
                        G(a) ? null != (c = a(b)) && (d[e] = c) : d[e] = a;
                    });
                    return d;
                }
                if (!da.isObject(b)) throw B("$http")("badreq", b);
                if (!H(b.url)) throw B("$http")("badreq", b.url);
                var f = N({
                    method: "get",
                    transformRequest: a.transformRequest,
                    transformResponse: a.transformResponse,
                    paramSerializer: a.paramSerializer
                }, b);
                f.headers = function(b) {
                    var f, g, h, c = a.headers, d = N({}, b.headers), c = N({}, c.common, c[M(b.method)]);
                    a: for (f in c) {
                        g = M(f);
                        for (h in d) if (M(h) === g) continue a;
                        d[f] = c[f];
                    }
                    return e(d, fa(b));
                }(b);
                f.method = rb(f.method);
                f.paramSerializer = H(f.paramSerializer) ? m.get(f.paramSerializer) : f.paramSerializer;
                var g = [ function(b) {
                    var d = b.headers, e = ed(b.data, dd(d), x, b.transformRequest);
                    r(e) && p(d, function(a, b) {
                        "content-type" === M(b) && delete d[b];
                    });
                    r(b.withCredentials) && !r(a.withCredentials) && (b.withCredentials = a.withCredentials);
                    return n(b, e).then(c, c);
                }, x ], h = k.when(f);
                for (p(t, function(a) {
                    (a.request || a.requestError) && g.unshift(a.request, a.requestError);
                    (a.response || a.responseError) && g.push(a.response, a.responseError);
                }); g.length; ) {
                    b = g.shift();
                    var l = g.shift(), h = h.then(b, l);
                }
                d ? (h.success = function(a) {
                    Ra(a, "fn");
                    h.then(function(b) {
                        a(b.data, b.status, b.headers, f);
                    });
                    return h;
                }, h.error = function(a) {
                    Ra(a, "fn");
                    h.then(null, function(b) {
                        a(b.data, b.status, b.headers, f);
                    });
                    return h;
                }) : (h.success = fd("success"), h.error = fd("error"));
                return h;
            }
            function n(c, d) {
                function g(a, c, d, e) {
                    function f() {
                        m(c, a, d, e);
                    }
                    C && (200 <= a && 300 > a ? C.put(O, [ a, c, cd(d), e ]) : C.remove(O));
                    b ? h.$applyAsync(f) : (f(), h.$$phase || h.$apply());
                }
                function m(a, b, d, e) {
                    b = -1 <= b ? b : 0;
                    (200 <= b && 300 > b ? p.resolve : p.reject)({
                        data: a,
                        status: b,
                        headers: dd(d),
                        config: c,
                        statusText: e
                    });
                }
                function n(a) {
                    m(a.data, a.status, fa(a.headers()), a.statusText);
                }
                function t() {
                    var a = l.pendingRequests.indexOf(c);
                    -1 !== a && l.pendingRequests.splice(a, 1);
                }
                var C, I, p = k.defer(), E = p.promise, W = c.headers, O = J(c.url, c.paramSerializer(c.params));
                l.pendingRequests.push(c);
                E.then(t, t);
                !c.cache && !a.cache || !1 === c.cache || "GET" !== c.method && "JSONP" !== c.method || (C = K(c.cache) ? c.cache : K(a.cache) ? a.cache : z);
                C && (I = C.get(O), u(I) ? I && G(I.then) ? I.then(n, n) : L(I) ? m(I[1], I[0], fa(I[2]), I[3]) : m(I, 200, {}, "OK") : C.put(O, E));
                r(I) && ((I = gd(c.url) ? f()[c.xsrfCookieName || a.xsrfCookieName] : x) && (W[c.xsrfHeaderName || a.xsrfHeaderName] = I), 
                e(c.method, O, d, g, W, c.timeout, c.withCredentials, c.responseType));
                return E;
            }
            function J(a, b) {
                0 < b.length && (a += (-1 == a.indexOf("?") ? "?" : "&") + b);
                return a;
            }
            var z = g("$http");
            a.paramSerializer = H(a.paramSerializer) ? m.get(a.paramSerializer) : a.paramSerializer;
            var t = [];
            p(c, function(a) {
                t.unshift(H(a) ? m.get(a) : m.invoke(a));
            });
            l.pendingRequests = [];
            !function(a) {
                p(arguments, function(a) {
                    l[a] = function(b, c) {
                        return l(N({}, c || {}, {
                            method: a,
                            url: b
                        }));
                    };
                });
            }("get", "delete", "head", "jsonp");
            !function(a) {
                p(arguments, function(a) {
                    l[a] = function(b, c, d) {
                        return l(N({}, d || {}, {
                            method: a,
                            url: b,
                            data: c
                        }));
                    };
                });
            }("post", "put", "patch");
            l.defaults = a;
            return l;
        } ];
    }
    function of() {
        this.$get = function() {
            return function() {
                return new R.XMLHttpRequest();
            };
        };
    }
    function nf() {
        this.$get = [ "$browser", "$window", "$document", "$xhrFactory", function(a, b, d, c) {
            return bg(a, c, a.defer, b.angular.callbacks, d[0]);
        } ];
    }
    function bg(a, b, d, c, e) {
        function f(a, b, d) {
            var f = e.createElement("script"), l = null;
            f.type = "text/javascript";
            f.src = a;
            f.async = !0;
            l = function(a) {
                f.removeEventListener("load", l, !1);
                f.removeEventListener("error", l, !1);
                e.body.removeChild(f);
                f = null;
                var g = -1, z = "unknown";
                a && ("load" !== a.type || c[b].called || (a = {
                    type: "error"
                }), z = a.type, g = "error" === a.type ? 404 : 200);
                d && d(g, z);
            };
            f.addEventListener("load", l, !1);
            f.addEventListener("error", l, !1);
            e.body.appendChild(f);
            return l;
        }
        return function(e, h, k, m, l, n, J, z) {
            function t() {
                y && y();
                w && w.abort();
            }
            function A(b, c, e, f, g) {
                u(F) && d.cancel(F);
                y = w = null;
                b(c, e, f, g);
                a.$$completeOutstandingRequest(v);
            }
            a.$$incOutstandingRequestCount();
            h = h || a.url();
            if ("jsonp" == M(e)) {
                var q = "_" + (c.counter++).toString(36);
                c[q] = function(a) {
                    c[q].data = a;
                    c[q].called = !0;
                };
                var y = f(h.replace("JSON_CALLBACK", "angular.callbacks." + q), q, function(a, b) {
                    A(m, a, c[q].data, "", b);
                    c[q] = v;
                });
            } else {
                var w = b(e, h);
                w.open(e, h, !0);
                p(l, function(a, b) {
                    u(a) && w.setRequestHeader(b, a);
                });
                w.onload = function() {
                    var a = w.statusText || "", b = "response" in w ? w.response : w.responseText, c = 1223 === w.status ? 204 : w.status;
                    0 === c && (c = b ? 200 : "file" == xa(h).protocol ? 404 : 0);
                    A(m, c, b, w.getAllResponseHeaders(), a);
                };
                e = function() {
                    A(m, -1, null, null, "");
                };
                w.onerror = e;
                w.onabort = e;
                J && (w.withCredentials = !0);
                if (z) try {
                    w.responseType = z;
                } catch (V) {
                    if ("json" !== z) throw V;
                }
                w.send(r(k) ? null : k);
            }
            if (0 < n) var F = d(t, n); else n && G(n.then) && n.then(t);
        };
    }
    function hf() {
        var a = "{{", b = "}}";
        this.startSymbol = function(b) {
            return b ? (a = b, this) : a;
        };
        this.endSymbol = function(a) {
            return a ? (b = a, this) : b;
        };
        this.$get = [ "$parse", "$exceptionHandler", "$sce", function(d, c, e) {
            function f(a) {
                return "\\\\\\" + a;
            }
            function g(c) {
                return c.replace(l, a).replace(n, b);
            }
            function h(f, h, l, n) {
                function q(a) {
                    try {
                        var b = a;
                        a = l ? e.getTrusted(l, b) : e.valueOf(b);
                        var d;
                        if (n && !u(a)) d = a; else if (null == a) d = ""; else {
                            switch (typeof a) {
                              case "string":
                                break;

                              case "number":
                                a = "" + a;
                                break;

                              default:
                                a = cb(a);
                            }
                            d = a;
                        }
                        return d;
                    } catch (g) {
                        c(Ia.interr(f, g));
                    }
                }
                n = !!n;
                for (var y, w, p = 0, F = [], Q = [], E = f.length, C = [], I = []; p < E; ) {
                    if (-1 == (y = f.indexOf(a, p)) || -1 == (w = f.indexOf(b, y + k))) {
                        p !== E && C.push(g(f.substring(p)));
                        break;
                    }
                    p !== y && C.push(g(f.substring(p, y))), p = f.substring(y + k, w), F.push(p), Q.push(d(p, q)), 
                    p = w + m, I.push(C.length), C.push("");
                }
                l && 1 < C.length && Ia.throwNoconcat(f);
                if (!h || F.length) {
                    var W = function(a) {
                        for (var b = 0, c = F.length; b < c; b++) {
                            if (n && r(a[b])) return;
                            C[I[b]] = a[b];
                        }
                        return C.join("");
                    };
                    return N(function(a) {
                        var b = 0, d = F.length, e = Array(d);
                        try {
                            for (;b < d; b++) e[b] = Q[b](a);
                            return W(e);
                        } catch (g) {
                            c(Ia.interr(f, g));
                        }
                    }, {
                        exp: f,
                        expressions: F,
                        $$watchDelegate: function(a, b) {
                            var c;
                            return a.$watchGroup(Q, function(d, e) {
                                var f = W(d);
                                G(b) && b.call(this, f, d !== e ? c : f, a);
                                c = f;
                            });
                        }
                    });
                }
            }
            var k = a.length, m = b.length, l = new RegExp(a.replace(/./g, f), "g"), n = new RegExp(b.replace(/./g, f), "g");
            h.startSymbol = function() {
                return a;
            };
            h.endSymbol = function() {
                return b;
            };
            return h;
        } ];
    }
    function jf() {
        this.$get = [ "$rootScope", "$window", "$q", "$$q", function(a, b, d, c) {
            function e(e, h, k, m) {
                var l = 4 < arguments.length, n = l ? ta.call(arguments, 4) : [], J = b.setInterval, z = b.clearInterval, t = 0, A = u(m) && !m, q = (A ? c : d).defer(), y = q.promise;
                k = u(k) ? k : 0;
                y.then(null, null, l ? function() {
                    e.apply(null, n);
                } : e);
                y.$$intervalId = J(function() {
                    q.notify(t++);
                    0 < k && t >= k && (q.resolve(t), z(y.$$intervalId), delete f[y.$$intervalId]);
                    A || a.$apply();
                }, h);
                f[y.$$intervalId] = q;
                return y;
            }
            var f = {};
            e.cancel = function(a) {
                return !!(a && a.$$intervalId in f) && (f[a.$$intervalId].reject("canceled"), b.clearInterval(a.$$intervalId), 
                delete f[a.$$intervalId], !0);
            };
            return e;
        } ];
    }
    function bc(a) {
        a = a.split("/");
        for (var b = a.length; b--; ) a[b] = nb(a[b]);
        return a.join("/");
    }
    function hd(a, b) {
        var d = xa(a);
        b.$$protocol = d.protocol;
        b.$$host = d.hostname;
        b.$$port = ca(d.port) || cg[d.protocol] || null;
    }
    function id(a, b) {
        var d = "/" !== a.charAt(0);
        d && (a = "/" + a);
        var c = xa(a);
        b.$$path = decodeURIComponent(d && "/" === c.pathname.charAt(0) ? c.pathname.substring(1) : c.pathname);
        b.$$search = xc(c.search);
        b.$$hash = decodeURIComponent(c.hash);
        b.$$path && "/" != b.$$path.charAt(0) && (b.$$path = "/" + b.$$path);
    }
    function ra(a, b) {
        if (0 === b.indexOf(a)) return b.substr(a.length);
    }
    function Ga(a) {
        var b = a.indexOf("#");
        return -1 == b ? a : a.substr(0, b);
    }
    function hb(a) {
        return a.replace(/(#.+)|#$/, "$1");
    }
    function cc(a, b, d) {
        this.$$html5 = !0;
        d = d || "";
        hd(a, this);
        this.$$parse = function(a) {
            var d = ra(b, a);
            if (!H(d)) throw Cb("ipthprfx", a, b);
            id(d, this);
            this.$$path || (this.$$path = "/");
            this.$$compose();
        };
        this.$$compose = function() {
            var a = Qb(this.$$search), d = this.$$hash ? "#" + nb(this.$$hash) : "";
            this.$$url = bc(this.$$path) + (a ? "?" + a : "") + d;
            this.$$absUrl = b + this.$$url.substr(1);
        };
        this.$$parseLinkUrl = function(c, e) {
            if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
            var f, g;
            u(f = ra(a, c)) ? (g = f, g = u(f = ra(d, f)) ? b + (ra("/", f) || f) : a + g) : u(f = ra(b, c)) ? g = b + f : b == c + "/" && (g = b);
            g && this.$$parse(g);
            return !!g;
        };
    }
    function dc(a, b, d) {
        hd(a, this);
        this.$$parse = function(c) {
            var f, e = ra(a, c) || ra(b, c);
            r(e) || "#" !== e.charAt(0) ? this.$$html5 ? f = e : (f = "", r(e) && (a = c, this.replace())) : (f = ra(d, e), 
            r(f) && (f = e));
            id(f, this);
            c = this.$$path;
            var e = a, g = /^\/[A-Z]:(\/.*)/;
            0 === f.indexOf(e) && (f = f.replace(e, ""));
            g.exec(f) || (c = (f = g.exec(c)) ? f[1] : c);
            this.$$path = c;
            this.$$compose();
        };
        this.$$compose = function() {
            var b = Qb(this.$$search), e = this.$$hash ? "#" + nb(this.$$hash) : "";
            this.$$url = bc(this.$$path) + (b ? "?" + b : "") + e;
            this.$$absUrl = a + (this.$$url ? d + this.$$url : "");
        };
        this.$$parseLinkUrl = function(b, d) {
            return Ga(a) == Ga(b) && (this.$$parse(b), !0);
        };
    }
    function jd(a, b, d) {
        this.$$html5 = !0;
        dc.apply(this, arguments);
        this.$$parseLinkUrl = function(c, e) {
            if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
            var f, g;
            a == Ga(c) ? f = c : (g = ra(b, c)) ? f = a + d + g : b === c + "/" && (f = b);
            f && this.$$parse(f);
            return !!f;
        };
        this.$$compose = function() {
            var b = Qb(this.$$search), e = this.$$hash ? "#" + nb(this.$$hash) : "";
            this.$$url = bc(this.$$path) + (b ? "?" + b : "") + e;
            this.$$absUrl = a + d + this.$$url;
        };
    }
    function Db(a) {
        return function() {
            return this[a];
        };
    }
    function kd(a, b) {
        return function(d) {
            if (r(d)) return this[a];
            this[a] = b(d);
            this.$$compose();
            return this;
        };
    }
    function pf() {
        var a = "", b = {
            enabled: !1,
            requireBase: !0,
            rewriteLinks: !0
        };
        this.hashPrefix = function(b) {
            return u(b) ? (a = b, this) : a;
        };
        this.html5Mode = function(a) {
            return Ma(a) ? (b.enabled = a, this) : K(a) ? (Ma(a.enabled) && (b.enabled = a.enabled), 
            Ma(a.requireBase) && (b.requireBase = a.requireBase), Ma(a.rewriteLinks) && (b.rewriteLinks = a.rewriteLinks), 
            this) : b;
        };
        this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function(d, c, e, f, g) {
            function h(a, b, d) {
                var e = m.url(), f = m.$$state;
                try {
                    c.url(a, b, d), m.$$state = c.state();
                } catch (g) {
                    throw m.url(e), m.$$state = f, g;
                }
            }
            function k(a, b) {
                d.$broadcast("$locationChangeSuccess", m.absUrl(), a, m.$$state, b);
            }
            var m, l;
            l = c.baseHref();
            var J, n = c.url();
            if (b.enabled) {
                if (!l && b.requireBase) throw Cb("nobase");
                J = n.substring(0, n.indexOf("/", n.indexOf("//") + 2)) + (l || "/");
                l = e.history ? cc : jd;
            } else J = Ga(n), l = dc;
            var z = J.substr(0, Ga(J).lastIndexOf("/") + 1);
            m = new l(J, z, "#" + a);
            m.$$parseLinkUrl(n, n);
            m.$$state = c.state();
            var t = /^\s*(javascript|mailto):/i;
            f.on("click", function(a) {
                if (b.rewriteLinks && !a.ctrlKey && !a.metaKey && !a.shiftKey && 2 != a.which && 2 != a.button) {
                    for (var e = D(a.target); "a" !== oa(e[0]); ) if (e[0] === f[0] || !(e = e.parent())[0]) return;
                    var h = e.prop("href"), k = e.attr("href") || e.attr("xlink:href");
                    K(h) && "[object SVGAnimatedString]" === h.toString() && (h = xa(h.animVal).href);
                    t.test(h) || !h || e.attr("target") || a.isDefaultPrevented() || !m.$$parseLinkUrl(h, k) || (a.preventDefault(), 
                    m.absUrl() != c.url() && (d.$apply(), g.angular["ff-684208-preventDefault"] = !0));
                }
            });
            hb(m.absUrl()) != hb(n) && c.url(m.absUrl(), !0);
            var A = !0;
            c.onUrlChange(function(a, b) {
                r(ra(z, a)) ? g.location.href = a : (d.$evalAsync(function() {
                    var f, c = m.absUrl(), e = m.$$state;
                    a = hb(a);
                    m.$$parse(a);
                    m.$$state = b;
                    f = d.$broadcast("$locationChangeStart", a, c, b, e).defaultPrevented;
                    m.absUrl() === a && (f ? (m.$$parse(c), m.$$state = e, h(c, !1, e)) : (A = !1, k(c, e)));
                }), d.$$phase || d.$digest());
            });
            d.$watch(function() {
                var a = hb(c.url()), b = hb(m.absUrl()), f = c.state(), g = m.$$replace, l = a !== b || m.$$html5 && e.history && f !== m.$$state;
                (A || l) && (A = !1, d.$evalAsync(function() {
                    var b = m.absUrl(), c = d.$broadcast("$locationChangeStart", b, a, m.$$state, f).defaultPrevented;
                    m.absUrl() === b && (c ? (m.$$parse(a), m.$$state = f) : (l && h(b, g, f === m.$$state ? null : m.$$state), 
                    k(a, f)));
                }));
                m.$$replace = !1;
            });
            return m;
        } ];
    }
    function qf() {
        var a = !0, b = this;
        this.debugEnabled = function(b) {
            return u(b) ? (a = b, this) : a;
        };
        this.$get = [ "$window", function(d) {
            function c(a) {
                a instanceof Error && (a.stack ? a = a.message && -1 === a.stack.indexOf(a.message) ? "Error: " + a.message + "\n" + a.stack : a.stack : a.sourceURL && (a = a.message + "\n" + a.sourceURL + ":" + a.line));
                return a;
            }
            function e(a) {
                var b = d.console || {}, e = b[a] || b.log || v;
                a = !1;
                try {
                    a = !!e.apply;
                } catch (k) {}
                return a ? function() {
                    var a = [];
                    p(arguments, function(b) {
                        a.push(c(b));
                    });
                    return e.apply(b, a);
                } : function(a, b) {
                    e(a, null == b ? "" : b);
                };
            }
            return {
                log: e("log"),
                info: e("info"),
                warn: e("warn"),
                error: e("error"),
                debug: function() {
                    var c = e("debug");
                    return function() {
                        a && c.apply(b, arguments);
                    };
                }()
            };
        } ];
    }
    function Wa(a, b) {
        if ("__defineGetter__" === a || "__defineSetter__" === a || "__lookupGetter__" === a || "__lookupSetter__" === a || "__proto__" === a) throw aa("isecfld", b);
        return a;
    }
    function ld(a, b) {
        a += "";
        if (!H(a)) throw aa("iseccst", b);
        return a;
    }
    function ya(a, b) {
        if (a) {
            if (a.constructor === a) throw aa("isecfn", b);
            if (a.window === a) throw aa("isecwindow", b);
            if (a.children && (a.nodeName || a.prop && a.attr && a.find)) throw aa("isecdom", b);
            if (a === Object) throw aa("isecobj", b);
        }
        return a;
    }
    function md(a, b) {
        if (a) {
            if (a.constructor === a) throw aa("isecfn", b);
            if (a === dg || a === eg || a === fg) throw aa("isecff", b);
        }
    }
    function Eb(a, b) {
        if (a && (a === (0).constructor || a === (!1).constructor || a === "".constructor || a === {}.constructor || a === [].constructor || a === Function.constructor)) throw aa("isecaf", b);
    }
    function gg(a, b) {
        return void 0 !== a ? a : b;
    }
    function nd(a, b) {
        return void 0 === a ? b : void 0 === b ? a : a + b;
    }
    function X(a, b) {
        var d, c;
        switch (a.type) {
          case s.Program:
            d = !0;
            p(a.body, function(a) {
                X(a.expression, b);
                d = d && a.expression.constant;
            });
            a.constant = d;
            break;

          case s.Literal:
            a.constant = !0;
            a.toWatch = [];
            break;

          case s.UnaryExpression:
            X(a.argument, b);
            a.constant = a.argument.constant;
            a.toWatch = a.argument.toWatch;
            break;

          case s.BinaryExpression:
            X(a.left, b);
            X(a.right, b);
            a.constant = a.left.constant && a.right.constant;
            a.toWatch = a.left.toWatch.concat(a.right.toWatch);
            break;

          case s.LogicalExpression:
            X(a.left, b);
            X(a.right, b);
            a.constant = a.left.constant && a.right.constant;
            a.toWatch = a.constant ? [] : [ a ];
            break;

          case s.ConditionalExpression:
            X(a.test, b);
            X(a.alternate, b);
            X(a.consequent, b);
            a.constant = a.test.constant && a.alternate.constant && a.consequent.constant;
            a.toWatch = a.constant ? [] : [ a ];
            break;

          case s.Identifier:
            a.constant = !1;
            a.toWatch = [ a ];
            break;

          case s.MemberExpression:
            X(a.object, b);
            a.computed && X(a.property, b);
            a.constant = a.object.constant && (!a.computed || a.property.constant);
            a.toWatch = [ a ];
            break;

          case s.CallExpression:
            d = !!a.filter && !b(a.callee.name).$stateful;
            c = [];
            p(a.arguments, function(a) {
                X(a, b);
                d = d && a.constant;
                a.constant || c.push.apply(c, a.toWatch);
            });
            a.constant = d;
            a.toWatch = a.filter && !b(a.callee.name).$stateful ? c : [ a ];
            break;

          case s.AssignmentExpression:
            X(a.left, b);
            X(a.right, b);
            a.constant = a.left.constant && a.right.constant;
            a.toWatch = [ a ];
            break;

          case s.ArrayExpression:
            d = !0;
            c = [];
            p(a.elements, function(a) {
                X(a, b);
                d = d && a.constant;
                a.constant || c.push.apply(c, a.toWatch);
            });
            a.constant = d;
            a.toWatch = c;
            break;

          case s.ObjectExpression:
            d = !0;
            c = [];
            p(a.properties, function(a) {
                X(a.value, b);
                d = d && a.value.constant;
                a.value.constant || c.push.apply(c, a.value.toWatch);
            });
            a.constant = d;
            a.toWatch = c;
            break;

          case s.ThisExpression:
            a.constant = !1, a.toWatch = [];
        }
    }
    function od(a) {
        if (1 == a.length) {
            a = a[0].expression;
            var b = a.toWatch;
            return 1 !== b.length ? b : b[0] !== a ? b : x;
        }
    }
    function pd(a) {
        return a.type === s.Identifier || a.type === s.MemberExpression;
    }
    function qd(a) {
        if (1 === a.body.length && pd(a.body[0].expression)) return {
            type: s.AssignmentExpression,
            left: a.body[0].expression,
            right: {
                type: s.NGValueParameter
            },
            operator: "="
        };
    }
    function rd(a) {
        return 0 === a.body.length || 1 === a.body.length && (a.body[0].expression.type === s.Literal || a.body[0].expression.type === s.ArrayExpression || a.body[0].expression.type === s.ObjectExpression);
    }
    function sd(a, b) {
        this.astBuilder = a;
        this.$filter = b;
    }
    function td(a, b) {
        this.astBuilder = a;
        this.$filter = b;
    }
    function Fb(a) {
        return "constructor" == a;
    }
    function ec(a) {
        return G(a.valueOf) ? a.valueOf() : hg.call(a);
    }
    function rf() {
        var a = Z(), b = Z();
        this.$get = [ "$filter", function(d) {
            function c(c, f, n) {
                var w, p, F;
                n = n || t;
                switch (typeof c) {
                  case "string":
                    F = c = c.trim();
                    var r = n ? b : a;
                    w = r[F];
                    if (!w) {
                        ":" === c.charAt(0) && ":" === c.charAt(1) && (p = !0, c = c.substring(2));
                        w = n ? z : J;
                        var E = new fc(w);
                        w = new gc(E, d, w).parse(c);
                        w.constant ? w.$$watchDelegate = m : p ? w.$$watchDelegate = w.literal ? k : h : w.inputs && (w.$$watchDelegate = g);
                        n && (w = e(w));
                        r[F] = w;
                    }
                    return l(w, f);

                  case "function":
                    return l(c, f);

                  default:
                    return l(v, f);
                }
            }
            function e(a) {
                function b(c, d, e, f) {
                    var g = t;
                    t = !0;
                    try {
                        return a(c, d, e, f);
                    } finally {
                        t = g;
                    }
                }
                if (!a) return a;
                b.$$watchDelegate = a.$$watchDelegate;
                b.assign = e(a.assign);
                b.constant = a.constant;
                b.literal = a.literal;
                for (var c = 0; a.inputs && c < a.inputs.length; ++c) a.inputs[c] = e(a.inputs[c]);
                b.inputs = a.inputs;
                return b;
            }
            function f(a, b) {
                return null == a || null == b ? a === b : ("object" != typeof a || "object" != typeof (a = ec(a))) && (a === b || a !== a && b !== b);
            }
            function g(a, b, c, d, e) {
                var h, g = d.inputs;
                if (1 === g.length) {
                    var k = f, g = g[0];
                    return a.$watch(function(a) {
                        var b = g(a);
                        f(b, k) || (h = d(a, x, x, [ b ]), k = b && ec(b));
                        return h;
                    }, b, c, e);
                }
                for (var l = [], m = [], n = 0, J = g.length; n < J; n++) l[n] = f, m[n] = null;
                return a.$watch(function(a) {
                    for (var b = !1, c = 0, e = g.length; c < e; c++) {
                        var k = g[c](a);
                        (b || (b = !f(k, l[c]))) && (m[c] = k, l[c] = k && ec(k));
                    }
                    b && (h = d(a, x, x, m));
                    return h;
                }, b, c, e);
            }
            function h(a, b, c, d) {
                var e, f;
                return e = a.$watch(function(a) {
                    return d(a);
                }, function(a, c, d) {
                    f = a;
                    G(b) && b.apply(this, arguments);
                    u(a) && d.$$postDigest(function() {
                        u(f) && e();
                    });
                }, c);
            }
            function k(a, b, c, d) {
                function e(a) {
                    var b = !0;
                    p(a, function(a) {
                        u(a) || (b = !1);
                    });
                    return b;
                }
                var f, g;
                return f = a.$watch(function(a) {
                    return d(a);
                }, function(a, c, d) {
                    g = a;
                    G(b) && b.call(this, a, c, d);
                    e(a) && d.$$postDigest(function() {
                        e(g) && f();
                    });
                }, c);
            }
            function m(a, b, c, d) {
                var e;
                return e = a.$watch(function(a) {
                    return d(a);
                }, function(a, c, d) {
                    G(b) && b.apply(this, arguments);
                    e();
                }, c);
            }
            function l(a, b) {
                if (!b) return a;
                var c = a.$$watchDelegate, d = !1, c = c !== k && c !== h ? function(c, e, f, g) {
                    f = d && g ? g[0] : a(c, e, f, g);
                    return b(f, c, e);
                } : function(c, d, e, f) {
                    e = a(c, d, e, f);
                    c = b(e, c, d);
                    return u(e) ? c : e;
                };
                a.$$watchDelegate && a.$$watchDelegate !== g ? c.$$watchDelegate = a.$$watchDelegate : b.$stateful || (c.$$watchDelegate = g, 
                d = !a.inputs, c.inputs = a.inputs ? a.inputs : [ a ]);
                return c;
            }
            var n = Ca().noUnsafeEval, J = {
                csp: n,
                expensiveChecks: !1
            }, z = {
                csp: n,
                expensiveChecks: !0
            }, t = !1;
            c.$$runningExpensiveChecks = function() {
                return t;
            };
            return c;
        } ];
    }
    function tf() {
        this.$get = [ "$rootScope", "$exceptionHandler", function(a, b) {
            return ud(function(b) {
                a.$evalAsync(b);
            }, b);
        } ];
    }
    function uf() {
        this.$get = [ "$browser", "$exceptionHandler", function(a, b) {
            return ud(function(b) {
                a.defer(b);
            }, b);
        } ];
    }
    function ud(a, b) {
        function d(a, b, c) {
            function d(b) {
                return function(c) {
                    e || (e = !0, b.call(a, c));
                };
            }
            var e = !1;
            return [ d(b), d(c) ];
        }
        function c() {
            this.$$state = {
                status: 0
            };
        }
        function e(a, b) {
            return function(c) {
                b.call(a, c);
            };
        }
        function f(c) {
            !c.processScheduled && c.pending && (c.processScheduled = !0, a(function() {
                var a, d, e;
                e = c.pending;
                c.processScheduled = !1;
                c.pending = x;
                for (var f = 0, g = e.length; f < g; ++f) {
                    d = e[f][0];
                    a = e[f][c.status];
                    try {
                        G(a) ? d.resolve(a(c.value)) : 1 === c.status ? d.resolve(c.value) : d.reject(c.value);
                    } catch (h) {
                        d.reject(h), b(h);
                    }
                }
            }));
        }
        function g() {
            this.promise = new c();
            this.resolve = e(this, this.resolve);
            this.reject = e(this, this.reject);
            this.notify = e(this, this.notify);
        }
        var h = B("$q", TypeError);
        N(c.prototype, {
            then: function(a, b, c) {
                if (r(a) && r(b) && r(c)) return this;
                var d = new g();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([ d, a, b, c ]);
                0 < this.$$state.status && f(this.$$state);
                return d.promise;
            },
            catch: function(a) {
                return this.then(null, a);
            },
            finally: function(a, b) {
                return this.then(function(b) {
                    return m(b, !0, a);
                }, function(b) {
                    return m(b, !1, a);
                }, b);
            }
        });
        N(g.prototype, {
            resolve: function(a) {
                this.promise.$$state.status || (a === this.promise ? this.$$reject(h("qcycle", a)) : this.$$resolve(a));
            },
            $$resolve: function(a) {
                var c, e;
                e = d(this, this.$$resolve, this.$$reject);
                try {
                    (K(a) || G(a)) && (c = a && a.then);
                    G(c) ? (this.promise.$$state.status = -1, c.call(a, e[0], e[1], this.notify)) : (this.promise.$$state.value = a, 
                    this.promise.$$state.status = 1, f(this.promise.$$state));
                } catch (g) {
                    e[1](g), b(g);
                }
            },
            reject: function(a) {
                this.promise.$$state.status || this.$$reject(a);
            },
            $$reject: function(a) {
                this.promise.$$state.value = a;
                this.promise.$$state.status = 2;
                f(this.promise.$$state);
            },
            notify: function(c) {
                var d = this.promise.$$state.pending;
                0 >= this.promise.$$state.status && d && d.length && a(function() {
                    for (var a, e, f = 0, g = d.length; f < g; f++) {
                        e = d[f][0];
                        a = d[f][3];
                        try {
                            e.notify(G(a) ? a(c) : c);
                        } catch (h) {
                            b(h);
                        }
                    }
                });
            }
        });
        var k = function(a, b) {
            var c = new g();
            b ? c.resolve(a) : c.reject(a);
            return c.promise;
        }, m = function(a, b, c) {
            var d = null;
            try {
                G(c) && (d = c());
            } catch (e) {
                return k(e, !1);
            }
            return d && G(d.then) ? d.then(function() {
                return k(a, b);
            }, function(a) {
                return k(a, !1);
            }) : k(a, b);
        }, l = function(a, b, c, d) {
            var e = new g();
            e.resolve(a);
            return e.promise.then(b, c, d);
        }, n = function z(a) {
            if (!G(a)) throw h("norslvr", a);
            if (!(this instanceof z)) return new z(a);
            var b = new g();
            a(function(a) {
                b.resolve(a);
            }, function(a) {
                b.reject(a);
            });
            return b.promise;
        };
        n.defer = function() {
            return new g();
        };
        n.reject = function(a) {
            var b = new g();
            b.reject(a);
            return b.promise;
        };
        n.when = l;
        n.resolve = l;
        n.all = function(a) {
            var b = new g(), c = 0, d = L(a) ? [] : {};
            p(a, function(a, e) {
                c++;
                l(a).then(function(a) {
                    d.hasOwnProperty(e) || (d[e] = a, --c || b.resolve(d));
                }, function(a) {
                    d.hasOwnProperty(e) || b.reject(a);
                });
            });
            0 === c && b.resolve(d);
            return b.promise;
        };
        return n;
    }
    function Df() {
        this.$get = [ "$window", "$timeout", function(a, b) {
            var d = a.requestAnimationFrame || a.webkitRequestAnimationFrame, c = a.cancelAnimationFrame || a.webkitCancelAnimationFrame || a.webkitCancelRequestAnimationFrame, e = !!d, f = e ? function(a) {
                var b = d(a);
                return function() {
                    c(b);
                };
            } : function(a) {
                var c = b(a, 16.66, !1);
                return function() {
                    b.cancel(c);
                };
            };
            f.supported = e;
            return f;
        } ];
    }
    function sf() {
        function a(a) {
            function b() {
                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$id = ++mb;
                this.$$ChildScope = null;
            }
            b.prototype = a;
            return b;
        }
        var b = 10, d = B("$rootScope"), c = null, e = null;
        this.digestTtl = function(a) {
            arguments.length && (b = a);
            return b;
        };
        this.$get = [ "$injector", "$exceptionHandler", "$parse", "$browser", function(f, g, h, k) {
            function m(a) {
                a.currentScope.$$destroyed = !0;
            }
            function l(a) {
                9 === Ha && (a.$$childHead && l(a.$$childHead), a.$$nextSibling && l(a.$$nextSibling));
                a.$parent = a.$$nextSibling = a.$$prevSibling = a.$$childHead = a.$$childTail = a.$root = a.$$watchers = null;
            }
            function n() {
                this.$id = ++mb;
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed = !1;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null;
            }
            function J(a) {
                if (w.$$phase) throw d("inprog", w.$$phase);
                w.$$phase = a;
            }
            function z(a, b) {
                do {
                    a.$$watchersCount += b;
                } while (a = a.$parent);
            }
            function t(a, b, c) {
                do {
                    a.$$listenerCount[c] -= b, 0 === a.$$listenerCount[c] && delete a.$$listenerCount[c];
                } while (a = a.$parent);
            }
            function A() {}
            function q() {
                for (;Q.length; ) try {
                    Q.shift()();
                } catch (a) {
                    g(a);
                }
                e = null;
            }
            function y() {
                null === e && (e = k.defer(function() {
                    w.$apply(q);
                }));
            }
            n.prototype = {
                constructor: n,
                $new: function(b, c) {
                    var d;
                    c = c || this;
                    b ? (d = new n(), d.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = a(this)), 
                    d = new this.$$ChildScope());
                    d.$parent = c;
                    d.$$prevSibling = c.$$childTail;
                    c.$$childHead ? (c.$$childTail.$$nextSibling = d, c.$$childTail = d) : c.$$childHead = c.$$childTail = d;
                    (b || c != this) && d.$on("$destroy", m);
                    return d;
                },
                $watch: function(a, b, d, e) {
                    var f = h(a);
                    if (f.$$watchDelegate) return f.$$watchDelegate(this, b, d, f, a);
                    var g = this, k = g.$$watchers, l = {
                        fn: b,
                        last: A,
                        get: f,
                        exp: e || a,
                        eq: !!d
                    };
                    c = null;
                    G(b) || (l.fn = v);
                    k || (k = g.$$watchers = []);
                    k.unshift(l);
                    z(this, 1);
                    return function() {
                        0 <= ab(k, l) && z(g, -1);
                        c = null;
                    };
                },
                $watchGroup: function(a, b) {
                    function c() {
                        h = !1;
                        k ? (k = !1, b(e, e, g)) : b(e, d, g);
                    }
                    var d = Array(a.length), e = Array(a.length), f = [], g = this, h = !1, k = !0;
                    if (!a.length) {
                        var l = !0;
                        g.$evalAsync(function() {
                            l && b(e, e, g);
                        });
                        return function() {
                            l = !1;
                        };
                    }
                    if (1 === a.length) return this.$watch(a[0], function(a, c, f) {
                        e[0] = a;
                        d[0] = c;
                        b(e, a === c ? e : d, f);
                    });
                    p(a, function(a, b) {
                        var k = g.$watch(a, function(a, f) {
                            e[b] = a;
                            d[b] = f;
                            h || (h = !0, g.$evalAsync(c));
                        });
                        f.push(k);
                    });
                    return function() {
                        for (;f.length; ) f.shift()();
                    };
                },
                $watchCollection: function(a, b) {
                    function c(a) {
                        e = a;
                        var b, g, h;
                        if (!r(e)) {
                            if (K(e)) if (Aa(e)) for (f !== n && (f = n, p = f.length = 0, l++), a = e.length, 
                            p !== a && (l++, f.length = p = a), b = 0; b < a; b++) h = f[b], g = e[b], h !== h && g !== g || h === g || (l++, 
                            f[b] = g); else {
                                f !== q && (f = q = {}, p = 0, l++);
                                a = 0;
                                for (b in e) sa.call(e, b) && (a++, g = e[b], h = f[b], b in f ? h !== h && g !== g || h === g || (l++, 
                                f[b] = g) : (p++, f[b] = g, l++));
                                if (p > a) for (b in l++, f) sa.call(e, b) || (p--, delete f[b]);
                            } else f !== e && (f = e, l++);
                            return l;
                        }
                    }
                    c.$stateful = !0;
                    var e, f, g, d = this, k = 1 < b.length, l = 0, m = h(a, c), n = [], q = {}, J = !0, p = 0;
                    return this.$watch(m, function() {
                        J ? (J = !1, b(e, e, d)) : b(e, g, d);
                        if (k) if (K(e)) if (Aa(e)) {
                            g = Array(e.length);
                            for (var a = 0; a < e.length; a++) g[a] = e[a];
                        } else for (a in g = {}, e) sa.call(e, a) && (g[a] = e[a]); else g = e;
                    });
                },
                $digest: function() {
                    var a, f, h, l, m, n, p, z, t, Q, x, y = b, r = [];
                    J("$digest");
                    k.$$checkUrlChange();
                    this === w && null !== e && (k.defer.cancel(e), q());
                    c = null;
                    do {
                        z = !1;
                        for (t = this; s.length; ) {
                            try {
                                x = s.shift(), x.scope.$eval(x.expression, x.locals);
                            } catch (u) {
                                g(u);
                            }
                            c = null;
                        }
                        a: do {
                            if (n = t.$$watchers) for (p = n.length; p--; ) try {
                                if (a = n[p]) if (m = a.get, (f = m(t)) === (h = a.last) || (a.eq ? la(f, h) : "number" == typeof f && "number" == typeof h && isNaN(f) && isNaN(h))) {
                                    if (a === c) {
                                        z = !1;
                                        break a;
                                    }
                                } else z = !0, c = a, a.last = a.eq ? Na(f, null) : f, l = a.fn, l(f, h === A ? f : h, t), 
                                5 > y && (Q = 4 - y, r[Q] || (r[Q] = []), r[Q].push({
                                    msg: G(a.exp) ? "fn: " + (a.exp.name || a.exp.toString()) : a.exp,
                                    newVal: f,
                                    oldVal: h
                                }));
                            } catch (v) {
                                g(v);
                            }
                            if (!(n = t.$$watchersCount && t.$$childHead || t !== this && t.$$nextSibling)) for (;t !== this && !(n = t.$$nextSibling); ) t = t.$parent;
                        } while (t = n);
                        if ((z || s.length) && !y--) throw w.$$phase = null, d("infdig", b, r);
                    } while (z || s.length);
                    for (w.$$phase = null; F.length; ) try {
                        F.shift()();
                    } catch (D) {
                        g(D);
                    }
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var a = this.$parent;
                        this.$broadcast("$destroy");
                        this.$$destroyed = !0;
                        this === w && k.$$applicationDestroyed();
                        z(this, -this.$$watchersCount);
                        for (var b in this.$$listenerCount) t(this, this.$$listenerCount[b], b);
                        a && a.$$childHead == this && (a.$$childHead = this.$$nextSibling);
                        a && a.$$childTail == this && (a.$$childTail = this.$$prevSibling);
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                        this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = v;
                        this.$on = this.$watch = this.$watchGroup = function() {
                            return v;
                        };
                        this.$$listeners = {};
                        this.$$nextSibling = null;
                        l(this);
                    }
                },
                $eval: function(a, b) {
                    return h(a)(this, b);
                },
                $evalAsync: function(a, b) {
                    w.$$phase || s.length || k.defer(function() {
                        s.length && w.$digest();
                    });
                    s.push({
                        scope: this,
                        expression: h(a),
                        locals: b
                    });
                },
                $$postDigest: function(a) {
                    F.push(a);
                },
                $apply: function(a) {
                    try {
                        J("$apply");
                        try {
                            return this.$eval(a);
                        } finally {
                            w.$$phase = null;
                        }
                    } catch (b) {
                        g(b);
                    } finally {
                        try {
                            w.$digest();
                        } catch (c) {
                            throw g(c), c;
                        }
                    }
                },
                $applyAsync: function(a) {
                    function b() {
                        c.$eval(a);
                    }
                    var c = this;
                    a && Q.push(b);
                    a = h(a);
                    y();
                },
                $on: function(a, b) {
                    var c = this.$$listeners[a];
                    c || (this.$$listeners[a] = c = []);
                    c.push(b);
                    var d = this;
                    do {
                        d.$$listenerCount[a] || (d.$$listenerCount[a] = 0), d.$$listenerCount[a]++;
                    } while (d = d.$parent);
                    var e = this;
                    return function() {
                        var d = c.indexOf(b);
                        -1 !== d && (c[d] = null, t(e, 1, a));
                    };
                },
                $emit: function(a, b) {
                    var d, l, m, c = [], e = this, f = !1, h = {
                        name: a,
                        targetScope: e,
                        stopPropagation: function() {
                            f = !0;
                        },
                        preventDefault: function() {
                            h.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, k = bb([ h ], arguments, 1);
                    do {
                        d = e.$$listeners[a] || c;
                        h.currentScope = e;
                        l = 0;
                        for (m = d.length; l < m; l++) if (d[l]) try {
                            d[l].apply(null, k);
                        } catch (n) {
                            g(n);
                        } else d.splice(l, 1), l--, m--;
                        if (f) return h.currentScope = null, h;
                        e = e.$parent;
                    } while (e);
                    h.currentScope = null;
                    return h;
                },
                $broadcast: function(a, b) {
                    var c = this, d = this, e = {
                        name: a,
                        targetScope: this,
                        preventDefault: function() {
                            e.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    };
                    if (!this.$$listenerCount[a]) return e;
                    for (var h, k, f = bb([ e ], arguments, 1); c = d; ) {
                        e.currentScope = c;
                        d = c.$$listeners[a] || [];
                        h = 0;
                        for (k = d.length; h < k; h++) if (d[h]) try {
                            d[h].apply(null, f);
                        } catch (l) {
                            g(l);
                        } else d.splice(h, 1), h--, k--;
                        if (!(d = c.$$listenerCount[a] && c.$$childHead || c !== this && c.$$nextSibling)) for (;c !== this && !(d = c.$$nextSibling); ) c = c.$parent;
                    }
                    e.currentScope = null;
                    return e;
                }
            };
            var w = new n(), s = w.$$asyncQueue = [], F = w.$$postDigestQueue = [], Q = w.$$applyAsyncQueue = [];
            return w;
        } ];
    }
    function le() {
        var a = /^\s*(https?|ftp|mailto|tel|file):/, b = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(b) {
            return u(b) ? (a = b, this) : a;
        };
        this.imgSrcSanitizationWhitelist = function(a) {
            return u(a) ? (b = a, this) : b;
        };
        this.$get = function() {
            return function(d, c) {
                var f, e = c ? b : a;
                f = xa(d).href;
                return "" === f || f.match(e) ? d : "unsafe:" + f;
            };
        };
    }
    function ig(a) {
        if ("self" === a) return a;
        if (H(a)) {
            if (-1 < a.indexOf("***")) throw za("iwcard", a);
            a = vd(a).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*");
            return new RegExp("^" + a + "$");
        }
        if (La(a)) return new RegExp("^" + a.source + "$");
        throw za("imatcher");
    }
    function wd(a) {
        var b = [];
        u(a) && p(a, function(a) {
            b.push(ig(a));
        });
        return b;
    }
    function wf() {
        this.SCE_CONTEXTS = ka;
        var a = [ "self" ], b = [];
        this.resourceUrlWhitelist = function(b) {
            arguments.length && (a = wd(b));
            return a;
        };
        this.resourceUrlBlacklist = function(a) {
            arguments.length && (b = wd(a));
            return b;
        };
        this.$get = [ "$injector", function(d) {
            function c(a, b) {
                return "self" === a ? gd(b) : !!a.exec(b.href);
            }
            function e(a) {
                var b = function(a) {
                    this.$$unwrapTrustedValue = function() {
                        return a;
                    };
                };
                a && (b.prototype = new a());
                b.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue();
                };
                b.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString();
                };
                return b;
            }
            var f = function(a) {
                throw za("unsafe");
            };
            d.has("$sanitize") && (f = d.get("$sanitize"));
            var g = e(), h = {};
            h[ka.HTML] = e(g);
            h[ka.CSS] = e(g);
            h[ka.URL] = e(g);
            h[ka.JS] = e(g);
            h[ka.RESOURCE_URL] = e(h[ka.URL]);
            return {
                trustAs: function(a, b) {
                    var c = h.hasOwnProperty(a) ? h[a] : null;
                    if (!c) throw za("icontext", a, b);
                    if (null === b || r(b) || "" === b) return b;
                    if ("string" != typeof b) throw za("itype", a);
                    return new c(b);
                },
                getTrusted: function(d, e) {
                    if (null === e || r(e) || "" === e) return e;
                    var g = h.hasOwnProperty(d) ? h[d] : null;
                    if (g && e instanceof g) return e.$$unwrapTrustedValue();
                    if (d === ka.RESOURCE_URL) {
                        var n, p, g = xa(e.toString()), z = !1;
                        n = 0;
                        for (p = a.length; n < p; n++) if (c(a[n], g)) {
                            z = !0;
                            break;
                        }
                        if (z) for (n = 0, p = b.length; n < p; n++) if (c(b[n], g)) {
                            z = !1;
                            break;
                        }
                        if (z) return e;
                        throw za("insecurl", e.toString());
                    }
                    if (d === ka.HTML) return f(e);
                    throw za("unsafe");
                },
                valueOf: function(a) {
                    return a instanceof g ? a.$$unwrapTrustedValue() : a;
                }
            };
        } ];
    }
    function vf() {
        var a = !0;
        this.enabled = function(b) {
            arguments.length && (a = !!b);
            return a;
        };
        this.$get = [ "$parse", "$sceDelegate", function(b, d) {
            if (a && 8 > Ha) throw za("iequirks");
            var c = fa(ka);
            c.isEnabled = function() {
                return a;
            };
            c.trustAs = d.trustAs;
            c.getTrusted = d.getTrusted;
            c.valueOf = d.valueOf;
            a || (c.trustAs = c.getTrusted = function(a, b) {
                return b;
            }, c.valueOf = Za);
            c.parseAs = function(a, d) {
                var e = b(d);
                return e.literal && e.constant ? e : b(d, function(b) {
                    return c.getTrusted(a, b);
                });
            };
            var e = c.parseAs, f = c.getTrusted, g = c.trustAs;
            p(ka, function(a, b) {
                var d = M(b);
                c[eb("parse_as_" + d)] = function(b) {
                    return e(a, b);
                };
                c[eb("get_trusted_" + d)] = function(b) {
                    return f(a, b);
                };
                c[eb("trust_as_" + d)] = function(b) {
                    return g(a, b);
                };
            });
            return c;
        } ];
    }
    function xf() {
        this.$get = [ "$window", "$document", function(a, b) {
            var g, d = {}, c = ca((/android (\d+)/.exec(M((a.navigator || {}).userAgent)) || [])[1]), e = /Boxee/i.test((a.navigator || {}).userAgent), f = b[0] || {}, h = /^(Moz|webkit|ms)(?=[A-Z])/, k = f.body && f.body.style, m = !1, l = !1;
            if (k) {
                for (var n in k) if (m = h.exec(n)) {
                    g = m[0];
                    g = g.substr(0, 1).toUpperCase() + g.substr(1);
                    break;
                }
                g || (g = "WebkitOpacity" in k && "webkit");
                m = !!("transition" in k || g + "Transition" in k);
                l = !!("animation" in k || g + "Animation" in k);
                !c || m && l || (m = H(k.webkitTransition), l = H(k.webkitAnimation));
            }
            return {
                history: !(!a.history || !a.history.pushState || 4 > c || e),
                hasEvent: function(a) {
                    if ("input" === a && 11 >= Ha) return !1;
                    if (r(d[a])) {
                        var b = f.createElement("div");
                        d[a] = "on" + a in b;
                    }
                    return d[a];
                },
                csp: Ca(),
                vendorPrefix: g,
                transitions: m,
                animations: l,
                android: c
            };
        } ];
    }
    function zf() {
        this.$get = [ "$templateCache", "$http", "$q", "$sce", function(a, b, d, c) {
            function e(f, g) {
                e.totalPendingRequests++;
                H(f) && !r(a.get(f)) || (f = c.getTrustedResourceUrl(f));
                var h = b.defaults && b.defaults.transformResponse;
                L(h) ? h = h.filter(function(a) {
                    return a !== $b;
                }) : h === $b && (h = null);
                return b.get(f, {
                    cache: a,
                    transformResponse: h
                }).finally(function() {
                    e.totalPendingRequests--;
                }).then(function(b) {
                    a.put(f, b.data);
                    return b.data;
                }, function(a) {
                    if (!g) throw ga("tpload", f, a.status, a.statusText);
                    return d.reject(a);
                });
            }
            e.totalPendingRequests = 0;
            return e;
        } ];
    }
    function Af() {
        this.$get = [ "$rootScope", "$browser", "$location", function(a, b, d) {
            return {
                findBindings: function(a, b, d) {
                    a = a.getElementsByClassName("ng-binding");
                    var g = [];
                    p(a, function(a) {
                        var c = da.element(a).data("$binding");
                        c && p(c, function(c) {
                            d ? new RegExp("(^|\\s)" + vd(b) + "(\\s|\\||$)").test(c) && g.push(a) : -1 != c.indexOf(b) && g.push(a);
                        });
                    });
                    return g;
                },
                findModels: function(a, b, d) {
                    for (var g = [ "ng-", "data-ng-", "ng\\:" ], h = 0; h < g.length; ++h) {
                        var k = a.querySelectorAll("[" + g[h] + "model" + (d ? "=" : "*=") + '"' + b + '"]');
                        if (k.length) return k;
                    }
                },
                getLocation: function() {
                    return d.url();
                },
                setLocation: function(b) {
                    b !== d.url() && (d.url(b), a.$digest());
                },
                whenStable: function(a) {
                    b.notifyWhenNoOutstandingRequests(a);
                }
            };
        } ];
    }
    function Bf() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function(a, b, d, c, e) {
            function f(f, k, m) {
                G(f) || (m = k, k = f, f = v);
                var t, l = ta.call(arguments, 3), n = u(m) && !m, p = (n ? c : d).defer(), z = p.promise;
                t = b.defer(function() {
                    try {
                        p.resolve(f.apply(null, l));
                    } catch (b) {
                        p.reject(b), e(b);
                    } finally {
                        delete g[z.$$timeoutId];
                    }
                    n || a.$apply();
                }, k);
                z.$$timeoutId = t;
                g[t] = p;
                return z;
            }
            var g = {};
            f.cancel = function(a) {
                return !!(a && a.$$timeoutId in g) && (g[a.$$timeoutId].reject("canceled"), delete g[a.$$timeoutId], 
                b.defer.cancel(a.$$timeoutId));
            };
            return f;
        } ];
    }
    function xa(a) {
        Ha && (Y.setAttribute("href", a), a = Y.href);
        Y.setAttribute("href", a);
        return {
            href: Y.href,
            protocol: Y.protocol ? Y.protocol.replace(/:$/, "") : "",
            host: Y.host,
            search: Y.search ? Y.search.replace(/^\?/, "") : "",
            hash: Y.hash ? Y.hash.replace(/^#/, "") : "",
            hostname: Y.hostname,
            port: Y.port,
            pathname: "/" === Y.pathname.charAt(0) ? Y.pathname : "/" + Y.pathname
        };
    }
    function gd(a) {
        a = H(a) ? xa(a) : a;
        return a.protocol === xd.protocol && a.host === xd.host;
    }
    function Cf() {
        this.$get = ma(R);
    }
    function yd(a) {
        function b(a) {
            try {
                return decodeURIComponent(a);
            } catch (b) {
                return a;
            }
        }
        var d = a[0] || {}, c = {}, e = "";
        return function() {
            var a, g, h, k, m;
            a = d.cookie || "";
            if (a !== e) for (e = a, a = e.split("; "), c = {}, h = 0; h < a.length; h++) g = a[h], 
            0 < (k = g.indexOf("=")) && (m = b(g.substring(0, k)), r(c[m]) && (c[m] = b(g.substring(k + 1))));
            return c;
        };
    }
    function Gf() {
        this.$get = yd;
    }
    function Jc(a) {
        function b(d, c) {
            if (K(d)) {
                var e = {};
                p(d, function(a, c) {
                    e[c] = b(c, a);
                });
                return e;
            }
            return a.factory(d + "Filter", c);
        }
        this.register = b;
        this.$get = [ "$injector", function(a) {
            return function(b) {
                return a.get(b + "Filter");
            };
        } ];
        b("currency", zd);
        b("date", Ad);
        b("filter", jg);
        b("json", kg);
        b("limitTo", lg);
        b("lowercase", mg);
        b("number", Bd);
        b("orderBy", Cd);
        b("uppercase", ng);
    }
    function jg() {
        return function(a, b, d) {
            if (!Aa(a)) {
                if (null == a) return a;
                throw B("filter")("notarray", a);
            }
            var c;
            switch (hc(b)) {
              case "function":
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                c = !0;

              case "object":
                b = og(b, d, c);
                break;

              default:
                return a;
            }
            return Array.prototype.filter.call(a, b);
        };
    }
    function og(a, b, d) {
        var c = K(a) && "$" in a;
        !0 === b ? b = la : G(b) || (b = function(a, b) {
            if (r(a)) return !1;
            if (null === a || null === b) return a === b;
            if (K(b) || K(a) && !qc(a)) return !1;
            a = M("" + a);
            b = M("" + b);
            return -1 !== a.indexOf(b);
        });
        return function(e) {
            return c && !K(e) ? Ja(e, a.$, b, !1) : Ja(e, a, b, d);
        };
    }
    function Ja(a, b, d, c, e) {
        var f = hc(a), g = hc(b);
        if ("string" === g && "!" === b.charAt(0)) return !Ja(a, b.substring(1), d, c);
        if (L(a)) return a.some(function(a) {
            return Ja(a, b, d, c);
        });
        switch (f) {
          case "object":
            var h;
            if (c) {
                for (h in a) if ("$" !== h.charAt(0) && Ja(a[h], b, d, !0)) return !0;
                return !e && Ja(a, b, d, !1);
            }
            if ("object" === g) {
                for (h in b) if (e = b[h], !G(e) && !r(e) && (f = "$" === h, !Ja(f ? a : a[h], e, d, f, f))) return !1;
                return !0;
            }
            return d(a, b);

          case "function":
            return !1;

          default:
            return d(a, b);
        }
    }
    function hc(a) {
        return null === a ? "null" : typeof a;
    }
    function zd(a) {
        var b = a.NUMBER_FORMATS;
        return function(a, c, e) {
            r(c) && (c = b.CURRENCY_SYM);
            r(e) && (e = b.PATTERNS[1].maxFrac);
            return null == a ? a : Dd(a, b.PATTERNS[1], b.GROUP_SEP, b.DECIMAL_SEP, e).replace(/\u00A4/g, c);
        };
    }
    function Bd(a) {
        var b = a.NUMBER_FORMATS;
        return function(a, c) {
            return null == a ? a : Dd(a, b.PATTERNS[0], b.GROUP_SEP, b.DECIMAL_SEP, c);
        };
    }
    function pg(a) {
        var d, c, e, f, g, b = 0;
        -1 < (c = a.indexOf(Ed)) && (a = a.replace(Ed, ""));
        0 < (e = a.search(/e/i)) ? (0 > c && (c = e), c += +a.slice(e + 1), a = a.substring(0, e)) : 0 > c && (c = a.length);
        for (e = 0; a.charAt(e) == ic; e++) ;
        if (e == (g = a.length)) d = [ 0 ], c = 1; else {
            for (g--; a.charAt(g) == ic; ) g--;
            c -= e;
            d = [];
            for (f = 0; e <= g; e++, f++) d[f] = +a.charAt(e);
        }
        c > Fd && (d = d.splice(0, Fd - 1), b = c - 1, c = 1);
        return {
            d: d,
            e: b,
            i: c
        };
    }
    function qg(a, b, d, c) {
        var e = a.d, f = e.length - a.i;
        b = r(b) ? Math.min(Math.max(d, f), c) : +b;
        d = b + a.i;
        c = e[d];
        if (0 < d) e.splice(d); else {
            a.i = 1;
            e.length = d = b + 1;
            for (var g = 0; g < d; g++) e[g] = 0;
        }
        for (5 <= c && e[d - 1]++; f < b; f++) e.push(0);
        (b = e.reduceRight(function(a, b, c, d) {
            b += a;
            d[c] = b % 10;
            return Math.floor(b / 10);
        }, 0)) && (e.unshift(b), a.i++);
    }
    function Dd(a, b, d, c, e) {
        if (!H(a) && !P(a) || isNaN(a)) return "";
        var f = !isFinite(a), g = !1, h = Math.abs(a) + "", k = "";
        if (f) k = "∞"; else {
            g = pg(h);
            qg(g, e, b.minFrac, b.maxFrac);
            k = g.d;
            h = g.i;
            e = g.e;
            f = [];
            for (g = k.reduce(function(a, b) {
                return a && !b;
            }, !0); 0 > h; ) k.unshift(0), h++;
            0 < h ? f = k.splice(h, k.length) : (f = k, k = [ 0 ]);
            h = [];
            for (k.length >= b.lgSize && h.unshift(k.splice(-b.lgSize, k.length).join("")); k.length > b.gSize; ) h.unshift(k.splice(-b.gSize, k.length).join(""));
            k.length && h.unshift(k.join(""));
            k = h.join(d);
            f.length && (k += c + f.join(""));
            e && (k += "e+" + e);
        }
        return 0 > a && !g ? b.negPre + k + b.negSuf : b.posPre + k + b.posSuf;
    }
    function Gb(a, b, d) {
        var c = "";
        0 > a && (c = "-", a = -a);
        for (a = "" + a; a.length < b; ) a = ic + a;
        d && (a = a.substr(a.length - b));
        return c + a;
    }
    function ba(a, b, d, c) {
        d = d || 0;
        return function(e) {
            e = e["get" + a]();
            (0 < d || e > -d) && (e += d);
            0 === e && -12 == d && (e = 12);
            return Gb(e, b, c);
        };
    }
    function Hb(a, b) {
        return function(d, c) {
            var e = d["get" + a]();
            return c[rb(b ? "SHORT" + a : a)][e];
        };
    }
    function Gd(a) {
        var b = new Date(a, 0, 1).getDay();
        return new Date(a, 0, (4 >= b ? 5 : 12) - b);
    }
    function Hd(a) {
        return function(b) {
            var d = Gd(b.getFullYear());
            b = +new Date(b.getFullYear(), b.getMonth(), b.getDate() + (4 - b.getDay())) - +d;
            b = 1 + Math.round(b / 6048e5);
            return Gb(b, a);
        };
    }
    function jc(a, b) {
        return 0 >= a.getFullYear() ? b.ERAS[0] : b.ERAS[1];
    }
    function Ad(a) {
        function b(a) {
            var b;
            if (b = a.match(d)) {
                a = new Date(0);
                var f = 0, g = 0, h = b[8] ? a.setUTCFullYear : a.setFullYear, k = b[8] ? a.setUTCHours : a.setHours;
                b[9] && (f = ca(b[9] + b[10]), g = ca(b[9] + b[11]));
                h.call(a, ca(b[1]), ca(b[2]) - 1, ca(b[3]));
                f = ca(b[4] || 0) - f;
                g = ca(b[5] || 0) - g;
                h = ca(b[6] || 0);
                b = Math.round(1e3 * parseFloat("0." + (b[7] || 0)));
                k.call(a, f, g, h, b);
            }
            return a;
        }
        var d = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(c, d, f) {
            var k, m, g = "", h = [];
            d = d || "mediumDate";
            d = a.DATETIME_FORMATS[d] || d;
            H(c) && (c = rg.test(c) ? ca(c) : b(c));
            P(c) && (c = new Date(c));
            if (!ea(c) || !isFinite(c.getTime())) return c;
            for (;d; ) (m = sg.exec(d)) ? (h = bb(h, m, 1), d = h.pop()) : (h.push(d), d = null);
            var l = c.getTimezoneOffset();
            f && (l = vc(f, l), c = Pb(c, f, !0));
            p(h, function(b) {
                k = tg[b];
                g += k ? k(c, a.DATETIME_FORMATS, l) : "''" === b ? "'" : b.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            });
            return g;
        };
    }
    function kg() {
        return function(a, b) {
            r(b) && (b = 2);
            return cb(a, b);
        };
    }
    function lg() {
        return function(a, b, d) {
            b = 1 / 0 === Math.abs(Number(b)) ? Number(b) : ca(b);
            if (isNaN(b)) return a;
            P(a) && (a = a.toString());
            if (!L(a) && !H(a)) return a;
            d = !d || isNaN(d) ? 0 : ca(d);
            d = 0 > d ? Math.max(0, a.length + d) : d;
            return 0 <= b ? a.slice(d, d + b) : 0 === d ? a.slice(b, a.length) : a.slice(Math.max(0, d + b), d);
        };
    }
    function Cd(a) {
        function b(b, d) {
            d = d ? -1 : 1;
            return b.map(function(b) {
                var c = 1, h = Za;
                if (G(b)) h = b; else if (H(b)) {
                    "+" != b.charAt(0) && "-" != b.charAt(0) || (c = "-" == b.charAt(0) ? -1 : 1, b = b.substring(1));
                    if ("" !== b && (h = a(b), h.constant)) var k = h(), h = function(a) {
                        return a[k];
                    };
                }
                return {
                    get: h,
                    descending: c * d
                };
            });
        }
        function d(a) {
            switch (typeof a) {
              case "number":
              case "boolean":
              case "string":
                return !0;

              default:
                return !1;
            }
        }
        return function(a, e, f) {
            if (!Aa(a)) return a;
            L(e) || (e = [ e ]);
            0 === e.length && (e = [ "+" ]);
            var g = b(e, f);
            g.push({
                get: function() {
                    return {};
                },
                descending: f ? -1 : 1
            });
            a = Array.prototype.map.call(a, function(a, b) {
                return {
                    value: a,
                    predicateValues: g.map(function(c) {
                        var e = c.get(a);
                        c = typeof e;
                        null === e ? (c = "string", e = "null") : "string" === c ? e = e.toLowerCase() : "object" === c && ("function" == typeof e.valueOf && (e = e.valueOf(), 
                        d(e)) || qc(e) && (e = e.toString(), d(e)) || (e = b));
                        return {
                            value: e,
                            type: c
                        };
                    })
                };
            });
            a.sort(function(a, b) {
                for (var c = 0, d = 0, e = g.length; d < e; ++d) {
                    var c = a.predicateValues[d], f = b.predicateValues[d], p = 0;
                    c.type === f.type ? c.value !== f.value && (p = c.value < f.value ? -1 : 1) : p = c.type < f.type ? -1 : 1;
                    if (c = p * g[d].descending) break;
                }
                return c;
            });
            return a = a.map(function(a) {
                return a.value;
            });
        };
    }
    function Ka(a) {
        G(a) && (a = {
            link: a
        });
        a.restrict = a.restrict || "AC";
        return ma(a);
    }
    function Id(a, b, d, c, e) {
        var f = this, g = [];
        f.$error = {};
        f.$$success = {};
        f.$pending = x;
        f.$name = e(b.name || b.ngForm || "")(d);
        f.$dirty = !1;
        f.$pristine = !0;
        f.$valid = !0;
        f.$invalid = !1;
        f.$submitted = !1;
        f.$$parentForm = Ib;
        f.$rollbackViewValue = function() {
            p(g, function(a) {
                a.$rollbackViewValue();
            });
        };
        f.$commitViewValue = function() {
            p(g, function(a) {
                a.$commitViewValue();
            });
        };
        f.$addControl = function(a) {
            Sa(a.$name, "input");
            g.push(a);
            a.$name && (f[a.$name] = a);
            a.$$parentForm = f;
        };
        f.$$renameControl = function(a, b) {
            var c = a.$name;
            f[c] === a && delete f[c];
            f[b] = a;
            a.$name = b;
        };
        f.$removeControl = function(a) {
            a.$name && f[a.$name] === a && delete f[a.$name];
            p(f.$pending, function(b, c) {
                f.$setValidity(c, null, a);
            });
            p(f.$error, function(b, c) {
                f.$setValidity(c, null, a);
            });
            p(f.$$success, function(b, c) {
                f.$setValidity(c, null, a);
            });
            ab(g, a);
            a.$$parentForm = Ib;
        };
        Jd({
            ctrl: this,
            $element: a,
            set: function(a, b, c) {
                var d = a[b];
                d ? -1 === d.indexOf(c) && d.push(c) : a[b] = [ c ];
            },
            unset: function(a, b, c) {
                var d = a[b];
                d && (ab(d, c), 0 === d.length && delete a[b]);
            },
            $animate: c
        });
        f.$setDirty = function() {
            c.removeClass(a, Xa);
            c.addClass(a, Jb);
            f.$dirty = !0;
            f.$pristine = !1;
            f.$$parentForm.$setDirty();
        };
        f.$setPristine = function() {
            c.setClass(a, Xa, Jb + " ng-submitted");
            f.$dirty = !1;
            f.$pristine = !0;
            f.$submitted = !1;
            p(g, function(a) {
                a.$setPristine();
            });
        };
        f.$setUntouched = function() {
            p(g, function(a) {
                a.$setUntouched();
            });
        };
        f.$setSubmitted = function() {
            c.addClass(a, "ng-submitted");
            f.$submitted = !0;
            f.$$parentForm.$setSubmitted();
        };
    }
    function kc(a) {
        a.$formatters.push(function(b) {
            return a.$isEmpty(b) ? b : b.toString();
        });
    }
    function ib(a, b, d, c, e, f) {
        var g = M(b[0].type);
        if (!e.android) {
            var h = !1;
            b.on("compositionstart", function(a) {
                h = !0;
            });
            b.on("compositionend", function() {
                h = !1;
                m();
            });
        }
        var k, m = function(a) {
            k && (f.defer.cancel(k), k = null);
            if (!h) {
                var e = b.val();
                a = a && a.type;
                "password" === g || d.ngTrim && "false" === d.ngTrim || (e = T(e));
                (c.$viewValue !== e || "" === e && c.$$hasNativeValidators) && c.$setViewValue(e, a);
            }
        };
        if (e.hasEvent("input")) b.on("input", m); else {
            var l = function(a, b, c) {
                k || (k = f.defer(function() {
                    k = null;
                    b && b.value === c || m(a);
                }));
            };
            b.on("keydown", function(a) {
                var b = a.keyCode;
                91 === b || 15 < b && 19 > b || 37 <= b && 40 >= b || l(a, this, this.value);
            });
            e.hasEvent("paste") && b.on("paste cut", l);
        }
        b.on("change", m);
        Kd[g] && c.$$hasNativeValidators && g === d.type && b.on("keydown wheel mousedown", function(a) {
            if (!k) {
                var b = this.validity, c = b.badInput, d = b.typeMismatch;
                k = f.defer(function() {
                    k = null;
                    b.badInput === c && b.typeMismatch === d || m(a);
                });
            }
        });
        c.$render = function() {
            var a = c.$isEmpty(c.$viewValue) ? "" : c.$viewValue;
            b.val() !== a && b.val(a);
        };
    }
    function Kb(a, b) {
        return function(d, c) {
            var e, f;
            if (ea(d)) return d;
            if (H(d)) {
                '"' == d.charAt(0) && '"' == d.charAt(d.length - 1) && (d = d.substring(1, d.length - 1));
                if (ug.test(d)) return new Date(d);
                a.lastIndex = 0;
                if (e = a.exec(d)) return e.shift(), f = c ? {
                    yyyy: c.getFullYear(),
                    MM: c.getMonth() + 1,
                    dd: c.getDate(),
                    HH: c.getHours(),
                    mm: c.getMinutes(),
                    ss: c.getSeconds(),
                    sss: c.getMilliseconds() / 1e3
                } : {
                    yyyy: 1970,
                    MM: 1,
                    dd: 1,
                    HH: 0,
                    mm: 0,
                    ss: 0,
                    sss: 0
                }, p(e, function(a, c) {
                    c < b.length && (f[b[c]] = +a);
                }), new Date(f.yyyy, f.MM - 1, f.dd, f.HH, f.mm, f.ss || 0, 1e3 * f.sss || 0);
            }
            return NaN;
        };
    }
    function jb(a, b, d, c) {
        return function(e, f, g, h, k, m, l) {
            function n(a) {
                return a && !(a.getTime && a.getTime() !== a.getTime());
            }
            function p(a) {
                return u(a) && !ea(a) ? d(a) || x : a;
            }
            Ld(e, f, g, h);
            ib(e, f, g, h, k, m);
            var t, z = h && h.$options && h.$options.timezone;
            h.$$parserName = a;
            h.$parsers.push(function(a) {
                return h.$isEmpty(a) ? null : b.test(a) ? (a = d(a, t), z && (a = Pb(a, z)), a) : x;
            });
            h.$formatters.push(function(a) {
                if (a && !ea(a)) throw kb("datefmt", a);
                if (n(a)) return (t = a) && z && (t = Pb(t, z, !0)), l("date")(a, c, z);
                t = null;
                return "";
            });
            if (u(g.min) || g.ngMin) {
                var A;
                h.$validators.min = function(a) {
                    return !n(a) || r(A) || d(a) >= A;
                };
                g.$observe("min", function(a) {
                    A = p(a);
                    h.$validate();
                });
            }
            if (u(g.max) || g.ngMax) {
                var q;
                h.$validators.max = function(a) {
                    return !n(a) || r(q) || d(a) <= q;
                };
                g.$observe("max", function(a) {
                    q = p(a);
                    h.$validate();
                });
            }
        };
    }
    function Ld(a, b, d, c) {
        (c.$$hasNativeValidators = K(b[0].validity)) && c.$parsers.push(function(a) {
            var c = b.prop("validity") || {};
            return c.badInput && !c.typeMismatch ? x : a;
        });
    }
    function Md(a, b, d, c, e) {
        if (u(c)) {
            a = a(c);
            if (!a.constant) throw kb("constexpr", d, c);
            return a(b);
        }
        return e;
    }
    function lc(a, b) {
        a = "ngClass" + a;
        return [ "$animate", function(d) {
            function c(a, b) {
                var c = [], d = 0;
                a: for (;d < a.length; d++) {
                    for (var e = a[d], l = 0; l < b.length; l++) if (e == b[l]) continue a;
                    c.push(e);
                }
                return c;
            }
            function e(a) {
                var b = [];
                return L(a) ? (p(a, function(a) {
                    b = b.concat(e(a));
                }), b) : H(a) ? a.split(" ") : K(a) ? (p(a, function(a, c) {
                    a && (b = b.concat(c.split(" ")));
                }), b) : a;
            }
            return {
                restrict: "AC",
                link: function(f, g, h) {
                    function k(a) {
                        a = m(a, 1);
                        h.$addClass(a);
                    }
                    function m(a, b) {
                        var c = g.data("$classCounts") || Z(), d = [];
                        p(a, function(a) {
                            (0 < b || c[a]) && (c[a] = (c[a] || 0) + b, c[a] === +(0 < b) && d.push(a));
                        });
                        g.data("$classCounts", c);
                        return d.join(" ");
                    }
                    function l(a, b) {
                        var e = c(b, a), f = c(a, b), e = m(e, 1), f = m(f, -1);
                        e && e.length && d.addClass(g, e);
                        f && f.length && d.removeClass(g, f);
                    }
                    function n(a) {
                        if (!0 === b || f.$index % 2 === b) {
                            var c = e(a || []);
                            if (r) {
                                if (!la(a, r)) {
                                    var d = e(r);
                                    l(d, c);
                                }
                            } else k(c);
                        }
                        r = L(a) ? a.map(function(a) {
                            return fa(a);
                        }) : fa(a);
                    }
                    var r;
                    f.$watch(h[a], n, !0);
                    h.$observe("class", function(b) {
                        n(f.$eval(h[a]));
                    });
                    "ngClass" !== a && f.$watch("$index", function(c, d) {
                        var g = 1 & c;
                        if (g !== (1 & d)) {
                            var l = e(f.$eval(h[a]));
                            g === b ? k(l) : (g = m(l, -1), h.$removeClass(g));
                        }
                    });
                }
            };
        } ];
    }
    function Jd(a) {
        function b(a, b) {
            b && !f[a] ? (k.addClass(e, a), f[a] = !0) : !b && f[a] && (k.removeClass(e, a), 
            f[a] = !1);
        }
        function d(a, c) {
            a = a ? "-" + zc(a, "-") : "";
            b(lb + a, !0 === c);
            b(Nd + a, !1 === c);
        }
        var c = a.ctrl, e = a.$element, f = {}, g = a.set, h = a.unset, k = a.$animate;
        f[Nd] = !(f[lb] = e.hasClass(lb));
        c.$setValidity = function(a, e, f) {
            r(e) ? (c.$pending || (c.$pending = {}), g(c.$pending, a, f)) : (c.$pending && h(c.$pending, a, f), 
            Od(c.$pending) && (c.$pending = x));
            Ma(e) ? e ? (h(c.$error, a, f), g(c.$$success, a, f)) : (g(c.$error, a, f), h(c.$$success, a, f)) : (h(c.$error, a, f), 
            h(c.$$success, a, f));
            c.$pending ? (b(Pd, !0), c.$valid = c.$invalid = x, d("", null)) : (b(Pd, !1), c.$valid = Od(c.$error), 
            c.$invalid = !c.$valid, d("", c.$valid));
            e = c.$pending && c.$pending[a] ? x : !c.$error[a] && (!!c.$$success[a] || null);
            d(a, e);
            c.$$parentForm.$setValidity(a, e, c);
        };
    }
    function Od(a) {
        if (a) for (var b in a) if (a.hasOwnProperty(b)) return !1;
        return !0;
    }
    var Ha, D, pa, Sb, vg = /^\/(.+)\/([a-z]*)$/, M = function(a) {
        return H(a) ? a.toLowerCase() : a;
    }, sa = Object.prototype.hasOwnProperty, rb = function(a) {
        return H(a) ? a.toUpperCase() : a;
    }, ta = [].slice, Xf = [].splice, wg = [].push, na = Object.prototype.toString, rc = Object.getPrototypeOf, Ba = B("ng"), da = R.angular || (R.angular = {}), mb = 0;
    Ha = U.documentMode;
    v.$inject = [];
    Za.$inject = [];
    var Rb, L = Array.isArray, Zd = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/, T = function(a) {
        return H(a) ? a.trim() : a;
    }, vd = function(a) {
        return a.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    }, Ca = function() {
        if (!u(Ca.rules)) {
            var a = U.querySelector("[ng-csp]") || U.querySelector("[data-ng-csp]");
            if (a) {
                var b = a.getAttribute("ng-csp") || a.getAttribute("data-ng-csp");
                Ca.rules = {
                    noUnsafeEval: !b || -1 !== b.indexOf("no-unsafe-eval"),
                    noInlineStyle: !b || -1 !== b.indexOf("no-inline-style")
                };
            } else {
                a = Ca;
                try {
                    new Function(""), b = !1;
                } catch (d) {
                    b = !0;
                }
                a.rules = {
                    noUnsafeEval: b,
                    noInlineStyle: !1
                };
            }
        }
        return Ca.rules;
    }, ob = function() {
        if (u(ob.name_)) return ob.name_;
        var a, b, c, e, d = Pa.length;
        for (b = 0; b < d; ++b) if (c = Pa[b], a = U.querySelector("[" + c.replace(":", "\\:") + "jq]")) {
            e = a.getAttribute(c + "jq");
            break;
        }
        return ob.name_ = e;
    }, be = /:/g, Pa = [ "ng-", "data-ng-", "ng:", "x-ng-" ], ge = /[A-Z]/g, Ac = !1, Oa = 3, ke = {
        full: "1.4.14",
        major: 1,
        minor: 4,
        dot: 14,
        codeName: "material-distinction"
    };
    S.expando = "ng339";
    var fb = S.cache = {}, Mf = 1;
    S._data = function(a) {
        return this.cache[a[this.expando]] || {};
    };
    var Hf = /([\:\-\_]+(.))/g, If = /^moz([A-Z])/, wb = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    }, Ub = B("jqLite"), Lf = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, Tb = /<|&#?\w+;/, Jf = /<([\w:-]+)/, Kf = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, ja = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    ja.optgroup = ja.option;
    ja.tbody = ja.tfoot = ja.colgroup = ja.caption = ja.thead;
    ja.th = ja.td;
    var Rf = Node.prototype.contains || function(a) {
        return !!(16 & this.compareDocumentPosition(a));
    }, Qa = S.prototype = {
        ready: function(a) {
            function b() {
                d || (d = !0, a());
            }
            var d = !1;
            "complete" === U.readyState ? setTimeout(b) : (this.on("DOMContentLoaded", b), S(R).on("load", b));
        },
        toString: function() {
            var a = [];
            p(this, function(b) {
                a.push("" + b);
            });
            return "[" + a.join(", ") + "]";
        },
        eq: function(a) {
            return D(0 <= a ? this[a] : this[this.length + a]);
        },
        length: 0,
        push: wg,
        sort: [].sort,
        splice: [].splice
    }, Bb = {};
    p("multiple selected checked disabled readOnly required open".split(" "), function(a) {
        Bb[M(a)] = a;
    });
    var Sc = {};
    p("input select option textarea button form details".split(" "), function(a) {
        Sc[a] = !0;
    });
    var ad = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern"
    };
    p({
        data: Wb,
        removeData: ub,
        hasData: function(a) {
            for (var b in fb[a.ng339]) return !0;
            return !1;
        }
    }, function(a, b) {
        S[b] = a;
    });
    p({
        data: Wb,
        inheritedData: Ab,
        scope: function(a) {
            return D.data(a, "$scope") || Ab(a.parentNode || a, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(a) {
            return D.data(a, "$isolateScope") || D.data(a, "$isolateScopeNoTemplate");
        },
        controller: Pc,
        injector: function(a) {
            return Ab(a, "$injector");
        },
        removeAttr: function(a, b) {
            a.removeAttribute(b);
        },
        hasClass: xb,
        css: function(a, b, d) {
            b = eb(b);
            if (!u(d)) return a.style[b];
            a.style[b] = d;
        },
        attr: function(a, b, d) {
            var c = a.nodeType;
            if (c !== Oa && 2 !== c && 8 !== c) if (c = M(b), Bb[c]) {
                if (!u(d)) return a[b] || (a.attributes.getNamedItem(b) || v).specified ? c : x;
                d ? (a[b] = !0, a.setAttribute(b, c)) : (a[b] = !1, a.removeAttribute(c));
            } else if (u(d)) a.setAttribute(b, d); else if (a.getAttribute) return a = a.getAttribute(b, 2), 
            null === a ? x : a;
        },
        prop: function(a, b, d) {
            if (!u(d)) return a[b];
            a[b] = d;
        },
        text: function() {
            function a(a, d) {
                if (r(d)) {
                    var c = a.nodeType;
                    return 1 === c || c === Oa ? a.textContent : "";
                }
                a.textContent = d;
            }
            a.$dv = "";
            return a;
        }(),
        val: function(a, b) {
            if (r(b)) {
                if (a.multiple && "select" === oa(a)) {
                    var d = [];
                    p(a.options, function(a) {
                        a.selected && d.push(a.value || a.text);
                    });
                    return 0 === d.length ? null : d;
                }
                return a.value;
            }
            a.value = b;
        },
        html: function(a, b) {
            if (r(b)) return a.innerHTML;
            tb(a, !0);
            a.innerHTML = b;
        },
        empty: Qc
    }, function(a, b) {
        S.prototype[b] = function(b, c) {
            var e, f, g = this.length;
            if (a !== Qc && r(2 == a.length && a !== xb && a !== Pc ? b : c)) {
                if (K(b)) {
                    for (e = 0; e < g; e++) if (a === Wb) a(this[e], b); else for (f in b) a(this[e], f, b[f]);
                    return this;
                }
                e = a.$dv;
                g = r(e) ? Math.min(g, 1) : g;
                for (f = 0; f < g; f++) {
                    var h = a(this[f], b, c);
                    e = e ? e + h : h;
                }
                return e;
            }
            for (e = 0; e < g; e++) a(this[e], b, c);
            return this;
        };
    });
    p({
        removeData: ub,
        on: function(a, b, d, c) {
            if (u(c)) throw Ub("onargs");
            if (Kc(a)) {
                c = vb(a, !0);
                var e = c.events, f = c.handle;
                f || (f = c.handle = Of(a, e));
                c = 0 <= b.indexOf(" ") ? b.split(" ") : [ b ];
                for (var g = c.length, h = function(b, c, g) {
                    var h = e[b];
                    h || (h = e[b] = [], h.specialHandlerWrapper = c, "$destroy" === b || g || a.addEventListener(b, f, !1));
                    h.push(d);
                }; g--; ) b = c[g], wb[b] ? (h(wb[b], Qf), h(b, x, !0)) : h(b);
            }
        },
        off: Oc,
        one: function(a, b, d) {
            a = D(a);
            a.on(b, function e() {
                a.off(b, d);
                a.off(b, e);
            });
            a.on(b, d);
        },
        replaceWith: function(a, b) {
            var d, c = a.parentNode;
            tb(a);
            p(new S(b), function(b) {
                d ? c.insertBefore(b, d.nextSibling) : c.replaceChild(b, a);
                d = b;
            });
        },
        children: function(a) {
            var b = [];
            p(a.childNodes, function(a) {
                1 === a.nodeType && b.push(a);
            });
            return b;
        },
        contents: function(a) {
            return a.contentDocument || a.childNodes || [];
        },
        append: function(a, b) {
            var d = a.nodeType;
            if (1 === d || 11 === d) {
                b = new S(b);
                for (var d = 0, c = b.length; d < c; d++) a.appendChild(b[d]);
            }
        },
        prepend: function(a, b) {
            if (1 === a.nodeType) {
                var d = a.firstChild;
                p(new S(b), function(b) {
                    a.insertBefore(b, d);
                });
            }
        },
        wrap: function(a, b) {
            Mc(a, D(b).eq(0).clone()[0]);
        },
        remove: Xb,
        detach: function(a) {
            Xb(a, !0);
        },
        after: function(a, b) {
            var d = a, c = a.parentNode;
            b = new S(b);
            for (var e = 0, f = b.length; e < f; e++) {
                var g = b[e];
                c.insertBefore(g, d.nextSibling);
                d = g;
            }
        },
        addClass: zb,
        removeClass: yb,
        toggleClass: function(a, b, d) {
            b && p(b.split(" "), function(b) {
                var e = d;
                r(e) && (e = !xb(a, b));
                (e ? zb : yb)(a, b);
            });
        },
        parent: function(a) {
            return (a = a.parentNode) && 11 !== a.nodeType ? a : null;
        },
        next: function(a) {
            return a.nextElementSibling;
        },
        find: function(a, b) {
            return a.getElementsByTagName ? a.getElementsByTagName(b) : [];
        },
        clone: Vb,
        triggerHandler: function(a, b, d) {
            var c, e, f = b.type || b, g = vb(a);
            (g = (g = g && g.events) && g[f]) && (c = {
                preventDefault: function() {
                    this.defaultPrevented = !0;
                },
                isDefaultPrevented: function() {
                    return !0 === this.defaultPrevented;
                },
                stopImmediatePropagation: function() {
                    this.immediatePropagationStopped = !0;
                },
                isImmediatePropagationStopped: function() {
                    return !0 === this.immediatePropagationStopped;
                },
                stopPropagation: v,
                type: f,
                target: a
            }, b.type && (c = N(c, b)), b = fa(g), e = d ? [ c ].concat(d) : [ c ], p(b, function(b) {
                c.isImmediatePropagationStopped() || b.apply(a, e);
            }));
        }
    }, function(a, b) {
        S.prototype[b] = function(b, c, e) {
            for (var f, g = 0, h = this.length; g < h; g++) r(f) ? (f = a(this[g], b, c, e), 
            u(f) && (f = D(f))) : Nc(f, a(this[g], b, c, e));
            return u(f) ? f : this;
        };
        S.prototype.bind = S.prototype.on;
        S.prototype.unbind = S.prototype.off;
    });
    Ta.prototype = {
        put: function(a, b) {
            this[Da(a, this.nextUid)] = b;
        },
        get: function(a) {
            return this[Da(a, this.nextUid)];
        },
        remove: function(a) {
            var b = this[a = Da(a, this.nextUid)];
            delete this[a];
            return b;
        }
    };
    var Ff = [ function() {
        this.$get = [ function() {
            return Ta;
        } ];
    } ], Uc = /^[^\(]*\(\s*([^\)]*)\)/m, xg = /,/, yg = /^\s*(_?)(\S+?)\1\s*$/, Tc = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, Ea = B("$injector");
    db.$$annotate = function(a, b, d) {
        var c;
        if ("function" == typeof a) {
            if (!(c = a.$inject)) {
                c = [];
                if (a.length) {
                    if (b) throw H(d) && d || (d = a.name || Sf(a)), Ea("strictdi", d);
                    b = a.toString().replace(Tc, "");
                    b = b.match(Uc);
                    p(b[1].split(xg), function(a) {
                        a.replace(yg, function(a, b, d) {
                            c.push(d);
                        });
                    });
                }
                a.$inject = c;
            }
        } else L(a) ? (b = a.length - 1, Ra(a[b], "fn"), c = a.slice(0, b)) : Ra(a, "fn", !0);
        return c;
    };
    var Qd = B("$animate"), Ye = function() {
        this.$get = function() {};
    }, Ze = function() {
        var a = new Ta(), b = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function(d, c) {
            function e(a, b, c) {
                var d = !1;
                b && (b = H(b) ? b.split(" ") : L(b) ? b : [], p(b, function(b) {
                    b && (d = !0, a[b] = c);
                }));
                return d;
            }
            function f() {
                p(b, function(b) {
                    var c = a.get(b);
                    if (c) {
                        var d = Tf(b.attr("class")), e = "", f = "";
                        p(c, function(a, b) {
                            a !== !!d[b] && (a ? e += (e.length ? " " : "") + b : f += (f.length ? " " : "") + b);
                        });
                        p(b, function(a) {
                            e && zb(a, e);
                            f && yb(a, f);
                        });
                        a.remove(b);
                    }
                });
                b.length = 0;
            }
            return {
                enabled: v,
                on: v,
                off: v,
                pin: v,
                push: function(g, h, k, m) {
                    m && m();
                    k = k || {};
                    k.from && g.css(k.from);
                    k.to && g.css(k.to);
                    (k.addClass || k.removeClass) && (h = k.addClass, m = k.removeClass, k = a.get(g) || {}, 
                    h = e(k, h, !0), m = e(k, m, !1), h || m) && (a.put(g, k), b.push(g), 1 === b.length && c.$$postDigest(f));
                    g = new d();
                    g.complete();
                    return g;
                }
            };
        } ];
    }, We = [ "$provide", function(a) {
        var b = this;
        this.$$registeredAnimations = Object.create(null);
        this.register = function(d, c) {
            if (d && "." !== d.charAt(0)) throw Qd("notcsel", d);
            var e = d + "-animation";
            b.$$registeredAnimations[d.substr(1)] = e;
            a.factory(e, c);
        };
        this.classNameFilter = function(a) {
            if (1 === arguments.length && (this.$$classNameFilter = a instanceof RegExp ? a : null) && /(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString())) throw Qd("nongcls", "ng-animate");
            return this.$$classNameFilter;
        };
        this.$get = [ "$$animateQueue", function(a) {
            function b(a, c, d) {
                if (d) {
                    var h;
                    a: {
                        for (h = 0; h < d.length; h++) {
                            var k = d[h];
                            if (1 === k.nodeType) {
                                h = k;
                                break a;
                            }
                        }
                        h = void 0;
                    }
                    !h || h.parentNode || h.previousElementSibling || (d = null);
                }
                d ? d.after(a) : c.prepend(a);
            }
            return {
                on: a.on,
                off: a.off,
                pin: a.pin,
                enabled: a.enabled,
                cancel: function(a) {
                    a.end && a.end();
                },
                enter: function(e, f, g, h) {
                    f = f && D(f);
                    g = g && D(g);
                    f = f || g.parent();
                    b(e, f, g);
                    return a.push(e, "enter", Fa(h));
                },
                move: function(e, f, g, h) {
                    f = f && D(f);
                    g = g && D(g);
                    f = f || g.parent();
                    b(e, f, g);
                    return a.push(e, "move", Fa(h));
                },
                leave: function(b, c) {
                    return a.push(b, "leave", Fa(c), function() {
                        b.remove();
                    });
                },
                addClass: function(b, c, g) {
                    g = Fa(g);
                    g.addClass = gb(g.addclass, c);
                    return a.push(b, "addClass", g);
                },
                removeClass: function(b, c, g) {
                    g = Fa(g);
                    g.removeClass = gb(g.removeClass, c);
                    return a.push(b, "removeClass", g);
                },
                setClass: function(b, c, g, h) {
                    h = Fa(h);
                    h.addClass = gb(h.addClass, c);
                    h.removeClass = gb(h.removeClass, g);
                    return a.push(b, "setClass", h);
                },
                animate: function(b, c, g, h, k) {
                    k = Fa(k);
                    k.from = k.from ? N(k.from, c) : c;
                    k.to = k.to ? N(k.to, g) : g;
                    k.tempClasses = gb(k.tempClasses, h || "ng-inline-animate");
                    return a.push(b, "animate", k);
                }
            };
        } ];
    } ], af = function() {
        this.$get = [ "$$rAF", function(a) {
            function b(b) {
                d.push(b);
                1 < d.length || a(function() {
                    for (var a = 0; a < d.length; a++) d[a]();
                    d = [];
                });
            }
            var d = [];
            return function() {
                var a = !1;
                b(function() {
                    a = !0;
                });
                return function(d) {
                    a ? d() : b(d);
                };
            };
        } ];
    }, $e = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$document", "$timeout", function(a, b, d, c, e) {
            function f(a) {
                this.setHost(a);
                var b = d();
                this._doneCallbacks = [];
                this._tick = function(a) {
                    var d = c[0];
                    d && d.hidden ? e(a, 0, !1) : b(a);
                };
                this._state = 0;
            }
            f.chain = function(a, b) {
                function c() {
                    d === a.length ? b(!0) : a[d](function(a) {
                        !1 === a ? b(!1) : (d++, c());
                    });
                }
                var d = 0;
                c();
            };
            f.all = function(a, b) {
                function c(f) {
                    e = e && f;
                    ++d === a.length && b(e);
                }
                var d = 0, e = !0;
                p(a, function(a) {
                    a.done(c);
                });
            };
            f.prototype = {
                setHost: function(a) {
                    this.host = a || {};
                },
                done: function(a) {
                    2 === this._state ? a() : this._doneCallbacks.push(a);
                },
                progress: v,
                getPromise: function() {
                    if (!this.promise) {
                        var b = this;
                        this.promise = a(function(a, c) {
                            b.done(function(b) {
                                !1 === b ? c() : a();
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(a, b) {
                    return this.getPromise().then(a, b);
                },
                catch: function(a) {
                    return this.getPromise().catch(a);
                },
                finally: function(a) {
                    return this.getPromise().finally(a);
                },
                pause: function() {
                    this.host.pause && this.host.pause();
                },
                resume: function() {
                    this.host.resume && this.host.resume();
                },
                end: function() {
                    this.host.end && this.host.end();
                    this._resolve(!0);
                },
                cancel: function() {
                    this.host.cancel && this.host.cancel();
                    this._resolve(!1);
                },
                complete: function(a) {
                    var b = this;
                    0 === b._state && (b._state = 1, b._tick(function() {
                        b._resolve(a);
                    }));
                },
                _resolve: function(a) {
                    2 !== this._state && (p(this._doneCallbacks, function(b) {
                        b(a);
                    }), this._doneCallbacks.length = 0, this._state = 2);
                }
            };
            return f;
        } ];
    }, Xe = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function(a, b, d) {
            return function(b, e) {
                function f() {
                    a(function() {
                        g.addClass && (b.addClass(g.addClass), g.addClass = null);
                        g.removeClass && (b.removeClass(g.removeClass), g.removeClass = null);
                        g.to && (b.css(g.to), g.to = null);
                        h || k.complete();
                        h = !0;
                    });
                    return k;
                }
                var g = e || {};
                g.$$prepared || (g = Na(g));
                g.cleanupStyles && (g.from = g.to = null);
                g.from && (b.css(g.from), g.from = null);
                var h, k = new d();
                return {
                    start: f,
                    end: f
                };
            };
        } ];
    }, ga = B("$compile");
    Cc.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    var Wc = /^((?:x|data)[\:\-_])/i, Yf = B("$controller"), Zc = /^(\S+)(\s+as\s+([\w$]+))?$/, gf = function() {
        this.$get = [ "$document", function(a) {
            return function(b) {
                b ? !b.nodeType && b instanceof D && (b = b[0]) : b = a[0].body;
                return b.offsetWidth + 1;
            };
        } ];
    }, bd = "application/json", ac = {
        "Content-Type": bd + ";charset=utf-8"
    }, $f = /^\[|^\{(?!\{)/, ag = {
        "[": /]$/,
        "{": /}$/
    }, Zf = /^\)\]\}',?\n/, zg = B("$http"), fd = function(a) {
        return function() {
            throw zg("legacy", a);
        };
    }, Ia = da.$interpolateMinErr = B("$interpolate");
    Ia.throwNoconcat = function(a) {
        throw Ia("noconcat", a);
    };
    Ia.interr = function(a, b) {
        return Ia("interr", a, b.toString());
    };
    var Ag = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, cg = {
        http: 80,
        https: 443,
        ftp: 21
    }, Cb = B("$location"), Bg = {
        $$html5: !1,
        $$replace: !1,
        absUrl: Db("$$absUrl"),
        url: function(a) {
            if (r(a)) return this.$$url;
            var b = Ag.exec(a);
            (b[1] || "" === a) && this.path(decodeURIComponent(b[1]));
            (b[2] || b[1] || "" === a) && this.search(b[3] || "");
            this.hash(b[5] || "");
            return this;
        },
        protocol: Db("$$protocol"),
        host: Db("$$host"),
        port: Db("$$port"),
        path: kd("$$path", function(a) {
            a = null !== a ? a.toString() : "";
            return "/" == a.charAt(0) ? a : "/" + a;
        }),
        search: function(a, b) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (H(a) || P(a)) a = a.toString(), this.$$search = xc(a); else {
                    if (!K(a)) throw Cb("isrcharg");
                    a = Na(a, {}), p(a, function(b, c) {
                        null == b && delete a[c];
                    }), this.$$search = a;
                }
                break;

              default:
                r(b) || null === b ? delete this.$$search[a] : this.$$search[a] = b;
            }
            this.$$compose();
            return this;
        },
        hash: kd("$$hash", function(a) {
            return null !== a ? a.toString() : "";
        }),
        replace: function() {
            this.$$replace = !0;
            return this;
        }
    };
    p([ jd, dc, cc ], function(a) {
        a.prototype = Object.create(Bg);
        a.prototype.state = function(b) {
            if (!arguments.length) return this.$$state;
            if (a !== cc || !this.$$html5) throw Cb("nostate");
            this.$$state = r(b) ? null : b;
            return this;
        };
    });
    var aa = B("$parse"), dg = Function.prototype.call, eg = Function.prototype.apply, fg = Function.prototype.bind, Lb = Z();
    p("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(a) {
        Lb[a] = !0;
    });
    var Cg = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    }, fc = function(a) {
        this.options = a;
    };
    fc.prototype = {
        constructor: fc,
        lex: function(a) {
            this.text = a;
            this.index = 0;
            for (this.tokens = []; this.index < this.text.length; ) if ('"' === (a = this.text.charAt(this.index)) || "'" === a) this.readString(a); else if (this.isNumber(a) || "." === a && this.isNumber(this.peek())) this.readNumber(); else if (this.isIdent(a)) this.readIdent(); else if (this.is(a, "(){}[].,;:?")) this.tokens.push({
                index: this.index,
                text: a
            }), this.index++; else if (this.isWhitespace(a)) this.index++; else {
                var b = a + this.peek(), d = b + this.peek(2), c = Lb[b], e = Lb[d];
                Lb[a] || c || e ? (a = e ? d : c ? b : a, this.tokens.push({
                    index: this.index,
                    text: a,
                    operator: !0
                }), this.index += a.length) : this.throwError("Unexpected next character ", this.index, this.index + 1);
            }
            return this.tokens;
        },
        is: function(a, b) {
            return -1 !== b.indexOf(a);
        },
        peek: function(a) {
            a = a || 1;
            return this.index + a < this.text.length && this.text.charAt(this.index + a);
        },
        isNumber: function(a) {
            return "0" <= a && "9" >= a && "string" == typeof a;
        },
        isWhitespace: function(a) {
            return " " === a || "\r" === a || "\t" === a || "\n" === a || "\v" === a || " " === a;
        },
        isIdent: function(a) {
            return "a" <= a && "z" >= a || "A" <= a && "Z" >= a || "_" === a || "$" === a;
        },
        isExpOperator: function(a) {
            return "-" === a || "+" === a || this.isNumber(a);
        },
        throwError: function(a, b, d) {
            d = d || this.index;
            b = u(b) ? "s " + b + "-" + this.index + " [" + this.text.substring(b, d) + "]" : " " + d;
            throw aa("lexerr", a, b, this.text);
        },
        readNumber: function() {
            for (var a = "", b = this.index; this.index < this.text.length; ) {
                var d = M(this.text.charAt(this.index));
                if ("." == d || this.isNumber(d)) a += d; else {
                    var c = this.peek();
                    if ("e" == d && this.isExpOperator(c)) a += d; else if (this.isExpOperator(d) && c && this.isNumber(c) && "e" == a.charAt(a.length - 1)) a += d; else {
                        if (!this.isExpOperator(d) || c && this.isNumber(c) || "e" != a.charAt(a.length - 1)) break;
                        this.throwError("Invalid exponent");
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: b,
                text: a,
                constant: !0,
                value: Number(a)
            });
        },
        readIdent: function() {
            for (var a = this.index; this.index < this.text.length; ) {
                var b = this.text.charAt(this.index);
                if (!this.isIdent(b) && !this.isNumber(b)) break;
                this.index++;
            }
            this.tokens.push({
                index: a,
                text: this.text.slice(a, this.index),
                identifier: !0
            });
        },
        readString: function(a) {
            var b = this.index;
            this.index++;
            for (var d = "", c = a, e = !1; this.index < this.text.length; ) {
                var f = this.text.charAt(this.index), c = c + f;
                if (e) "u" === f ? (e = this.text.substring(this.index + 1, this.index + 5), e.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + e + "]"), 
                this.index += 4, d += String.fromCharCode(parseInt(e, 16))) : d += Cg[f] || f, e = !1; else if ("\\" === f) e = !0; else {
                    if (f === a) {
                        this.index++;
                        this.tokens.push({
                            index: b,
                            text: c,
                            constant: !0,
                            value: d
                        });
                        return;
                    }
                    d += f;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", b);
        }
    };
    var s = function(a, b) {
        this.lexer = a;
        this.options = b;
    };
    s.Program = "Program";
    s.ExpressionStatement = "ExpressionStatement";
    s.AssignmentExpression = "AssignmentExpression";
    s.ConditionalExpression = "ConditionalExpression";
    s.LogicalExpression = "LogicalExpression";
    s.BinaryExpression = "BinaryExpression";
    s.UnaryExpression = "UnaryExpression";
    s.CallExpression = "CallExpression";
    s.MemberExpression = "MemberExpression";
    s.Identifier = "Identifier";
    s.Literal = "Literal";
    s.ArrayExpression = "ArrayExpression";
    s.Property = "Property";
    s.ObjectExpression = "ObjectExpression";
    s.ThisExpression = "ThisExpression";
    s.NGValueParameter = "NGValueParameter";
    s.prototype = {
        ast: function(a) {
            this.text = a;
            this.tokens = this.lexer.lex(a);
            a = this.program();
            0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
            return a;
        },
        program: function() {
            for (var a = []; ;) if (0 < this.tokens.length && !this.peek("}", ")", ";", "]") && a.push(this.expressionStatement()), 
            !this.expect(";")) return {
                type: s.Program,
                body: a
            };
        },
        expressionStatement: function() {
            return {
                type: s.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            for (var a = this.expression(); this.expect("|"); ) a = this.filter(a);
            return a;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var a = this.ternary();
            this.expect("=") && (a = {
                type: s.AssignmentExpression,
                left: a,
                right: this.assignment(),
                operator: "="
            });
            return a;
        },
        ternary: function() {
            var b, d, a = this.logicalOR();
            return this.expect("?") && (b = this.expression(), this.consume(":")) ? (d = this.expression(), 
            {
                type: s.ConditionalExpression,
                test: a,
                alternate: b,
                consequent: d
            }) : a;
        },
        logicalOR: function() {
            for (var a = this.logicalAND(); this.expect("||"); ) a = {
                type: s.LogicalExpression,
                operator: "||",
                left: a,
                right: this.logicalAND()
            };
            return a;
        },
        logicalAND: function() {
            for (var a = this.equality(); this.expect("&&"); ) a = {
                type: s.LogicalExpression,
                operator: "&&",
                left: a,
                right: this.equality()
            };
            return a;
        },
        equality: function() {
            for (var b, a = this.relational(); b = this.expect("==", "!=", "===", "!=="); ) a = {
                type: s.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.relational()
            };
            return a;
        },
        relational: function() {
            for (var b, a = this.additive(); b = this.expect("<", ">", "<=", ">="); ) a = {
                type: s.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.additive()
            };
            return a;
        },
        additive: function() {
            for (var b, a = this.multiplicative(); b = this.expect("+", "-"); ) a = {
                type: s.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.multiplicative()
            };
            return a;
        },
        multiplicative: function() {
            for (var b, a = this.unary(); b = this.expect("*", "/", "%"); ) a = {
                type: s.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.unary()
            };
            return a;
        },
        unary: function() {
            var a;
            return (a = this.expect("+", "-", "!")) ? {
                type: s.UnaryExpression,
                operator: a.text,
                prefix: !0,
                argument: this.unary()
            } : this.primary();
        },
        primary: function() {
            var a;
            this.expect("(") ? (a = this.filterChain(), this.consume(")")) : this.expect("[") ? a = this.arrayDeclaration() : this.expect("{") ? a = this.object() : this.constants.hasOwnProperty(this.peek().text) ? a = Na(this.constants[this.consume().text]) : this.peek().identifier ? a = this.identifier() : this.peek().constant ? a = this.constant() : this.throwError("not a primary expression", this.peek());
            for (var b; b = this.expect("(", "[", "."); ) "(" === b.text ? (a = {
                type: s.CallExpression,
                callee: a,
                arguments: this.parseArguments()
            }, this.consume(")")) : "[" === b.text ? (a = {
                type: s.MemberExpression,
                object: a,
                property: this.expression(),
                computed: !0
            }, this.consume("]")) : "." === b.text ? a = {
                type: s.MemberExpression,
                object: a,
                property: this.identifier(),
                computed: !1
            } : this.throwError("IMPOSSIBLE");
            return a;
        },
        filter: function(a) {
            a = [ a ];
            for (var b = {
                type: s.CallExpression,
                callee: this.identifier(),
                arguments: a,
                filter: !0
            }; this.expect(":"); ) a.push(this.expression());
            return b;
        },
        parseArguments: function() {
            var a = [];
            if (")" !== this.peekToken().text) do {
                a.push(this.expression());
            } while (this.expect(","));
            return a;
        },
        identifier: function() {
            var a = this.consume();
            a.identifier || this.throwError("is not a valid identifier", a);
            return {
                type: s.Identifier,
                name: a.text
            };
        },
        constant: function() {
            return {
                type: s.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var a = [];
            if ("]" !== this.peekToken().text) do {
                if (this.peek("]")) break;
                a.push(this.expression());
            } while (this.expect(","));
            this.consume("]");
            return {
                type: s.ArrayExpression,
                elements: a
            };
        },
        object: function() {
            var b, a = [];
            if ("}" !== this.peekToken().text) do {
                if (this.peek("}")) break;
                b = {
                    type: s.Property,
                    kind: "init"
                };
                this.peek().constant ? b.key = this.constant() : this.peek().identifier ? b.key = this.identifier() : this.throwError("invalid key", this.peek());
                this.consume(":");
                b.value = this.expression();
                a.push(b);
            } while (this.expect(","));
            this.consume("}");
            return {
                type: s.ObjectExpression,
                properties: a
            };
        },
        throwError: function(a, b) {
            throw aa("syntax", b.text, a, b.index + 1, this.text, this.text.substring(b.index));
        },
        consume: function(a) {
            if (0 === this.tokens.length) throw aa("ueoe", this.text);
            var b = this.expect(a);
            b || this.throwError("is unexpected, expecting [" + a + "]", this.peek());
            return b;
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw aa("ueoe", this.text);
            return this.tokens[0];
        },
        peek: function(a, b, d, c) {
            return this.peekAhead(0, a, b, d, c);
        },
        peekAhead: function(a, b, d, c, e) {
            if (this.tokens.length > a) {
                a = this.tokens[a];
                var f = a.text;
                if (f === b || f === d || f === c || f === e || !(b || d || c || e)) return a;
            }
            return !1;
        },
        expect: function(a, b, d, c) {
            return !!(a = this.peek(a, b, d, c)) && (this.tokens.shift(), a);
        },
        constants: {
            true: {
                type: s.Literal,
                value: !0
            },
            false: {
                type: s.Literal,
                value: !1
            },
            null: {
                type: s.Literal,
                value: null
            },
            undefined: {
                type: s.Literal,
                value: x
            },
            this: {
                type: s.ThisExpression
            }
        }
    };
    sd.prototype = {
        compile: function(a, b) {
            var d = this, c = this.astBuilder.ast(a);
            this.state = {
                nextId: 0,
                filters: {},
                expensiveChecks: b,
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            X(c, d.$filter);
            var f, e = "";
            this.stage = "assign";
            (f = qd(c)) && (this.state.computing = "assign", e = this.nextId(), this.recurse(f, e), 
            this.return_(e), e = "fn.assign=" + this.generateFunction("assign", "s,v,l"));
            f = od(c.body);
            d.stage = "inputs";
            p(f, function(a, b) {
                var c = "fn" + b;
                d.state[c] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                d.state.computing = c;
                var e = d.nextId();
                d.recurse(a, e);
                d.return_(e);
                d.state.inputs.push(c);
                a.watchId = b;
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(c);
            e = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + e + this.watchFns() + "return fn;";
            e = new Function("$filter", "ensureSafeMemberName", "ensureSafeObject", "ensureSafeFunction", "getStringValue", "ensureSafeAssignContext", "ifDefined", "plus", "text", e)(this.$filter, Wa, ya, md, ld, Eb, gg, nd, a);
            this.state = this.stage = x;
            e.literal = rd(c);
            e.constant = c.constant;
            return e;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var a = [], b = this.state.inputs, d = this;
            p(b, function(b) {
                a.push("var " + b + "=" + d.generateFunction(b, "s"));
            });
            b.length && a.push("fn.inputs=[" + b.join(",") + "];");
            return a.join("");
        },
        generateFunction: function(a, b) {
            return "function(" + b + "){" + this.varsPrefix(a) + this.body(a) + "};";
        },
        filterPrefix: function() {
            var a = [], b = this;
            p(this.state.filters, function(d, c) {
                a.push(d + "=$filter(" + b.escape(c) + ")");
            });
            return a.length ? "var " + a.join(",") + ";" : "";
        },
        varsPrefix: function(a) {
            return this.state[a].vars.length ? "var " + this.state[a].vars.join(",") + ";" : "";
        },
        body: function(a) {
            return this.state[a].body.join("");
        },
        recurse: function(a, b, d, c, e, f) {
            var g, h, m, l, k = this;
            c = c || v;
            if (!f && u(a.watchId)) b = b || this.nextId(), this.if_("i", this.lazyAssign(b, this.computedMember("i", a.watchId)), this.lazyRecurse(a, b, d, c, e, !0)); else switch (a.type) {
              case s.Program:
                p(a.body, function(b, c) {
                    k.recurse(b.expression, x, x, function(a) {
                        h = a;
                    });
                    c !== a.body.length - 1 ? k.current().body.push(h, ";") : k.return_(h);
                });
                break;

              case s.Literal:
                l = this.escape(a.value);
                this.assign(b, l);
                c(l);
                break;

              case s.UnaryExpression:
                this.recurse(a.argument, x, x, function(a) {
                    h = a;
                });
                l = a.operator + "(" + this.ifDefined(h, 0) + ")";
                this.assign(b, l);
                c(l);
                break;

              case s.BinaryExpression:
                this.recurse(a.left, x, x, function(a) {
                    g = a;
                });
                this.recurse(a.right, x, x, function(a) {
                    h = a;
                });
                l = "+" === a.operator ? this.plus(g, h) : "-" === a.operator ? this.ifDefined(g, 0) + a.operator + this.ifDefined(h, 0) : "(" + g + ")" + a.operator + "(" + h + ")";
                this.assign(b, l);
                c(l);
                break;

              case s.LogicalExpression:
                b = b || this.nextId();
                k.recurse(a.left, b);
                k.if_("&&" === a.operator ? b : k.not(b), k.lazyRecurse(a.right, b));
                c(b);
                break;

              case s.ConditionalExpression:
                b = b || this.nextId();
                k.recurse(a.test, b);
                k.if_(b, k.lazyRecurse(a.alternate, b), k.lazyRecurse(a.consequent, b));
                c(b);
                break;

              case s.Identifier:
                b = b || this.nextId();
                d && (d.context = "inputs" === k.stage ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", a.name) + "?l:s"), 
                d.computed = !1, d.name = a.name);
                Wa(a.name);
                k.if_("inputs" === k.stage || k.not(k.getHasOwnProperty("l", a.name)), function() {
                    k.if_("inputs" === k.stage || "s", function() {
                        e && 1 !== e && k.if_(k.not(k.nonComputedMember("s", a.name)), k.lazyAssign(k.nonComputedMember("s", a.name), "{}"));
                        k.assign(b, k.nonComputedMember("s", a.name));
                    });
                }, b && k.lazyAssign(b, k.nonComputedMember("l", a.name)));
                (k.state.expensiveChecks || Fb(a.name)) && k.addEnsureSafeObject(b);
                c(b);
                break;

              case s.MemberExpression:
                g = d && (d.context = this.nextId()) || this.nextId();
                b = b || this.nextId();
                k.recurse(a.object, g, x, function() {
                    k.if_(k.notNull(g), function() {
                        e && 1 !== e && k.addEnsureSafeAssignContext(g);
                        if (a.computed) h = k.nextId(), k.recurse(a.property, h), k.getStringValue(h), k.addEnsureSafeMemberName(h), 
                        e && 1 !== e && k.if_(k.not(k.computedMember(g, h)), k.lazyAssign(k.computedMember(g, h), "{}")), 
                        l = k.ensureSafeObject(k.computedMember(g, h)), k.assign(b, l), d && (d.computed = !0, 
                        d.name = h); else {
                            Wa(a.property.name);
                            e && 1 !== e && k.if_(k.not(k.nonComputedMember(g, a.property.name)), k.lazyAssign(k.nonComputedMember(g, a.property.name), "{}"));
                            l = k.nonComputedMember(g, a.property.name);
                            (k.state.expensiveChecks || Fb(a.property.name)) && (l = k.ensureSafeObject(l));
                            k.assign(b, l);
                            d && (d.computed = !1, d.name = a.property.name);
                        }
                    }, function() {
                        k.assign(b, "undefined");
                    });
                    c(b);
                }, !!e);
                break;

              case s.CallExpression:
                b = b || this.nextId();
                a.filter ? (h = k.filter(a.callee.name), m = [], p(a.arguments, function(a) {
                    var b = k.nextId();
                    k.recurse(a, b);
                    m.push(b);
                }), l = h + "(" + m.join(",") + ")", k.assign(b, l), c(b)) : (h = k.nextId(), g = {}, 
                m = [], k.recurse(a.callee, h, g, function() {
                    k.if_(k.notNull(h), function() {
                        k.addEnsureSafeFunction(h);
                        p(a.arguments, function(a) {
                            k.recurse(a, k.nextId(), x, function(a) {
                                m.push(k.ensureSafeObject(a));
                            });
                        });
                        g.name ? (k.state.expensiveChecks || k.addEnsureSafeObject(g.context), l = k.member(g.context, g.name, g.computed) + "(" + m.join(",") + ")") : l = h + "(" + m.join(",") + ")";
                        l = k.ensureSafeObject(l);
                        k.assign(b, l);
                    }, function() {
                        k.assign(b, "undefined");
                    });
                    c(b);
                }));
                break;

              case s.AssignmentExpression:
                h = this.nextId();
                g = {};
                if (!pd(a.left)) throw aa("lval");
                this.recurse(a.left, x, g, function() {
                    k.if_(k.notNull(g.context), function() {
                        k.recurse(a.right, h);
                        k.addEnsureSafeObject(k.member(g.context, g.name, g.computed));
                        k.addEnsureSafeAssignContext(g.context);
                        l = k.member(g.context, g.name, g.computed) + a.operator + h;
                        k.assign(b, l);
                        c(b || l);
                    });
                }, 1);
                break;

              case s.ArrayExpression:
                m = [];
                p(a.elements, function(a) {
                    k.recurse(a, k.nextId(), x, function(a) {
                        m.push(a);
                    });
                });
                l = "[" + m.join(",") + "]";
                this.assign(b, l);
                c(l);
                break;

              case s.ObjectExpression:
                m = [];
                p(a.properties, function(a) {
                    k.recurse(a.value, k.nextId(), x, function(b) {
                        m.push(k.escape(a.key.type === s.Identifier ? a.key.name : "" + a.key.value) + ":" + b);
                    });
                });
                l = "{" + m.join(",") + "}";
                this.assign(b, l);
                c(l);
                break;

              case s.ThisExpression:
                this.assign(b, "s");
                c("s");
                break;

              case s.NGValueParameter:
                this.assign(b, "v"), c("v");
            }
        },
        getHasOwnProperty: function(a, b) {
            var d = a + "." + b, c = this.current().own;
            c.hasOwnProperty(d) || (c[d] = this.nextId(!1, a + "&&(" + this.escape(b) + " in " + a + ")"));
            return c[d];
        },
        assign: function(a, b) {
            if (a) return this.current().body.push(a, "=", b, ";"), a;
        },
        filter: function(a) {
            this.state.filters.hasOwnProperty(a) || (this.state.filters[a] = this.nextId(!0));
            return this.state.filters[a];
        },
        ifDefined: function(a, b) {
            return "ifDefined(" + a + "," + this.escape(b) + ")";
        },
        plus: function(a, b) {
            return "plus(" + a + "," + b + ")";
        },
        return_: function(a) {
            this.current().body.push("return ", a, ";");
        },
        if_: function(a, b, d) {
            if (!0 === a) b(); else {
                var c = this.current().body;
                c.push("if(", a, "){");
                b();
                c.push("}");
                d && (c.push("else{"), d(), c.push("}"));
            }
        },
        not: function(a) {
            return "!(" + a + ")";
        },
        notNull: function(a) {
            return a + "!=null";
        },
        nonComputedMember: function(a, b) {
            return a + "." + b;
        },
        computedMember: function(a, b) {
            return a + "[" + b + "]";
        },
        member: function(a, b, d) {
            return d ? this.computedMember(a, b) : this.nonComputedMember(a, b);
        },
        addEnsureSafeObject: function(a) {
            this.current().body.push(this.ensureSafeObject(a), ";");
        },
        addEnsureSafeMemberName: function(a) {
            this.current().body.push(this.ensureSafeMemberName(a), ";");
        },
        addEnsureSafeFunction: function(a) {
            this.current().body.push(this.ensureSafeFunction(a), ";");
        },
        addEnsureSafeAssignContext: function(a) {
            this.current().body.push(this.ensureSafeAssignContext(a), ";");
        },
        ensureSafeObject: function(a) {
            return "ensureSafeObject(" + a + ",text)";
        },
        ensureSafeMemberName: function(a) {
            return "ensureSafeMemberName(" + a + ",text)";
        },
        ensureSafeFunction: function(a) {
            return "ensureSafeFunction(" + a + ",text)";
        },
        getStringValue: function(a) {
            this.assign(a, "getStringValue(" + a + ",text)");
        },
        ensureSafeAssignContext: function(a) {
            return "ensureSafeAssignContext(" + a + ",text)";
        },
        lazyRecurse: function(a, b, d, c, e, f) {
            var g = this;
            return function() {
                g.recurse(a, b, d, c, e, f);
            };
        },
        lazyAssign: function(a, b) {
            var d = this;
            return function() {
                d.assign(a, b);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(a) {
            if (H(a)) return "'" + a.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (P(a)) return a.toString();
            if (!0 === a) return "true";
            if (!1 === a) return "false";
            if (null === a) return "null";
            if (void 0 === a) return "undefined";
            throw aa("esc");
        },
        nextId: function(a, b) {
            var d = "v" + this.state.nextId++;
            a || this.current().vars.push(d + (b ? "=" + b : ""));
            return d;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    };
    td.prototype = {
        compile: function(a, b) {
            var d = this, c = this.astBuilder.ast(a);
            this.expression = a;
            this.expensiveChecks = b;
            X(c, d.$filter);
            var e, f;
            (e = qd(c)) && (f = this.recurse(e));
            e = od(c.body);
            var g;
            e && (g = [], p(e, function(a, b) {
                var c = d.recurse(a);
                a.input = c;
                g.push(c);
                a.watchId = b;
            }));
            var h = [];
            p(c.body, function(a) {
                h.push(d.recurse(a.expression));
            });
            e = 0 === c.body.length ? function() {} : 1 === c.body.length ? h[0] : function(a, b) {
                var c;
                p(h, function(d) {
                    c = d(a, b);
                });
                return c;
            };
            f && (e.assign = function(a, b, c) {
                return f(a, c, b);
            });
            g && (e.inputs = g);
            e.literal = rd(c);
            e.constant = c.constant;
            return e;
        },
        recurse: function(a, b, d) {
            var c, e, g, f = this;
            if (a.input) return this.inputs(a.input, a.watchId);
            switch (a.type) {
              case s.Literal:
                return this.value(a.value, b);

              case s.UnaryExpression:
                return e = this.recurse(a.argument), this["unary" + a.operator](e, b);

              case s.BinaryExpression:
              case s.LogicalExpression:
                return c = this.recurse(a.left), e = this.recurse(a.right), this["binary" + a.operator](c, e, b);

              case s.ConditionalExpression:
                return this["ternary?:"](this.recurse(a.test), this.recurse(a.alternate), this.recurse(a.consequent), b);

              case s.Identifier:
                return Wa(a.name, f.expression), f.identifier(a.name, f.expensiveChecks || Fb(a.name), b, d, f.expression);

              case s.MemberExpression:
                return c = this.recurse(a.object, !1, !!d), a.computed || (Wa(a.property.name, f.expression), 
                e = a.property.name), a.computed && (e = this.recurse(a.property)), a.computed ? this.computedMember(c, e, b, d, f.expression) : this.nonComputedMember(c, e, f.expensiveChecks, b, d, f.expression);

              case s.CallExpression:
                return g = [], p(a.arguments, function(a) {
                    g.push(f.recurse(a));
                }), a.filter && (e = this.$filter(a.callee.name)), a.filter || (e = this.recurse(a.callee, !0)), 
                a.filter ? function(a, c, d, f) {
                    for (var n = [], p = 0; p < g.length; ++p) n.push(g[p](a, c, d, f));
                    a = e.apply(x, n, f);
                    return b ? {
                        context: x,
                        name: x,
                        value: a
                    } : a;
                } : function(a, c, d, l) {
                    var p, n = e(a, c, d, l);
                    if (null != n.value) {
                        ya(n.context, f.expression);
                        md(n.value, f.expression);
                        p = [];
                        for (var r = 0; r < g.length; ++r) p.push(ya(g[r](a, c, d, l), f.expression));
                        p = ya(n.value.apply(n.context, p), f.expression);
                    }
                    return b ? {
                        value: p
                    } : p;
                };

              case s.AssignmentExpression:
                return c = this.recurse(a.left, !0, 1), e = this.recurse(a.right), function(a, d, g, l) {
                    var n = c(a, d, g, l);
                    a = e(a, d, g, l);
                    ya(n.value, f.expression);
                    Eb(n.context);
                    n.context[n.name] = a;
                    return b ? {
                        value: a
                    } : a;
                };

              case s.ArrayExpression:
                return g = [], p(a.elements, function(a) {
                    g.push(f.recurse(a));
                }), function(a, c, d, e) {
                    for (var f = [], p = 0; p < g.length; ++p) f.push(g[p](a, c, d, e));
                    return b ? {
                        value: f
                    } : f;
                };

              case s.ObjectExpression:
                return g = [], p(a.properties, function(a) {
                    g.push({
                        key: a.key.type === s.Identifier ? a.key.name : "" + a.key.value,
                        value: f.recurse(a.value)
                    });
                }), function(a, c, d, e) {
                    for (var f = {}, p = 0; p < g.length; ++p) f[g[p].key] = g[p].value(a, c, d, e);
                    return b ? {
                        value: f
                    } : f;
                };

              case s.ThisExpression:
                return function(a) {
                    return b ? {
                        value: a
                    } : a;
                };

              case s.NGValueParameter:
                return function(a, c, d, e) {
                    return b ? {
                        value: d
                    } : d;
                };
            }
        },
        "unary+": function(a, b) {
            return function(d, c, e, f) {
                d = a(d, c, e, f);
                d = u(d) ? +d : 0;
                return b ? {
                    value: d
                } : d;
            };
        },
        "unary-": function(a, b) {
            return function(d, c, e, f) {
                d = a(d, c, e, f);
                d = u(d) ? -d : 0;
                return b ? {
                    value: d
                } : d;
            };
        },
        "unary!": function(a, b) {
            return function(d, c, e, f) {
                d = !a(d, c, e, f);
                return b ? {
                    value: d
                } : d;
            };
        },
        "binary+": function(a, b, d) {
            return function(c, e, f, g) {
                var h = a(c, e, f, g);
                c = b(c, e, f, g);
                h = nd(h, c);
                return d ? {
                    value: h
                } : h;
            };
        },
        "binary-": function(a, b, d) {
            return function(c, e, f, g) {
                var h = a(c, e, f, g);
                c = b(c, e, f, g);
                h = (u(h) ? h : 0) - (u(c) ? c : 0);
                return d ? {
                    value: h
                } : h;
            };
        },
        "binary*": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) * b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary/": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) / b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary%": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) % b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary===": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) === b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary!==": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) !== b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary==": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) == b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary!=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) != b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary<": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) < b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary>": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) > b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary<=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) <= b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary>=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) >= b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary&&": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) && b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "binary||": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) || b(c, e, f, g);
                return d ? {
                    value: c
                } : c;
            };
        },
        "ternary?:": function(a, b, d, c) {
            return function(e, f, g, h) {
                e = a(e, f, g, h) ? b(e, f, g, h) : d(e, f, g, h);
                return c ? {
                    value: e
                } : e;
            };
        },
        value: function(a, b) {
            return function() {
                return b ? {
                    context: x,
                    name: x,
                    value: a
                } : a;
            };
        },
        identifier: function(a, b, d, c, e) {
            return function(f, g, h, k) {
                f = g && a in g ? g : f;
                c && 1 !== c && f && !f[a] && (f[a] = {});
                g = f ? f[a] : x;
                b && ya(g, e);
                return d ? {
                    context: f,
                    name: a,
                    value: g
                } : g;
            };
        },
        computedMember: function(a, b, d, c, e) {
            return function(f, g, h, k) {
                var l, n, m = a(f, g, h, k);
                null != m && (l = b(f, g, h, k), l = ld(l), Wa(l, e), c && 1 !== c && (Eb(m), m && !m[l] && (m[l] = {})), 
                n = m[l], ya(n, e));
                return d ? {
                    context: m,
                    name: l,
                    value: n
                } : n;
            };
        },
        nonComputedMember: function(a, b, d, c, e, f) {
            return function(g, h, k, m) {
                g = a(g, h, k, m);
                e && 1 !== e && (Eb(g), g && !g[b] && (g[b] = {}));
                h = null != g ? g[b] : x;
                (d || Fb(b)) && ya(h, f);
                return c ? {
                    context: g,
                    name: b,
                    value: h
                } : h;
            };
        },
        inputs: function(a, b) {
            return function(d, c, e, f) {
                return f ? f[b] : a(d, c, e);
            };
        }
    };
    var gc = function(a, b, d) {
        this.lexer = a;
        this.$filter = b;
        this.options = d;
        this.ast = new s(this.lexer);
        this.astCompiler = d.csp ? new td(this.ast, b) : new sd(this.ast, b);
    };
    gc.prototype = {
        constructor: gc,
        parse: function(a) {
            return this.astCompiler.compile(a, this.options.expensiveChecks);
        }
    };
    var hg = Object.prototype.valueOf, za = B("$sce"), ka = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, ga = B("$compile"), Y = U.createElement("a"), xd = xa(R.location.href);
    yd.$inject = [ "$document" ];
    Jc.$inject = [ "$provide" ];
    var Fd = 22, Ed = ".", ic = "0";
    zd.$inject = [ "$locale" ];
    Bd.$inject = [ "$locale" ];
    var tg = {
        yyyy: ba("FullYear", 4),
        yy: ba("FullYear", 2, 0, !0),
        y: ba("FullYear", 1),
        MMMM: Hb("Month"),
        MMM: Hb("Month", !0),
        MM: ba("Month", 2, 1),
        M: ba("Month", 1, 1),
        dd: ba("Date", 2),
        d: ba("Date", 1),
        HH: ba("Hours", 2),
        H: ba("Hours", 1),
        hh: ba("Hours", 2, -12),
        h: ba("Hours", 1, -12),
        mm: ba("Minutes", 2),
        m: ba("Minutes", 1),
        ss: ba("Seconds", 2),
        s: ba("Seconds", 1),
        sss: ba("Milliseconds", 3),
        EEEE: Hb("Day"),
        EEE: Hb("Day", !0),
        a: function(a, b) {
            return 12 > a.getHours() ? b.AMPMS[0] : b.AMPMS[1];
        },
        Z: function(a, b, d) {
            a = -1 * d;
            return a = (0 <= a ? "+" : "") + (Gb(Math[0 < a ? "floor" : "ceil"](a / 60), 2) + Gb(Math.abs(a % 60), 2));
        },
        ww: Hd(2),
        w: Hd(1),
        G: jc,
        GG: jc,
        GGG: jc,
        GGGG: function(a, b) {
            return 0 >= a.getFullYear() ? b.ERANAMES[0] : b.ERANAMES[1];
        }
    }, sg = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/, rg = /^\-?\d+$/;
    Ad.$inject = [ "$locale" ];
    var mg = ma(M), ng = ma(rb);
    Cd.$inject = [ "$parse" ];
    var me = ma({
        restrict: "E",
        compile: function(a, b) {
            if (!b.href && !b.xlinkHref) return function(a, b) {
                if ("a" === b[0].nodeName.toLowerCase()) {
                    var e = "[object SVGAnimatedString]" === na.call(b.prop("href")) ? "xlink:href" : "href";
                    b.on("click", function(a) {
                        b.attr(e) || a.preventDefault();
                    });
                }
            };
        }
    }), sb = {};
    p(Bb, function(a, b) {
        function d(a, d, e) {
            a.$watch(e[c], function(a) {
                e.$set(b, !!a);
            });
        }
        if ("multiple" != a) {
            var c = va("ng-" + b), e = d;
            "checked" === a && (e = function(a, b, e) {
                e.ngModel !== e[c] && d(a, b, e);
            });
            sb[c] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: e
                };
            };
        }
    });
    p(ad, function(a, b) {
        sb[b] = function() {
            return {
                priority: 100,
                link: function(a, c, e) {
                    "ngPattern" === b && "/" == e.ngPattern.charAt(0) && (c = e.ngPattern.match(vg)) ? e.$set("ngPattern", new RegExp(c[1], c[2])) : a.$watch(e[b], function(a) {
                        e.$set(b, a);
                    });
                }
            };
        };
    });
    p([ "src", "srcset", "href" ], function(a) {
        var b = va("ng-" + a);
        sb[b] = function() {
            return {
                priority: 99,
                link: function(d, c, e) {
                    var f = a, g = a;
                    "href" === a && "[object SVGAnimatedString]" === na.call(c.prop("href")) && (g = "xlinkHref", 
                    e.$attr[g] = "xlink:href", f = null);
                    e.$observe(b, function(b) {
                        b ? (e.$set(g, b), Ha && f && c.prop(f, e[g])) : "href" === a && e.$set(g, null);
                    });
                }
            };
        };
    });
    var Ib = {
        $addControl: v,
        $$renameControl: function(a, b) {
            a.$name = b;
        },
        $removeControl: v,
        $setValidity: v,
        $setDirty: v,
        $setPristine: v,
        $setSubmitted: v
    };
    Id.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ];
    var Rd = function(a) {
        return [ "$timeout", "$parse", function(b, d) {
            function c(a) {
                return "" === a ? d('this[""]').assign : d(a).assign || v;
            }
            return {
                name: "form",
                restrict: a ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: Id,
                compile: function(d, f) {
                    d.addClass(Xa).addClass(lb);
                    var g = f.name ? "name" : !(!a || !f.ngForm) && "ngForm";
                    return {
                        pre: function(a, d, e, f) {
                            var n = f[0];
                            if (!("action" in e)) {
                                var p = function(b) {
                                    a.$apply(function() {
                                        n.$commitViewValue();
                                        n.$setSubmitted();
                                    });
                                    b.preventDefault();
                                };
                                d[0].addEventListener("submit", p, !1);
                                d.on("$destroy", function() {
                                    b(function() {
                                        d[0].removeEventListener("submit", p, !1);
                                    }, 0, !1);
                                });
                            }
                            (f[1] || n.$$parentForm).$addControl(n);
                            var r = g ? c(n.$name) : v;
                            g && (r(a, n), e.$observe(g, function(b) {
                                n.$name !== b && (r(a, x), n.$$parentForm.$$renameControl(n, b), (r = c(n.$name))(a, n));
                            }));
                            d.on("$destroy", function() {
                                n.$$parentForm.$removeControl(n);
                                r(a, x);
                                N(n, Ib);
                            });
                        }
                    };
                }
            };
        } ];
    }, ne = Rd(), Ae = Rd(!0), ug = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, Dg = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i, Eg = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i, Fg = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/, Sd = /^(\d{4})-(\d{2})-(\d{2})$/, Td = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, mc = /^(\d{4})-W(\d\d)$/, Ud = /^(\d{4})-(\d\d)$/, Vd = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, Kd = Z();
    p([ "date", "datetime-local", "month", "time", "week" ], function(a) {
        Kd[a] = !0;
    });
    var Wd = {
        text: function(a, b, d, c, e, f) {
            ib(a, b, d, c, e, f);
            kc(c);
        },
        date: jb("date", Sd, Kb(Sd, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": jb("datetimelocal", Td, Kb(Td, "yyyy MM dd HH mm ss sss".split(" ")), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: jb("time", Vd, Kb(Vd, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: jb("week", mc, function(a, b) {
            if (ea(a)) return a;
            if (H(a)) {
                mc.lastIndex = 0;
                var d = mc.exec(a);
                if (d) {
                    var c = +d[1], e = +d[2], f = d = 0, g = 0, h = 0, k = Gd(c), e = 7 * (e - 1);
                    b && (d = b.getHours(), f = b.getMinutes(), g = b.getSeconds(), h = b.getMilliseconds());
                    return new Date(c, 0, k.getDate() + e, d, f, g, h);
                }
            }
            return NaN;
        }, "yyyy-Www"),
        month: jb("month", Ud, Kb(Ud, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: function(a, b, d, c, e, f) {
            Ld(a, b, d, c);
            ib(a, b, d, c, e, f);
            c.$$parserName = "number";
            c.$parsers.push(function(a) {
                return c.$isEmpty(a) ? null : Fg.test(a) ? parseFloat(a) : x;
            });
            c.$formatters.push(function(a) {
                if (!c.$isEmpty(a)) {
                    if (!P(a)) throw kb("numfmt", a);
                    a = a.toString();
                }
                return a;
            });
            if (u(d.min) || d.ngMin) {
                var g;
                c.$validators.min = function(a) {
                    return c.$isEmpty(a) || r(g) || a >= g;
                };
                d.$observe("min", function(a) {
                    u(a) && !P(a) && (a = parseFloat(a, 10));
                    g = P(a) && !isNaN(a) ? a : x;
                    c.$validate();
                });
            }
            if (u(d.max) || d.ngMax) {
                var h;
                c.$validators.max = function(a) {
                    return c.$isEmpty(a) || r(h) || a <= h;
                };
                d.$observe("max", function(a) {
                    u(a) && !P(a) && (a = parseFloat(a, 10));
                    h = P(a) && !isNaN(a) ? a : x;
                    c.$validate();
                });
            }
        },
        url: function(a, b, d, c, e, f) {
            ib(a, b, d, c, e, f);
            kc(c);
            c.$$parserName = "url";
            c.$validators.url = function(a, b) {
                var d = a || b;
                return c.$isEmpty(d) || Dg.test(d);
            };
        },
        email: function(a, b, d, c, e, f) {
            ib(a, b, d, c, e, f);
            kc(c);
            c.$$parserName = "email";
            c.$validators.email = function(a, b) {
                var d = a || b;
                return c.$isEmpty(d) || Eg.test(d);
            };
        },
        radio: function(a, b, d, c) {
            r(d.name) && b.attr("name", ++mb);
            b.on("click", function(a) {
                b[0].checked && c.$setViewValue(d.value, a && a.type);
            });
            c.$render = function() {
                b[0].checked = d.value == c.$viewValue;
            };
            d.$observe("value", c.$render);
        },
        checkbox: function(a, b, d, c, e, f, g, h) {
            var k = Md(h, a, "ngTrueValue", d.ngTrueValue, !0), m = Md(h, a, "ngFalseValue", d.ngFalseValue, !1);
            b.on("click", function(a) {
                c.$setViewValue(b[0].checked, a && a.type);
            });
            c.$render = function() {
                b[0].checked = c.$viewValue;
            };
            c.$isEmpty = function(a) {
                return !1 === a;
            };
            c.$formatters.push(function(a) {
                return la(a, k);
            });
            c.$parsers.push(function(a) {
                return a ? k : m;
            });
        },
        hidden: v,
        button: v,
        submit: v,
        reset: v,
        file: v
    }, Dc = [ "$browser", "$sniffer", "$filter", "$parse", function(a, b, d, c) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(e, f, g, h) {
                    h[0] && (Wd[M(g.type)] || Wd.text)(e, f, g, h[0], b, a, d, c);
                }
            }
        };
    } ], Gg = /^(true|false|\d+)$/, Se = function() {
        return {
            restrict: "A",
            priority: 100,
            compile: function(a, b) {
                return Gg.test(b.ngValue) ? function(a, b, e) {
                    e.$set("value", a.$eval(e.ngValue));
                } : function(a, b, e) {
                    a.$watch(e.ngValue, function(a) {
                        e.$set("value", a);
                    });
                };
            }
        };
    }, se = [ "$compile", function(a) {
        return {
            restrict: "AC",
            compile: function(b) {
                a.$$addBindingClass(b);
                return function(b, c, e) {
                    a.$$addBindingInfo(c, e.ngBind);
                    c = c[0];
                    b.$watch(e.ngBind, function(a) {
                        c.textContent = r(a) ? "" : a;
                    });
                };
            }
        };
    } ], ue = [ "$interpolate", "$compile", function(a, b) {
        return {
            compile: function(d) {
                b.$$addBindingClass(d);
                return function(c, d, f) {
                    c = a(d.attr(f.$attr.ngBindTemplate));
                    b.$$addBindingInfo(d, c.expressions);
                    d = d[0];
                    f.$observe("ngBindTemplate", function(a) {
                        d.textContent = r(a) ? "" : a;
                    });
                };
            }
        };
    } ], te = [ "$sce", "$parse", "$compile", function(a, b, d) {
        return {
            restrict: "A",
            compile: function(c, e) {
                var f = b(e.ngBindHtml), g = b(e.ngBindHtml, function(b) {
                    return a.valueOf(b);
                });
                d.$$addBindingClass(c);
                return function(b, c, e) {
                    d.$$addBindingInfo(c, e.ngBindHtml);
                    b.$watch(g, function() {
                        var d = f(b);
                        c.html(a.getTrustedHtml(d) || "");
                    });
                };
            }
        };
    } ], Re = ma({
        restrict: "A",
        require: "ngModel",
        link: function(a, b, d, c) {
            c.$viewChangeListeners.push(function() {
                a.$eval(d.ngChange);
            });
        }
    }), ve = lc("", !0), xe = lc("Odd", 0), we = lc("Even", 1), ye = Ka({
        compile: function(a, b) {
            b.$set("ngCloak", x);
            a.removeClass("ng-cloak");
        }
    }), ze = [ function() {
        return {
            restrict: "A",
            scope: !0,
            controller: "@",
            priority: 500
        };
    } ], Ic = {}, Hg = {
        blur: !0,
        focus: !0
    };
    p("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(a) {
        var b = va("ng-" + a);
        Ic[b] = [ "$parse", "$rootScope", function(d, c) {
            return {
                restrict: "A",
                compile: function(e, f) {
                    var g = d(f[b], null, !0);
                    return function(b, d) {
                        d.on(a, function(d) {
                            var e = function() {
                                g(b, {
                                    $event: d
                                });
                            };
                            Hg[a] && c.$$phase ? b.$evalAsync(e) : b.$apply(e);
                        });
                    };
                }
            };
        } ];
    });
    var Ce = [ "$animate", function(a) {
        return {
            multiElement: !0,
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function(b, d, c, e, f) {
                var g, h, k;
                b.$watch(c.ngIf, function(b) {
                    b ? h || f(function(b, e) {
                        h = e;
                        b[b.length++] = U.createComment(" end ngIf: " + c.ngIf + " ");
                        g = {
                            clone: b
                        };
                        a.enter(b, d.parent(), d);
                    }) : (k && (k.remove(), k = null), h && (h.$destroy(), h = null), g && (k = qb(g.clone), 
                    a.leave(k).then(function() {
                        k = null;
                    }), g = null));
                });
            }
        };
    } ], De = [ "$templateRequest", "$anchorScroll", "$animate", function(a, b, d) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: da.noop,
            compile: function(c, e) {
                var f = e.ngInclude || e.src, g = e.onload || "", h = e.autoscroll;
                return function(c, e, l, n, p) {
                    var t, s, q, r = 0, y = function() {
                        s && (s.remove(), s = null);
                        t && (t.$destroy(), t = null);
                        q && (d.leave(q).then(function() {
                            s = null;
                        }), s = q, q = null);
                    };
                    c.$watch(f, function(f) {
                        var l = function() {
                            !u(h) || h && !c.$eval(h) || b();
                        }, s = ++r;
                        f ? (a(f, !0).then(function(a) {
                            if (!c.$$destroyed && s === r) {
                                var b = c.$new();
                                n.template = a;
                                a = p(b, function(a) {
                                    y();
                                    d.enter(a, null, e).then(l);
                                });
                                t = b;
                                q = a;
                                t.$emit("$includeContentLoaded", f);
                                c.$eval(g);
                            }
                        }, function() {
                            c.$$destroyed || s !== r || (y(), c.$emit("$includeContentError", f));
                        }), c.$emit("$includeContentRequested", f)) : (y(), n.template = null);
                    });
                };
            }
        };
    } ], Ue = [ "$compile", function(a) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(b, d, c, e) {
                /SVG/.test(d[0].toString()) ? (d.empty(), a(Lc(e.template, U).childNodes)(b, function(a) {
                    d.append(a);
                }, {
                    futureParentElement: d
                })) : (d.html(e.template), a(d.contents())(b));
            }
        };
    } ], Ee = Ka({
        priority: 450,
        compile: function() {
            return {
                pre: function(a, b, d) {
                    a.$eval(d.ngInit);
                }
            };
        }
    }), Qe = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(a, b, d, c) {
                var e = b.attr(d.$attr.ngList) || ", ", f = "false" !== d.ngTrim, g = f ? T(e) : e;
                c.$parsers.push(function(a) {
                    if (!r(a)) {
                        var b = [];
                        a && p(a.split(g), function(a) {
                            a && b.push(f ? T(a) : a);
                        });
                        return b;
                    }
                });
                c.$formatters.push(function(a) {
                    return L(a) ? a.join(e) : x;
                });
                c.$isEmpty = function(a) {
                    return !a || !a.length;
                };
            }
        };
    }, lb = "ng-valid", Nd = "ng-invalid", Xa = "ng-pristine", Jb = "ng-dirty", Pd = "ng-pending", kb = B("ngModel"), Ig = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$rootScope", "$q", "$interpolate", function(a, b, d, c, e, f, g, h, k, m) {
        this.$modelValue = this.$viewValue = Number.NaN;
        this.$$rawModelValue = x;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = !0;
        this.$touched = !1;
        this.$pristine = !0;
        this.$dirty = !1;
        this.$valid = !0;
        this.$invalid = !1;
        this.$error = {};
        this.$$success = {};
        this.$pending = x;
        this.$name = m(d.name || "", !1)(a);
        this.$$parentForm = Ib;
        var A, l = e(d.ngModel), n = l.assign, s = l, z = n, t = null, q = this;
        this.$$setOptions = function(a) {
            if ((q.$options = a) && a.getterSetter) {
                var b = e(d.ngModel + "()"), f = e(d.ngModel + "($$$p)");
                s = function(a) {
                    var c = l(a);
                    G(c) && (c = b(a));
                    return c;
                };
                z = function(a, b) {
                    G(l(a)) ? f(a, {
                        $$$p: q.$modelValue
                    }) : n(a, q.$modelValue);
                };
            } else if (!l.assign) throw kb("nonassign", d.ngModel, ua(c));
        };
        this.$render = v;
        this.$isEmpty = function(a) {
            return r(a) || "" === a || null === a || a !== a;
        };
        var y = 0;
        Jd({
            ctrl: this,
            $element: c,
            set: function(a, b) {
                a[b] = !0;
            },
            unset: function(a, b) {
                delete a[b];
            },
            $animate: f
        });
        this.$setPristine = function() {
            q.$dirty = !1;
            q.$pristine = !0;
            f.removeClass(c, Jb);
            f.addClass(c, Xa);
        };
        this.$setDirty = function() {
            q.$dirty = !0;
            q.$pristine = !1;
            f.removeClass(c, Xa);
            f.addClass(c, Jb);
            q.$$parentForm.$setDirty();
        };
        this.$setUntouched = function() {
            q.$touched = !1;
            q.$untouched = !0;
            f.setClass(c, "ng-untouched", "ng-touched");
        };
        this.$setTouched = function() {
            q.$touched = !0;
            q.$untouched = !1;
            f.setClass(c, "ng-touched", "ng-untouched");
        };
        this.$rollbackViewValue = function() {
            g.cancel(t);
            q.$viewValue = q.$$lastCommittedViewValue;
            q.$render();
        };
        this.$validate = function() {
            if (!P(q.$modelValue) || !isNaN(q.$modelValue)) {
                var a = q.$$rawModelValue, b = q.$valid, c = q.$modelValue, d = q.$options && q.$options.allowInvalid;
                q.$$runValidators(a, q.$$lastCommittedViewValue, function(e) {
                    d || b === e || (q.$modelValue = e ? a : x, q.$modelValue !== c && q.$$writeModelToScope());
                });
            }
        };
        this.$$runValidators = function(a, b, c) {
            function f(a, b) {
                h === y && q.$setValidity(a, b);
            }
            function g(a) {
                h === y && c(a);
            }
            y++;
            var h = y;
            !function() {
                var a = q.$$parserName || "parse";
                if (!r(A)) return A || (p(q.$validators, function(a, b) {
                    f(b, null);
                }), p(q.$asyncValidators, function(a, b) {
                    f(b, null);
                })), f(a, A), A;
                f(a, null);
                return !0;
            }() ? g(!1) : function() {
                var c = !0;
                p(q.$validators, function(d, e) {
                    var g = d(a, b);
                    c = c && g;
                    f(e, g);
                });
                return !!c || (p(q.$asyncValidators, function(a, b) {
                    f(b, null);
                }), !1);
            }() ? function() {
                var c = [], d = !0;
                p(q.$asyncValidators, function(e, g) {
                    var h = e(a, b);
                    if (!h || !G(h.then)) throw kb("nopromise", h);
                    f(g, x);
                    c.push(h.then(function() {
                        f(g, !0);
                    }, function(a) {
                        d = !1;
                        f(g, !1);
                    }));
                });
                c.length ? k.all(c).then(function() {
                    g(d);
                }, v) : g(!0);
            }() : g(!1);
        };
        this.$commitViewValue = function() {
            var a = q.$viewValue;
            g.cancel(t);
            (q.$$lastCommittedViewValue !== a || "" === a && q.$$hasNativeValidators) && (q.$$lastCommittedViewValue = a, 
            q.$pristine && this.$setDirty(), this.$$parseAndValidate());
        };
        this.$$parseAndValidate = function() {
            var b = q.$$lastCommittedViewValue;
            if (A = !r(b) || x) for (var c = 0; c < q.$parsers.length; c++) if (b = q.$parsers[c](b), 
            r(b)) {
                A = !1;
                break;
            }
            P(q.$modelValue) && isNaN(q.$modelValue) && (q.$modelValue = s(a));
            var d = q.$modelValue, e = q.$options && q.$options.allowInvalid;
            q.$$rawModelValue = b;
            e && (q.$modelValue = b, q.$modelValue !== d && q.$$writeModelToScope());
            q.$$runValidators(b, q.$$lastCommittedViewValue, function(a) {
                e || (q.$modelValue = a ? b : x, q.$modelValue !== d && q.$$writeModelToScope());
            });
        };
        this.$$writeModelToScope = function() {
            z(a, q.$modelValue);
            p(q.$viewChangeListeners, function(a) {
                try {
                    a();
                } catch (c) {
                    b(c);
                }
            });
        };
        this.$setViewValue = function(a, b) {
            q.$viewValue = a;
            q.$options && !q.$options.updateOnDefault || q.$$debounceViewValueCommit(b);
        };
        this.$$debounceViewValueCommit = function(b) {
            var c = 0, d = q.$options;
            d && u(d.debounce) && (d = d.debounce, P(d) ? c = d : P(d[b]) ? c = d[b] : P(d.default) && (c = d.default));
            g.cancel(t);
            c ? t = g(function() {
                q.$commitViewValue();
            }, c) : h.$$phase ? q.$commitViewValue() : a.$apply(function() {
                q.$commitViewValue();
            });
        };
        a.$watch(function() {
            var b = s(a);
            if (b !== q.$modelValue && (q.$modelValue === q.$modelValue || b === b)) {
                q.$modelValue = q.$$rawModelValue = b;
                A = x;
                for (var c = q.$formatters, d = c.length, e = b; d--; ) e = c[d](e);
                q.$viewValue !== e && (q.$viewValue = q.$$lastCommittedViewValue = e, q.$render(), 
                q.$$runValidators(b, e, v));
            }
            return b;
        });
    } ], Pe = [ "$rootScope", function(a) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: Ig,
            priority: 1,
            compile: function(b) {
                b.addClass(Xa).addClass("ng-untouched").addClass(lb);
                return {
                    pre: function(a, b, e, f) {
                        var g = f[0];
                        b = f[1] || g.$$parentForm;
                        g.$$setOptions(f[2] && f[2].$options);
                        b.$addControl(g);
                        e.$observe("name", function(a) {
                            g.$name !== a && g.$$parentForm.$$renameControl(g, a);
                        });
                        a.$on("$destroy", function() {
                            g.$$parentForm.$removeControl(g);
                        });
                    },
                    post: function(b, c, e, f) {
                        var g = f[0];
                        g.$options && g.$options.updateOn && c.on(g.$options.updateOn, function(a) {
                            g.$$debounceViewValueCommit(a && a.type);
                        });
                        c.on("blur", function(c) {
                            g.$touched || (a.$$phase ? b.$evalAsync(g.$setTouched) : b.$apply(g.$setTouched));
                        });
                    }
                };
            }
        };
    } ], Jg = /(\s+|^)default(\s+|$)/, Te = function() {
        return {
            restrict: "A",
            controller: [ "$scope", "$attrs", function(a, b) {
                var d = this;
                this.$options = Na(a.$eval(b.ngModelOptions));
                u(this.$options.updateOn) ? (this.$options.updateOnDefault = !1, this.$options.updateOn = T(this.$options.updateOn.replace(Jg, function() {
                    d.$options.updateOnDefault = !0;
                    return " ";
                }))) : this.$options.updateOnDefault = !0;
            } ]
        };
    }, Fe = Ka({
        terminal: !0,
        priority: 1e3
    }), Kg = B("ngOptions"), Lg = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, Ne = [ "$compile", "$parse", function(a, b) {
        function d(a, c, d) {
            function e(a, b, c, d, f) {
                this.selectValue = a;
                this.viewValue = b;
                this.label = c;
                this.group = d;
                this.disabled = f;
            }
            function m(a) {
                var b;
                if (!p && Aa(a)) b = a; else {
                    b = [];
                    for (var c in a) a.hasOwnProperty(c) && "$" !== c.charAt(0) && b.push(c);
                }
                return b;
            }
            var l = a.match(Lg);
            if (!l) throw Kg("iexp", a, ua(c));
            var n = l[5] || l[7], p = l[6];
            a = / as /.test(l[0]) && l[1];
            var r = l[9];
            c = b(l[2] ? l[1] : n);
            var t = a && b(a) || c, s = r && b(r), q = r ? function(a, b) {
                return s(d, b);
            } : function(a) {
                return Da(a);
            }, y = function(a, b) {
                return q(a, C(a, b));
            }, w = b(l[2] || l[1]), x = b(l[3] || ""), F = b(l[4] || ""), u = b(l[8]), v = {}, C = p ? function(a, b) {
                v[p] = b;
                v[n] = a;
                return v;
            } : function(a) {
                v[n] = a;
                return v;
            };
            return {
                trackBy: r,
                getTrackByValue: y,
                getWatchables: b(u, function(a) {
                    var b = [];
                    a = a || [];
                    for (var c = m(a), e = c.length, f = 0; f < e; f++) {
                        var g = a === c ? f : c[f], k = C(a[g], g), g = q(a[g], k);
                        b.push(g);
                        (l[2] || l[1]) && (g = w(d, k), b.push(g));
                        l[4] && (k = F(d, k), b.push(k));
                    }
                    return b;
                }),
                getOptions: function() {
                    for (var a = [], b = {}, c = u(d) || [], f = m(c), g = f.length, l = 0; l < g; l++) {
                        var n = c === f ? l : f[l], p = C(c[n], n), s = t(d, p), n = q(s, p), v = w(d, p), A = x(d, p), p = F(d, p), s = new e(n, s, v, A, p);
                        a.push(s);
                        b[n] = s;
                    }
                    return {
                        items: a,
                        selectValueMap: b,
                        getOptionFromViewValue: function(a) {
                            return b[y(a)];
                        },
                        getViewValueFromOption: function(a) {
                            return r ? da.copy(a.viewValue) : a.viewValue;
                        }
                    };
                }
            };
        }
        var c = U.createElement("option"), e = U.createElement("optgroup");
        return {
            restrict: "A",
            terminal: !0,
            require: [ "select", "?ngModel" ],
            link: {
                pre: function(a, b, c, d) {
                    d[0].registerOption = v;
                },
                post: function(b, g, h, k) {
                    function m(a, b) {
                        a.element = b;
                        b.disabled = a.disabled;
                        a.label !== b.label && (b.label = a.label, b.textContent = a.label);
                        a.value !== b.value && (b.value = a.selectValue);
                    }
                    function l(a, b, c, d) {
                        b && M(b.nodeName) === c ? c = b : (c = d.cloneNode(!1), b ? a.insertBefore(c, b) : a.appendChild(c));
                        return c;
                    }
                    function n(a) {
                        for (var b; a; ) b = a.nextSibling, Xb(a), a = b;
                    }
                    function r(a) {
                        var b = y && y[0], c = u && u[0];
                        if (b || c) for (;a && (a === b || a === c || 8 === a.nodeType || "option" === oa(a) && "" === a.value); ) a = a.nextSibling;
                        return a;
                    }
                    function s() {
                        var a = E && x.readValue();
                        E = C.getOptions();
                        var b = {}, d = g[0].firstChild;
                        F && g.prepend(y);
                        d = r(d);
                        E.items.forEach(function(a) {
                            var f, h;
                            a.group ? (f = b[a.group], f || (f = l(g[0], d, "optgroup", e), d = f.nextSibling, 
                            f.label = a.group, f = b[a.group] = {
                                groupElement: f,
                                currentOptionElement: f.firstChild
                            }), h = l(f.groupElement, f.currentOptionElement, "option", c), m(a, h), f.currentOptionElement = h.nextSibling) : (h = l(g[0], d, "option", c), 
                            m(a, h), d = h.nextSibling);
                        });
                        Object.keys(b).forEach(function(a) {
                            n(b[a].currentOptionElement);
                        });
                        n(d);
                        t.$render();
                        if (!t.$isEmpty(a)) {
                            var f = x.readValue();
                            (C.trackBy || q ? la(a, f) : a === f) || (t.$setViewValue(f), t.$render());
                        }
                    }
                    var t = k[1];
                    if (t) {
                        var y, x = k[0], q = h.multiple;
                        k = 0;
                        for (var w = g.children(), v = w.length; k < v; k++) if ("" === w[k].value) {
                            y = w.eq(k);
                            break;
                        }
                        var F = !!y, u = D(c.cloneNode(!1));
                        u.val("?");
                        var E, C = d(h.ngOptions, g, b);
                        q ? (t.$isEmpty = function(a) {
                            return !a || 0 === a.length;
                        }, x.writeValue = function(a) {
                            E.items.forEach(function(a) {
                                a.element.selected = !1;
                            });
                            a && a.forEach(function(a) {
                                (a = E.getOptionFromViewValue(a)) && !a.disabled && (a.element.selected = !0);
                            });
                        }, x.readValue = function() {
                            var a = g.val() || [], b = [];
                            p(a, function(a) {
                                (a = E.selectValueMap[a]) && !a.disabled && b.push(E.getViewValueFromOption(a));
                            });
                            return b;
                        }, C.trackBy && b.$watchCollection(function() {
                            if (L(t.$viewValue)) return t.$viewValue.map(function(a) {
                                return C.getTrackByValue(a);
                            });
                        }, function() {
                            t.$render();
                        })) : (x.writeValue = function(a) {
                            var b = E.getOptionFromViewValue(a);
                            b && !b.disabled ? (g[0].value !== b.selectValue && (u.remove(), F || y.remove(), 
                            g[0].value = b.selectValue, b.element.selected = !0), b.element.setAttribute("selected", "selected")) : null === a || F ? (u.remove(), 
                            F || g.prepend(y), g.val(""), y.prop("selected", !0), y.attr("selected", !0)) : (F || y.remove(), 
                            g.prepend(u), g.val("?"), u.prop("selected", !0), u.attr("selected", !0));
                        }, x.readValue = function() {
                            var a = E.selectValueMap[g.val()];
                            return a && !a.disabled ? (F || y.remove(), u.remove(), E.getViewValueFromOption(a)) : null;
                        }, C.trackBy && b.$watch(function() {
                            return C.getTrackByValue(t.$viewValue);
                        }, function() {
                            t.$render();
                        }));
                        F ? (y.remove(), a(y)(b), y.removeClass("ng-scope")) : y = D(c.cloneNode(!1));
                        s();
                        b.$watchCollection(C.getWatchables, s);
                    }
                }
            }
        };
    } ], Ge = [ "$locale", "$interpolate", "$log", function(a, b, d) {
        var c = /{}/g, e = /^when(Minus)?(.+)$/;
        return {
            link: function(f, g, h) {
                function k(a) {
                    g.text(a || "");
                }
                var w, m = h.count, l = h.$attr.when && g.attr(h.$attr.when), n = h.offset || 0, s = f.$eval(l) || {}, x = {}, t = b.startSymbol(), u = b.endSymbol(), q = t + m + "-" + n + u, y = da.noop;
                p(h, function(a, b) {
                    var c = e.exec(b);
                    c && (c = (c[1] ? "-" : "") + M(c[2]), s[c] = g.attr(h.$attr[b]));
                });
                p(s, function(a, d) {
                    x[d] = b(a.replace(c, q));
                });
                f.$watch(m, function(b) {
                    var c = parseFloat(b), e = isNaN(c);
                    e || c in s || (c = a.pluralCat(c - n));
                    c === w || e && P(w) && isNaN(w) || (y(), e = x[c], r(e) ? (null != b && d.debug("ngPluralize: no rule defined for '" + c + "' in " + l), 
                    y = v, k()) : y = f.$watch(e, k), w = c);
                });
            }
        };
    } ], He = [ "$parse", "$animate", function(a, b) {
        var d = B("ngRepeat"), c = function(a, b, c, d, k, m, l) {
            a[c] = d;
            k && (a[k] = m);
            a.$index = b;
            a.$first = 0 === b;
            a.$last = b === l - 1;
            a.$middle = !(a.$first || a.$last);
            a.$odd = !(a.$even = 0 == (1 & b));
        };
        return {
            restrict: "A",
            multiElement: !0,
            transclude: "element",
            priority: 1e3,
            terminal: !0,
            $$tlb: !0,
            compile: function(e, f) {
                var g = f.ngRepeat, h = U.createComment(" end ngRepeat: " + g + " "), k = g.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!k) throw d("iexp", g);
                var m = k[1], l = k[2], n = k[3], r = k[4], k = m.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
                if (!k) throw d("iidexp", m);
                var s = k[3] || k[1], t = k[2];
                if (n && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(n) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(n))) throw d("badident", n);
                var u, q, y, w, v = {
                    $id: Da
                };
                r ? u = a(r) : (y = function(a, b) {
                    return Da(b);
                }, w = function(a) {
                    return a;
                });
                return function(a, e, f, k, m) {
                    u && (q = function(b, c, d) {
                        t && (v[t] = b);
                        v[s] = c;
                        v.$index = d;
                        return u(a, v);
                    });
                    var r = Z();
                    a.$watchCollection(l, function(f) {
                        var k, l, v, C, D, J, E, G, B, H, u = e[0], A = Z();
                        n && (a[n] = f);
                        if (Aa(f)) G = f, l = q || y; else for (H in l = q || w, G = [], f) sa.call(f, H) && "$" !== H.charAt(0) && G.push(H);
                        C = G.length;
                        H = Array(C);
                        for (k = 0; k < C; k++) if (D = f === G ? k : G[k], J = f[D], E = l(D, J, k), r[E]) B = r[E], 
                        delete r[E], A[E] = B, H[k] = B; else {
                            if (A[E]) throw p(H, function(a) {
                                a && a.scope && (r[a.id] = a);
                            }), d("dupes", g, E, J);
                            H[k] = {
                                id: E,
                                scope: x,
                                clone: x
                            };
                            A[E] = !0;
                        }
                        for (v in r) {
                            B = r[v];
                            E = qb(B.clone);
                            b.leave(E);
                            if (E[0].parentNode) for (k = 0, l = E.length; k < l; k++) E[k].$$NG_REMOVED = !0;
                            B.scope.$destroy();
                        }
                        for (k = 0; k < C; k++) if (D = f === G ? k : G[k], J = f[D], B = H[k], B.scope) {
                            v = u;
                            do {
                                v = v.nextSibling;
                            } while (v && v.$$NG_REMOVED);
                            B.clone[0] != v && b.move(qb(B.clone), null, u);
                            u = B.clone[B.clone.length - 1];
                            c(B.scope, k, s, J, t, D, C);
                        } else m(function(a, d) {
                            B.scope = d;
                            var e = h.cloneNode(!1);
                            a[a.length++] = e;
                            b.enter(a, null, u);
                            u = e;
                            B.clone = a;
                            A[B.id] = B;
                            c(B.scope, k, s, J, t, D, C);
                        });
                        r = A;
                    });
                };
            }
        };
    } ], Ie = [ "$animate", function(a) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(b, d, c) {
                b.$watch(c.ngShow, function(b) {
                    a[b ? "removeClass" : "addClass"](d, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], Be = [ "$animate", function(a) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(b, d, c) {
                b.$watch(c.ngHide, function(b) {
                    a[b ? "addClass" : "removeClass"](d, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], Je = Ka(function(a, b, d) {
        a.$watch(d.ngStyle, function(a, d) {
            d && a !== d && p(d, function(a, c) {
                b.css(c, "");
            });
            a && b.css(a);
        }, !0);
    }), Ke = [ "$animate", function(a) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function() {
                this.cases = {};
            } ],
            link: function(b, d, c, e) {
                var f = [], g = [], h = [], k = [], m = function(a, b) {
                    return function() {
                        a.splice(b, 1);
                    };
                };
                b.$watch(c.ngSwitch || c.on, function(b) {
                    var c, d;
                    c = 0;
                    for (d = h.length; c < d; ++c) a.cancel(h[c]);
                    c = h.length = 0;
                    for (d = k.length; c < d; ++c) {
                        var r = qb(g[c].clone);
                        k[c].$destroy();
                        (h[c] = a.leave(r)).then(m(h, c));
                    }
                    g.length = 0;
                    k.length = 0;
                    (f = e.cases["!" + b] || e.cases["?"]) && p(f, function(b) {
                        b.transclude(function(c, d) {
                            k.push(d);
                            var e = b.element;
                            c[c.length++] = U.createComment(" end ngSwitchWhen: ");
                            g.push({
                                clone: c
                            });
                            a.enter(c, e.parent(), e);
                        });
                    });
                });
            }
        };
    } ], Le = Ka({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(a, b, d, c, e) {
            c.cases["!" + d.ngSwitchWhen] = c.cases["!" + d.ngSwitchWhen] || [];
            c.cases["!" + d.ngSwitchWhen].push({
                transclude: e,
                element: b
            });
        }
    }), Me = Ka({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(a, b, d, c, e) {
            c.cases["?"] = c.cases["?"] || [];
            c.cases["?"].push({
                transclude: e,
                element: b
            });
        }
    }), Oe = Ka({
        restrict: "EAC",
        link: function(a, b, d, c, e) {
            if (!e) throw B("ngTransclude")("orphan", ua(b));
            e(function(a) {
                b.empty();
                b.append(a);
            });
        }
    }), oe = [ "$templateCache", function(a) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(b, d) {
                "text/ng-template" == d.type && a.put(d.id, b[0].text);
            }
        };
    } ], Mg = {
        $setViewValue: v,
        $render: v
    }, Ng = [ "$element", "$scope", "$attrs", function(a, b, d) {
        var c = this, e = new Ta();
        c.ngModelCtrl = Mg;
        c.unknownOption = D(U.createElement("option"));
        c.renderUnknownOption = function(b) {
            b = "? " + Da(b) + " ?";
            c.unknownOption.val(b);
            a.prepend(c.unknownOption);
            a.val(b);
        };
        b.$on("$destroy", function() {
            c.renderUnknownOption = v;
        });
        c.removeUnknownOption = function() {
            c.unknownOption.parent() && c.unknownOption.remove();
        };
        c.readValue = function() {
            c.removeUnknownOption();
            return a.val();
        };
        c.writeValue = function(b) {
            c.hasOption(b) ? (c.removeUnknownOption(), a.val(b), "" === b && c.emptyOption.prop("selected", !0)) : null == b && c.emptyOption ? (c.removeUnknownOption(), 
            a.val("")) : c.renderUnknownOption(b);
        };
        c.addOption = function(a, b) {
            if (8 !== b[0].nodeType) {
                Sa(a, '"option value"');
                "" === a && (c.emptyOption = b);
                var d = e.get(a) || 0;
                e.put(a, d + 1);
                c.ngModelCtrl.$render();
                b[0].hasAttribute("selected") && (b[0].selected = !0);
            }
        };
        c.removeOption = function(a) {
            var b = e.get(a);
            b && (1 === b ? (e.remove(a), "" === a && (c.emptyOption = x)) : e.put(a, b - 1));
        };
        c.hasOption = function(a) {
            return !!e.get(a);
        };
        c.registerOption = function(a, b, d, e, m) {
            if (e) {
                var l;
                d.$observe("value", function(a) {
                    u(l) && c.removeOption(l);
                    l = a;
                    c.addOption(a, b);
                });
            } else m ? a.$watch(m, function(a, e) {
                d.$set("value", a);
                e !== a && c.removeOption(e);
                c.addOption(a, b);
            }) : c.addOption(d.value, b);
            b.on("$destroy", function() {
                c.removeOption(d.value);
                c.ngModelCtrl.$render();
            });
        };
    } ], pe = function() {
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: Ng,
            priority: 1,
            link: {
                pre: function(a, b, d, c) {
                    var e = c[1];
                    if (e) {
                        var f = c[0];
                        f.ngModelCtrl = e;
                        b.on("change", function() {
                            a.$apply(function() {
                                e.$setViewValue(f.readValue());
                            });
                        });
                        if (d.multiple) {
                            f.readValue = function() {
                                var a = [];
                                p(b.find("option"), function(b) {
                                    b.selected && a.push(b.value);
                                });
                                return a;
                            };
                            f.writeValue = function(a) {
                                var c = new Ta(a);
                                p(b.find("option"), function(a) {
                                    a.selected = u(c.get(a.value));
                                });
                            };
                            var g, h = NaN;
                            a.$watch(function() {
                                h !== e.$viewValue || la(g, e.$viewValue) || (g = fa(e.$viewValue), e.$render());
                                h = e.$viewValue;
                            });
                            e.$isEmpty = function(a) {
                                return !a || 0 === a.length;
                            };
                        }
                    }
                },
                post: function(a, b, d, c) {
                    var e = c[1];
                    if (e) {
                        var f = c[0];
                        e.$render = function() {
                            f.writeValue(e.$viewValue);
                        };
                    }
                }
            }
        };
    }, re = [ "$interpolate", function(a) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(b, d) {
                if (u(d.value)) var c = a(d.value, !0); else {
                    var e = a(b.text(), !0);
                    e || d.$set("value", b.text());
                }
                return function(a, b, d) {
                    var k = b.parent();
                    (k = k.data("$selectController") || k.parent().data("$selectController")) && k.registerOption(a, b, d, c, e);
                };
            }
        };
    } ], qe = ma({
        restrict: "E",
        terminal: !1
    }), Fc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, b, d, c) {
                c && (d.required = !0, c.$validators.required = function(a, b) {
                    return !d.required || !c.$isEmpty(b);
                }, d.$observe("required", function() {
                    c.$validate();
                }));
            }
        };
    }, Ec = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, b, d, c) {
                if (c) {
                    var e, f = d.ngPattern || d.pattern;
                    d.$observe("pattern", function(a) {
                        H(a) && 0 < a.length && (a = new RegExp("^" + a + "$"));
                        if (a && !a.test) throw B("ngPattern")("noregexp", f, a, ua(b));
                        e = a || x;
                        c.$validate();
                    });
                    c.$validators.pattern = function(a, b) {
                        return c.$isEmpty(b) || r(e) || e.test(b);
                    };
                }
            }
        };
    }, Hc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, b, d, c) {
                if (c) {
                    var e = -1;
                    d.$observe("maxlength", function(a) {
                        a = ca(a);
                        e = isNaN(a) ? -1 : a;
                        c.$validate();
                    });
                    c.$validators.maxlength = function(a, b) {
                        return 0 > e || c.$isEmpty(b) || b.length <= e;
                    };
                }
            }
        };
    }, Gc = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(a, b, d, c) {
                if (c) {
                    var e = 0;
                    d.$observe("minlength", function(a) {
                        e = ca(a) || 0;
                        c.$validate();
                    });
                    c.$validators.minlength = function(a, b) {
                        return c.$isEmpty(b) || b.length >= e;
                    };
                }
            }
        };
    };
    R.angular.bootstrap ? R.console && console.log("WARNING: Tried to load angular more than once.") : (function() {
        var a;
        if (!Ac) {
            var b = ob();
            (pa = r(b) ? R.jQuery : b ? R[b] : x) && pa.fn.on ? (D = pa, N(pa.fn, {
                scope: Qa.scope,
                isolateScope: Qa.isolateScope,
                controller: Qa.controller,
                injector: Qa.injector,
                inheritedData: Qa.inheritedData
            }), a = pa.cleanData, pa.cleanData = function(b) {
                var c;
                if (Rb) Rb = !1; else for (var f, e = 0; null != (f = b[e]); e++) (c = pa._data(f, "events")) && c.$destroy && pa(f).triggerHandler("$destroy");
                a(b);
            }) : D = S;
            da.element = D;
            Ac = !0;
        }
    }(), function(a) {
        N(a, {
            bootstrap: yc,
            copy: Na,
            extend: N,
            merge: Yd,
            equals: la,
            element: D,
            forEach: p,
            injector: db,
            noop: v,
            bind: tc,
            toJson: cb,
            fromJson: uc,
            identity: Za,
            isUndefined: r,
            isDefined: u,
            isString: H,
            isFunction: G,
            isObject: K,
            isNumber: P,
            isElement: Nb,
            isArray: L,
            version: ke,
            isDate: ea,
            lowercase: M,
            uppercase: rb,
            callbacks: {
                counter: 0
            },
            getTestability: fe,
            $$minErr: B,
            $$csp: Ca,
            reloadWithDebugInfo: ee
        });
        Sb = ie(R);
        Sb("ng", [ "ngLocale" ], [ "$provide", function(a) {
            a.provider({
                $$sanitizeUri: le
            });
            a.provider("$compile", Cc).directive({
                a: me,
                input: Dc,
                textarea: Dc,
                form: ne,
                script: oe,
                select: pe,
                style: qe,
                option: re,
                ngBind: se,
                ngBindHtml: te,
                ngBindTemplate: ue,
                ngClass: ve,
                ngClassEven: we,
                ngClassOdd: xe,
                ngCloak: ye,
                ngController: ze,
                ngForm: Ae,
                ngHide: Be,
                ngIf: Ce,
                ngInclude: De,
                ngInit: Ee,
                ngNonBindable: Fe,
                ngPluralize: Ge,
                ngRepeat: He,
                ngShow: Ie,
                ngStyle: Je,
                ngSwitch: Ke,
                ngSwitchWhen: Le,
                ngSwitchDefault: Me,
                ngOptions: Ne,
                ngTransclude: Oe,
                ngModel: Pe,
                ngList: Qe,
                ngChange: Re,
                pattern: Ec,
                ngPattern: Ec,
                required: Fc,
                ngRequired: Fc,
                minlength: Gc,
                ngMinlength: Gc,
                maxlength: Hc,
                ngMaxlength: Hc,
                ngValue: Se,
                ngModelOptions: Te
            }).directive({
                ngInclude: Ue
            }).directive(sb).directive(Ic);
            a.provider({
                $anchorScroll: Ve,
                $animate: We,
                $animateCss: Xe,
                $$animateJs: Ye,
                $$animateQueue: Ze,
                $$AnimateRunner: $e,
                $$animateAsyncRun: af,
                $browser: bf,
                $cacheFactory: cf,
                $controller: df,
                $document: ef,
                $exceptionHandler: ff,
                $filter: Jc,
                $$forceReflow: gf,
                $interpolate: hf,
                $interval: jf,
                $http: kf,
                $httpParamSerializer: lf,
                $httpParamSerializerJQLike: mf,
                $httpBackend: nf,
                $xhrFactory: of,
                $location: pf,
                $log: qf,
                $parse: rf,
                $rootScope: sf,
                $q: tf,
                $$q: uf,
                $sce: vf,
                $sceDelegate: wf,
                $sniffer: xf,
                $templateCache: yf,
                $templateRequest: zf,
                $$testability: Af,
                $timeout: Bf,
                $window: Cf,
                $$rAF: Df,
                $$jqLite: Ef,
                $$HashMap: Ff,
                $$cookieReader: Gf
            });
        } ]);
    }(da), da.module("ngLocale", [], [ "$provide", function(a) {
        function b(a) {
            a += "";
            var b = a.indexOf(".");
            return -1 == b ? 0 : a.length - b - 1;
        }
        a.value("$locale", {
            DATETIME_FORMATS: {
                AMPMS: [ "AM", "PM" ],
                DAY: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
                ERANAMES: [ "Before Christ", "Anno Domini" ],
                ERAS: [ "BC", "AD" ],
                FIRSTDAYOFWEEK: 6,
                MONTH: "January February March April May June July August September October November December".split(" "),
                SHORTDAY: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
                SHORTMONTH: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
                STANDALONEMONTH: "January February March April May June July August September October November December".split(" "),
                WEEKENDRANGE: [ 5, 6 ],
                fullDate: "EEEE, MMMM d, y",
                longDate: "MMMM d, y",
                medium: "MMM d, y h:mm:ss a",
                mediumDate: "MMM d, y",
                mediumTime: "h:mm:ss a",
                short: "M/d/yy h:mm a",
                shortDate: "M/d/yy",
                shortTime: "h:mm a"
            },
            NUMBER_FORMATS: {
                CURRENCY_SYM: "$",
                DECIMAL_SEP: ".",
                GROUP_SEP: ",",
                PATTERNS: [ {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 3,
                    minFrac: 0,
                    minInt: 1,
                    negPre: "-",
                    negSuf: "",
                    posPre: "",
                    posSuf: ""
                }, {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 2,
                    minFrac: 2,
                    minInt: 1,
                    negPre: "-¤",
                    negSuf: "",
                    posPre: "¤",
                    posSuf: ""
                } ]
            },
            id: "en-us",
            localeID: "en_US",
            pluralCat: function(a, c) {
                var e = 0 | a, f = c;
                x === f && (f = Math.min(b(a), 3));
                Math.pow(10, f);
                return 1 == e && 0 == f ? "one" : "other";
            }
        });
    } ]), D(U).ready(function() {
        de(U, yc);
    }));
}(window, document);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/*
 AngularJS v1.4.14
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(D, n, Va) {
    "use strict";
    function za(a, b, c) {
        if (!a) throw Ka("areq", b || "?", c || "required");
        return a;
    }
    function Aa(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        da(a) && (a = a.join(" "));
        da(b) && (b = b.join(" "));
        return a + " " + b;
    }
    function La(a) {
        var b = {};
        a && (a.to || a.from) && (b.to = a.to, b.from = a.from);
        return b;
    }
    function X(a, b, c) {
        var d = "";
        a = da(a) ? a : a && E(a) && a.length ? a.split(/\s+/) : [];
        s(a, function(a, f) {
            a && 0 < a.length && (d += 0 < f ? " " : "", d += c ? b + a : a + b);
        });
        return d;
    }
    function Ma(a) {
        if (a instanceof G) switch (a.length) {
          case 0:
            return a;

          case 1:
            if (1 === a[0].nodeType) return a;
            break;

          default:
            return G(ha(a));
        }
        if (1 === a.nodeType) return G(a);
    }
    function ha(a) {
        if (!a[0]) return a;
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            if (1 == c.nodeType) return c;
        }
    }
    function Na(a, b, c) {
        s(b, function(b) {
            a.addClass(b, c);
        });
    }
    function Oa(a, b, c) {
        s(b, function(b) {
            a.removeClass(b, c);
        });
    }
    function Q(a) {
        return function(b, c) {
            c.addClass && (Na(a, b, c.addClass), c.addClass = null);
            c.removeClass && (Oa(a, b, c.removeClass), c.removeClass = null);
        };
    }
    function pa(a) {
        a = a || {};
        if (!a.$$prepared) {
            var b = a.domOperation || O;
            a.domOperation = function() {
                a.$$domOperationFired = !0;
                b();
                b = O;
            };
            a.$$prepared = !0;
        }
        return a;
    }
    function ia(a, b) {
        Ba(a, b);
        Ca(a, b);
    }
    function Ba(a, b) {
        b.from && (a.css(b.from), b.from = null);
    }
    function Ca(a, b) {
        b.to && (a.css(b.to), b.to = null);
    }
    function T(a, b, c) {
        var d = b.options || {};
        c = c.options || {};
        var e = (d.addClass || "") + " " + (c.addClass || ""), f = (d.removeClass || "") + " " + (c.removeClass || "");
        a = Pa(a.attr("class"), e, f);
        c.preparationClasses && (d.preparationClasses = Y(c.preparationClasses, d.preparationClasses), 
        delete c.preparationClasses);
        e = d.domOperation !== O ? d.domOperation : null;
        Da(d, c);
        e && (d.domOperation = e);
        d.addClass = a.addClass ? a.addClass : null;
        d.removeClass = a.removeClass ? a.removeClass : null;
        b.addClass = d.addClass;
        b.removeClass = d.removeClass;
        return d;
    }
    function Pa(a, b, c) {
        function d(a) {
            E(a) && (a = a.split(" "));
            var b = {};
            s(a, function(a) {
                a.length && (b[a] = !0);
            });
            return b;
        }
        var e = {};
        a = d(a);
        b = d(b);
        s(b, function(a, b) {
            e[b] = 1;
        });
        c = d(c);
        s(c, function(a, b) {
            e[b] = 1 === e[b] ? null : -1;
        });
        var f = {
            addClass: "",
            removeClass: ""
        };
        s(e, function(b, c) {
            var d, e;
            1 === b ? (d = "addClass", e = !a[c]) : -1 === b && (d = "removeClass", e = a[c]);
            e && (f[d].length && (f[d] += " "), f[d] += c);
        });
        return f;
    }
    function x(a) {
        return a instanceof n.element ? a[0] : a;
    }
    function Qa(a, b, c) {
        var d = "";
        b && (d = X(b, "ng-", !0));
        c.addClass && (d = Y(d, X(c.addClass, "-add")));
        c.removeClass && (d = Y(d, X(c.removeClass, "-remove")));
        d.length && (c.preparationClasses = d, a.addClass(d));
    }
    function qa(a, b) {
        var c = b ? "-" + b + "s" : "";
        ma(a, [ na, c ]);
        return [ na, c ];
    }
    function sa(a, b) {
        var c = b ? "paused" : "", d = Z + "PlayState";
        ma(a, [ d, c ]);
        return [ d, c ];
    }
    function ma(a, b) {
        a.style[b[0]] = b[1];
    }
    function Y(a, b) {
        return a ? b ? a + " " + b : a : b;
    }
    function Ea(a, b, c) {
        var d = Object.create(null), e = a.getComputedStyle(b) || {};
        s(c, function(a, b) {
            var c = e[a];
            if (c) {
                var J = c.charAt(0);
                ("-" === J || "+" === J || 0 <= J) && (c = Ra(c));
                0 === c && (c = null);
                d[b] = c;
            }
        });
        return d;
    }
    function Ra(a) {
        var b = 0;
        a = a.split(/\s*,\s*/);
        s(a, function(a) {
            "s" == a.charAt(a.length - 1) && (a = a.substring(0, a.length - 1));
            a = parseFloat(a) || 0;
            b = b ? Math.max(a, b) : a;
        });
        return b;
    }
    function ta(a) {
        return 0 === a || null != a;
    }
    function Fa(a, b) {
        var c = R, d = a + "s";
        b ? c += "Duration" : d += " linear all";
        return [ c, d ];
    }
    function Ga() {
        var a = Object.create(null);
        return {
            flush: function() {
                a = Object.create(null);
            },
            count: function(b) {
                return (b = a[b]) ? b.total : 0;
            },
            get: function(b) {
                return (b = a[b]) && b.value;
            },
            put: function(b, c) {
                a[b] ? a[b].total++ : a[b] = {
                    total: 1,
                    value: c
                };
            }
        };
    }
    function Ha(a, b, c) {
        s(c, function(c) {
            a[c] = $(a[c]) ? a[c] : b.style.getPropertyValue(c);
        });
    }
    var R, va, Z, wa, O = n.noop, Ia = n.copy, Da = n.extend, G = n.element, s = n.forEach, da = n.isArray, E = n.isString, ea = n.isObject, N = n.isUndefined, $ = n.isDefined, Ja = n.isFunction, ua = n.isElement;
    N(D.ontransitionend) && $(D.onwebkittransitionend) ? (R = "WebkitTransition", va = "webkitTransitionEnd transitionend") : (R = "transition", 
    va = "transitionend");
    N(D.onanimationend) && $(D.onwebkitanimationend) ? (Z = "WebkitAnimation", wa = "webkitAnimationEnd animationend") : (Z = "animation", 
    wa = "animationend");
    var ra = Z + "Delay", xa = Z + "Duration", na = R + "Delay";
    D = R + "Duration";
    var Ka = n.$$minErr("ng"), Sa = {
        transitionDuration: D,
        transitionDelay: na,
        transitionProperty: R + "Property",
        animationDuration: xa,
        animationDelay: ra,
        animationIterationCount: Z + "IterationCount"
    }, Ta = {
        transitionDuration: D,
        transitionDelay: na,
        animationDuration: xa,
        animationDelay: ra
    };
    n.module("ngAnimate", []).directive("ngAnimateChildren", [ "$interpolate", function(a) {
        return {
            link: function(b, c, d) {
                function e(a) {
                    c.data("$$ngAnimateChildren", "on" === a || "true" === a);
                }
                var f = d.ngAnimateChildren;
                n.isString(f) && 0 === f.length ? c.data("$$ngAnimateChildren", !0) : (e(a(f)(b)), 
                d.$observe("ngAnimateChildren", e));
            }
        };
    } ]).factory("$$rAFScheduler", [ "$$rAF", function(a) {
        function b(a) {
            d = d.concat(a);
            c();
        }
        function c() {
            if (d.length) {
                for (var b = d.shift(), L = 0; L < b.length; L++) b[L]();
                e || a(function() {
                    e || c();
                });
            }
        }
        var d, e;
        d = b.queue = [];
        b.waitUntilQuiet = function(b) {
            e && e();
            e = a(function() {
                e = null;
                b();
                c();
            });
        };
        return b;
    } ]).provider("$$animateQueue", [ "$animateProvider", function(a) {
        function b(a) {
            if (!a) return null;
            a = a.split(" ");
            var b = Object.create(null);
            s(a, function(a) {
                b[a] = !0;
            });
            return b;
        }
        function c(a, c) {
            if (a && c) {
                var d = b(c);
                return a.split(" ").some(function(a) {
                    return d[a];
                });
            }
        }
        function d(a, b, c, d) {
            return f[a].some(function(a) {
                return a(b, c, d);
            });
        }
        function e(a, b) {
            var c = 0 < (a.addClass || "").length, d = 0 < (a.removeClass || "").length;
            return b ? c && d : c || d;
        }
        var f = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };
        f.join.push(function(a, b, c) {
            return !b.structural && e(b);
        });
        f.skip.push(function(a, b, c) {
            return !b.structural && !e(b);
        });
        f.skip.push(function(a, b, c) {
            return "leave" == c.event && b.structural;
        });
        f.skip.push(function(a, b, c) {
            return c.structural && 2 === c.state && !b.structural;
        });
        f.cancel.push(function(a, b, c) {
            return c.structural && b.structural;
        });
        f.cancel.push(function(a, b, c) {
            return 2 === c.state && b.structural;
        });
        f.cancel.push(function(a, b, d) {
            a = b.addClass;
            b = b.removeClass;
            var e = d.addClass;
            d = d.removeClass;
            return !(N(a) && N(b) || N(e) && N(d)) && (c(a, d) || c(b, e));
        });
        this.$get = [ "$$rAF", "$rootScope", "$rootElement", "$document", "$$HashMap", "$$animation", "$$AnimateRunner", "$templateRequest", "$$jqLite", "$$forceReflow", function(b, c, f, r, v, n, t, y, m, g) {
            function P() {
                var a = !1;
                return function(b) {
                    a ? b() : c.$$postDigest(function() {
                        a = !0;
                        b();
                    });
                };
            }
            function H(a, b, c) {
                var h = x(b), d = x(a), k = [];
                (a = l[c]) && s(a, function(a) {
                    aa.call(a.node, h) ? k.push(a.callback) : "leave" === c && aa.call(a.node, d) && k.push(a.callback);
                });
                return k;
            }
            function k(a, K, k) {
                function l(c, h, d, k) {
                    r(function() {
                        var c = H(I, a, h);
                        c.length && b(function() {
                            s(c, function(b) {
                                b(a, d, k);
                            });
                        });
                    });
                    c.progress(h, d, k);
                }
                function u(b) {
                    var c = a, h = g;
                    h.preparationClasses && (c.removeClass(h.preparationClasses), h.preparationClasses = null);
                    h.activeClasses && (c.removeClass(h.activeClasses), h.activeClasses = null);
                    A(a, g);
                    ia(a, g);
                    g.domOperation();
                    f.complete(!b);
                }
                var W, I, g = Ia(k);
                (a = Ma(a)) && (W = x(a), I = a.parent());
                var g = pa(g), f = new t(), r = P();
                da(g.addClass) && (g.addClass = g.addClass.join(" "));
                g.addClass && !E(g.addClass) && (g.addClass = null);
                da(g.removeClass) && (g.removeClass = g.removeClass.join(" "));
                g.removeClass && !E(g.removeClass) && (g.removeClass = null);
                g.from && !ea(g.from) && (g.from = null);
                g.to && !ea(g.to) && (g.to = null);
                if (!W) return u(), f;
                k = [ W.className, g.addClass, g.removeClass ].join(" ");
                if (!Ua(k)) return u(), f;
                var J = 0 <= [ "enter", "move", "leave" ].indexOf(K), m = h.hidden, v = !F || m || B.get(W);
                k = !v && w.get(W) || {};
                var aa = !!k.state;
                v || aa && 1 == k.state || (v = !p(a, I, K));
                if (v) return m && l(f, K, "start"), u(), m && l(f, K, "close"), f;
                J && ya(a);
                m = {
                    structural: J,
                    element: a,
                    event: K,
                    addClass: g.addClass,
                    removeClass: g.removeClass,
                    close: u,
                    options: g,
                    runner: f
                };
                if (aa) {
                    if (d("skip", a, m, k)) {
                        if (2 === k.state) return u(), f;
                        T(a, k, m);
                        return k.runner;
                    }
                    if (d("cancel", a, m, k)) if (2 === k.state) k.runner.end(); else {
                        if (!k.structural) return T(a, k, m), k.runner;
                        k.close();
                    } else if (d("join", a, m, k)) {
                        if (2 !== k.state) return Qa(a, J ? K : null, g), K = m.event = k.event, g = T(a, k, m), 
                        k.runner;
                        T(a, m, {});
                    }
                } else T(a, m, {});
                (aa = m.structural) || (aa = "animate" === m.event && 0 < Object.keys(m.options.to || {}).length || e(m));
                if (!aa) return u(), la(a), f;
                var y = (k.counter || 0) + 1;
                m.counter = y;
                C(a, 1, m);
                c.$$postDigest(function() {
                    var b = w.get(W), c = !b, b = b || {}, h = 0 < (a.parent() || []).length && ("animate" === b.event || b.structural || e(b));
                    if (c || b.counter !== y || !h) {
                        c && (A(a, g), ia(a, g));
                        (c || J && b.event !== K) && (g.domOperation(), f.end());
                        h || la(a);
                    } else K = !b.structural && e(b, !0) ? "setClass" : b.event, C(a, 2), b = n(a, K, b.options), 
                    f.setHost(b), l(f, K, "start", {}), b.done(function(b) {
                        u(!b);
                        (b = w.get(W)) && b.counter === y && la(x(a));
                        l(f, K, "close", {});
                    });
                });
                return f;
            }
            function ya(a) {
                a = x(a).querySelectorAll("[data-ng-animate]");
                s(a, function(a) {
                    var b = parseInt(a.getAttribute("data-ng-animate")), c = w.get(a);
                    if (c) switch (b) {
                      case 2:
                        c.runner.end();

                      case 1:
                        w.remove(a);
                    }
                });
            }
            function la(a) {
                a = x(a);
                a.removeAttribute("data-ng-animate");
                w.remove(a);
            }
            function I(a, b) {
                return x(a) === x(b);
            }
            function p(a, b, c) {
                c = G(h.body);
                var l, d = I(a, c) || "HTML" === a[0].nodeName, k = I(a, f), g = !1, e = B.get(x(a));
                (a = G.data(a[0], "$ngAnimatePin")) && (b = a);
                for (b = x(b); b; ) {
                    k || (k = I(b, f));
                    if (1 !== b.nodeType) break;
                    a = w.get(b) || {};
                    if (!g) {
                        var u = B.get(b);
                        if (!0 === u && !1 !== e) {
                            e = !0;
                            break;
                        }
                        !1 === u && (e = !1);
                        g = a.structural;
                    }
                    (N(l) || !0 === l) && (a = G.data(b, "$$ngAnimateChildren"), $(a) && (l = a));
                    if (g && !1 === l) break;
                    d || (d = I(b, c));
                    if (d && k) break;
                    k || !(a = G.data(b, "$ngAnimatePin")) ? b = b.parentNode : b = x(a);
                }
                return (!g || l) && !0 !== e && k && d;
            }
            function C(a, b, c) {
                c = c || {};
                c.state = b;
                a = x(a);
                a.setAttribute("data-ng-animate", b);
                c = (b = w.get(a)) ? Da(b, c) : c;
                w.put(a, c);
            }
            var w = new v(), B = new v(), F = null, h = r[0] || {
                hidden: !0
            }, W = c.$watch(function() {
                return 0 === y.totalPendingRequests;
            }, function(a) {
                a && (W(), c.$$postDigest(function() {
                    c.$$postDigest(function() {
                        null === F && (F = !0);
                    });
                }));
            }), l = {}, u = a.classNameFilter(), Ua = u ? function(a) {
                return u.test(a);
            } : function() {
                return !0;
            }, A = Q(m), aa = Node.prototype.contains || function(a) {
                return this === a || !!(16 & this.compareDocumentPosition(a));
            };
            return {
                on: function(a, b, c) {
                    b = ha(b);
                    l[a] = l[a] || [];
                    l[a].push({
                        node: b,
                        callback: c
                    });
                },
                off: function(a, b, c) {
                    var d = l[a];
                    d && (l[a] = 1 === arguments.length ? null : function(a, b, c) {
                        var d = ha(b);
                        return a.filter(function(a) {
                            return !(a.node === d && (!c || a.callback === c));
                        });
                    }(d, b, c));
                },
                pin: function(a, b) {
                    za(ua(a), "element", "not an element");
                    za(ua(b), "parentElement", "not an element");
                    a.data("$ngAnimatePin", b);
                },
                push: function(a, b, c, h) {
                    c = c || {};
                    c.domOperation = h;
                    return k(a, b, c);
                },
                enabled: function(a, b) {
                    var c = arguments.length;
                    if (0 === c) b = !!F; else if (ua(a)) {
                        var h = x(a), d = B.get(h);
                        1 === c ? b = !d : B.put(h, !b);
                    } else b = F = !!a;
                    return b;
                }
            };
        } ];
    } ]).provider("$$animation", [ "$animateProvider", function(a) {
        function b(a) {
            return a.data("$$animationRunner");
        }
        var c = this.drivers = [];
        this.$get = [ "$$jqLite", "$rootScope", "$injector", "$$AnimateRunner", "$$HashMap", "$$rAFScheduler", function(a, e, f, L, U, J) {
            function r(a) {
                function b(a) {
                    if (a.processed) return a;
                    a.processed = !0;
                    var d = a.domNode, g = d.parentNode;
                    e.put(d, a);
                    for (var f; g; ) {
                        if (f = e.get(g)) {
                            f.processed || (f = b(f));
                            break;
                        }
                        g = g.parentNode;
                    }
                    (f || c).children.push(a);
                    return a;
                }
                var d, c = {
                    children: []
                }, e = new U();
                for (d = 0; d < a.length; d++) {
                    var f = a[d];
                    e.put(f.domNode, a[d] = {
                        domNode: f.domNode,
                        fn: f.fn,
                        children: []
                    });
                }
                for (d = 0; d < a.length; d++) b(a[d]);
                return function(a) {
                    var d, b = [], c = [];
                    for (d = 0; d < a.children.length; d++) c.push(a.children[d]);
                    a = c.length;
                    var g = 0, e = [];
                    for (d = 0; d < c.length; d++) {
                        var f = c[d];
                        0 >= a && (a = g, g = 0, b.push(e), e = []);
                        e.push(f.fn);
                        f.children.forEach(function(a) {
                            g++;
                            c.push(a);
                        });
                        a--;
                    }
                    e.length && b.push(e);
                    return b;
                }(c);
            }
            var v = [], n = Q(a);
            return function(t, y, m) {
                function g(a) {
                    a = a.hasAttribute("ng-animate-ref") ? [ a ] : a.querySelectorAll("[ng-animate-ref]");
                    var b = [];
                    s(a, function(a) {
                        var c = a.getAttribute("ng-animate-ref");
                        c && c.length && b.push(a);
                    });
                    return b;
                }
                function P(a) {
                    var b = [], c = {};
                    s(a, function(a, d) {
                        var h = x(a.element), k = 0 <= [ "enter", "move" ].indexOf(a.event), h = a.structural ? g(h) : [];
                        if (h.length) {
                            var e = k ? "to" : "from";
                            s(h, function(a) {
                                var b = a.getAttribute("ng-animate-ref");
                                c[b] = c[b] || {};
                                c[b][e] = {
                                    animationID: d,
                                    element: G(a)
                                };
                            });
                        } else b.push(a);
                    });
                    var d = {}, k = {};
                    s(c, function(c, g) {
                        var e = c.from, l = c.to;
                        if (e && l) {
                            var f = a[e.animationID], B = a[l.animationID], p = e.animationID.toString();
                            if (!k[p]) {
                                var C = k[p] = {
                                    structural: !0,
                                    beforeStart: function() {
                                        f.beforeStart();
                                        B.beforeStart();
                                    },
                                    close: function() {
                                        f.close();
                                        B.close();
                                    },
                                    classes: H(f.classes, B.classes),
                                    from: f,
                                    to: B,
                                    anchors: []
                                };
                                C.classes.length ? b.push(C) : (b.push(f), b.push(B));
                            }
                            k[p].anchors.push({
                                out: e.element,
                                in: l.element
                            });
                        } else e = e ? e.animationID : l.animationID, l = e.toString(), d[l] || (d[l] = !0, 
                        b.push(a[e]));
                    });
                    return b;
                }
                function H(a, b) {
                    a = a.split(" ");
                    b = b.split(" ");
                    for (var c = [], d = 0; d < a.length; d++) {
                        var k = a[d];
                        if ("ng-" !== k.substring(0, 3)) for (var g = 0; g < b.length; g++) if (k === b[g]) {
                            c.push(k);
                            break;
                        }
                    }
                    return c.join(" ");
                }
                function k(a) {
                    for (var b = c.length - 1; 0 <= b; b--) {
                        var d = c[b];
                        if (f.has(d) && (d = f.get(d)(a))) return d;
                    }
                }
                function ya(a, c) {
                    a.from && a.to ? (b(a.from.element).setHost(c), b(a.to.element).setHost(c)) : b(a.element).setHost(c);
                }
                function la() {
                    var a = b(t);
                    !a || "leave" === y && m.$$domOperationFired || a.end();
                }
                function I(b) {
                    t.off("$destroy", la);
                    t.removeData("$$animationRunner");
                    n(t, m);
                    ia(t, m);
                    m.domOperation();
                    B && a.removeClass(t, B);
                    t.removeClass("ng-animate");
                    C.complete(!b);
                }
                m = pa(m);
                var p = 0 <= [ "enter", "move", "leave" ].indexOf(y), C = new L({
                    end: function() {
                        I();
                    },
                    cancel: function() {
                        I(!0);
                    }
                });
                if (!c.length) return I(), C;
                t.data("$$animationRunner", C);
                var w = Aa(t.attr("class"), Aa(m.addClass, m.removeClass)), B = m.tempClasses;
                B && (w += " " + B, m.tempClasses = null);
                var F;
                p && (F = "ng-" + y + "-prepare", a.addClass(t, F));
                v.push({
                    element: t,
                    classes: w,
                    event: y,
                    structural: p,
                    options: m,
                    beforeStart: function() {
                        t.addClass("ng-animate");
                        B && a.addClass(t, B);
                        F && (a.removeClass(t, F), F = null);
                    },
                    close: I
                });
                t.on("$destroy", la);
                if (1 < v.length) return C;
                e.$$postDigest(function() {
                    var a = [];
                    s(v, function(c) {
                        b(c.element) ? a.push(c) : c.close();
                    });
                    v.length = 0;
                    var c = P(a), d = [];
                    s(c, function(a) {
                        d.push({
                            domNode: x(a.from ? a.from.element : a.element),
                            fn: function() {
                                a.beforeStart();
                                var c, d = a.close;
                                if (b(a.anchors ? a.from.element || a.to.element : a.element)) {
                                    var h = k(a);
                                    h && (c = h.start);
                                }
                                c ? (c = c(), c.done(function(a) {
                                    d(!a);
                                }), ya(a, c)) : d();
                            }
                        });
                    });
                    J(r(d));
                });
                return C;
            };
        } ];
    } ]).provider("$animateCss", [ "$animateProvider", function(a) {
        var b = Ga(), c = Ga();
        this.$get = [ "$window", "$$jqLite", "$$AnimateRunner", "$timeout", "$$forceReflow", "$sniffer", "$$rAFScheduler", "$$animateQueue", function(a, e, f, L, n, J, r, v) {
            function G(a, b) {
                var c = a.parentNode;
                return (c.$$ngAnimateParentKey || (c.$$ngAnimateParentKey = ++P)) + "-" + a.getAttribute("class") + "-" + b;
            }
            function t(k, g, f, m) {
                var p;
                0 < b.count(f) && ((p = c.get(f)) || (g = X(g, "-stagger"), e.addClass(k, g), p = Ea(a, k, m), 
                p.animationDuration = Math.max(p.animationDuration, 0), p.transitionDuration = Math.max(p.transitionDuration, 0), 
                e.removeClass(k, g), c.put(f, p)));
                return p || {};
            }
            function y(a) {
                H.push(a);
                r.waitUntilQuiet(function() {
                    b.flush();
                    c.flush();
                    for (var a = n(), d = 0; d < H.length; d++) H[d](a);
                    H.length = 0;
                });
            }
            function m(c, g, e) {
                g = b.get(e);
                g || (g = Ea(a, c, Sa), "infinite" === g.animationIterationCount && (g.animationIterationCount = 1));
                b.put(e, g);
                c = g;
                e = c.animationDelay;
                g = c.transitionDelay;
                c.maxDelay = e && g ? Math.max(e, g) : e || g;
                c.maxDuration = Math.max(c.animationDuration * c.animationIterationCount, c.transitionDuration);
                return c;
            }
            var g = Q(e), P = 0, H = [];
            return function(a, c) {
                function d() {
                    p();
                }
                function r() {
                    p(!0);
                }
                function p(b) {
                    if (!(P || K && U)) {
                        P = !0;
                        U = !1;
                        h.$$skipPreparationClasses || e.removeClass(a, ga);
                        e.removeClass(a, ha);
                        sa(l, !1);
                        qa(l, !1);
                        s(u, function(a) {
                            l.style[a[0]] = "";
                        });
                        g(a, h);
                        ia(a, h);
                        Object.keys(H).length && s(H, function(a, b) {
                            a ? l.style.setProperty(b, a) : l.style.removeProperty(b);
                        });
                        h.onDone && h.onDone();
                        fa && fa.length && a.off(fa.join(" "), B);
                        var c = a.data("$$animateCss");
                        c && (L.cancel(c[0].timer), a.removeData("$$animateCss"));
                        D && D.complete(!b);
                    }
                }
                function C(a) {
                    q.blockTransition && qa(l, a);
                    q.blockKeyframeAnimation && sa(l, !!a);
                }
                function w() {
                    D = new f({
                        end: d,
                        cancel: r
                    });
                    y(O);
                    p();
                    return {
                        $$willAnimate: !1,
                        start: function() {
                            return D;
                        },
                        end: d
                    };
                }
                function B(a) {
                    a.stopPropagation();
                    var b = a.originalEvent || a;
                    a = b.$manualTimeStamp || Date.now();
                    b = parseFloat(b.elapsedTime.toFixed(3));
                    Math.max(a - Y, 0) >= Q && b >= M && (K = !0, p());
                }
                function F() {
                    function b() {
                        if (!P) {
                            C(!1);
                            s(u, function(a) {
                                l.style[a[0]] = a[1];
                            });
                            g(a, h);
                            e.addClass(a, ha);
                            if (q.recalculateTimingStyles) {
                                oa = l.className + " " + ga;
                                ja = G(l, oa);
                                z = m(l, oa, ja);
                                ba = z.maxDelay;
                                E = Math.max(ba, 0);
                                M = z.maxDuration;
                                if (0 === M) {
                                    p();
                                    return;
                                }
                                q.hasTransitions = 0 < z.transitionDuration;
                                q.hasAnimations = 0 < z.animationDuration;
                            }
                            q.applyAnimationDelay && (ba = "boolean" != typeof h.delay && ta(h.delay) ? parseFloat(h.delay) : ba, 
                            E = Math.max(ba, 0), z.animationDelay = ba, ca = [ ra, ba + "s" ], u.push(ca), l.style[ca[0]] = ca[1]);
                            Q = 1e3 * E;
                            T = 1e3 * M;
                            if (h.easing) {
                                var d, f = h.easing;
                                q.hasTransitions && (d = R + "TimingFunction", u.push([ d, f ]), l.style[d] = f);
                                q.hasAnimations && (d = Z + "TimingFunction", u.push([ d, f ]), l.style[d] = f);
                            }
                            z.transitionDuration && fa.push(va);
                            z.animationDuration && fa.push(wa);
                            Y = Date.now();
                            var F = Q + 1.5 * T;
                            d = Y + F;
                            var f = a.data("$$animateCss") || [], w = !0;
                            if (f.length) {
                                var r = f[0];
                                (w = d > r.expectedEndTime) ? L.cancel(r.timer) : f.push(p);
                            }
                            w && (F = L(c, F, !1), f[0] = {
                                timer: F,
                                expectedEndTime: d
                            }, f.push(p), a.data("$$animateCss", f));
                            fa.length && a.on(fa.join(" "), B);
                            h.to && (h.cleanupStyles && Ha(H, l, Object.keys(h.to)), Ca(a, h));
                        }
                    }
                    function c() {
                        var b = a.data("$$animateCss");
                        if (b) {
                            for (var d = 1; d < b.length; d++) b[d]();
                            a.removeData("$$animateCss");
                        }
                    }
                    if (!P) if (l.parentNode) {
                        var d = function(a) {
                            if (K) U && a && (U = !1, p()); else if (U = !a, z.animationDuration) if (a = sa(l, U), 
                            U) u.push(a); else {
                                var b = u, c = b.indexOf(a);
                                0 <= a && b.splice(c, 1);
                            }
                        }, f = 0 < ea && (z.transitionDuration && 0 === V.transitionDuration || z.animationDuration && 0 === V.animationDuration) && Math.max(V.animationDelay, V.transitionDelay);
                        f ? L(b, Math.floor(f * ea * 1e3), !1) : b();
                        N.resume = function() {
                            d(!0);
                        };
                        N.pause = function() {
                            d(!1);
                        };
                    } else p();
                }
                var h = c || {};
                h.$$prepared || (h = pa(Ia(h)));
                var H = {}, l = x(a);
                if (!l || !l.parentNode || !v.enabled()) return w();
                var P, U, K, D, N, E, Q, M, T, Y, u = [], n = a.attr("class"), A = La(h), fa = [];
                if (0 === h.duration || !J.animations && !J.transitions) return w();
                var ka = h.event && da(h.event) ? h.event.join(" ") : h.event, $ = "", S = "";
                ka && h.structural ? $ = X(ka, "ng-", !0) : ka && ($ = ka);
                h.addClass && (S += X(h.addClass, "-add"));
                h.removeClass && (S.length && (S += " "), S += X(h.removeClass, "-remove"));
                h.applyClassesEarly && S.length && g(a, h);
                var ga = [ $, S ].join(" ").trim(), oa = n + " " + ga, ha = X(ga, "-active"), n = A.to && 0 < Object.keys(A.to).length;
                if (!(0 < (h.keyframeStyle || "").length || n || ga)) return w();
                var ja, V;
                0 < h.stagger ? (A = parseFloat(h.stagger), V = {
                    transitionDelay: A,
                    animationDelay: A,
                    transitionDuration: 0,
                    animationDuration: 0
                }) : (ja = G(l, oa), V = t(l, ga, ja, Ta));
                h.$$skipPreparationClasses || e.addClass(a, ga);
                h.transitionStyle && (A = [ R, h.transitionStyle ], ma(l, A), u.push(A));
                0 <= h.duration && (A = 0 < l.style[R].length, A = Fa(h.duration, A), ma(l, A), 
                u.push(A));
                h.keyframeStyle && (A = [ Z, h.keyframeStyle ], ma(l, A), u.push(A));
                var ea = V ? 0 <= h.staggerIndex ? h.staggerIndex : b.count(ja) : 0;
                (ka = 0 === ea) && !h.skipBlocking && qa(l, 9999);
                var z = m(l, oa, ja), ba = z.maxDelay;
                E = Math.max(ba, 0);
                M = z.maxDuration;
                var q = {};
                q.hasTransitions = 0 < z.transitionDuration;
                q.hasAnimations = 0 < z.animationDuration;
                q.hasTransitionAll = q.hasTransitions && "all" == z.transitionProperty;
                q.applyTransitionDuration = n && (q.hasTransitions && !q.hasTransitionAll || q.hasAnimations && !q.hasTransitions);
                q.applyAnimationDuration = h.duration && q.hasAnimations;
                q.applyTransitionDelay = ta(h.delay) && (q.applyTransitionDuration || q.hasTransitions);
                q.applyAnimationDelay = ta(h.delay) && q.hasAnimations;
                q.recalculateTimingStyles = 0 < S.length;
                (q.applyTransitionDuration || q.applyAnimationDuration) && (M = h.duration ? parseFloat(h.duration) : M, 
                q.applyTransitionDuration && (q.hasTransitions = !0, z.transitionDuration = M, A = 0 < l.style[R + "Property"].length, 
                u.push(Fa(M, A))), q.applyAnimationDuration && (q.hasAnimations = !0, z.animationDuration = M, 
                u.push([ xa, M + "s" ])));
                if (0 === M && !q.recalculateTimingStyles) return w();
                if (null != h.delay) {
                    var ca;
                    "boolean" != typeof h.delay && (ca = parseFloat(h.delay), E = Math.max(ca, 0));
                    q.applyTransitionDelay && u.push([ na, ca + "s" ]);
                    q.applyAnimationDelay && u.push([ ra, ca + "s" ]);
                }
                null == h.duration && 0 < z.transitionDuration && (q.recalculateTimingStyles = q.recalculateTimingStyles || ka);
                Q = 1e3 * E;
                T = 1e3 * M;
                h.skipBlocking || (q.blockTransition = 0 < z.transitionDuration, q.blockKeyframeAnimation = 0 < z.animationDuration && 0 < V.animationDelay && 0 === V.animationDuration);
                h.from && (h.cleanupStyles && Ha(H, l, Object.keys(h.from)), Ba(a, h));
                q.blockTransition || q.blockKeyframeAnimation ? C(M) : h.skipBlocking || qa(l, !1);
                return {
                    $$willAnimate: !0,
                    end: d,
                    start: function() {
                        if (!P) return N = {
                            end: d,
                            cancel: r,
                            resume: null,
                            pause: null
                        }, D = new f(N), y(F), D;
                    }
                };
            };
        } ];
    } ]).provider("$$animateCssDriver", [ "$$animationProvider", function(a) {
        a.drivers.push("$$animateCssDriver");
        this.$get = [ "$animateCss", "$rootScope", "$$AnimateRunner", "$rootElement", "$sniffer", "$$jqLite", "$document", function(a, c, d, e, f, L, n) {
            function J(a) {
                return a.replace(/\bng-\S+\b/g, "");
            }
            function r(a, b) {
                E(a) && (a = a.split(" "));
                E(b) && (b = b.split(" "));
                return a.filter(function(a) {
                    return -1 === b.indexOf(a);
                }).join(" ");
            }
            function v(c, f, e) {
                function k(a) {
                    var b = {}, c = x(a).getBoundingClientRect();
                    s([ "width", "height", "top", "left" ], function(a) {
                        var d = c[a];
                        switch (a) {
                          case "top":
                            d += y.scrollTop;
                            break;

                          case "left":
                            d += y.scrollLeft;
                        }
                        b[a] = Math.floor(d) + "px";
                    });
                    return b;
                }
                function L() {
                    var c = J(e.attr("class") || ""), d = r(c, p), c = r(p, c), d = a(v, {
                        to: k(e),
                        addClass: "ng-anchor-in " + d,
                        removeClass: "ng-anchor-out " + c,
                        delay: !0
                    });
                    return d.$$willAnimate ? d : null;
                }
                function n() {
                    v.remove();
                    f.removeClass("ng-animate-shim");
                    e.removeClass("ng-animate-shim");
                }
                var v = G(x(f).cloneNode(!0)), p = J(v.attr("class") || "");
                f.addClass("ng-animate-shim");
                e.addClass("ng-animate-shim");
                v.addClass("ng-anchor");
                m.append(v);
                var C;
                c = function() {
                    var c = a(v, {
                        addClass: "ng-anchor-out",
                        delay: !0,
                        from: k(f)
                    });
                    return c.$$willAnimate ? c : null;
                }();
                if (!c && !(C = L())) return n();
                var w = c || C;
                return {
                    start: function() {
                        function a() {
                            c && c.end();
                        }
                        var b, c = w.start();
                        c.done(function() {
                            c = null;
                            if (!C && (C = L())) return c = C.start(), c.done(function() {
                                c = null;
                                n();
                                b.complete();
                            }), c;
                            n();
                            b.complete();
                        });
                        return b = new d({
                            end: a,
                            cancel: a
                        });
                    }
                };
            }
            function D(a, b, c, f) {
                var e = t(a), m = t(b), r = [];
                s(f, function(a) {
                    (a = v(c, a.out, a.in)) && r.push(a);
                });
                if (e || m || 0 !== r.length) return {
                    start: function() {
                        function a() {
                            s(b, function(a) {
                                a.end();
                            });
                        }
                        var b = [];
                        e && b.push(e.start());
                        m && b.push(m.start());
                        s(r, function(a) {
                            b.push(a.start());
                        });
                        var c = new d({
                            end: a,
                            cancel: a
                        });
                        d.all(b, function(a) {
                            c.complete(a);
                        });
                        return c;
                    }
                };
            }
            function t(c) {
                var d = c.element, e = c.options || {};
                c.structural && (e.event = c.event, e.structural = !0, e.applyClassesEarly = !0, 
                "leave" === c.event && (e.onDone = e.domOperation));
                e.preparationClasses && (e.event = Y(e.event, e.preparationClasses));
                c = a(d, e);
                return c.$$willAnimate ? c : null;
            }
            if (!f.animations && !f.transitions) return O;
            var y = n[0].body;
            c = x(e);
            var m = G(c.parentNode && 11 === c.parentNode.nodeType || y.contains(c) ? c : y);
            Q(L);
            return function(a) {
                return a.from && a.to ? D(a.from, a.to, a.classes, a.anchors) : t(a);
            };
        } ];
    } ]).provider("$$animateJs", [ "$animateProvider", function(a) {
        this.$get = [ "$injector", "$$AnimateRunner", "$$jqLite", function(b, c, d) {
            function e(c) {
                c = da(c) ? c : c.split(" ");
                for (var d = [], e = {}, f = 0; f < c.length; f++) {
                    var v = c[f], n = a.$$registeredAnimations[v];
                    n && !e[v] && (d.push(b.get(n)), e[v] = !0);
                }
                return d;
            }
            var f = Q(d);
            return function(a, b, d, r) {
                function n() {
                    r.domOperation();
                    f(a, r);
                }
                function x(a, b, d, e, f) {
                    switch (d) {
                      case "animate":
                        b = [ b, e.from, e.to, f ];
                        break;

                      case "setClass":
                        b = [ b, g, D, f ];
                        break;

                      case "addClass":
                        b = [ b, g, f ];
                        break;

                      case "removeClass":
                        b = [ b, D, f ];
                        break;

                      default:
                        b = [ b, f ];
                    }
                    b.push(e);
                    if (a = a.apply(a, b)) if (Ja(a.start) && (a = a.start()), a instanceof c) a.done(f); else if (Ja(a)) return a;
                    return O;
                }
                function t(a, b, d, e, f) {
                    var g = [];
                    s(e, function(e) {
                        var k = e[f];
                        k && g.push(function() {
                            var e, f, h = !1, g = function(a) {
                                h || (h = !0, (f || O)(a), e.complete(!a));
                            };
                            e = new c({
                                end: function() {
                                    g();
                                },
                                cancel: function() {
                                    g(!0);
                                }
                            });
                            f = x(k, a, b, d, function(a) {
                                g(!1 === a);
                            });
                            return e;
                        });
                    });
                    return g;
                }
                function y(a, b, d, e, f) {
                    var g = t(a, b, d, e, f);
                    if (0 === g.length) {
                        var k, m;
                        "beforeSetClass" === f ? (k = t(a, "removeClass", d, e, "beforeRemoveClass"), m = t(a, "addClass", d, e, "beforeAddClass")) : "setClass" === f && (k = t(a, "removeClass", d, e, "removeClass"), 
                        m = t(a, "addClass", d, e, "addClass"));
                        k && (g = g.concat(k));
                        m && (g = g.concat(m));
                    }
                    if (0 !== g.length) return function(a) {
                        var b = [];
                        g.length && s(g, function(a) {
                            b.push(a());
                        });
                        b.length ? c.all(b, a) : a();
                        return function(a) {
                            s(b, function(b) {
                                a ? b.cancel() : b.end();
                            });
                        };
                    };
                }
                var m = !1;
                3 === arguments.length && ea(d) && (r = d, d = null);
                r = pa(r);
                d || (d = a.attr("class") || "", r.addClass && (d += " " + r.addClass), r.removeClass && (d += " " + r.removeClass));
                var k, E, g = r.addClass, D = r.removeClass, H = e(d);
                if (H.length) {
                    var G, I;
                    "leave" == b ? (I = "leave", G = "afterLeave") : (I = "before" + b.charAt(0).toUpperCase() + b.substr(1), 
                    G = b);
                    "enter" !== b && "move" !== b && (k = y(a, b, r, H, I));
                    E = y(a, b, r, H, G);
                }
                if (k || E) {
                    var p;
                    return {
                        $$willAnimate: !0,
                        end: function() {
                            p ? p.end() : (m = !0, n(), ia(a, r), p = new c(), p.complete(!0));
                            return p;
                        },
                        start: function() {
                            function b(c) {
                                m = !0;
                                n();
                                ia(a, r);
                                p.complete(c);
                            }
                            if (p) return p;
                            p = new c();
                            var d, e = [];
                            k && e.push(function(a) {
                                d = k(a);
                            });
                            e.length ? e.push(function(a) {
                                n();
                                a(!0);
                            }) : n();
                            E && e.push(function(a) {
                                d = E(a);
                            });
                            p.setHost({
                                end: function() {
                                    m || ((d || O)(void 0), b(void 0));
                                },
                                cancel: function() {
                                    m || ((d || O)(!0), b(!0));
                                }
                            });
                            c.chain(e, b);
                            return p;
                        }
                    };
                }
            };
        } ];
    } ]).provider("$$animateJsDriver", [ "$$animationProvider", function(a) {
        a.drivers.push("$$animateJsDriver");
        this.$get = [ "$$animateJs", "$$AnimateRunner", function(a, c) {
            function d(c) {
                return a(c.element, c.event, c.classes, c.options);
            }
            return function(a) {
                if (!a.from || !a.to) return d(a);
                var b = d(a.from), n = d(a.to);
                return b || n ? {
                    start: function() {
                        function a() {
                            return function() {
                                s(d, function(a) {
                                    a.end();
                                });
                            };
                        }
                        var d = [];
                        b && d.push(b.start());
                        n && d.push(n.start());
                        c.all(d, function(a) {
                            e.complete(a);
                        });
                        var e = new c({
                            end: a(),
                            cancel: a()
                        });
                        return e;
                    }
                } : void 0;
            };
        } ];
    } ]);
}(window, window.angular);

/*
 AngularJS v1.4.7
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(s, p, t) {
    "use strict";
    var q = "BUTTON A INPUT TEXTAREA SELECT DETAILS SUMMARY".split(" "), n = function(a, c) {
        if (-1 !== c.indexOf(a[0].nodeName)) return !0;
    };
    p.module("ngAria", [ "ng" ]).provider("$aria", function() {
        function a(a, f, l, m) {
            return function(d, e, b) {
                var g = b.$normalize(f);
                !c[g] || n(e, l) || b[g] || d.$watch(b[a], function(b) {
                    b = m ? !b : !!b;
                    e.attr(f, b);
                });
            };
        }
        var c = {
            ariaHidden: !0,
            ariaChecked: !0,
            ariaDisabled: !0,
            ariaRequired: !0,
            ariaInvalid: !0,
            ariaMultiline: !0,
            ariaValue: !0,
            tabindex: !0,
            bindKeypress: !0,
            bindRoleForClick: !0
        };
        this.config = function(a) {
            c = p.extend(c, a);
        };
        this.$get = function() {
            return {
                config: function(a) {
                    return c[a];
                },
                $$watchExpr: a
            };
        };
    }).directive("ngShow", [ "$aria", function(a) {
        return a.$$watchExpr("ngShow", "aria-hidden", [], !0);
    } ]).directive("ngHide", [ "$aria", function(a) {
        return a.$$watchExpr("ngHide", "aria-hidden", [], !1);
    } ]).directive("ngModel", [ "$aria", function(a) {
        function c(c, m, d) {
            return a.config(m) && !d.attr(c);
        }
        function k(a, c) {
            return !c.attr("role") && c.attr("type") === a && "INPUT" !== c[0].nodeName;
        }
        function f(a, c) {
            var d = a.type, e = a.role;
            return "checkbox" === (d || e) || "menuitemcheckbox" === e ? "checkbox" : "radio" === (d || e) || "menuitemradio" === e ? "radio" : "range" === d || "progressbar" === e || "slider" === e ? "range" : "textbox" === (d || e) || "TEXTAREA" === c[0].nodeName ? "multiline" : "";
        }
        return {
            restrict: "A",
            require: "?ngModel",
            priority: 200,
            compile: function(l, m) {
                var d = f(m, l);
                return {
                    pre: function(a, b, c, h) {
                        "checkbox" === d && "checkbox" !== c.type && (h.$isEmpty = function(b) {
                            return !1 === b;
                        });
                    },
                    post: function(e, b, g, h) {
                        function f() {
                            return h.$modelValue;
                        }
                        function l() {
                            b.attr("aria-checked", !h.$isEmpty(h.$viewValue));
                        }
                        var r = c("tabindex", "tabindex", b);
                        switch (d) {
                          case "radio":
                          case "checkbox":
                            k(d, b) && b.attr("role", d);
                            c("aria-checked", "ariaChecked", b) && e.$watch(f, "radio" === d ? function() {
                                return r ? (r = !1, function(a) {
                                    a = g.value == h.$viewValue;
                                    b.attr("aria-checked", a);
                                    b.attr("tabindex", 0 - !a);
                                }) : function(a) {
                                    b.attr("aria-checked", g.value == h.$viewValue);
                                };
                            }() : l);
                            r && b.attr("tabindex", 0);
                            break;

                          case "range":
                            k(d, b) && b.attr("role", "slider");
                            if (a.config("ariaValue")) {
                                var n = !b.attr("aria-valuemin") && (g.hasOwnProperty("min") || g.hasOwnProperty("ngMin")), p = !b.attr("aria-valuemax") && (g.hasOwnProperty("max") || g.hasOwnProperty("ngMax")), q = !b.attr("aria-valuenow");
                                n && g.$observe("min", function(a) {
                                    b.attr("aria-valuemin", a);
                                });
                                p && g.$observe("max", function(a) {
                                    b.attr("aria-valuemax", a);
                                });
                                q && e.$watch(f, function(a) {
                                    b.attr("aria-valuenow", a);
                                });
                            }
                            r && b.attr("tabindex", 0);
                            break;

                          case "multiline":
                            c("aria-multiline", "ariaMultiline", b) && b.attr("aria-multiline", !0);
                        }
                        h.$validators.required && c("aria-required", "ariaRequired", b) && e.$watch(function() {
                            return h.$error.required;
                        }, function(a) {
                            b.attr("aria-required", !!a);
                        });
                        c("aria-invalid", "ariaInvalid", b) && e.$watch(function() {
                            return h.$invalid;
                        }, function(a) {
                            b.attr("aria-invalid", !!a);
                        });
                    }
                };
            }
        };
    } ]).directive("ngDisabled", [ "$aria", function(a) {
        return a.$$watchExpr("ngDisabled", "aria-disabled", []);
    } ]).directive("ngMessages", function() {
        return {
            restrict: "A",
            require: "?ngMessages",
            link: function(a, c, k, f) {
                c.attr("aria-live") || c.attr("aria-live", "assertive");
            }
        };
    }).directive("ngClick", [ "$aria", "$parse", function(a, c) {
        return {
            restrict: "A",
            compile: function(k, f) {
                var l = c(f.ngClick, null, !0);
                return function(c, d, e) {
                    n(d, q) || (a.config("bindRoleForClick") && !d.attr("role") && d.attr("role", "button"), 
                    a.config("tabindex") && !d.attr("tabindex") && d.attr("tabindex", 0), !a.config("bindKeypress") || e.ngKeypress) || d.on("keypress", function(a) {
                        function d() {
                            l(c, {
                                $event: a
                            });
                        }
                        var e = a.which || a.keyCode;
                        32 !== e && 13 !== e || c.$apply(d);
                    });
                };
            }
        };
    } ]).directive("ngDblclick", [ "$aria", function(a) {
        return function(c, k, f) {
            !a.config("tabindex") || k.attr("tabindex") || n(k, q) || k.attr("tabindex", 0);
        };
    } ]);
}(window, window.angular);

/*
 AngularJS v1.4.14
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(z, b, A) {
    "use strict";
    function m(b) {
        return [ "$animate", function(r) {
            return {
                restrict: "AE",
                transclude: "element",
                terminal: !0,
                require: "^^ngMessages",
                link: function(n, e, a, f, l) {
                    var p, g = e[0], b = a.ngMessage || a.when;
                    a = a.ngMessageExp || a.whenExp;
                    var k = function(d) {
                        p = d ? w(d) ? d : d.split(/[\s,]+/) : null;
                        f.reRender();
                    };
                    a ? (k(n.$eval(a)), n.$watchCollection(a, k)) : k(b);
                    var h, q;
                    f.register(g, q = {
                        test: function(d) {
                            var a = p;
                            d = a ? w(a) ? 0 <= a.indexOf(d) : a.hasOwnProperty(d) : void 0;
                            return d;
                        },
                        attach: function() {
                            h || l(n, function(d) {
                                r.enter(d, null, e);
                                h = d;
                                var a = h.$$attachId = f.getAttachId();
                                h.on("$destroy", function() {
                                    h && h.$$attachId === a && (f.deregister(g), q.detach());
                                });
                            });
                        },
                        detach: function() {
                            if (h) {
                                var d = h;
                                h = null;
                                r.leave(d);
                            }
                        }
                    });
                }
            };
        } ];
    }
    var w = b.isArray, t = b.forEach, x = b.isString, y = b.element;
    b.module("ngMessages", []).directive("ngMessages", [ "$animate", function(b) {
        function r(e, a) {
            return x(a) && 0 === a.length || n(e.$eval(a));
        }
        function n(e) {
            return x(e) ? e.length : !!e;
        }
        return {
            require: "ngMessages",
            restrict: "AE",
            controller: [ "$element", "$scope", "$attrs", function(e, a, f) {
                function l(d, a) {
                    for (var c = a, e = []; c && c !== d; ) {
                        var g = c.$$ngMessageNode;
                        if (g && g.length) return k[g];
                        c.childNodes.length && -1 == e.indexOf(c) ? (e.push(c), c = c.childNodes[c.childNodes.length - 1]) : c.previousSibling ? c = c.previousSibling : (c = c.parentNode, 
                        e.push(c));
                    }
                }
                var g = this, p = 0, m = 0;
                this.getAttachId = function() {
                    return m++;
                };
                var h, q, k = this.messages = {};
                this.render = function(d) {
                    d = d || {};
                    h = !1;
                    q = d;
                    for (var k = r(a, f.ngMessagesMultiple) || r(a, f.multiple), c = [], p = {}, s = g.head, l = !1, m = 0; null != s; ) {
                        m++;
                        var u = s.message, v = !1;
                        l || t(d, function(d, a) {
                            !v && n(d) && u.test(a) && !p[a] && (v = p[a] = !0, u.attach());
                        });
                        v ? l = !k : c.push(u);
                        s = s.next;
                    }
                    t(c, function(a) {
                        a.detach();
                    });
                    c.length !== m ? b.setClass(e, "ng-active", "ng-inactive") : b.setClass(e, "ng-inactive", "ng-active");
                };
                a.$watchCollection(f.ngMessages || f.for, g.render);
                e.on("$destroy", function() {
                    t(k, function(a) {
                        a.message.detach();
                    });
                });
                this.reRender = function() {
                    h || (h = !0, a.$evalAsync(function() {
                        h && q && g.render(q);
                    }));
                };
                this.register = function(a, h) {
                    var c = p.toString();
                    k[c] = {
                        message: h
                    };
                    var f = e[0], b = k[c];
                    g.head ? (f = l(f, a)) ? (b.next = f.next, f.next = b) : (b.next = g.head, g.head = b) : g.head = b;
                    a.$$ngMessageNode = c;
                    p++;
                    g.reRender();
                };
                this.deregister = function(a) {
                    var b = a.$$ngMessageNode;
                    delete a.$$ngMessageNode;
                    var c = k[b];
                    (a = l(e[0], a)) ? a.next = c.next : g.head = c.next;
                    delete k[b];
                    g.reRender();
                };
            } ]
        };
    } ]).directive("ngMessagesInclude", [ "$templateRequest", "$document", "$compile", function(b, m, n) {
        return {
            restrict: "AE",
            require: "^^ngMessages",
            link: function(e, a, f) {
                var l = f.ngMessagesInclude || f.src;
                b(l).then(function(b) {
                    n(b)(e, function(b) {
                        a.after(b);
                        b = y(m[0].createComment(" ngMessagesInclude: " + l + " "));
                        a.after(b);
                        a.remove();
                    });
                });
            }
        };
    } ]).directive("ngMessage", m("AE")).directive("ngMessageExp", m("A"));
}(window, window.angular);

/*
 AngularJS v1.4.14
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(J, f, C) {
    "use strict";
    function D(t, e) {
        e = e || {};
        f.forEach(e, function(f, k) {
            delete e[k];
        });
        for (var k in t) !t.hasOwnProperty(k) || "$" === k.charAt(0) && "$" === k.charAt(1) || (e[k] = t[k]);
        return e;
    }
    var y = f.$$minErr("$resource"), B = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    f.module("ngResource", [ "ng" ]).provider("$resource", function() {
        var t = /^https?:\/\/[^\/]*/, e = this;
        this.defaults = {
            stripTrailingSlashes: !0,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: !0
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        };
        this.$get = [ "$http", "$log", "$q", function(k, F, G) {
            function w(f, g) {
                this.template = f;
                this.defaults = r({}, e.defaults, g);
                this.urlParams = {};
            }
            function z(l, g, s, h) {
                function c(a, q) {
                    var c = {};
                    q = r({}, g, q);
                    u(q, function(b, q) {
                        x(b) && (b = b());
                        var m;
                        if (b && b.charAt && "@" == b.charAt(0)) {
                            m = a;
                            var d = b.substr(1);
                            if (null == d || "" === d || "hasOwnProperty" === d || !B.test("." + d)) throw y("badmember", d);
                            for (var d = d.split("."), n = 0, g = d.length; n < g && f.isDefined(m); n++) {
                                var e = d[n];
                                m = null !== m ? m[e] : C;
                            }
                        } else m = b;
                        c[q] = m;
                    });
                    return c;
                }
                function H(a) {
                    return a.resource;
                }
                function d(a) {
                    D(a || {}, this);
                }
                var t = new w(l, h);
                s = r({}, e.defaults.actions, s);
                d.prototype.toJSON = function() {
                    var a = r({}, this);
                    delete a.$promise;
                    delete a.$resolved;
                    return a;
                };
                u(s, function(a, q) {
                    var g = /^(POST|PUT|PATCH)$/i.test(a.method);
                    d[q] = function(b, A, m, e) {
                        var h, l, s, n = {};
                        switch (arguments.length) {
                          case 4:
                            s = e, l = m;

                          case 3:
                          case 2:
                            if (!x(A)) {
                                n = b;
                                h = A;
                                l = m;
                                break;
                            }
                            if (x(b)) {
                                l = b;
                                s = A;
                                break;
                            }
                            l = A;
                            s = m;

                          case 1:
                            x(b) ? l = b : g ? h = b : n = b;
                            break;

                          case 0:
                            break;

                          default:
                            throw y("badargs", arguments.length);
                        }
                        var w = this instanceof d, p = w ? h : a.isArray ? [] : new d(h), v = {}, z = a.interceptor && a.interceptor.response || H, B = a.interceptor && a.interceptor.responseError || C;
                        u(a, function(a, b) {
                            switch (b) {
                              default:
                                v[b] = I(a);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                                break;

                              case "timeout":
                                a && !f.isNumber(a) && F.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests.\n  If you need support for cancellable $resource actions, you should upgrade to version 1.5 or higher.");
                            }
                        });
                        g && (v.data = h);
                        t.setUrlParams(v, r({}, c(h, a.params || {}), n), a.url);
                        n = k(v).then(function(b) {
                            var c = b.data, m = p.$promise;
                            if (c) {
                                if (f.isArray(c) !== !!a.isArray) throw y("badcfg", q, a.isArray ? "array" : "object", f.isArray(c) ? "array" : "object", v.method, v.url);
                                a.isArray ? (p.length = 0, u(c, function(b) {
                                    "object" == typeof b ? p.push(new d(b)) : p.push(b);
                                })) : (D(c, p), p.$promise = m);
                            }
                            p.$resolved = !0;
                            b.resource = p;
                            return b;
                        }, function(b) {
                            p.$resolved = !0;
                            (s || E)(b);
                            return G.reject(b);
                        });
                        n = n.then(function(b) {
                            var a = z(b);
                            (l || E)(a, b.headers);
                            return a;
                        }, B);
                        return w ? n : (p.$promise = n, p.$resolved = !1, p);
                    };
                    d.prototype["$" + q] = function(b, a, c) {
                        x(b) && (c = a, a = b, b = {});
                        b = d[q].call(this, b, this, a, c);
                        return b.$promise || b;
                    };
                });
                d.bind = function(a) {
                    return z(l, r({}, g, a), s);
                };
                return d;
            }
            var E = f.noop, u = f.forEach, r = f.extend, I = f.copy, x = f.isFunction;
            w.prototype = {
                setUrlParams: function(l, g, e) {
                    var k, d, h = this, c = e || h.template, r = "", a = h.urlParams = {};
                    u(c.split(/\W/), function(d) {
                        if ("hasOwnProperty" === d) throw y("badname");
                        !/^\d+$/.test(d) && d && new RegExp("(^|[^\\\\]):" + d + "(\\W|$)").test(c) && (a[d] = !0);
                    });
                    c = c.replace(/\\:/g, ":");
                    c = c.replace(t, function(a) {
                        r = a;
                        return "";
                    });
                    g = g || {};
                    u(h.urlParams, function(a, e) {
                        k = g.hasOwnProperty(e) ? g[e] : h.defaults[e];
                        f.isDefined(k) && null !== k ? (d = encodeURIComponent(k).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "%20").replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+"), 
                        c = c.replace(new RegExp(":" + e + "(\\W|$)", "g"), function(b, a) {
                            return d + a;
                        })) : c = c.replace(new RegExp("(/?):" + e + "(\\W|$)", "g"), function(b, a, c) {
                            return "/" == c.charAt(0) ? c : a + c;
                        });
                    });
                    h.defaults.stripTrailingSlashes && (c = c.replace(/\/+$/, "") || "/");
                    c = c.replace(/\/\.(?=\w+($|\?))/, ".");
                    l.url = r + c.replace(/\/\\\./, "/.");
                    u(g, function(a, c) {
                        h.urlParams[c] || (l.params = l.params || {}, l.params[c] = a);
                    });
                }
            };
            return z;
        } ];
    });
}(window, window.angular);

/*
 AngularJS v1.4.14
 (c) 2010-2015 Google, Inc. http://angularjs.org
 License: MIT
*/
!function(n, h, p) {
    "use strict";
    function E(a) {
        var f = [];
        r(f, h.noop).chars(a);
        return f.join("");
    }
    function g(a, f) {
        var b, d = {}, c = a.split(",");
        for (b = 0; b < c.length; b++) d[f ? h.lowercase(c[b]) : c[b]] = !0;
        return d;
    }
    function F(a, f) {
        function d(a, b, d, l) {
            b = h.lowercase(b);
            if (s[b]) for (;e.last() && t[e.last()]; ) c("", e.last());
            u[b] && e.last() == b && c("", b);
            (l = v[b] || !!l) || e.push(b);
            var m = {};
            d.replace(G, function(b, a, f, c, d) {
                m[a] = q(f || c || d || "");
            });
            f.start && f.start(b, m, l);
        }
        function c(b, a) {
            var d, c = 0;
            if (a = h.lowercase(a)) for (c = e.length - 1; 0 <= c && e[c] != a; c--) ;
            if (0 <= c) {
                for (d = e.length - 1; d >= c; d--) f.end && f.end(e[d]);
                e.length = c;
            }
        }
        "string" != typeof a && (a = null === a || void 0 === a ? "" : "" + a);
        var b, k, l, e = [], m = a;
        for (e.last = function() {
            return e[e.length - 1];
        }; a; ) {
            l = "";
            k = !0;
            if (e.last() && w[e.last()]) a = a.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*" + e.last() + "[^>]*>", "i"), function(a, b) {
                b = b.replace(H, "$1").replace(I, "$1");
                f.chars && f.chars(q(b));
                return "";
            }), c("", e.last()); else {
                0 === a.indexOf("\x3c!--") ? 0 <= (b = a.indexOf("--", 4)) && a.lastIndexOf("--\x3e", b) === b && (f.comment && f.comment(a.substring(4, b)), 
                a = a.substring(b + 3), k = !1) : x.test(a) ? (b = a.match(x)) && (a = a.replace(b[0], ""), 
                k = !1) : J.test(a) ? (b = a.match(y)) && (a = a.substring(b[0].length), b[0].replace(y, c), 
                k = !1) : K.test(a) && ((b = a.match(z)) ? (b[4] && (a = a.substring(b[0].length), 
                b[0].replace(z, d)), k = !1) : (l += "<", a = a.substring(1)));
                k && (b = a.indexOf("<"), l += 0 > b ? a : a.substring(0, b), a = 0 > b ? "" : a.substring(b), 
                f.chars && f.chars(q(l)));
            }
            if (a == m) throw L("badparse", a);
            m = a;
        }
        c();
    }
    function q(a) {
        if (!a) return "";
        A.innerHTML = a.replace(/</g, "&lt;");
        return A.textContent;
    }
    function B(a) {
        return a.replace(/&/g, "&amp;").replace(M, function(a) {
            var d = a.charCodeAt(0);
            a = a.charCodeAt(1);
            return "&#" + (1024 * (d - 55296) + (a - 56320) + 65536) + ";";
        }).replace(N, function(a) {
            return "&#" + a.charCodeAt(0) + ";";
        }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    function r(a, f) {
        var d = !1, c = h.bind(a, a.push);
        return {
            start: function(a, k, e) {
                a = h.lowercase(a);
                !d && w[a] && (d = a);
                d || !0 !== C[a] || (c("<"), c(a), h.forEach(k, function(d, e) {
                    var k = h.lowercase(e), g = "img" === a && "src" === k || "background" === k;
                    !0 !== O[k] || !0 === D[k] && !f(d, g) || (c(" "), c(e), c('="'), c(B(d)), c('"'));
                }), c(e ? "/>" : ">"));
            },
            end: function(a) {
                a = h.lowercase(a);
                d || !0 !== C[a] || (c("</"), c(a), c(">"));
                a == d && (d = !1);
            },
            chars: function(a) {
                d || c(B(a));
            }
        };
    }
    var L = h.$$minErr("$sanitize"), z = /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/, y = /^<\/\s*([\w:-]+)[^>]*>/, G = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, K = /^</, J = /^<\//, H = /\x3c!--(.*?)--\x3e/g, x = /<!DOCTYPE([^>]*?)>/i, I = /<!\[CDATA\[(.*?)]]\x3e/g, M = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, N = /([^\#-~| |!])/g, v = g("area,br,col,hr,img,wbr");
    n = g("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
    p = g("rp,rt");
    var u = h.extend({}, p, n), s = h.extend({}, n, g("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")), t = h.extend({}, p, g("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
    n = g("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan,use");
    var w = g("script,style"), C = h.extend({}, v, s, t, u, n), D = g("background,cite,href,longdesc,src,usemap,xlink:href");
    n = g("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width");
    p = g("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan", !0);
    var O = h.extend({}, D, p, n), A = document.createElement("pre");
    h.module("ngSanitize", []).provider("$sanitize", function() {
        this.$get = [ "$$sanitizeUri", function(a) {
            return function(f) {
                var d = [];
                F(f, r(d, function(c, b) {
                    return !/^unsafe/.test(a(c, b));
                }));
                return d.join("");
            };
        } ];
    });
    h.module("ngSanitize").filter("linky", [ "$sanitize", function(a) {
        var f = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i, d = /^mailto:/i;
        return function(c, b) {
            function k(a) {
                a && g.push(E(a));
            }
            if (!c) return c;
            for (var m, n, p, l = c, g = []; m = l.match(f); ) n = m[0], m[2] || m[4] || (n = (m[3] ? "http://" : "mailto:") + n), 
            p = m.index, k(l.substr(0, p)), function(a, c) {
                g.push("<a ");
                h.isDefined(b) && g.push('target="', b, '" ');
                g.push('href="', a.replace(/"/g, "&quot;"), '">');
                k(c);
                g.push("</a>");
            }(n, m[0].replace(d, "")), l = l.substring(p + m[0].length);
            k(l);
            return a(g.join(""));
        };
    } ]);
}(window, window.angular);

(function() {
    /*--------------------------------------------------------------------------*/
    /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
    function baseCompareAscending(value, other) {
        if (value !== other) {
            var valIsNull = null === value, valIsUndef = value === undefined, valIsReflexive = value === value, othIsNull = null === other, othIsUndef = other === undefined, othIsReflexive = other === other;
            if (value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive) return 1;
            if (value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive) return -1;
        }
        return 0;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
    function baseFindIndex(array, predicate, fromRight) {
        for (var length = array.length, index = fromRight ? length : -1; fromRight ? index-- : ++index < length; ) if (predicate(array[index], index, array)) return index;
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
    function baseIndexOf(array, value, fromIndex) {
        if (value !== value) return indexOfNaN(array, fromIndex);
        for (var index = fromIndex - 1, length = array.length; ++index < length; ) if (array[index] === value) return index;
        return -1;
    }
    /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
    function baseIsFunction(value) {
        // Avoid a Chakra JIT bug in compatibility modes of IE 11.
        // See https://github.com/jashkenas/underscore/issues/1621 for more details.
        return "function" == typeof value || !1;
    }
    /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
    function baseToString(value) {
        return null == value ? "" : value + "";
    }
    /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
    function charsLeftIndex(string, chars) {
        for (var index = -1, length = string.length; ++index < length && chars.indexOf(string.charAt(index)) > -1; ) ;
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
    function charsRightIndex(string, chars) {
        for (var index = string.length; index-- && chars.indexOf(string.charAt(index)) > -1; ) ;
        return index;
    }
    /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
    function compareAscending(object, other) {
        return baseCompareAscending(object.criteria, other.criteria) || object.index - other.index;
    }
    /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
    function compareMultiple(object, other, orders) {
        for (var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length; ++index < length; ) {
            var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
                if (index >= ordersLength) return result;
                var order = orders[index];
                return result * ("asc" === order || !0 === order ? 1 : -1);
            }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
    }
    /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
    function deburrLetter(letter) {
        return deburredLetters[letter];
    }
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
    function escapeHtmlChar(chr) {
        return htmlEscapes[chr];
    }
    /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
    function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
        leadingChar ? chr = regexpEscapes[chr] : whitespaceChar && (chr = stringEscapes[chr]);
        return "\\" + chr;
    }
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
    function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
    }
    /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
    function indexOfNaN(array, fromIndex, fromRight) {
        for (var length = array.length, index = fromIndex + (fromRight ? 0 : -1); fromRight ? index-- : ++index < length; ) {
            var other = array[index];
            if (other !== other) return index;
        }
        return -1;
    }
    /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
    function isObjectLike(value) {
        return !!value && "object" == typeof value;
    }
    /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
    function isSpace(charCode) {
        return charCode <= 160 && charCode >= 9 && charCode <= 13 || 32 == charCode || 160 == charCode || 5760 == charCode || 6158 == charCode || charCode >= 8192 && (charCode <= 8202 || 8232 == charCode || 8233 == charCode || 8239 == charCode || 8287 == charCode || 12288 == charCode || 65279 == charCode);
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
    function replaceHolders(array, placeholder) {
        for (var index = -1, length = array.length, resIndex = -1, result = []; ++index < length; ) if (array[index] === placeholder) {
            array[index] = PLACEHOLDER;
            result[++resIndex] = index;
        }
        return result;
    }
    /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
    function sortedUniq(array, iteratee) {
        for (var seen, index = -1, length = array.length, resIndex = -1, result = []; ++index < length; ) {
            var value = array[index], computed = iteratee ? iteratee(value, index, array) : value;
            if (!index || seen !== computed) {
                seen = computed;
                result[++resIndex] = value;
            }
        }
        return result;
    }
    /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
    function trimmedLeftIndex(string) {
        for (var index = -1, length = string.length; ++index < length && isSpace(string.charCodeAt(index)); ) ;
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
    function trimmedRightIndex(string) {
        for (var index = string.length; index-- && isSpace(string.charCodeAt(index)); ) ;
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
    function unescapeHtmlChar(chr) {
        return htmlUnescapes[chr];
    }
    /*--------------------------------------------------------------------------*/
    /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
    function runInContext(context) {
        /*------------------------------------------------------------------------*/
        /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, "__chain__") && hasOwnProperty.call(value, "__wrapped__")) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
        function baseLodash() {}
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
        function LodashWrapper(value, chainAll, actions) {
            this.__wrapped__ = value;
            this.__actions__ = actions || [];
            this.__chain__ = !!chainAll;
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
        function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = !1;
            this.__iteratees__ = [];
            this.__takeCount__ = POSITIVE_INFINITY;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
        function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = arrayCopy(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = arrayCopy(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = arrayCopy(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
        function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = !0;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
        function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) return baseWrapperValue(isRight && isArr ? array.reverse() : array, this.__actions__);
            var result = [];
            outer: for (;length-- && resIndex < takeCount; ) {
                index += dir;
                for (var iterIndex = -1, value = array[index]; ++iterIndex < iterLength; ) {
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed; else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
        function MapCache() {
            this.__data__ = {};
        }
        /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
        function mapDelete(key) {
            return this.has(key) && delete this.__data__[key];
        }
        /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
        function mapGet(key) {
            return "__proto__" == key ? undefined : this.__data__[key];
        }
        /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
        function mapHas(key) {
            return "__proto__" != key && hasOwnProperty.call(this.__data__, key);
        }
        /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
        function mapSet(key, value) {
            "__proto__" != key && (this.__data__[key] = value);
            return this;
        }
        /*------------------------------------------------------------------------*/
        /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
        function SetCache(values) {
            var length = values ? values.length : 0;
            this.data = {
                hash: nativeCreate(null),
                set: new Set()
            };
            for (;length--; ) this.push(values[length]);
        }
        /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
        function cacheIndexOf(cache, value) {
            var data = cache.data;
            return ("string" == typeof value || isObject(value) ? data.set.has(value) : data.hash[value]) ? 0 : -1;
        }
        /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
        function cachePush(value) {
            var data = this.data;
            "string" == typeof value || isObject(value) ? data.set.add(value) : data.hash[value] = !0;
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
        function arrayConcat(array, other) {
            for (var index = -1, length = array.length, othIndex = -1, othLength = other.length, result = Array(length + othLength); ++index < length; ) result[index] = array[index];
            for (;++othIndex < othLength; ) result[index++] = other[othIndex];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
        function arrayCopy(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            for (;++index < length; ) array[index] = source[index];
            return array;
        }
        /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
        function arrayEach(array, iteratee) {
            for (var index = -1, length = array.length; ++index < length && !1 !== iteratee(array[index], index, array); ) ;
            return array;
        }
        /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
        function arrayEachRight(array, iteratee) {
            for (var length = array.length; length-- && !1 !== iteratee(array[length], length, array); ) ;
            return array;
        }
        /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
        function arrayEvery(array, predicate) {
            for (var index = -1, length = array.length; ++index < length; ) if (!predicate(array[index], index, array)) return !1;
            return !0;
        }
        /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
        function arrayExtremum(array, iteratee, comparator, exValue) {
            for (var index = -1, length = array.length, computed = exValue, result = computed; ++index < length; ) {
                var value = array[index], current = +iteratee(value);
                if (comparator(current, computed)) {
                    computed = current;
                    result = value;
                }
            }
            return result;
        }
        /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
        function arrayFilter(array, predicate) {
            for (var index = -1, length = array.length, resIndex = -1, result = []; ++index < length; ) {
                var value = array[index];
                predicate(value, index, array) && (result[++resIndex] = value);
            }
            return result;
        }
        /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
        function arrayMap(array, iteratee) {
            for (var index = -1, length = array.length, result = Array(length); ++index < length; ) result[index] = iteratee(array[index], index, array);
            return result;
        }
        /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
        function arrayPush(array, values) {
            for (var index = -1, length = values.length, offset = array.length; ++index < length; ) array[offset + index] = values[index];
            return array;
        }
        /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
        function arrayReduce(array, iteratee, accumulator, initFromArray) {
            var index = -1, length = array.length;
            initFromArray && length && (accumulator = array[++index]);
            for (;++index < length; ) accumulator = iteratee(accumulator, array[index], index, array);
            return accumulator;
        }
        /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
        function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
            var length = array.length;
            initFromArray && length && (accumulator = array[--length]);
            for (;length--; ) accumulator = iteratee(accumulator, array[length], length, array);
            return accumulator;
        }
        /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
        function arraySome(array, predicate) {
            for (var index = -1, length = array.length; ++index < length; ) if (predicate(array[index], index, array)) return !0;
            return !1;
        }
        /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
        function arraySum(array, iteratee) {
            for (var length = array.length, result = 0; length--; ) result += +iteratee(array[length]) || 0;
            return result;
        }
        /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
        function assignDefaults(objectValue, sourceValue) {
            return objectValue === undefined ? sourceValue : objectValue;
        }
        /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
        function assignOwnDefaults(objectValue, sourceValue, key, object) {
            return objectValue !== undefined && hasOwnProperty.call(object, key) ? objectValue : sourceValue;
        }
        /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
        function assignWith(object, source, customizer) {
            for (var index = -1, props = keys(source), length = props.length; ++index < length; ) {
                var key = props[index], value = object[key], result = customizer(value, source[key], key, object, source);
                (result === result ? result === value : value !== value) && (value !== undefined || key in object) || (object[key] = result);
            }
            return object;
        }
        /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
        function baseAssign(object, source) {
            return null == source ? object : baseCopy(source, keys(source), object);
        }
        /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
        function baseAt(collection, props) {
            for (var index = -1, isNil = null == collection, isArr = !isNil && isArrayLike(collection), length = isArr ? collection.length : 0, propsLength = props.length, result = Array(propsLength); ++index < propsLength; ) {
                var key = props[index];
                result[index] = isArr ? isIndex(key, length) ? collection[key] : undefined : isNil ? undefined : collection[key];
            }
            return result;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
        function baseCopy(source, props, object) {
            object || (object = {});
            for (var index = -1, length = props.length; ++index < length; ) {
                var key = props[index];
                object[key] = source[key];
            }
            return object;
        }
        /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
        function baseCallback(func, thisArg, argCount) {
            var type = typeof func;
            return "function" == type ? thisArg === undefined ? func : bindCallback(func, thisArg, argCount) : null == func ? identity : "object" == type ? baseMatches(func) : thisArg === undefined ? property(func) : baseMatchesProperty(func, thisArg);
        }
        /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
        function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
            var result;
            customizer && (result = object ? customizer(value, key, object) : customizer(value));
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return arrayCopy(value, result);
            } else {
                var tag = objToString.call(value), isFunc = tag == funcTag;
                if (tag != objectTag && tag != argsTag && (!isFunc || object)) return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : object ? value : {};
                result = initCloneObject(isFunc ? {} : value);
                if (!isDeep) return baseAssign(result, value);
            }
            // Check for circular references and return its corresponding clone.
            stackA || (stackA = []);
            stackB || (stackB = []);
            for (var length = stackA.length; length--; ) if (stackA[length] == value) return stackB[length];
            // Add the source value to the stack of traversed objects and associate it with its clone.
            stackA.push(value);
            stackB.push(result);
            // Recursively populate clone (susceptible to call stack limits).
            (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
                result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
            });
            return result;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
        function baseDelay(func, wait, args) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
        function baseDifference(array, values) {
            var length = array ? array.length : 0, result = [];
            if (!length) return result;
            var index = -1, indexOf = getIndexOf(), isCommon = indexOf == baseIndexOf, cache = isCommon && values.length >= LARGE_ARRAY_SIZE ? createCache(values) : null, valuesLength = values.length;
            if (cache) {
                indexOf = cacheIndexOf;
                isCommon = !1;
                values = cache;
            }
            outer: for (;++index < length; ) {
                var value = array[index];
                if (isCommon && value === value) {
                    for (var valuesIndex = valuesLength; valuesIndex--; ) if (values[valuesIndex] === value) continue outer;
                    result.push(value);
                } else indexOf(values, value, 0) < 0 && result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
        function baseEvery(collection, predicate) {
            var result = !0;
            baseEach(collection, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
        function baseExtremum(collection, iteratee, comparator, exValue) {
            var computed = exValue, result = computed;
            baseEach(collection, function(value, index, collection) {
                var current = +iteratee(value, index, collection);
                if (comparator(current, computed) || current === exValue && current === result) {
                    computed = current;
                    result = value;
                }
            });
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
        function baseFill(array, value, start, end) {
            var length = array.length;
            start = null == start ? 0 : +start || 0;
            start < 0 && (start = -start > length ? 0 : length + start);
            end = end === undefined || end > length ? length : +end || 0;
            end < 0 && (end += length);
            length = start > end ? 0 : end >>> 0;
            start >>>= 0;
            for (;start < length; ) array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function(value, index, collection) {
                predicate(value, index, collection) && result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
        function baseFind(collection, predicate, eachFunc, retKey) {
            var result;
            eachFunc(collection, function(value, key, collection) {
                if (predicate(value, key, collection)) {
                    result = retKey ? key : value;
                    return !1;
                }
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
        function baseFlatten(array, isDeep, isStrict, result) {
            result || (result = []);
            for (var index = -1, length = array.length; ++index < length; ) {
                var value = array[index];
                isObjectLike(value) && isArrayLike(value) && (isStrict || isArray(value) || isArguments(value)) ? isDeep ? // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, isDeep, isStrict, result) : arrayPush(result, value) : isStrict || (result[result.length] = value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
        function baseForIn(object, iteratee) {
            return baseFor(object, iteratee, keysIn);
        }
        /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
        function baseForOwn(object, iteratee) {
            return baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
        function baseForOwnRight(object, iteratee) {
            return baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
        function baseFunctions(object, props) {
            for (var index = -1, length = props.length, resIndex = -1, result = []; ++index < length; ) {
                var key = props[index];
                isFunction(object[key]) && (result[++resIndex] = key);
            }
            return result;
        }
        /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
        function baseGet(object, path, pathKey) {
            if (null != object) {
                pathKey !== undefined && pathKey in toObject(object) && (path = [ pathKey ]);
                for (var index = 0, length = path.length; null != object && index < length; ) object = object[path[index++]];
                return index && index == length ? object : undefined;
            }
        }
        /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
        function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
            return value === other || (null == value || null == other || !isObject(value) && !isObjectLike(other) ? value !== value && other !== other : baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB));
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
        function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
            if (!objIsArr) {
                objTag = objToString.call(object);
                objTag == argsTag ? objTag = objectTag : objTag != objectTag && (objIsArr = isTypedArray(object));
            }
            if (!othIsArr) {
                othTag = objToString.call(other);
                othTag == argsTag ? othTag = objectTag : othTag != objectTag && (othIsArr = isTypedArray(other));
            }
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && !objIsArr && !objIsObj) return equalByTag(object, other, objTag);
            if (!isLoose) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
            }
            if (!isSameTag) return !1;
            // Assume cyclic values are equal.
            // For more information on detecting circular references see https://es5.github.io/#JO.
            stackA || (stackA = []);
            stackB || (stackB = []);
            for (var length = stackA.length; length--; ) if (stackA[length] == object) return stackB[length] == other;
            // Add `object` and `other` to the stack of traversed objects.
            stackA.push(object);
            stackB.push(other);
            var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
            stackA.pop();
            stackB.pop();
            return result;
        }
        /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
        function baseIsMatch(object, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (null == object) return !length;
            object = toObject(object);
            for (;index--; ) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return !1;
            }
            for (;++index < length; ) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return !1;
                } else {
                    var result = customizer ? customizer(objValue, srcValue, key) : undefined;
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, !0) : result)) return !1;
                }
            }
            return !0;
        }
        /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (1 == matchData.length && matchData[0][2]) {
                var key = matchData[0][0], value = matchData[0][1];
                return function(object) {
                    return null != object && (object[key] === value && (value !== undefined || key in toObject(object)));
                };
            }
            return function(object) {
                return baseIsMatch(object, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
        function baseMatchesProperty(path, srcValue) {
            var isArr = isArray(path), isCommon = isKey(path) && isStrictComparable(srcValue), pathKey = path + "";
            path = toPath(path);
            return function(object) {
                if (null == object) return !1;
                var key = pathKey;
                object = toObject(object);
                if ((isArr || !isCommon) && !(key in object)) {
                    object = 1 == path.length ? object : baseGet(object, baseSlice(path, 0, -1));
                    if (null == object) return !1;
                    key = last(path);
                    object = toObject(object);
                }
                return object[key] === srcValue ? srcValue !== undefined || key in object : baseIsEqual(srcValue, object[key], undefined, !0);
            };
        }
        /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
        function baseMerge(object, source, customizer, stackA, stackB) {
            if (!isObject(object)) return object;
            var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)), props = isSrcArr ? undefined : keys(source);
            arrayEach(props || source, function(srcValue, key) {
                if (props) {
                    key = srcValue;
                    srcValue = source[key];
                }
                if (isObjectLike(srcValue)) {
                    stackA || (stackA = []);
                    stackB || (stackB = []);
                    baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
                } else {
                    var value = object[key], result = customizer ? customizer(value, srcValue, key, object, source) : undefined, isCommon = result === undefined;
                    isCommon && (result = srcValue);
                    result === undefined && (!isSrcArr || key in object) || !isCommon && (result === result ? result === value : value !== value) || (object[key] = result);
                }
            });
            return object;
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
        function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
            for (var length = stackA.length, srcValue = source[key]; length--; ) if (stackA[length] == srcValue) {
                object[key] = stackB[length];
                return;
            }
            var value = object[key], result = customizer ? customizer(value, srcValue, key, object, source) : undefined, isCommon = result === undefined;
            if (isCommon) {
                result = srcValue;
                isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue)) ? result = isArray(value) ? value : isArrayLike(value) ? arrayCopy(value) : [] : isPlainObject(srcValue) || isArguments(srcValue) ? result = isArguments(value) ? toPlainObject(value) : isPlainObject(value) ? value : {} : isCommon = !1;
            }
            // Add the source value to the stack of traversed objects and associate
            // it with its merged value.
            stackA.push(srcValue);
            stackB.push(result);
            isCommon ? // Recursively merge objects and arrays (susceptible to call stack limits).
            object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB) : (result === result ? result !== value : value === value) && (object[key] = result);
        }
        /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
        function baseProperty(key) {
            return function(object) {
                return null == object ? undefined : object[key];
            };
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
        function basePropertyDeep(path) {
            var pathKey = path + "";
            path = toPath(path);
            return function(object) {
                return baseGet(object, path, pathKey);
            };
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
        function basePullAt(array, indexes) {
            for (var length = array ? indexes.length : 0; length--; ) {
                var index = indexes[length];
                if (index != previous && isIndex(index)) {
                    var previous = index;
                    splice.call(array, index, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
        function baseRandom(min, max) {
            return min + nativeFloor(nativeRandom() * (max - min + 1));
        }
        /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
        function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
            eachFunc(collection, function(value, index, collection) {
                accumulator = initFromCollection ? (initFromCollection = !1, value) : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            start = null == start ? 0 : +start || 0;
            start < 0 && (start = -start > length ? 0 : length + start);
            end = end === undefined || end > length ? length : +end || 0;
            end < 0 && (end += length);
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            for (var result = Array(length); ++index < length; ) result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
        function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);
            for (;length--; ) array[length] = array[length].value;
            return array;
        }
        /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
        function baseSortByOrder(collection, iteratees, orders) {
            var callback = getCallback(), index = -1;
            iteratees = arrayMap(iteratees, function(iteratee) {
                return callback(iteratee);
            });
            return baseSortBy(baseMap(collection, function(value) {
                return {
                    criteria: arrayMap(iteratees, function(iteratee) {
                        return iteratee(value);
                    }),
                    index: ++index,
                    value: value
                };
            }), function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
        function baseSum(collection, iteratee) {
            var result = 0;
            baseEach(collection, function(value, index, collection) {
                result += +iteratee(value, index, collection) || 0;
            });
            return result;
        }
        /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
        function baseUniq(array, iteratee) {
            var index = -1, indexOf = getIndexOf(), length = array.length, isCommon = indexOf == baseIndexOf, isLarge = isCommon && length >= LARGE_ARRAY_SIZE, seen = isLarge ? createCache() : null, result = [];
            if (seen) {
                indexOf = cacheIndexOf;
                isCommon = !1;
            } else {
                isLarge = !1;
                seen = iteratee ? [] : result;
            }
            outer: for (;++index < length; ) {
                var value = array[index], computed = iteratee ? iteratee(value, index, array) : value;
                if (isCommon && value === value) {
                    for (var seenIndex = seen.length; seenIndex--; ) if (seen[seenIndex] === computed) continue outer;
                    iteratee && seen.push(computed);
                    result.push(value);
                } else if (indexOf(seen, computed, 0) < 0) {
                    (iteratee || isLarge) && seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
        function baseValues(object, props) {
            for (var index = -1, length = props.length, result = Array(length); ++index < length; ) result[index] = object[props[index]];
            return result;
        }
        /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
        function baseWhile(array, predicate, isDrop, fromRight) {
            for (var length = array.length, index = fromRight ? length : -1; (fromRight ? index-- : ++index < length) && predicate(array[index], index, array); ) ;
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
        function baseWrapperValue(value, actions) {
            var result = value;
            result instanceof LazyWrapper && (result = result.value());
            for (var index = -1, length = actions.length; ++index < length; ) {
                var action = actions[index];
                result = action.func.apply(action.thisArg, arrayPush([ result ], action.args));
            }
            return result;
        }
        /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
        function binaryIndex(array, value, retHighest) {
            var low = 0, high = array ? array.length : low;
            if ("number" == typeof value && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                for (;low < high; ) {
                    var mid = low + high >>> 1, computed = array[mid];
                    (retHighest ? computed <= value : computed < value) && null !== computed ? low = mid + 1 : high = mid;
                }
                return high;
            }
            return binaryIndexBy(array, value, identity, retHighest);
        }
        /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
        function binaryIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            for (var low = 0, high = array ? array.length : 0, valIsNaN = value !== value, valIsNull = null === value, valIsUndef = value === undefined; low < high; ) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), isDef = computed !== undefined, isReflexive = computed === computed;
                if (valIsNaN) var setLow = isReflexive || retHighest; else setLow = valIsNull ? isReflexive && isDef && (retHighest || null != computed) : valIsUndef ? isReflexive && (retHighest || isDef) : null != computed && (retHighest ? computed <= value : computed < value);
                setLow ? low = mid + 1 : high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
        function bindCallback(func, thisArg, argCount) {
            if ("function" != typeof func) return identity;
            if (thisArg === undefined) return func;
            switch (argCount) {
              case 1:
                return function(value) {
                    return func.call(thisArg, value);
                };

              case 3:
                return function(value, index, collection) {
                    return func.call(thisArg, value, index, collection);
                };

              case 4:
                return function(accumulator, value, index, collection) {
                    return func.call(thisArg, accumulator, value, index, collection);
                };

              case 5:
                return function(value, other, key, object, source) {
                    return func.call(thisArg, value, other, key, object, source);
                };
            }
            return function() {
                return func.apply(thisArg, arguments);
            };
        }
        /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
        function bufferClone(buffer) {
            var result = new ArrayBuffer(buffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(buffer));
            return result;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
        function composeArgs(args, partials, holders) {
            for (var holdersLength = holders.length, argsIndex = -1, argsLength = nativeMax(args.length - holdersLength, 0), leftIndex = -1, leftLength = partials.length, result = Array(leftLength + argsLength); ++leftIndex < leftLength; ) result[leftIndex] = partials[leftIndex];
            for (;++argsIndex < holdersLength; ) result[holders[argsIndex]] = args[argsIndex];
            for (;argsLength--; ) result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
        function composeArgsRight(args, partials, holders) {
            for (var holdersIndex = -1, holdersLength = holders.length, argsIndex = -1, argsLength = nativeMax(args.length - holdersLength, 0), rightIndex = -1, rightLength = partials.length, result = Array(argsLength + rightLength); ++argsIndex < argsLength; ) result[argsIndex] = args[argsIndex];
            for (var offset = argsIndex; ++rightIndex < rightLength; ) result[offset + rightIndex] = partials[rightIndex];
            for (;++holdersIndex < holdersLength; ) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
        function createAggregator(setter, initializer) {
            return function(collection, iteratee, thisArg) {
                var result = initializer ? initializer() : {};
                iteratee = getCallback(iteratee, thisArg, 3);
                if (isArray(collection)) for (var index = -1, length = collection.length; ++index < length; ) {
                    var value = collection[index];
                    setter(result, value, iteratee(value, index, collection), collection);
                } else baseEach(collection, function(value, key, collection) {
                    setter(result, value, iteratee(value, key, collection), collection);
                });
                return result;
            };
        }
        /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
        function createAssigner(assigner) {
            return restParam(function(object, sources) {
                var index = -1, length = null == object ? 0 : sources.length, customizer = length > 2 ? sources[length - 2] : undefined, guard = length > 2 ? sources[2] : undefined, thisArg = length > 1 ? sources[length - 1] : undefined;
                if ("function" == typeof customizer) {
                    customizer = bindCallback(customizer, thisArg, 5);
                    length -= 2;
                } else {
                    customizer = "function" == typeof thisArg ? thisArg : undefined;
                    length -= customizer ? 1 : 0;
                }
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                for (;++index < length; ) {
                    var source = sources[index];
                    source && assigner(object, source, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
        function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                var length = collection ? getLength(collection) : 0;
                if (!isLength(length)) return eachFunc(collection, iteratee);
                for (var index = fromRight ? length : -1, iterable = toObject(collection); (fromRight ? index-- : ++index < length) && !1 !== iteratee(iterable[index], index, iterable); ) ;
                return collection;
            };
        }
        /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
        function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                for (var iterable = toObject(object), props = keysFunc(object), length = props.length, index = fromRight ? length : -1; fromRight ? index-- : ++index < length; ) {
                    var key = props[index];
                    if (!1 === iteratee(iterable[key], key, iterable)) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
        function createBindWrapper(func, thisArg) {
            function wrapper() {
                return (this && this !== root && this instanceof wrapper ? Ctor : func).apply(thisArg, arguments);
            }
            var Ctor = createCtorWrapper(func);
            return wrapper;
        }
        /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
        function createCache(values) {
            return nativeCreate && Set ? new SetCache(values) : null;
        }
        /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
        function createCompounder(callback) {
            return function(string) {
                for (var index = -1, array = words(deburr(string)), length = array.length, result = ""; ++index < length; ) result = callback(result, array[index], index);
                return result;
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
        function createCtorWrapper(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors.
                // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();

                  case 1:
                    return new Ctor(args[0]);

                  case 2:
                    return new Ctor(args[0], args[1]);

                  case 3:
                    return new Ctor(args[0], args[1], args[2]);

                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);

                  case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);

                  case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

                  case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
        function createCurry(flag) {
            function curryFunc(func, arity, guard) {
                guard && isIterateeCall(func, arity, guard) && (arity = undefined);
                var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
                result.placeholder = curryFunc.placeholder;
                return result;
            }
            return curryFunc;
        }
        /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
        function createDefaults(assigner, customizer) {
            return restParam(function(args) {
                var object = args[0];
                if (null == object) return object;
                args.push(customizer);
                return assigner.apply(undefined, args);
            });
        }
        /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
        function createExtremum(comparator, exValue) {
            return function(collection, iteratee, thisArg) {
                thisArg && isIterateeCall(collection, iteratee, thisArg) && (iteratee = undefined);
                iteratee = getCallback(iteratee, thisArg, 3);
                if (1 == iteratee.length) {
                    collection = isArray(collection) ? collection : toIterable(collection);
                    var result = arrayExtremum(collection, iteratee, comparator, exValue);
                    if (!collection.length || result !== exValue) return result;
                }
                return baseExtremum(collection, iteratee, comparator, exValue);
            };
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
        function createFind(eachFunc, fromRight) {
            return function(collection, predicate, thisArg) {
                predicate = getCallback(predicate, thisArg, 3);
                if (isArray(collection)) {
                    var index = baseFindIndex(collection, predicate, fromRight);
                    return index > -1 ? collection[index] : undefined;
                }
                return baseFind(collection, predicate, eachFunc);
            };
        }
        /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
        function createFindIndex(fromRight) {
            return function(array, predicate, thisArg) {
                if (!array || !array.length) return -1;
                predicate = getCallback(predicate, thisArg, 3);
                return baseFindIndex(array, predicate, fromRight);
            };
        }
        /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
        function createFindKey(objectFunc) {
            return function(object, predicate, thisArg) {
                predicate = getCallback(predicate, thisArg, 3);
                return baseFind(object, predicate, objectFunc, !0);
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
        function createFlow(fromRight) {
            return function() {
                for (var wrapper, length = arguments.length, index = fromRight ? length : -1, leftIndex = 0, funcs = Array(length); fromRight ? index-- : ++index < length; ) {
                    var func = funcs[leftIndex++] = arguments[index];
                    if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
                    !wrapper && LodashWrapper.prototype.thru && "wrapper" == getFuncName(func) && (wrapper = new LodashWrapper([], !0));
                }
                index = wrapper ? -1 : length;
                for (;++index < length; ) {
                    func = funcs[index];
                    var funcName = getFuncName(func), data = "wrapper" == funcName ? getData(func) : undefined;
                    wrapper = data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && 1 == data[9] ? wrapper[getFuncName(data[0])].apply(wrapper, data[3]) : 1 == func.length && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && 1 == args.length && isArray(value) && value.length >= LARGE_ARRAY_SIZE) return wrapper.plant(value).value();
                    for (var index = 0, result = length ? funcs[index].apply(this, args) : value; ++index < length; ) result = funcs[index].call(this, result);
                    return result;
                };
            };
        }
        /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
        function createForEach(arrayFunc, eachFunc) {
            return function(collection, iteratee, thisArg) {
                return "function" == typeof iteratee && thisArg === undefined && isArray(collection) ? arrayFunc(collection, iteratee) : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
            };
        }
        /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
        function createForIn(objectFunc) {
            return function(object, iteratee, thisArg) {
                "function" == typeof iteratee && thisArg === undefined || (iteratee = bindCallback(iteratee, thisArg, 3));
                return objectFunc(object, iteratee, keysIn);
            };
        }
        /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
        function createForOwn(objectFunc) {
            return function(object, iteratee, thisArg) {
                "function" == typeof iteratee && thisArg === undefined || (iteratee = bindCallback(iteratee, thisArg, 3));
                return objectFunc(object, iteratee);
            };
        }
        /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
        function createObjectMapper(isMapKeys) {
            return function(object, iteratee, thisArg) {
                var result = {};
                iteratee = getCallback(iteratee, thisArg, 3);
                baseForOwn(object, function(value, key, object) {
                    var mapped = iteratee(value, key, object);
                    key = isMapKeys ? mapped : key;
                    value = isMapKeys ? value : mapped;
                    result[key] = value;
                });
                return result;
            };
        }
        /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
        function createPadDir(fromRight) {
            return function(string, length, chars) {
                string = baseToString(string);
                return (fromRight ? string : "") + createPadding(string, length, chars) + (fromRight ? "" : string);
            };
        }
        /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
        function createPartial(flag) {
            var partialFunc = restParam(function(func, partials) {
                var holders = replaceHolders(partials, partialFunc.placeholder);
                return createWrapper(func, flag, undefined, partials, holders);
            });
            return partialFunc;
        }
        /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
        function createReduce(arrayFunc, eachFunc) {
            return function(collection, iteratee, accumulator, thisArg) {
                var initFromArray = arguments.length < 3;
                return "function" == typeof iteratee && thisArg === undefined && isArray(collection) ? arrayFunc(collection, iteratee, accumulator, initFromArray) : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
            };
        }
        /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
        function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            function wrapper() {
                for (// Avoid `arguments` object use disqualifying optimizations by
                // converting it to an array before providing it to other functions.
                var length = arguments.length, index = length, args = Array(length); index--; ) args[index] = arguments[index];
                partials && (args = composeArgs(args, partials, holders));
                partialsRight && (args = composeArgsRight(args, partialsRight, holdersRight));
                if (isCurry || isCurryRight) {
                    var placeholder = wrapper.placeholder, argsHolders = replaceHolders(args, placeholder);
                    length -= argsHolders.length;
                    if (length < arity) {
                        var newArgPos = argPos ? arrayCopy(argPos) : undefined, newArity = nativeMax(arity - length, 0), newsHolders = isCurry ? argsHolders : undefined, newHoldersRight = isCurry ? undefined : argsHolders, newPartials = isCurry ? args : undefined, newPartialsRight = isCurry ? undefined : args;
                        bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
                        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
                        isCurryBound || (bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG));
                        var newData = [ func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity ], result = createHybridWrapper.apply(undefined, newData);
                        isLaziable(func) && setData(result, newData);
                        result.placeholder = placeholder;
                        return result;
                    }
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                argPos && (args = reorder(args, argPos));
                isAry && ary < args.length && (args.length = ary);
                this && this !== root && this instanceof wrapper && (fn = Ctor || createCtorWrapper(func));
                return fn.apply(thisBinding, args);
            }
            var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurry = bitmask & CURRY_FLAG, isCurryBound = bitmask & CURRY_BOUND_FLAG, isCurryRight = bitmask & CURRY_RIGHT_FLAG, Ctor = isBindKey ? undefined : createCtorWrapper(func);
            return wrapper;
        }
        /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
        function createPadding(string, length, chars) {
            var strLength = string.length;
            length = +length;
            if (strLength >= length || !nativeIsFinite(length)) return "";
            var padLength = length - strLength;
            chars = null == chars ? " " : chars + "";
            return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
        }
        /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
        function createPartialWrapper(func, bitmask, thisArg, partials) {
            function wrapper() {
                for (// Avoid `arguments` object use disqualifying optimizations by
                // converting it to an array before providing it `func`.
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength); ++leftIndex < leftLength; ) args[leftIndex] = partials[leftIndex];
                for (;argsLength--; ) args[leftIndex++] = arguments[++argsIndex];
                return (this && this !== root && this instanceof wrapper ? Ctor : func).apply(isBind ? thisArg : this, args);
            }
            var isBind = bitmask & BIND_FLAG, Ctor = createCtorWrapper(func);
            return wrapper;
        }
        /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
        function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                precision = precision === undefined ? 0 : +precision || 0;
                if (precision) {
                    precision = pow(10, precision);
                    return func(number * precision) / precision;
                }
                return func(number);
            };
        }
        /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
        function createSortedIndex(retHighest) {
            return function(array, value, iteratee, thisArg) {
                var callback = getCallback(iteratee);
                return null == iteratee && callback === baseCallback ? binaryIndex(array, value, retHighest) : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
        function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & BIND_KEY_FLAG;
            if (!isBindKey && "function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            length -= holders ? holders.length : 0;
            if (bitmask & PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func), newData = [ func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity ];
            if (data) {
                mergeData(newData, data);
                bitmask = newData[1];
                arity = newData[9];
            }
            newData[9] = null == arity ? isBindKey ? 0 : func.length : nativeMax(arity - length, 0) || 0;
            if (bitmask == BIND_FLAG) var result = createBindWrapper(newData[0], newData[2]); else result = bitmask != PARTIAL_FLAG && bitmask != (BIND_FLAG | PARTIAL_FLAG) || newData[4].length ? createHybridWrapper.apply(undefined, newData) : createPartialWrapper.apply(undefined, newData);
            return (data ? baseSetData : setData)(result, newData);
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
        function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var index = -1, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isLoose && othLength > arrLength)) return !1;
            // Ignore non-index properties.
            for (;++index < arrLength; ) {
                var arrValue = array[index], othValue = other[index], result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
                if (result !== undefined) {
                    if (result) continue;
                    return !1;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (isLoose) {
                    if (!arraySome(other, function(othValue) {
                        return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
                    })) return !1;
                } else if (arrValue !== othValue && !equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB)) return !1;
            }
            return !0;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
        function equalByTag(object, other, tag) {
            switch (tag) {
              case boolTag:
              case dateTag:
                // Coerce dates and booleans to numbers, dates to milliseconds and booleans
                // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
                return +object == +other;

              case errorTag:
                return object.name == other.name && object.message == other.message;

              case numberTag:
                // Treat `NaN` vs. `NaN` as equal.
                return object != +object ? other != +other : object == +other;

              case regexpTag:
              case stringTag:
                // Coerce regexes to strings and treat strings primitives and string
                // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
                return object == other + "";
            }
            return !1;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
        function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var objProps = keys(object), objLength = objProps.length;
            if (objLength != keys(other).length && !isLoose) return !1;
            for (var index = objLength; index--; ) {
                var key = objProps[index];
                if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) return !1;
            }
            for (var skipCtor = isLoose; ++index < objLength; ) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key], result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;
                // Recursively compare objects (susceptible to call stack limits).
                if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) return !1;
                skipCtor || (skipCtor = "constructor" == key);
            }
            if (!skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && "constructor" in object && "constructor" in other && !("function" == typeof objCtor && objCtor instanceof objCtor && "function" == typeof othCtor && othCtor instanceof othCtor)) return !1;
            }
            return !0;
        }
        /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
        function getCallback(func, thisArg, argCount) {
            var result = lodash.callback || callback;
            result = result === callback ? baseCallback : result;
            return argCount ? result(func, thisArg, argCount) : result;
        }
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
        function getFuncName(func) {
            for (var result = func.name, array = realNames[result], length = array ? array.length : 0; length--; ) {
                var data = array[length], otherFunc = data.func;
                if (null == otherFunc || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
        function getIndexOf(collection, target, fromIndex) {
            var result = lodash.indexOf || indexOf;
            result = result === indexOf ? baseIndexOf : result;
            return collection ? result(collection, target, fromIndex) : result;
        }
        /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
        function getMatchData(object) {
            for (var result = pairs(object), length = result.length; length--; ) result[length][2] = isStrictComparable(result[length][1]);
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
        function getNative(object, key) {
            var value = null == object ? undefined : object[key];
            return isNative(value) ? value : undefined;
        }
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
        function getView(start, end, transforms) {
            for (var index = -1, length = transforms.length; ++index < length; ) {
                var data = transforms[index], size = data.size;
                switch (data.type) {
                  case "drop":
                    start += size;
                    break;

                  case "dropRight":
                    end -= size;
                    break;

                  case "take":
                    end = nativeMin(end, start + size);
                    break;

                  case "takeRight":
                    start = nativeMax(start, end - size);
                }
            }
            return {
                start: start,
                end: end
            };
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
        function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add array properties assigned by `RegExp#exec`.
            if (length && "string" == typeof array[0] && hasOwnProperty.call(array, "index")) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
        function initCloneObject(object) {
            var Ctor = object.constructor;
            "function" == typeof Ctor && Ctor instanceof Ctor || (Ctor = Object);
            return new Ctor();
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
        function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return bufferClone(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                var buffer = object.buffer;
                return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                var result = new Ctor(object.source, reFlags.exec(object));
                result.lastIndex = object.lastIndex;
            }
            return result;
        }
        /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
        function invokePath(object, path, args) {
            if (null != object && !isKey(path, object)) {
                path = toPath(path);
                object = 1 == path.length ? object : baseGet(object, baseSlice(path, 0, -1));
                path = last(path);
            }
            var func = null == object ? object : object[path];
            return null == func ? undefined : func.apply(object, args);
        }
        /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
        function isArrayLike(value) {
            return null != value && isLength(getLength(value));
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
        function isIndex(value, length) {
            value = "number" == typeof value || reIsUint.test(value) ? +value : -1;
            length = null == length ? MAX_SAFE_INTEGER : length;
            return value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) return !1;
            var type = typeof index;
            if ("number" == type ? isArrayLike(object) && isIndex(index, object.length) : "string" == type && index in object) {
                var other = object[index];
                return value === value ? value === other : other !== other;
            }
            return !1;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
        function isKey(value, object) {
            var type = typeof value;
            return !!("string" == type && reIsPlainProp.test(value) || "number" == type) || !isArray(value) && (!reIsDeepProp.test(value) || null != object && value in toObject(object));
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
        function isLaziable(func) {
            var funcName = getFuncName(func);
            if (!(funcName in LazyWrapper.prototype)) return !1;
            var other = lodash[funcName];
            if (func === other) return !0;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
        function isLength(value) {
            return "number" == typeof value && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
        function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < ARY_FLAG, isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!isCommon && !isCombo) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
            }
            // Use source `argPos` if available.
            value = source[7];
            value && (data[7] = arrayCopy(value));
            // Use source `ary` if it's smaller.
            srcBitmask & ARY_FLAG && (data[8] = null == data[8] ? source[8] : nativeMin(data[8], source[8]));
            // Use source `arity` if one is not provided.
            null == data[9] && (data[9] = source[9]);
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
        function mergeDefaults(objectValue, sourceValue) {
            return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
        }
        /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
        function pickByArray(object, props) {
            object = toObject(object);
            for (var index = -1, length = props.length, result = {}; ++index < length; ) {
                var key = props[index];
                key in object && (result[key] = object[key]);
            }
            return result;
        }
        /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
        function pickByCallback(object, predicate) {
            var result = {};
            baseForIn(object, function(value, key, object) {
                predicate(value, key, object) && (result[key] = value);
            });
            return result;
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
        function reorder(array, indexes) {
            for (var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = arrayCopy(array); length--; ) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
        function shimKeys(object) {
            for (var props = keysIn(object), propsLength = props.length, length = propsLength && object.length, allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object)), index = -1, result = []; ++index < propsLength; ) {
                var key = props[index];
                (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) && result.push(key);
            }
            return result;
        }
        /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
        function toIterable(value) {
            return null == value ? [] : isArrayLike(value) ? isObject(value) ? value : Object(value) : values(value);
        }
        /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
        function toObject(value) {
            return isObject(value) ? value : Object(value);
        }
        /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
        function toPath(value) {
            if (isArray(value)) return value;
            var result = [];
            baseToString(value).replace(rePropName, function(match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, "$1") : number || match);
            });
            return result;
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
        function wrapperClone(wrapper) {
            return wrapper instanceof LazyWrapper ? wrapper.clone() : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
        function chunk(array, size, guard) {
            size = (guard ? isIterateeCall(array, size, guard) : null == size) ? 1 : nativeMax(nativeFloor(size) || 1, 1);
            for (var index = 0, length = array ? array.length : 0, resIndex = -1, result = Array(nativeCeil(length / size)); index < length; ) result[++resIndex] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
        function compact(array) {
            for (var index = -1, length = array ? array.length : 0, resIndex = -1, result = []; ++index < length; ) {
                var value = array[index];
                value && (result[++resIndex] = value);
            }
            return result;
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
        function drop(array, n, guard) {
            if (!(array ? array.length : 0)) return [];
            (guard ? isIterateeCall(array, n, guard) : null == n) && (n = 1);
            return baseSlice(array, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
        function dropRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) return [];
            (guard ? isIterateeCall(array, n, guard) : null == n) && (n = 1);
            n = length - (+n || 0);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
        function dropRightWhile(array, predicate, thisArg) {
            return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), !0, !0) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
        function dropWhile(array, predicate, thisArg) {
            return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), !0) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
        function fill(array, value, start, end) {
            var length = array ? array.length : 0;
            if (!length) return [];
            if (start && "number" != typeof start && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
        function first(array) {
            return array ? array[0] : undefined;
        }
        /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
        function flatten(array, isDeep, guard) {
            var length = array ? array.length : 0;
            guard && isIterateeCall(array, isDeep, guard) && (isDeep = !1);
            return length ? baseFlatten(array, isDeep) : [];
        }
        /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
        function flattenDeep(array) {
            return (array ? array.length : 0) ? baseFlatten(array, !0) : [];
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
        function indexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) return -1;
            if ("number" == typeof fromIndex) fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex; else if (fromIndex) {
                var index = binaryIndex(array, value);
                return index < length && (value === value ? value === array[index] : array[index] !== array[index]) ? index : -1;
            }
            return baseIndexOf(array, value, fromIndex || 0);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
        function initial(array) {
            return dropRight(array, 1);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
        function last(array) {
            var length = array ? array.length : 0;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
        function lastIndexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) return -1;
            var index = length;
            if ("number" == typeof fromIndex) index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1; else if (fromIndex) {
                index = binaryIndex(array, value, !0) - 1;
                var other = array[index];
                return (value === value ? value === other : other !== other) ? index : -1;
            }
            if (value !== value) return indexOfNaN(array, index, !0);
            for (;index--; ) if (array[index] === value) return index;
            return -1;
        }
        /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
        function pull() {
            var args = arguments, array = args[0];
            if (!array || !array.length) return array;
            for (var index = 0, indexOf = getIndexOf(), length = args.length; ++index < length; ) for (var fromIndex = 0, value = args[index]; (fromIndex = indexOf(array, value, fromIndex)) > -1; ) splice.call(array, fromIndex, 1);
            return array;
        }
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
        function remove(array, predicate, thisArg) {
            var result = [];
            if (!array || !array.length) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getCallback(predicate, thisArg, 3);
            for (;++index < length; ) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
        function rest(array) {
            return drop(array, 1);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
        function slice(array, start, end) {
            var length = array ? array.length : 0;
            if (!length) return [];
            if (end && "number" != typeof end && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            }
            return baseSlice(array, start, end);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
        function take(array, n, guard) {
            if (!(array ? array.length : 0)) return [];
            (guard ? isIterateeCall(array, n, guard) : null == n) && (n = 1);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
        function takeRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) return [];
            (guard ? isIterateeCall(array, n, guard) : null == n) && (n = 1);
            n = length - (+n || 0);
            return baseSlice(array, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
        function takeRightWhile(array, predicate, thisArg) {
            return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3), !1, !0) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
        function takeWhile(array, predicate, thisArg) {
            return array && array.length ? baseWhile(array, getCallback(predicate, thisArg, 3)) : [];
        }
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
        function uniq(array, isSorted, iteratee, thisArg) {
            if (!(array ? array.length : 0)) return [];
            if (null != isSorted && "boolean" != typeof isSorted) {
                thisArg = iteratee;
                iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
                isSorted = !1;
            }
            var callback = getCallback();
            null == iteratee && callback === baseCallback || (iteratee = callback(iteratee, thisArg, 3));
            return isSorted && getIndexOf() == baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
        function unzip(array) {
            if (!array || !array.length) return [];
            var index = -1, length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLike(group)) {
                    length = nativeMax(group.length, length);
                    return !0;
                }
            });
            for (var result = Array(length); ++index < length; ) result[index] = arrayMap(array, baseProperty(index));
            return result;
        }
        /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
        function unzipWith(array, iteratee, thisArg) {
            if (!(array ? array.length : 0)) return [];
            var result = unzip(array);
            if (null == iteratee) return result;
            iteratee = bindCallback(iteratee, thisArg, 4);
            return arrayMap(result, function(group) {
                return arrayReduce(group, iteratee, undefined, !0);
            });
        }
        /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
        function xor() {
            for (var index = -1, length = arguments.length; ++index < length; ) {
                var array = arguments[index];
                if (isArrayLike(array)) var result = result ? arrayPush(baseDifference(result, array), baseDifference(array, result)) : array;
            }
            return result ? baseUniq(result) : [];
        }
        /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
        function zipObject(props, values) {
            var index = -1, length = props ? props.length : 0, result = {};
            !length || values || isArray(props[0]) || (values = []);
            for (;++index < length; ) {
                var key = props[index];
                values ? result[key] = values[index] : key && (result[key[0]] = key[1]);
            }
            return result;
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = !0;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
        function tap(value, interceptor, thisArg) {
            interceptor.call(thisArg, value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
        function thru(value, interceptor, thisArg) {
            return interceptor.call(thisArg, value);
        }
        /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
        function wrapperChain() {
            return chain(this);
        }
        /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
        function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
        function wrapperPlant(value) {
            for (var result, parent = this; parent instanceof baseLodash; ) {
                var clone = wrapperClone(parent);
                result ? previous.__wrapped__ = clone : result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
        function wrapperReverse() {
            var value = this.__wrapped__, interceptor = function(value) {
                return wrapped && wrapped.__dir__ < 0 ? value : value.reverse();
            };
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                this.__actions__.length && (wrapped = new LazyWrapper(this));
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    func: thru,
                    args: [ interceptor ],
                    thisArg: undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(interceptor);
        }
        /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
        function wrapperToString() {
            return this.value() + "";
        }
        /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
        function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
        function every(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            thisArg && isIterateeCall(collection, predicate, thisArg) && (predicate = undefined);
            "function" == typeof predicate && thisArg === undefined || (predicate = getCallback(predicate, thisArg, 3));
            return func(collection, predicate);
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
        function filter(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            predicate = getCallback(predicate, thisArg, 3);
            return func(collection, predicate);
        }
        /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
        function findWhere(collection, source) {
            return find(collection, baseMatches(source));
        }
        /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
        function includes(collection, target, fromIndex, guard) {
            var length = collection ? getLength(collection) : 0;
            if (!isLength(length)) {
                collection = values(collection);
                length = collection.length;
            }
            fromIndex = "number" != typeof fromIndex || guard && isIterateeCall(target, fromIndex, guard) ? 0 : fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex || 0;
            return "string" == typeof collection || !isArray(collection) && isString(collection) ? fromIndex <= length && collection.indexOf(target, fromIndex) > -1 : !!length && getIndexOf(collection, target, fromIndex) > -1;
        }
        /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
        function map(collection, iteratee, thisArg) {
            var func = isArray(collection) ? arrayMap : baseMap;
            iteratee = getCallback(iteratee, thisArg, 3);
            return func(collection, iteratee);
        }
        /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
        function pluck(collection, path) {
            return map(collection, property(path));
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
        function reject(collection, predicate, thisArg) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            predicate = getCallback(predicate, thisArg, 3);
            return func(collection, function(value, index, collection) {
                return !predicate(value, index, collection);
            });
        }
        /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
        function sample(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : null == n) {
                collection = toIterable(collection);
                var length = collection.length;
                return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
            }
            var index = -1, result = toArray(collection), length = result.length, lastIndex = length - 1;
            n = nativeMin(n < 0 ? 0 : +n || 0, length);
            for (;++index < n; ) {
                var rand = baseRandom(index, lastIndex), value = result[rand];
                result[rand] = result[index];
                result[index] = value;
            }
            result.length = n;
            return result;
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
        function shuffle(collection) {
            return sample(collection, POSITIVE_INFINITY);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
        function size(collection) {
            var length = collection ? getLength(collection) : 0;
            return isLength(length) ? length : keys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
        function some(collection, predicate, thisArg) {
            var func = isArray(collection) ? arraySome : baseSome;
            thisArg && isIterateeCall(collection, predicate, thisArg) && (predicate = undefined);
            "function" == typeof predicate && thisArg === undefined || (predicate = getCallback(predicate, thisArg, 3));
            return func(collection, predicate);
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
        function sortBy(collection, iteratee, thisArg) {
            if (null == collection) return [];
            thisArg && isIterateeCall(collection, iteratee, thisArg) && (iteratee = undefined);
            var index = -1;
            iteratee = getCallback(iteratee, thisArg, 3);
            return baseSortBy(baseMap(collection, function(value, key, collection) {
                return {
                    criteria: iteratee(value, key, collection),
                    index: ++index,
                    value: value
                };
            }), compareAscending);
        }
        /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
        function sortByOrder(collection, iteratees, orders, guard) {
            if (null == collection) return [];
            guard && isIterateeCall(iteratees, orders, guard) && (orders = undefined);
            isArray(iteratees) || (iteratees = null == iteratees ? [] : [ iteratees ]);
            isArray(orders) || (orders = null == orders ? [] : [ orders ]);
            return baseSortByOrder(collection, iteratees, orders);
        }
        /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
        function where(collection, source) {
            return filter(collection, baseMatches(source));
        }
        /*------------------------------------------------------------------------*/
        /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
        function after(n, func) {
            if ("function" != typeof func) {
                if ("function" != typeof n) throw new TypeError(FUNC_ERROR_TEXT);
                var temp = n;
                n = func;
                func = temp;
            }
            n = nativeIsFinite(n = +n) ? n : 0;
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
        function ary(func, n, guard) {
            guard && isIterateeCall(func, n, guard) && (n = undefined);
            n = func && null == n ? func.length : nativeMax(+n || 0, 0);
            return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
        function before(n, func) {
            var result;
            if ("function" != typeof func) {
                if ("function" != typeof n) throw new TypeError(FUNC_ERROR_TEXT);
                var temp = n;
                n = func;
                func = temp;
            }
            return function() {
                --n > 0 && (result = func.apply(this, arguments));
                n <= 1 && (func = undefined);
                return result;
            };
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
        function debounce(func, wait, options) {
            function cancel() {
                timeoutId && clearTimeout(timeoutId);
                maxTimeoutId && clearTimeout(maxTimeoutId);
                lastCalled = 0;
                maxTimeoutId = timeoutId = trailingCall = undefined;
            }
            function complete(isCalled, id) {
                id && clearTimeout(id);
                maxTimeoutId = timeoutId = trailingCall = undefined;
                if (isCalled) {
                    lastCalled = now();
                    result = func.apply(thisArg, args);
                    timeoutId || maxTimeoutId || (args = thisArg = undefined);
                }
            }
            function delayed() {
                var remaining = wait - (now() - stamp);
                remaining <= 0 || remaining > wait ? complete(trailingCall, maxTimeoutId) : timeoutId = setTimeout(delayed, remaining);
            }
            function maxDelayed() {
                complete(trailing, timeoutId);
            }
            function debounced() {
                args = arguments;
                stamp = now();
                thisArg = this;
                trailingCall = trailing && (timeoutId || !leading);
                if (!1 === maxWait) var leadingCall = leading && !timeoutId; else {
                    maxTimeoutId || leading || (lastCalled = stamp);
                    var remaining = maxWait - (stamp - lastCalled), isCalled = remaining <= 0 || remaining > maxWait;
                    if (isCalled) {
                        maxTimeoutId && (maxTimeoutId = clearTimeout(maxTimeoutId));
                        lastCalled = stamp;
                        result = func.apply(thisArg, args);
                    } else maxTimeoutId || (maxTimeoutId = setTimeout(maxDelayed, remaining));
                }
                isCalled && timeoutId ? timeoutId = clearTimeout(timeoutId) : timeoutId || wait === maxWait || (timeoutId = setTimeout(delayed, wait));
                if (leadingCall) {
                    isCalled = !0;
                    result = func.apply(thisArg, args);
                }
                !isCalled || timeoutId || maxTimeoutId || (args = thisArg = undefined);
                return result;
            }
            var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0, maxWait = !1, trailing = !0;
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            wait = wait < 0 ? 0 : +wait || 0;
            if (!0 === options) {
                var leading = !0;
                trailing = !1;
            } else if (isObject(options)) {
                leading = !!options.leading;
                maxWait = "maxWait" in options && nativeMax(+options.maxWait || 0, wait);
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            debounced.cancel = cancel;
            return debounced;
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
        function memoize(func, resolver) {
            if ("function" != typeof func || resolver && "function" != typeof resolver) throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result);
                return result;
            };
            memoized.cache = new memoize.Cache();
            return memoized;
        }
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
        function negate(predicate) {
            if ("function" != typeof predicate) throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                return !predicate.apply(this, arguments);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
        function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
        function restParam(func, start) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
            return function() {
                for (var args = arguments, index = -1, length = nativeMax(args.length - start, 0), rest = Array(length); ++index < length; ) rest[index] = args[start + index];
                switch (start) {
                  case 0:
                    return func.call(this, rest);

                  case 1:
                    return func.call(this, args[0], rest);

                  case 2:
                    return func.call(this, args[0], args[1], rest);
                }
                var otherArgs = Array(start + 1);
                index = -1;
                for (;++index < start; ) otherArgs[index] = args[index];
                otherArgs[start] = rest;
                return func.apply(this, otherArgs);
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
        function spread(func) {
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            return function(array) {
                return func.apply(this, array);
            };
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
        function throttle(func, wait, options) {
            var leading = !0, trailing = !0;
            if ("function" != typeof func) throw new TypeError(FUNC_ERROR_TEXT);
            if (!1 === options) leading = !1; else if (isObject(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                leading: leading,
                maxWait: +wait,
                trailing: trailing
            });
        }
        /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
        function wrap(value, wrapper) {
            wrapper = null == wrapper ? identity : wrapper;
            return createWrapper(wrapper, PARTIAL_FLAG, undefined, [ value ], []);
        }
        /*------------------------------------------------------------------------*/
        /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
        function clone(value, isDeep, customizer, thisArg) {
            if (isDeep && "boolean" != typeof isDeep && isIterateeCall(value, isDeep, customizer)) isDeep = !1; else if ("function" == typeof isDeep) {
                thisArg = customizer;
                customizer = isDeep;
                isDeep = !1;
            }
            return "function" == typeof customizer ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1)) : baseClone(value, isDeep);
        }
        /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
        function cloneDeep(value, customizer, thisArg) {
            return "function" == typeof customizer ? baseClone(value, !0, bindCallback(customizer, thisArg, 1)) : baseClone(value, !0);
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
        function gt(value, other) {
            return value > other;
        }
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
        function gte(value, other) {
            return value >= other;
        }
        /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
        function isArguments(value) {
            return isObjectLike(value) && isArrayLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
        function isBoolean(value) {
            return !0 === value || !1 === value || isObjectLike(value) && objToString.call(value) == boolTag;
        }
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
        function isDate(value) {
            return isObjectLike(value) && objToString.call(value) == dateTag;
        }
        /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
        function isElement(value) {
            return !!value && 1 === value.nodeType && isObjectLike(value) && !isPlainObject(value);
        }
        /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
        function isEmpty(value) {
            return null == value || (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) || isObjectLike(value) && isFunction(value.splice)) ? !value.length : !keys(value).length);
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
        function isEqual(value, other, customizer, thisArg) {
            customizer = "function" == typeof customizer ? bindCallback(customizer, thisArg, 3) : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
        function isError(value) {
            return isObjectLike(value) && "string" == typeof value.message && objToString.call(value) == errorTag;
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
        function isFinite(value) {
            return "number" == typeof value && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
        function isFunction(value) {
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in older versions of Chrome and Safari which return 'function' for regexes
            // and Safari 8 equivalents which return 'object' for typed array constructors.
            return isObject(value) && objToString.call(value) == funcTag;
        }
        /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
        function isObject(value) {
            // Avoid a V8 JIT bug in Chrome 19-20.
            // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
            var type = typeof value;
            return !!value && ("object" == type || "function" == type);
        }
        /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
        function isMatch(object, source, customizer, thisArg) {
            customizer = "function" == typeof customizer ? bindCallback(customizer, thisArg, 3) : undefined;
            return baseIsMatch(object, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
        function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
        function isNative(value) {
            return null != value && (isFunction(value) ? reIsNative.test(fnToString.call(value)) : isObjectLike(value) && reIsHostCtor.test(value));
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
        function isNull(value) {
            return null === value;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
        function isNumber(value) {
            return "number" == typeof value || isObjectLike(value) && objToString.call(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
        function isPlainObject(value) {
            var Ctor;
            // Exit early for non `Object` objects.
            if (!isObjectLike(value) || objToString.call(value) != objectTag || isArguments(value) || !hasOwnProperty.call(value, "constructor") && "function" == typeof (Ctor = value.constructor) && !(Ctor instanceof Ctor)) return !1;
            // IE < 9 iterates inherited properties before own properties. If the first
            // iterated property is an object's own property then there are no inherited
            // enumerable properties.
            var result;
            // In most environments an object's own properties are iterated before
            // its inherited properties. If the last iterated property is an object's
            // own property then there are no inherited enumerable properties.
            baseForIn(value, function(subValue, key) {
                result = key;
            });
            return result === undefined || hasOwnProperty.call(value, result);
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
        function isRegExp(value) {
            return isObject(value) && objToString.call(value) == regexpTag;
        }
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
        function isString(value) {
            return "string" == typeof value || isObjectLike(value) && objToString.call(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
        function isTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
        }
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
        function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
        function lt(value, other) {
            return value < other;
        }
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
        function lte(value, other) {
            return value <= other;
        }
        /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
        function toArray(value) {
            var length = value ? getLength(value) : 0;
            return isLength(length) ? length ? arrayCopy(value) : [] : values(value);
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
        function toPlainObject(value) {
            return baseCopy(value, keysIn(value));
        }
        /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
        function create(prototype, properties, guard) {
            var result = baseCreate(prototype);
            guard && isIterateeCall(prototype, properties, guard) && (properties = undefined);
            return properties ? baseAssign(result, properties) : result;
        }
        /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
        function functions(object) {
            return baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
        function get(object, path, defaultValue) {
            var result = null == object ? undefined : baseGet(object, toPath(path), path + "");
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
        function has(object, path) {
            if (null == object) return !1;
            var result = hasOwnProperty.call(object, path);
            if (!result && !isKey(path)) {
                path = toPath(path);
                object = 1 == path.length ? object : baseGet(object, baseSlice(path, 0, -1));
                if (null == object) return !1;
                path = last(path);
                result = hasOwnProperty.call(object, path);
            }
            return result || isLength(object.length) && isIndex(path, object.length) && (isArray(object) || isArguments(object));
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
        function invert(object, multiValue, guard) {
            guard && isIterateeCall(object, multiValue, guard) && (multiValue = undefined);
            for (var index = -1, props = keys(object), length = props.length, result = {}; ++index < length; ) {
                var key = props[index], value = object[key];
                multiValue ? hasOwnProperty.call(result, value) ? result[value].push(key) : result[value] = [ key ] : result[value] = key;
            }
            return result;
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
        function keysIn(object) {
            if (null == object) return [];
            isObject(object) || (object = Object(object));
            var length = object.length;
            length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;
            for (var Ctor = object.constructor, index = -1, isProto = "function" == typeof Ctor && Ctor.prototype === object, result = Array(length), skipIndexes = length > 0; ++index < length; ) result[index] = index + "";
            for (var key in object) skipIndexes && isIndex(key, length) || "constructor" == key && (isProto || !hasOwnProperty.call(object, key)) || result.push(key);
            return result;
        }
        /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
        function pairs(object) {
            object = toObject(object);
            for (var index = -1, props = keys(object), length = props.length, result = Array(length); ++index < length; ) {
                var key = props[index];
                result[index] = [ key, object[key] ];
            }
            return result;
        }
        /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
        function result(object, path, defaultValue) {
            var result = null == object ? undefined : object[path];
            if (result === undefined) {
                if (null != object && !isKey(path, object)) {
                    path = toPath(path);
                    object = 1 == path.length ? object : baseGet(object, baseSlice(path, 0, -1));
                    result = null == object ? undefined : object[last(path)];
                }
                result = result === undefined ? defaultValue : result;
            }
            return isFunction(result) ? result.call(object) : result;
        }
        /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
        function set(object, path, value) {
            if (null == object) return object;
            var pathKey = path + "";
            path = null != object[pathKey] || isKey(path, object) ? [ pathKey ] : toPath(path);
            for (var index = -1, length = path.length, lastIndex = length - 1, nested = object; null != nested && ++index < length; ) {
                var key = path[index];
                isObject(nested) && (index == lastIndex ? nested[key] = value : null == nested[key] && (nested[key] = isIndex(path[index + 1]) ? [] : {}));
                nested = nested[key];
            }
            return object;
        }
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
        function transform(object, iteratee, accumulator, thisArg) {
            var isArr = isArray(object) || isTypedArray(object);
            iteratee = getCallback(iteratee, thisArg, 4);
            if (null == accumulator) if (isArr || isObject(object)) {
                var Ctor = object.constructor;
                accumulator = isArr ? isArray(object) ? new Ctor() : [] : baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
            } else accumulator = {};
            (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
        function values(object) {
            return baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
        function valuesIn(object) {
            return baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/
        /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
        function inRange(value, start, end) {
            start = +start || 0;
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = +end || 0;
            return value >= nativeMin(start, end) && value < nativeMax(start, end);
        }
        /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
        function random(min, max, floating) {
            floating && isIterateeCall(min, max, floating) && (max = floating = undefined);
            var noMin = null == min, noMax = null == max;
            if (null == floating) if (noMax && "boolean" == typeof min) {
                floating = min;
                min = 1;
            } else if ("boolean" == typeof max) {
                floating = max;
                noMax = !0;
            }
            if (noMin && noMax) {
                max = 1;
                noMax = !1;
            }
            min = +min || 0;
            if (noMax) {
                max = min;
                min = 0;
            } else max = +max || 0;
            if (floating || min % 1 || max % 1) {
                var rand = nativeRandom();
                return nativeMin(min + rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1))), max);
            }
            return baseRandom(min, max);
        }
        /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
        function capitalize(string) {
            string = baseToString(string);
            return string && string.charAt(0).toUpperCase() + string.slice(1);
        }
        /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
        function deburr(string) {
            string = baseToString(string);
            return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, "");
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
        function endsWith(string, target, position) {
            string = baseToString(string);
            target += "";
            var length = string.length;
            position = position === undefined ? length : nativeMin(position < 0 ? 0 : +position || 0, length);
            position -= target.length;
            return position >= 0 && string.indexOf(target, position) == position;
        }
        /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
        function escape(string) {
            // Reset `lastIndex` because in IE < 9 `String#replace` does not.
            string = baseToString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
        function escapeRegExp(string) {
            string = baseToString(string);
            return string && reHasRegExpChars.test(string) ? string.replace(reRegExpChars, escapeRegExpChar) : string || "(?:)";
        }
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
        function pad(string, length, chars) {
            string = baseToString(string);
            length = +length;
            var strLength = string.length;
            if (strLength >= length || !nativeIsFinite(length)) return string;
            var mid = (length - strLength) / 2, leftLength = nativeFloor(mid);
            chars = createPadding("", nativeCeil(mid), chars);
            return chars.slice(0, leftLength) + string + chars;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
        function parseInt(string, radix, guard) {
            // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
            // Chrome fails to trim leading <BOM> whitespace characters.
            // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
            (guard ? isIterateeCall(string, radix, guard) : null == radix) ? radix = 0 : radix && (radix = +radix);
            string = trim(string);
            return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
        function repeat(string, n) {
            var result = "";
            string = baseToString(string);
            n = +n;
            if (n < 1 || !string || !nativeIsFinite(n)) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                n % 2 && (result += string);
                n = nativeFloor(n / 2);
                string += string;
            } while (n);
            return result;
        }
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
        function startsWith(string, target, position) {
            string = baseToString(string);
            position = null == position ? 0 : nativeMin(position < 0 ? 0 : +position || 0, string.length);
            return string.lastIndexOf(target, position) == position;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
        function template(string, options, otherOptions) {
            // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            otherOptions && isIterateeCall(string, options, otherOptions) && (options = otherOptions = undefined);
            string = baseToString(string);
            options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
            var isEscaping, isEvaluating, imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys), index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '", reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g"), sourceURL = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = !0;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = !0;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                interpolateValue && (source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'");
                index = offset + match.length;
                // The JS engine embedded in Adobe products requires returning the `match`
                // string in order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = options.variable;
            variable || (source = "with (obj) {\n" + source + "\n}\n");
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            // Frame code as the function body.
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + "return " + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
        function trim(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            if (!string) return string;
            if (guard ? isIterateeCall(value, chars, guard) : null == chars) return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
            chars += "";
            return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
        function trimLeft(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            return string ? (guard ? isIterateeCall(value, chars, guard) : null == chars) ? string.slice(trimmedLeftIndex(string)) : string.slice(charsLeftIndex(string, chars + "")) : string;
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
        function trimRight(string, chars, guard) {
            var value = string;
            string = baseToString(string);
            return string ? (guard ? isIterateeCall(value, chars, guard) : null == chars) ? string.slice(0, trimmedRightIndex(string) + 1) : string.slice(0, charsRightIndex(string, chars + "") + 1) : string;
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
        function trunc(string, options, guard) {
            guard && isIterateeCall(string, options, guard) && (options = undefined);
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (null != options) if (isObject(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? +options.length || 0 : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
            } else length = +options || 0;
            string = baseToString(string);
            if (length >= string.length) return string;
            var end = length - omission.length;
            if (end < 1) return omission;
            var result = string.slice(0, end);
            if (null == separator) return result + omission;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, newEnd, substring = string.slice(0, end);
                    separator.global || (separator = RegExp(separator.source, (reFlags.exec(separator) || "") + "g"));
                    separator.lastIndex = 0;
                    for (;match = separator.exec(substring); ) newEnd = match.index;
                    result = result.slice(0, null == newEnd ? end : newEnd);
                }
            } else if (string.indexOf(separator, end) != end) {
                var index = result.lastIndexOf(separator);
                index > -1 && (result = result.slice(0, index));
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
        function unescape(string) {
            string = baseToString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
        function words(string, pattern, guard) {
            guard && isIterateeCall(string, pattern, guard) && (pattern = undefined);
            string = baseToString(string);
            return string.match(pattern || reWords) || [];
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
        function callback(func, thisArg, guard) {
            guard && isIterateeCall(func, thisArg, guard) && (thisArg = undefined);
            return isObjectLike(func) ? matches(func) : baseCallback(func, thisArg);
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
        function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
        function identity(value) {
            return value;
        }
        /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
        function matches(source) {
            return baseMatches(baseClone(source, !0));
        }
        /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
        function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, !0));
        }
        /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
        function mixin(object, source, options) {
            if (null == options) {
                var isObj = isObject(source), props = isObj ? keys(source) : undefined, methodNames = props && props.length ? baseFunctions(source, props) : undefined;
                if (!(methodNames ? methodNames.length : isObj)) {
                    methodNames = !1;
                    options = source;
                    source = object;
                    object = this;
                }
            }
            methodNames || (methodNames = baseFunctions(source, keys(source)));
            var chain = !0, index = -1, isFunc = isFunction(object), length = methodNames.length;
            !1 === options ? chain = !1 : isObject(options) && "chain" in options && (chain = options.chain);
            for (;++index < length; ) {
                var methodName = methodNames[index], func = source[methodName];
                object[methodName] = func;
                isFunc && (object.prototype[methodName] = function(func) {
                    return function() {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                            var result = object(this.__wrapped__);
                            (result.__actions__ = arrayCopy(this.__actions__)).push({
                                func: func,
                                args: arguments,
                                thisArg: object
                            });
                            result.__chain__ = chainAll;
                            return result;
                        }
                        return func.apply(object, arrayPush([ this.value() ], arguments));
                    };
                }(func));
            }
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
        function noConflict() {
            root._ = oldDash;
            return this;
        }
        /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
        function noop() {}
        /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
        function property(path) {
            return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
        function propertyOf(object) {
            return function(path) {
                return baseGet(object, toPath(path), path + "");
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
        function range(start, end, step) {
            step && isIterateeCall(start, end, step) && (end = step = undefined);
            start = +start || 0;
            step = null == step ? 1 : +step || 0;
            if (null == end) {
                end = start;
                start = 0;
            } else end = +end || 0;
            for (// Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
            // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length); ++index < length; ) {
                result[index] = start;
                start += step;
            }
            return result;
        }
        /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
        function times(n, iteratee, thisArg) {
            n = nativeFloor(n);
            // Exit early to avoid a JSC JIT bug in Safari 8
            // where `Array(0)` is treated as `Array(1)`.
            if (n < 1 || !nativeIsFinite(n)) return [];
            var index = -1, result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
            iteratee = bindCallback(iteratee, thisArg, 1);
            for (;++index < n; ) index < MAX_ARRAY_LENGTH ? result[index] = iteratee(index) : iteratee(index);
            return result;
        }
        /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
        function uniqueId(prefix) {
            var id = ++idCounter;
            return baseToString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/
        /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
        function add(augend, addend) {
            return (+augend || 0) + (+addend || 0);
        }
        /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
        function sum(collection, iteratee, thisArg) {
            thisArg && isIterateeCall(collection, iteratee, thisArg) && (iteratee = undefined);
            iteratee = getCallback(iteratee, thisArg, 3);
            return 1 == iteratee.length ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee) : baseSum(collection, iteratee);
        }
        // Avoid issues with some ES3 environments that attempt to use values, named
        // after built-in constructors like `Object`, for the creation of literals.
        // ES5 clears this up by stating that literals must use built-in constructors.
        // See https://es5.github.io/#x11.1.5 for more details.
        context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
        /** Native constructor references. */
        var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Number = context.Number, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError, arrayProto = Array.prototype, objectProto = Object.prototype, stringProto = String.prototype, fnToString = Function.prototype.toString, hasOwnProperty = objectProto.hasOwnProperty, idCounter = 0, objToString = objectProto.toString, oldDash = root._, reIsNative = RegExp("^" + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), ArrayBuffer = context.ArrayBuffer, clearTimeout = context.clearTimeout, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable = objectProto.propertyIsEnumerable, Set = getNative(context, "Set"), setTimeout = context.setTimeout, splice = arrayProto.splice, Uint8Array = context.Uint8Array, WeakMap = getNative(context, "WeakMap"), nativeCeil = Math.ceil, nativeCreate = getNative(Object, "create"), nativeFloor = Math.floor, nativeIsArray = getNative(Array, "isArray"), nativeIsFinite = context.isFinite, nativeKeys = getNative(Object, "keys"), nativeMax = Math.max, nativeMin = Math.min, nativeNow = getNative(Date, "now"), nativeParseInt = context.parseInt, nativeRandom = Math.random, NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY, POSITIVE_INFINITY = Number.POSITIVE_INFINITY, MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1, MAX_SAFE_INTEGER = 9007199254740991, metaMap = WeakMap && new WeakMap(), realNames = {};
        lodash.support = {};
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
        lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
            escape: reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
            evaluate: reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
            interpolate: reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
            variable: "",
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
            imports: {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
                _: lodash
            }
        };
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
        var baseCreate = function() {
            function object() {}
            return function(prototype) {
                if (isObject(prototype)) {
                    object.prototype = prototype;
                    var result = new object();
                    object.prototype = undefined;
                }
                return result || {};
            };
        }(), baseEach = createBaseEach(baseForOwn), baseEachRight = createBaseEach(baseForOwnRight, !0), baseFor = createBaseFor(), baseForRight = createBaseFor(!0), baseSetData = metaMap ? function(func, data) {
            metaMap.set(func, data);
            return func;
        } : identity, getData = metaMap ? function(func) {
            return metaMap.get(func);
        } : noop, getLength = baseProperty("length"), setData = function() {
            var count = 0, lastCalled = 0;
            return function(key, value) {
                var stamp = now(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return key;
                } else count = 0;
                return baseSetData(key, value);
            };
        }(), difference = restParam(function(array, values) {
            return isObjectLike(array) && isArrayLike(array) ? baseDifference(array, baseFlatten(values, !1, !0)) : [];
        }), findIndex = createFindIndex(), findLastIndex = createFindIndex(!0), intersection = restParam(function(arrays) {
            for (var othLength = arrays.length, othIndex = othLength, caches = Array(length), indexOf = getIndexOf(), isCommon = indexOf == baseIndexOf, result = []; othIndex--; ) {
                var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
                caches[othIndex] = isCommon && value.length >= 120 ? createCache(othIndex && value) : null;
            }
            var array = arrays[0], index = -1, length = array ? array.length : 0, seen = caches[0];
            outer: for (;++index < length; ) {
                value = array[index];
                if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
                    for (var othIndex = othLength; --othIndex; ) {
                        var cache = caches[othIndex];
                        if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) continue outer;
                    }
                    seen && seen.push(value);
                    result.push(value);
                }
            }
            return result;
        }), pullAt = restParam(function(array, indexes) {
            indexes = baseFlatten(indexes);
            var result = baseAt(array, indexes);
            basePullAt(array, indexes.sort(baseCompareAscending));
            return result;
        }), sortedIndex = createSortedIndex(), sortedLastIndex = createSortedIndex(!0), union = restParam(function(arrays) {
            return baseUniq(baseFlatten(arrays, !1, !0));
        }), without = restParam(function(array, values) {
            return isArrayLike(array) ? baseDifference(array, values) : [];
        }), zip = restParam(unzip), zipWith = restParam(function(arrays) {
            var length = arrays.length, iteratee = length > 2 ? arrays[length - 2] : undefined, thisArg = length > 1 ? arrays[length - 1] : undefined;
            if (length > 2 && "function" == typeof iteratee) length -= 2; else {
                iteratee = length > 1 && "function" == typeof thisArg ? (--length, thisArg) : undefined;
                thisArg = undefined;
            }
            arrays.length = length;
            return unzipWith(arrays, iteratee, thisArg);
        }), wrapperConcat = restParam(function(values) {
            values = baseFlatten(values);
            return this.thru(function(array) {
                return arrayConcat(isArray(array) ? array : [ toObject(array) ], values);
            });
        }), at = restParam(function(collection, props) {
            return baseAt(collection, baseFlatten(props));
        }), countBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
        }), find = createFind(baseEach), findLast = createFind(baseEachRight, !0), forEach = createForEach(arrayEach, baseEach), forEachRight = createForEach(arrayEachRight, baseEachRight), groupBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? result[key].push(value) : result[key] = [ value ];
        }), indexBy = createAggregator(function(result, value, key) {
            result[key] = value;
        }), invoke = restParam(function(collection, path, args) {
            var index = -1, isFunc = "function" == typeof path, isProp = isKey(path), result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value) {
                var func = isFunc ? path : isProp && null != value ? value[path] : undefined;
                result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
            });
            return result;
        }), partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [ [], [] ];
        }), reduce = createReduce(arrayReduce, baseEach), reduceRight = createReduce(arrayReduceRight, baseEachRight), sortByAll = restParam(function(collection, iteratees) {
            if (null == collection) return [];
            var guard = iteratees[2];
            guard && isIterateeCall(iteratees[0], iteratees[1], guard) && (iteratees.length = 1);
            return baseSortByOrder(collection, baseFlatten(iteratees), []);
        }), now = nativeNow || function() {
            return new Date().getTime();
        }, bind = restParam(function(func, thisArg, partials) {
            var bitmask = BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, bind.placeholder);
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(func, bitmask, thisArg, partials, holders);
        }), bindAll = restParam(function(object, methodNames) {
            methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);
            for (var index = -1, length = methodNames.length; ++index < length; ) {
                var key = methodNames[index];
                object[key] = createWrapper(object[key], BIND_FLAG, object);
            }
            return object;
        }), bindKey = restParam(function(object, key, partials) {
            var bitmask = BIND_FLAG | BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, bindKey.placeholder);
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(key, bitmask, object, partials, holders);
        }), curry = createCurry(CURRY_FLAG), curryRight = createCurry(CURRY_RIGHT_FLAG), defer = restParam(function(func, args) {
            return baseDelay(func, 1, args);
        }), delay = restParam(function(func, wait, args) {
            return baseDelay(func, wait, args);
        }), flow = createFlow(), flowRight = createFlow(!0), modArgs = restParam(function(func, transforms) {
            transforms = baseFlatten(transforms);
            if ("function" != typeof func || !arrayEvery(transforms, baseIsFunction)) throw new TypeError(FUNC_ERROR_TEXT);
            var length = transforms.length;
            return restParam(function(args) {
                for (var index = nativeMin(args.length, length); index--; ) args[index] = transforms[index](args[index]);
                return func.apply(this, args);
            });
        }), partial = createPartial(PARTIAL_FLAG), partialRight = createPartial(PARTIAL_RIGHT_FLAG), rearg = restParam(function(func, indexes) {
            return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
        }), isArray = nativeIsArray || function(value) {
            return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
        }, merge = createAssigner(baseMerge), assign = createAssigner(function(object, source, customizer) {
            return customizer ? assignWith(object, source, customizer) : baseAssign(object, source);
        }), defaults = createDefaults(assign, assignDefaults), defaultsDeep = createDefaults(merge, mergeDefaults), findKey = createFindKey(baseForOwn), findLastKey = createFindKey(baseForOwnRight), forIn = createForIn(baseFor), forInRight = createForIn(baseForRight), forOwn = createForOwn(baseForOwn), forOwnRight = createForOwn(baseForOwnRight), keys = nativeKeys ? function(object) {
            var Ctor = null == object ? undefined : object.constructor;
            return "function" == typeof Ctor && Ctor.prototype === object || "function" != typeof object && isArrayLike(object) ? shimKeys(object) : isObject(object) ? nativeKeys(object) : [];
        } : shimKeys, mapKeys = createObjectMapper(!0), mapValues = createObjectMapper(), omit = restParam(function(object, props) {
            if (null == object) return {};
            if ("function" != typeof props[0]) {
                var props = arrayMap(baseFlatten(props), String);
                return pickByArray(object, baseDifference(keysIn(object), props));
            }
            var predicate = bindCallback(props[0], props[1], 3);
            return pickByCallback(object, function(value, key, object) {
                return !predicate(value, key, object);
            });
        }), pick = restParam(function(object, props) {
            return null == object ? {} : "function" == typeof props[0] ? pickByCallback(object, bindCallback(props[0], props[1], 3)) : pickByArray(object, baseFlatten(props));
        }), camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? word.charAt(0).toUpperCase() + word.slice(1) : word);
        }), kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? "-" : "") + word.toLowerCase();
        }), padLeft = createPadDir(), padRight = createPadDir(!0), snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? "_" : "") + word.toLowerCase();
        }), startCase = createCompounder(function(result, word, index) {
            return result + (index ? " " : "") + (word.charAt(0).toUpperCase() + word.slice(1));
        }), attempt = restParam(function(func, args) {
            try {
                return func.apply(undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        }), method = restParam(function(path, args) {
            return function(object) {
                return invokePath(object, path, args);
            };
        }), methodOf = restParam(function(object, args) {
            return function(path) {
                return invokePath(object, path, args);
            };
        }), ceil = createRound("ceil"), floor = createRound("floor"), max = createExtremum(gt, NEGATIVE_INFINITY), min = createExtremum(lt, POSITIVE_INFINITY), round = createRound("round");
        /*------------------------------------------------------------------------*/
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        // Add functions to the `Map` cache.
        MapCache.prototype.delete = mapDelete;
        MapCache.prototype.get = mapGet;
        MapCache.prototype.has = mapHas;
        MapCache.prototype.set = mapSet;
        // Add functions to the `Set` cache.
        SetCache.prototype.push = cachePush;
        // Assign cache to `_.memoize`.
        memoize.Cache = MapCache;
        // Add functions that return wrapped values when chaining.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.callback = callback;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.functions = functions;
        lodash.groupBy = groupBy;
        lodash.indexBy = indexBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.invert = invert;
        lodash.invoke = invoke;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.modArgs = modArgs;
        lodash.negate = negate;
        lodash.omit = omit;
        lodash.once = once;
        lodash.pairs = pairs;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pluck = pluck;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.restParam = restParam;
        lodash.set = set;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortByAll = sortByAll;
        lodash.sortByOrder = sortByOrder;
        lodash.spread = spread;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.times = times;
        lodash.toArray = toArray;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.union = union;
        lodash.uniq = uniq;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.where = where;
        lodash.without = without;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.backflow = flowRight;
        lodash.collect = map;
        lodash.compose = flowRight;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.extend = assign;
        lodash.iteratee = callback;
        lodash.methods = functions;
        lodash.object = zipObject;
        lodash.select = filter;
        lodash.tail = rest;
        lodash.unique = uniq;
        // Add functions to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/
        // Add functions that return unwrapped values when chaining.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.deburr = deburr;
        lodash.endsWith = endsWith;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.findWhere = findWhere;
        lodash.first = first;
        lodash.floor = floor;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isBoolean = isBoolean;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isMatch = isMatch;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isString = isString;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.min = min;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padLeft = padLeft;
        lodash.padRight = padRight;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.sum = sum;
        lodash.template = template;
        lodash.trim = trim;
        lodash.trimLeft = trimLeft;
        lodash.trimRight = trimRight;
        lodash.trunc = trunc;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.words = words;
        // Add aliases.
        lodash.all = every;
        lodash.any = some;
        lodash.contains = includes;
        lodash.eq = isEqual;
        lodash.detect = find;
        lodash.foldl = reduce;
        lodash.foldr = reduceRight;
        lodash.head = first;
        lodash.include = includes;
        lodash.inject = reduce;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                lodash.prototype[methodName] || (source[methodName] = func);
            });
            return source;
        }(), !1);
        /*------------------------------------------------------------------------*/
        // Add functions capable of returning wrapped and unwrapped values when chaining.
        lodash.sample = sample;
        lodash.prototype.sample = function(n) {
            return this.__chain__ || null != n ? this.thru(function(value) {
                return sample(value, n);
            }) : sample(this.value());
        };
        /*------------------------------------------------------------------------*/
        /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
        lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([ "bind", "bindKey", "curry", "curryRight", "partial", "partialRight" ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([ "drop", "take" ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                var filtered = this.__filtered__;
                if (filtered && !index) return new LazyWrapper(this);
                n = null == n ? 1 : nativeMax(nativeFloor(n) || 0, 0);
                var result = this.clone();
                filtered ? result.__takeCount__ = nativeMin(result.__takeCount__, n) : result.__views__.push({
                    size: n,
                    type: methodName + (result.__dir__ < 0 ? "Right" : "")
                });
                return result;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([ "filter", "map", "takeWhile" ], function(methodName, index) {
            var type = index + 1, isFilter = type != LAZY_MAP_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
                var result = this.clone();
                result.__iteratees__.push({
                    iteratee: getCallback(iteratee, thisArg, 1),
                    type: type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.first` and `_.last`.
        arrayEach([ "first", "last" ], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
        arrayEach([ "initial", "rest" ], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
        arrayEach([ "pluck", "where" ], function(methodName, index) {
            var operationName = index ? "filter" : "map", createCallback = index ? baseMatches : property;
            LazyWrapper.prototype[methodName] = function(value) {
                return this[operationName](createCallback(value));
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.reject = function(predicate, thisArg) {
            predicate = getCallback(predicate, thisArg, 1);
            return this.filter(function(value) {
                return !predicate(value);
            });
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = null == start ? 0 : +start || 0;
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            start < 0 ? result = result.takeRight(-start) : start && (result = result.drop(start));
            if (end !== undefined) {
                end = +end || 0;
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
            return this.reverse().takeWhile(predicate, thisArg).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(POSITIVE_INFINITY);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName), retUnwrapped = /^(?:first|last)$/.test(methodName), lodashFunc = lodash[retUnwrapped ? "take" + ("last" == methodName ? "Right" : "") : methodName];
            lodashFunc && (lodash.prototype[methodName] = function() {
                var args = retUnwrapped ? [ 1 ] : arguments, chainAll = this.__chain__, value = this.__wrapped__, isHybrid = !!this.__actions__.length, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                useLazy && checkIteratee && "function" == typeof iteratee && 1 != iteratee.length && (// Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = !1);
                var interceptor = function(value) {
                    return retUnwrapped && chainAll ? lodashFunc(value, 1)[0] : lodashFunc.apply(undefined, arrayPush([ value ], args));
                }, action = {
                    func: thru,
                    args: [ interceptor ],
                    thisArg: undefined
                }, onlyLazy = isLazy && !isHybrid;
                if (retUnwrapped && !chainAll) {
                    if (onlyLazy) {
                        value = value.clone();
                        value.__actions__.push(action);
                        return func.call(value);
                    }
                    return lodashFunc.call(undefined, this.value())[0];
                }
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push(action);
                    return new LodashWrapper(result, chainAll);
                }
                return this.thru(interceptor);
            });
        });
        // Add `Array` and `String` methods to `lodash.prototype`.
        arrayEach([ "join", "pop", "push", "replace", "shift", "sort", "splice", "split", "unshift" ], function(methodName) {
            var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                return retUnwrapped && !this.__chain__ ? func.apply(this.value(), args) : this[chainName](function(value) {
                    return func.apply(value, args);
                });
            };
        });
        // Map minified function names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name;
                (realNames[key] || (realNames[key] = [])).push({
                    name: methodName,
                    func: lodashFunc
                });
            }
        });
        realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [ {
            name: "wrapper",
            func: undefined
        } ];
        // Add functions to the lazy wrapper.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chaining functions to the `lodash` wrapper.
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.concat = wrapperConcat;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toString = wrapperToString;
        lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add function aliases to the `lodash` wrapper.
        lodash.prototype.collect = lodash.prototype.map;
        lodash.prototype.head = lodash.prototype.first;
        lodash.prototype.select = lodash.prototype.filter;
        lodash.prototype.tail = lodash.prototype.rest;
        return lodash;
    }
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined, VERSION = "3.10.1", BIND_FLAG = 1, BIND_KEY_FLAG = 2, CURRY_BOUND_FLAG = 4, CURRY_FLAG = 8, CURRY_RIGHT_FLAG = 16, PARTIAL_FLAG = 32, PARTIAL_RIGHT_FLAG = 64, ARY_FLAG = 128, REARG_FLAG = 256, DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...", HOT_COUNT = 150, HOT_SPAN = 16, LARGE_ARRAY_SIZE = 200, LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, FUNC_ERROR_TEXT = "Expected a function", PLACEHOLDER = "__lodash_placeholder__", argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", stringTag = "[object String]", arrayBufferTag = "[object ArrayBuffer]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g, reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g, reUnescapedHtml = /[&<>"'`]/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source), reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g, reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g, reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g, reHasRegExpChars = RegExp(reRegExpChars.source), reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g, reEscapeChar = /\\(\\)?/g, reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, reFlags = /\w*$/, reHasHexPrefix = /^0[xX]/, reIsHostCtor = /^\[object .+?Constructor\]$/, reIsUint = /^\d+$/, reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g, reNoMatch = /($^)/, reUnescapedString = /['\n\r\u2028\u2029\\]/g, reWords = function() {
        var upper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]", lower = "[a-z\\xdf-\\xf6\\xf8-\\xff]+";
        return RegExp(upper + "+(?=" + upper + lower + ")|" + upper + "?" + lower + "|" + upper + "+|[0-9]+", "g");
    }(), contextProps = [ "Array", "ArrayBuffer", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Math", "Number", "Object", "RegExp", "Set", "String", "_", "clearTimeout", "isFinite", "parseFloat", "parseInt", "setTimeout", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap" ], templateCounter = -1, typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = !0;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags["[object Map]"] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags["[object Set]"] = typedArrayTags[stringTag] = typedArrayTags["[object WeakMap]"] = !1;
    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = !0;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags["[object Map]"] = cloneableTags["[object Set]"] = cloneableTags["[object WeakMap]"] = !1;
    /** Used to map latin-1 supplementary letters to basic latin letters. */
    var deburredLetters = {
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss"
    }, htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#96;"
    }, htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'",
        "&#96;": "`"
    }, objectTypes = {
        function: !0,
        object: !0
    }, regexpEscapes = {
        "0": "x30",
        "1": "x31",
        "2": "x32",
        "3": "x33",
        "4": "x34",
        "5": "x35",
        "6": "x36",
        "7": "x37",
        "8": "x38",
        "9": "x39",
        A: "x41",
        B: "x42",
        C: "x43",
        D: "x44",
        E: "x45",
        F: "x46",
        a: "x61",
        b: "x62",
        c: "x63",
        d: "x64",
        e: "x65",
        f: "x66",
        n: "x6e",
        r: "x72",
        t: "x74",
        u: "x75",
        v: "x76",
        x: "x78"
    }, stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
    }, freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports, freeModule = objectTypes[typeof module] && module && !module.nodeType && module, freeGlobal = freeExports && freeModule && "object" == typeof global && global && global.Object && global, freeSelf = objectTypes[typeof self] && self && self.Object && self, freeWindow = objectTypes[typeof window] && window && window.Object && window, moduleExports = freeModule && freeModule.exports === freeExports && freeExports, root = freeGlobal || freeWindow !== (this && this.window) && freeWindow || freeSelf || this, _ = runInContext();
    // Some AMD build optimizers like r.js check for condition patterns like the following:
    if ("function" == typeof define && "object" == typeof define.amd && define.amd) {
        // Expose lodash to the global object when an AMD loader is present to avoid
        // errors in cases where lodash is loaded by a script tag and not intended
        // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
        // more details.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else freeExports && freeModule ? // Export for Node.js or RingoJS.
    moduleExports ? (freeModule.exports = _)._ = _ : freeExports._ = _ : // Export for a browser or Rhino.
    root._ = _;
}).call(this);

/**
 * The solution to tracking page views and events in a SPA with AngularJS
 * @version v0.4.0 - 2015-03-30
 * @link https://github.com/mgonto/angularytics
 * @author Martin Gontovnikas <martin@gonto.com.ar>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
!function() {
    angular.module("angularytics", []).provider("Angularytics", function() {
        var a = [ "Google" ];
        this.setEventHandlers = function(c) {
            angular.isString(c) && (c = [ c ]), a = [], angular.forEach(c, function(c) {
                a.push(b(c));
            });
        };
        var b = function(a) {
            return a.charAt(0).toUpperCase() + a.substring(1);
        }, c = "$locationChangeSuccess";
        this.setPageChangeEvent = function(a) {
            c = a;
        }, this.$get = [ "$injector", "$rootScope", "$location", function(b, d, e) {
            var f = [];
            angular.forEach(a, function(a) {
                f.push(b.get("Angularytics" + a + "Handler"));
            });
            var g = function(a) {
                angular.forEach(f, function(b) {
                    a(b);
                });
            }, h = {};
            return h.init = function() {}, h.trackEvent = function(a, b, c, d, e) {
                g(function(f) {
                    a && b && f.trackEvent(a, b, c, d, e);
                });
            }, h.trackPageView = function(a) {
                g(function(b) {
                    a && b.trackPageView(a);
                });
            }, h.trackTiming = function(a, b, c, d) {
                g(function(e) {
                    a && b && c && e.trackTiming(a, b, c, d);
                });
            }, d.$on(c, function() {
                h.trackPageView(e.url());
            }), h;
        } ];
    });
}(), function() {
    angular.module("angularytics").factory("AngularyticsConsoleHandler", [ "$log", function(a) {
        var b = {};
        return b.trackPageView = function(b) {
            a.log("URL visited", b);
        }, b.trackEvent = function(b, c, d, e, f) {
            a.log("Event tracked", b, c, d, e, f);
        }, b.trackTiming = function(b, c, d, e) {
            a.log("Timing tracked", b, c, d, e);
        }, b;
    } ]);
}(), function() {
    angular.module("angularytics").factory("AngularyticsGoogleHandler", function() {
        var a = {};
        return a.trackPageView = function(a) {
            _gaq.push([ "_set", "page", a ]), _gaq.push([ "_trackPageview", a ]);
        }, a.trackEvent = function(a, b, c, d, e) {
            _gaq.push([ "_trackEvent", a, b, c, d, e ]);
        }, a.trackTiming = function(a, b, c, d) {
            _gaq.push([ "_trackTiming", a, b, c, d ]);
        }, a;
    }).factory("AngularyticsGoogleUniversalHandler", function() {
        var a = {};
        return a.trackPageView = function(a) {
            ga("set", "page", a), ga("send", "pageview", a);
        }, a.trackEvent = function(a, b, c, d, e) {
            ga("send", "event", a, b, c, d, {
                nonInteraction: e
            });
        }, a.trackTiming = function(a, b, c, d) {
            ga("send", "timing", a, b, c, d);
        }, a;
    });
}(), function() {
    angular.module("angularytics").filter("trackEvent", [ "Angularytics", function(a) {
        return function(b, c, d, e, f, g) {
            return a.trackEvent(c, d, e, f, g), b;
        };
    } ]);
}();

!function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n || e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    1: [ function(require, module, exports) {
        angular.module("nemLogging", []);
        angular.module("nemLogging").provider("nemDebug", function() {
            var ourDebug = null;
            ourDebug = require("debug");
            this.$get = function() {
                //avail as service
                return ourDebug;
            };
            //avail at provider, config time
            this.debug = ourDebug;
            return this;
        });
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, slice = [].slice;
        angular.module("nemLogging").provider("nemSimpleLogger", [ "nemDebugProvider", function(nemDebugProvider) {
            var LEVELS, Logger, _debugCache, _fns, _isValidLogObject, _maybeExecLevel, _wrapDebug, i, key, len, nemDebug, val;
            nemDebug = nemDebugProvider.debug;
            _debugCache = {};
            _fns = [ "debug", "info", "warn", "error", "log" ];
            LEVELS = {};
            for (key = i = 0, len = _fns.length; i < len; key = ++i) {
                val = _fns[key];
                LEVELS[val] = key;
            }
            _maybeExecLevel = function(level, current, fn) {
                if (level >= current) return fn();
            };
            _isValidLogObject = function(logObject) {
                var isValid, j, len1;
                isValid = !1;
                if (!logObject) return isValid;
                for (j = 0, len1 = _fns.length; j < len1; j++) {
                    val = _fns[j];
                    isValid = null != logObject[val] && "function" == typeof logObject[val];
                    if (!isValid) break;
                }
                return isValid;
            };
            /*
      Overide logeObject.debug with a nemDebug instance
      see: https://github.com/visionmedia/debug/blob/master/Readme.md
     */
            _wrapDebug = function(namespace, logObject) {
                var debugInstance, j, len1, newLogger;
                null == _debugCache[namespace] && (_debugCache[namespace] = nemDebug(namespace));
                debugInstance = _debugCache[namespace];
                newLogger = {};
                for (j = 0, len1 = _fns.length; j < len1; j++) {
                    val = _fns[j];
                    newLogger[val] = "debug" === val ? debugInstance : logObject[val];
                }
                return newLogger;
            };
            Logger = function() {
                function Logger($log1) {
                    var fn1, j, len1, level, logFns;
                    this.$log = $log1;
                    this.spawn = bind(this.spawn, this);
                    if (!this.$log) throw "internalLogger undefined";
                    if (!_isValidLogObject(this.$log)) throw "@$log is invalid";
                    this.doLog = !0;
                    logFns = {};
                    fn1 = function(_this) {
                        return function(level) {
                            logFns[level] = function() {
                                var args;
                                args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                                if (_this.doLog) return _maybeExecLevel(LEVELS[level], _this.currentLevel, function() {
                                    var ref;
                                    return (ref = _this.$log)[level].apply(ref, args);
                                });
                            };
                            return _this[level] = logFns[level];
                        };
                    }(this);
                    for (j = 0, len1 = _fns.length; j < len1; j++) {
                        level = _fns[j];
                        fn1(level);
                    }
                    this.LEVELS = LEVELS;
                    this.currentLevel = LEVELS.error;
                }
                Logger.prototype.spawn = function(newInternalLogger) {
                    if ("string" == typeof newInternalLogger) {
                        if (!_isValidLogObject(this.$log)) throw "@$log is invalid";
                        if (!nemDebug) throw "nemDebug is undefined this is probably the light version of this library sep debug logggers is not supported!";
                        return _wrapDebug(newInternalLogger, this.$log);
                    }
                    return new Logger(newInternalLogger || this.$log);
                };
                return Logger;
            }();
            this.decorator = [ "$log", function($delegate) {
                var log;
                log = new Logger($delegate);
                log.currentLevel = LEVELS.debug;
                return log;
            } ];
            this.$get = [ "$log", function($log) {
                return new Logger($log);
            } ];
            return this;
        } ]);
    }, {
        debug: 2
    } ],
    2: [ function(require, module, exports) {
        /**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
        function useColors() {
            // is webkit? http://stackoverflow.com/a/16459606/376773
            // is firebug? http://stackoverflow.com/a/398120/376773
            // is firefox >= v31?
            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
            return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
        }
        /**
 * Colorize log arguments if enabled.
 *
 * @api public
 */
        function formatArgs() {
            var args = arguments, useColors = this.useColors;
            args[0] = (useColors ? "%c" : "") + this.namespace + (useColors ? " %c" : " ") + args[0] + (useColors ? "%c " : " ") + "+" + exports.humanize(this.diff);
            if (!useColors) return args;
            var c = "color: " + this.color;
            args = [ args[0], c, "color: inherit" ].concat(Array.prototype.slice.call(args, 1));
            // the final "%c" is somewhat tricky, because there could be other
            // arguments passed either before or after the %c, so we need to
            // figure out the correct index to insert the CSS into
            var index = 0, lastC = 0;
            args[0].replace(/%[a-z%]/g, function(match) {
                if ("%%" !== match) {
                    index++;
                    "%c" === match && (// we only are interested in the *last* %c
                    // (the user may have provided their own)
                    lastC = index);
                }
            });
            args.splice(lastC, 0, c);
            return args;
        }
        /**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */
        function log() {
            // this hackery is required for IE8/9, where
            // the `console.log` function doesn't have 'apply'
            return "object" == typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
        }
        /**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
        function save(namespaces) {
            try {
                null == namespaces ? exports.storage.removeItem("debug") : exports.storage.debug = namespaces;
            } catch (e) {}
        }
        /**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
        function load() {
            var r;
            try {
                r = exports.storage.debug;
            } catch (e) {}
            return r;
        }
        /**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */
        exports = module.exports = require("./debug");
        exports.log = log;
        exports.formatArgs = formatArgs;
        exports.save = save;
        exports.load = load;
        exports.useColors = useColors;
        exports.storage = "undefined" != typeof chrome && void 0 !== chrome.storage ? chrome.storage.local : /**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */
        function() {
            try {
                return window.localStorage;
            } catch (e) {}
        }();
        /**
 * Colors.
 */
        exports.colors = [ "lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson" ];
        /**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */
        exports.formatters.j = function(v) {
            return JSON.stringify(v);
        };
        /**
 * Enable namespaces listed in `localStorage.debug` initially.
 */
        exports.enable(load());
    }, {
        "./debug": 3
    } ],
    3: [ function(require, module, exports) {
        /**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */
        function selectColor() {
            return exports.colors[prevColor++ % exports.colors.length];
        }
        /**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */
        function debug(namespace) {
            // define the `disabled` version
            function disabled() {}
            // define the `enabled` version
            function enabled() {
                var self = enabled, curr = +new Date(), ms = curr - (prevTime || curr);
                self.diff = ms;
                self.prev = prevTime;
                self.curr = curr;
                prevTime = curr;
                // add the `color` if not set
                null == self.useColors && (self.useColors = exports.useColors());
                null == self.color && self.useColors && (self.color = selectColor());
                var args = Array.prototype.slice.call(arguments);
                args[0] = exports.coerce(args[0]);
                "string" != typeof args[0] && (// anything else let's inspect with %o
                args = [ "%o" ].concat(args));
                // apply any `formatters` transformations
                var index = 0;
                args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
                    // if we encounter an escaped % then don't increase the array index
                    if ("%%" === match) return match;
                    index++;
                    var formatter = exports.formatters[format];
                    if ("function" == typeof formatter) {
                        var val = args[index];
                        match = formatter.call(self, val);
                        // now we need to remove `args[index]` since it's inlined in the `format`
                        args.splice(index, 1);
                        index--;
                    }
                    return match;
                });
                "function" == typeof exports.formatArgs && (args = exports.formatArgs.apply(self, args));
                (enabled.log || exports.log || console.log.bind(console)).apply(self, args);
            }
            disabled.enabled = !1;
            enabled.enabled = !0;
            var fn = exports.enabled(namespace) ? enabled : disabled;
            fn.namespace = namespace;
            return fn;
        }
        /**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */
        function enable(namespaces) {
            exports.save(namespaces);
            for (var split = (namespaces || "").split(/[\s,]+/), len = split.length, i = 0; i < len; i++) if (split[i]) {
                // ignore empty strings
                namespaces = split[i].replace(/\*/g, ".*?");
                "-" === namespaces[0] ? exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$")) : exports.names.push(new RegExp("^" + namespaces + "$"));
            }
        }
        /**
 * Disable debug output.
 *
 * @api public
 */
        function disable() {
            exports.enable("");
        }
        /**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */
        function enabled(name) {
            var i, len;
            for (i = 0, len = exports.skips.length; i < len; i++) if (exports.skips[i].test(name)) return !1;
            for (i = 0, len = exports.names.length; i < len; i++) if (exports.names[i].test(name)) return !0;
            return !1;
        }
        /**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */
        function coerce(val) {
            return val instanceof Error ? val.stack || val.message : val;
        }
        /**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */
        exports = module.exports = debug;
        exports.coerce = coerce;
        exports.disable = disable;
        exports.enable = enable;
        exports.enabled = enabled;
        exports.humanize = require("ms");
        /**
 * The currently active debug mode names, and names to skip.
 */
        exports.names = [];
        exports.skips = [];
        /**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */
        exports.formatters = {};
        /**
 * Previously assigned color.
 */
        var prevTime, prevColor = 0;
    }, {
        ms: 4
    } ],
    4: [ function(require, module, exports) {
        /**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */
        function parse(str) {
            str = "" + str;
            if (!(str.length > 1e4)) {
                var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
                if (match) {
                    var n = parseFloat(match[1]);
                    switch ((match[2] || "ms").toLowerCase()) {
                      case "years":
                      case "year":
                      case "yrs":
                      case "yr":
                      case "y":
                        return n * y;

                      case "days":
                      case "day":
                      case "d":
                        return n * d;

                      case "hours":
                      case "hour":
                      case "hrs":
                      case "hr":
                      case "h":
                        return n * h;

                      case "minutes":
                      case "minute":
                      case "mins":
                      case "min":
                      case "m":
                        return n * m;

                      case "seconds":
                      case "second":
                      case "secs":
                      case "sec":
                      case "s":
                        return n * s;

                      case "milliseconds":
                      case "millisecond":
                      case "msecs":
                      case "msec":
                      case "ms":
                        return n;
                    }
                }
            }
        }
        /**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */
        function short(ms) {
            return ms >= d ? Math.round(ms / d) + "d" : ms >= h ? Math.round(ms / h) + "h" : ms >= m ? Math.round(ms / m) + "m" : ms >= s ? Math.round(ms / s) + "s" : ms + "ms";
        }
        /**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */
        function long(ms) {
            return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
        }
        /**
 * Pluralization helper.
 */
        function plural(ms, n, name) {
            if (!(ms < n)) return ms < 1.5 * n ? Math.floor(ms / n) + " " + name : Math.ceil(ms / n) + " " + name + "s";
        }
        /**
 * Helpers.
 */
        var s = 1e3, m = 60 * s, h = 60 * m, d = 24 * h, y = 365.25 * d;
        /**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */
        module.exports = function(val, options) {
            options = options || {};
            return "string" == typeof val ? parse(val) : options.long ? long(val) : short(val);
        };
    }, {} ]
}, {}, [ 1 ]);

!function(window, angular, _, undefined) {
    "use strict";
    /*
!
The MIT License

Copyright (c) 2010-2013 Google, Inc. http://angularjs.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

angular-google-maps
https://github.com/angular-ui/angular-google-maps

@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    (function() {
        angular.module("uiGmapgoogle-maps.providers", [ "nemLogging" ]);
        angular.module("uiGmapgoogle-maps.wrapped", []);
        angular.module("uiGmapgoogle-maps.extensions", [ "uiGmapgoogle-maps.wrapped", "uiGmapgoogle-maps.providers" ]);
        angular.module("uiGmapgoogle-maps.directives.api.utils", [ "uiGmapgoogle-maps.extensions" ]);
        angular.module("uiGmapgoogle-maps.directives.api.managers", []);
        angular.module("uiGmapgoogle-maps.directives.api.options", [ "uiGmapgoogle-maps.directives.api.utils" ]);
        angular.module("uiGmapgoogle-maps.directives.api.options.builders", []);
        angular.module("uiGmapgoogle-maps.directives.api.models.child", [ "uiGmapgoogle-maps.directives.api.utils", "uiGmapgoogle-maps.directives.api.options", "uiGmapgoogle-maps.directives.api.options.builders" ]);
        angular.module("uiGmapgoogle-maps.directives.api.models.parent", [ "uiGmapgoogle-maps.directives.api.managers", "uiGmapgoogle-maps.directives.api.models.child", "uiGmapgoogle-maps.providers" ]);
        angular.module("uiGmapgoogle-maps.directives.api", [ "uiGmapgoogle-maps.directives.api.models.parent" ]);
        angular.module("uiGmapgoogle-maps", [ "uiGmapgoogle-maps.directives.api", "uiGmapgoogle-maps.providers" ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.providers").factory("uiGmapMapScriptLoader", [ "$q", "uiGmapuuid", function($q, uuid) {
            var getScriptUrl, includeScript, isGoogleMapsLoaded, scriptId, usedConfiguration;
            scriptId = void 0;
            usedConfiguration = void 0;
            getScriptUrl = function(options) {
                return options.china ? "http://maps.google.cn/maps/api/js?" : "auto" === options.transport ? "//maps.googleapis.com/maps/api/js?" : options.transport + "://maps.googleapis.com/maps/api/js?";
            };
            includeScript = function(options) {
                var omitOptions, query, script, scriptElem;
                omitOptions = [ "transport", "isGoogleMapsForWork", "china", "preventLoad" ];
                options.isGoogleMapsForWork && omitOptions.push("key");
                query = _.map(_.omit(options, omitOptions), function(v, k) {
                    return k + "=" + v;
                });
                if (scriptId) {
                    scriptElem = document.getElementById(scriptId);
                    scriptElem.parentNode.removeChild(scriptElem);
                }
                query = query.join("&");
                script = document.createElement("script");
                script.id = scriptId = "ui_gmap_map_load_" + uuid.generate();
                script.type = "text/javascript";
                script.src = getScriptUrl(options) + query;
                return document.head.appendChild(script);
            };
            isGoogleMapsLoaded = function() {
                return angular.isDefined(window.google) && angular.isDefined(window.google.maps);
            };
            return {
                load: function(options) {
                    var deferred, randomizedFunctionName;
                    deferred = $q.defer();
                    if (isGoogleMapsLoaded()) {
                        deferred.resolve(window.google.maps);
                        return deferred.promise;
                    }
                    randomizedFunctionName = options.callback = "onGoogleMapsReady" + Math.round(1e3 * Math.random());
                    window[randomizedFunctionName] = function() {
                        window[randomizedFunctionName] = null;
                        deferred.resolve(window.google.maps);
                    };
                    window.navigator.connection && window.Connection && window.navigator.connection.type === window.Connection.NONE && !options.preventLoad ? document.addEventListener("online", function() {
                        if (!isGoogleMapsLoaded()) return includeScript(options);
                    }) : options.preventLoad || includeScript(options);
                    usedConfiguration = options;
                    usedConfiguration.randomizedFunctionName = randomizedFunctionName;
                    return deferred.promise;
                },
                manualLoad: function() {
                    var config;
                    config = usedConfiguration;
                    return isGoogleMapsLoaded() ? window[config.randomizedFunctionName] ? window[config.randomizedFunctionName]() : void 0 : includeScript(config);
                }
            };
        } ]).provider("uiGmapGoogleMapApi", function() {
            this.options = {
                transport: "https",
                isGoogleMapsForWork: !1,
                china: !1,
                v: "3",
                libraries: "",
                language: "en",
                preventLoad: !1
            };
            this.configure = function(options) {
                angular.extend(this.options, options);
            };
            this.$get = [ "uiGmapMapScriptLoader", function(_this) {
                return function(loader) {
                    return loader.load(_this.options);
                };
            }(this) ];
            return this;
        }).service("uiGmapGoogleMapApiManualLoader", [ "uiGmapMapScriptLoader", function(loader) {
            return {
                load: function() {
                    loader.manualLoad();
                }
            };
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.extensions").service("uiGmapExtendGWin", function() {
            return {
                init: _.once(function() {
                    var uiGmapInfoBox;
                    if (google || ("undefined" != typeof google && null !== google ? google.maps : void 0) || null != google.maps.InfoWindow) {
                        google.maps.InfoWindow.prototype._open = google.maps.InfoWindow.prototype.open;
                        google.maps.InfoWindow.prototype._close = google.maps.InfoWindow.prototype.close;
                        google.maps.InfoWindow.prototype._isOpen = !1;
                        google.maps.InfoWindow.prototype.open = function(map, anchor, recurse) {
                            if (null == recurse) {
                                this._isOpen = !0;
                                this._open(map, anchor, !0);
                            }
                        };
                        google.maps.InfoWindow.prototype.close = function(recurse) {
                            if (null == recurse) {
                                this._isOpen = !1;
                                this._close(!0);
                            }
                        };
                        google.maps.InfoWindow.prototype.isOpen = function(val) {
                            null == val && (val = void 0);
                            return null == val ? this._isOpen : this._isOpen = val;
                        };
                        /*
        Do the same for InfoBox
        TODO: Clean this up so the logic is defined once, wait until develop becomes master as this will be easier
         */
                        if (window.InfoBox) {
                            window.InfoBox.prototype._open = window.InfoBox.prototype.open;
                            window.InfoBox.prototype._close = window.InfoBox.prototype.close;
                            window.InfoBox.prototype._isOpen = !1;
                            window.InfoBox.prototype.open = function(map, anchor) {
                                this._isOpen = !0;
                                this._open(map, anchor);
                            };
                            window.InfoBox.prototype.close = function() {
                                this._isOpen = !1;
                                this._close();
                            };
                            window.InfoBox.prototype.isOpen = function(val) {
                                null == val && (val = void 0);
                                return null == val ? this._isOpen : this._isOpen = val;
                            };
                            uiGmapInfoBox = function(superClass) {
                                function uiGmapInfoBox(opts) {
                                    this.getOrigCloseBoxImg_ = bind(this.getOrigCloseBoxImg_, this);
                                    this.getCloseBoxDiv_ = bind(this.getCloseBoxDiv_, this);
                                    var box;
                                    box = new window.InfoBox(opts);
                                    _.extend(this, box);
                                    null != opts.closeBoxDiv && (this.closeBoxDiv_ = opts.closeBoxDiv);
                                }
                                extend(uiGmapInfoBox, superClass);
                                uiGmapInfoBox.prototype.getCloseBoxDiv_ = function() {
                                    return this.closeBoxDiv_;
                                };
                                uiGmapInfoBox.prototype.getCloseBoxImg_ = function() {
                                    var div, img;
                                    div = this.getCloseBoxDiv_();
                                    img = this.getOrigCloseBoxImg_();
                                    return div || img;
                                };
                                uiGmapInfoBox.prototype.getOrigCloseBoxImg_ = function() {
                                    var img;
                                    img = "";
                                    if ("" !== this.closeBoxURL_) {
                                        img = "<img";
                                        img += " src='" + this.closeBoxURL_ + "'";
                                        img += " align=right";
                                        img += " style='";
                                        img += " position: relative;";
                                        img += " cursor: pointer;";
                                        img += " margin: " + this.closeBoxMargin_ + ";";
                                        img += "'>";
                                    }
                                    return img;
                                };
                                return uiGmapInfoBox;
                            }(window.InfoBox);
                            window.uiGmapInfoBox = uiGmapInfoBox;
                        }
                        return window.MarkerLabel_ ? window.MarkerLabel_.prototype.setContent = function() {
                            var content;
                            content = this.marker_.get("labelContent");
                            if (content && !_.isEqual(this.oldContent, content)) if (void 0 === (null != content ? content.nodeType : void 0)) {
                                this.labelDiv_.innerHTML = content;
                                this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
                                this.oldContent = content;
                            } else {
                                this.labelDiv_.innerHTML = "";
                                this.labelDiv_.appendChild(content);
                                content = content.cloneNode(!0);
                                this.labelDiv_.innerHTML = "";
                                this.eventDiv_.appendChild(content);
                                this.oldContent = content;
                            }
                        } : void 0;
                    }
                })
            };
        });
    }).call(this);
    /*global _:true, angular:true */
    (function() {
        angular.module("uiGmapgoogle-maps.extensions").service("uiGmapLodash", function() {
            var baseGet, baseToString, fixLodash, get, reEscapeChar, rePropName, toObject, toPath;
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
            reEscapeChar = /\\(\\)?/g;
            /*
        For Lodash 4 compatibility (some aliases are removed)
     */
            fixLodash = function(arg) {
                var isProto, missingName, swapName;
                missingName = arg.missingName, swapName = arg.swapName, isProto = arg.isProto;
                if (null == _[missingName]) {
                    _[missingName] = _[swapName];
                    if (isProto) return _.prototype[missingName] = _[swapName];
                }
            };
            [ {
                missingName: "contains",
                swapName: "includes",
                isProto: !0
            }, {
                missingName: "includes",
                swapName: "contains",
                isProto: !0
            }, {
                missingName: "object",
                swapName: "zipObject"
            }, {
                missingName: "zipObject",
                swapName: "object"
            }, {
                missingName: "all",
                swapName: "every"
            }, {
                missingName: "every",
                swapName: "all"
            }, {
                missingName: "any",
                swapName: "some"
            }, {
                missingName: "some",
                swapName: "any"
            }, {
                missingName: "first",
                swapName: "head"
            }, {
                missingName: "head",
                swapName: "first"
            } ].forEach(function(toMonkeyPatch) {
                return fixLodash(toMonkeyPatch);
            });
            if (null == _.get) {
                /**
       * Converts `value` to an object if it's not one.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {Object} Returns the object.
       */
                toObject = function(value) {
                    return _.isObject(value) ? value : Object(value);
                };
                /**
       * Converts `value` to a string if it's not one. An empty string is returned
       * for `null` or `undefined` values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
                baseToString = function(value) {
                    return null === value ? "" : value + "";
                };
                /**
       * Converts `value` to property path array if it's not one.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {Array} Returns the property path array.
       */
                toPath = function(value) {
                    var result;
                    if (_.isArray(value)) return value;
                    result = [];
                    baseToString(value).replace(rePropName, function(match, number, quote, string) {
                        result.push(quote ? string.replace(reEscapeChar, "$1") : number || match);
                    });
                    return result;
                };
                /**
       * The base implementation of `get` without support for string paths
       * and default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path of the property to get.
       * @param {string} [pathKey] The key representation of path.
       * @returns {*} Returns the resolved value.
       */
                baseGet = function(object, path, pathKey) {
                    var index, length;
                    if (null !== object) {
                        void 0 !== pathKey && pathKey in toObject(object) && (path = [ pathKey ]);
                        index = 0;
                        length = path.length;
                        for (;!_.isUndefined(object) && index < length; ) object = object[path[index++]];
                        return index && index === length ? object : void 0;
                    }
                };
                /**
       * Gets the property value at `path` of `object`. If the resolved value is
       * `undefined` the `defaultValue` is used in its place.
       *
       * @static
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
                get = function(object, path, defaultValue) {
                    var result;
                    result = null === object ? void 0 : baseGet(object, toPath(path), path + "");
                    return void 0 === result ? defaultValue : result;
                };
                _.get = get;
            }
            /*
        Author Nick McCready
        Intersection of Objects if the arrays have something in common each intersecting object will be returned
        in an new array.
     */
            this.intersectionObjects = function(array1, array2, comparison) {
                var res;
                null == comparison && (comparison = void 0);
                res = _.map(array1, function(obj1) {
                    return _.find(array2, function(obj2) {
                        return null != comparison ? comparison(obj1, obj2) : _.isEqual(obj1, obj2);
                    });
                });
                return _.filter(res, function(o) {
                    return null != o;
                });
            };
            this.containsObject = _.includeObject = function(obj, target, comparison) {
                null == comparison && (comparison = void 0);
                return null !== obj && _.some(obj, function(value) {
                    return null != comparison ? comparison(value, target) : _.isEqual(value, target);
                });
            };
            this.differenceObjects = function(array1, array2, comparison) {
                null == comparison && (comparison = void 0);
                return _.filter(array1, function(_this) {
                    return function(value) {
                        return !_this.containsObject(array2, value, comparison);
                    };
                }(this));
            };
            this.withoutObjects = this.differenceObjects;
            this.indexOfObject = function(array, item, comparison, isSorted) {
                var i, length;
                if (null == array) return -1;
                i = 0;
                length = array.length;
                if (isSorted) {
                    if ("number" != typeof isSorted) {
                        i = _.sortedIndex(array, item);
                        return array[i] === item ? i : -1;
                    }
                    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
                }
                for (;i < length; ) {
                    if (null != comparison) {
                        if (comparison(array[i], item)) return i;
                    } else if (_.isEqual(array[i], item)) return i;
                    i++;
                }
                return -1;
            };
            this.isNullOrUndefined = function(thing) {
                return _.isNull(thing || _.isUndefined(thing));
            };
            return this;
        });
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.extensions").factory("uiGmapString", function() {
            return function(str) {
                this.contains = function(value, fromIndex) {
                    return -1 !== str.indexOf(value, fromIndex);
                };
                return this;
            };
        });
    }).call(this);
    /*global _:true,angular:true, */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmap_sync", [ function() {
            return {
                fakePromise: function() {
                    var _cb;
                    _cb = void 0;
                    return {
                        then: function(cb) {
                            return _cb = cb;
                        },
                        resolve: function() {
                            return _cb.apply(void 0, arguments);
                        }
                    };
                }
            };
        } ]).service("uiGmap_async", [ "$timeout", "uiGmapPromise", "uiGmapLogger", "$q", "uiGmapDataStructures", "uiGmapGmapUtil", function($timeout, uiGmapPromise, $log, $q, uiGmapDataStructures, uiGmapGmapUtil) {
            var ExposedPromise, PromiseQueueManager, SniffedPromise, _getIterateeValue, _ignoreFields, defaultChunkSize, doChunk, doSkippPromise, each, errorObject, getArrayAndKeys, isInProgress, kickPromise, logTryCatch, managePromiseQueue, map, maybeCancelPromises, promiseStatus, promiseTypes, tryCatch;
            promiseTypes = uiGmapPromise.promiseTypes;
            isInProgress = uiGmapPromise.isInProgress;
            promiseStatus = uiGmapPromise.promiseStatus;
            ExposedPromise = uiGmapPromise.ExposedPromise;
            SniffedPromise = uiGmapPromise.SniffedPromise;
            kickPromise = function(sniffedPromise, cancelCb) {
                var promise;
                promise = sniffedPromise.promise();
                promise.promiseType = sniffedPromise.promiseType;
                promise.$$state && $log.debug("promiseType: " + promise.promiseType + ", state: " + promiseStatus(promise.$$state.status));
                promise.cancelCb = cancelCb;
                return promise;
            };
            doSkippPromise = function(sniffedPromise, lastPromise) {
                if (sniffedPromise.promiseType === promiseTypes.create && lastPromise.promiseType !== promiseTypes.delete && lastPromise.promiseType !== promiseTypes.init) {
                    $log.debug("lastPromise.promiseType " + lastPromise.promiseType + ", newPromiseType: " + sniffedPromise.promiseType + ", SKIPPED MUST COME AFTER DELETE ONLY");
                    return !0;
                }
                return !1;
            };
            maybeCancelPromises = function(queue, sniffedPromise, lastPromise) {
                var first;
                if (sniffedPromise.promiseType === promiseTypes.delete && lastPromise.promiseType !== promiseTypes.delete && null != lastPromise.cancelCb && _.isFunction(lastPromise.cancelCb) && isInProgress(lastPromise)) {
                    $log.debug("promiseType: " + sniffedPromise.promiseType + ", CANCELING LAST PROMISE type: " + lastPromise.promiseType);
                    lastPromise.cancelCb("cancel safe");
                    first = queue.peek();
                    if (null != first && isInProgress(first)) {
                        if (first.hasOwnProperty("cancelCb") && _.isFunction(first.cancelCb)) {
                            $log.debug("promiseType: " + first.promiseType + ", CANCELING FIRST PROMISE type: " + first.promiseType);
                            return first.cancelCb("cancel safe");
                        }
                        return $log.warn("first promise was not cancelable");
                    }
                }
            };
            /*
      From a High Level:
        This is a SniffedPromiseQueueManager (looking to rename) where the queue is existingPiecesObj.existingPieces.
        This is a function and should not be considered a class.
        So it is run to manage the state (cancel, skip, link) as needed.
      Purpose:
      The whole point is to check if there is existing async work going on. If so we wait on it.
      
      arguments:
      - existingPiecesObj =  Queue<Promises>
      - sniffedPromise = object wrapper holding a function to a pending (function) promise (promise: fnPromise)
      with its intended type.
      - cancelCb = callback which accepts a string, this string is intended to be returned at the end of _async.each iterator
      
        Where the cancelCb passed msg is 'cancel safe' _async.each will drop out and fall through. Thus canceling the promise
        gracefully without messing up state.
      
      Synopsis:
      
       - Promises have been broken down to 4 states create, update,delete (3 main) and init. (Helps boil down problems in ordering)
        where (init) is special to indicate that it is one of the first or to allow a create promise to work beyond being after a delete
      
       - Every Promise that comes in is enqueued and linked to the last promise in the queue.
      
       - A promise can be skipped or canceled to save cycles.
      
      Saved Cycles:
        - Skipped - This will only happen if async work comes in out of order. Where a pending create promise (un-executed) comes in
          after a delete promise.
        - Canceled - Where an incoming promise (un-executed promise) is of type delete and the any lastPromise is not a delete type.
      
      
      NOTE:
      - You should not muck with existingPieces as its state is dependent on this functional loop.
      - PromiseQueueManager should not be thought of as a class that has a life expectancy (it has none). It's sole
      purpose is to link, skip, and kill promises. It also manages the promise queue existingPieces.
       */
            PromiseQueueManager = function(existingPiecesObj, sniffedPromise, cancelCb) {
                var lastPromise, newPromise;
                if (existingPiecesObj.existingPieces) {
                    lastPromise = _.last(existingPiecesObj.existingPieces._content);
                    if (doSkippPromise(sniffedPromise, lastPromise)) return;
                    maybeCancelPromises(existingPiecesObj.existingPieces, sniffedPromise, lastPromise);
                    newPromise = ExposedPromise(lastPromise.finally(function() {
                        return kickPromise(sniffedPromise, cancelCb);
                    }));
                    newPromise.cancelCb = cancelCb;
                    newPromise.promiseType = sniffedPromise.promiseType;
                    existingPiecesObj.existingPieces.enqueue(newPromise);
                    return lastPromise.finally(function() {
                        return existingPiecesObj.existingPieces.dequeue();
                    });
                }
                existingPiecesObj.existingPieces = new uiGmapDataStructures.Queue();
                return existingPiecesObj.existingPieces.enqueue(kickPromise(sniffedPromise, cancelCb));
            };
            managePromiseQueue = function(objectToLock, promiseType, msg, cancelCb, fnPromise) {
                var cancelLogger;
                null == msg && (msg = "");
                cancelLogger = function(msg) {
                    $log.debug(msg + ": " + msg);
                    if (null != cancelCb && _.isFunction(cancelCb)) return cancelCb(msg);
                };
                return PromiseQueueManager(objectToLock, SniffedPromise(fnPromise, promiseType), cancelLogger);
            };
            defaultChunkSize = 80;
            errorObject = {
                value: null
            };
            tryCatch = function(fn, ctx, args) {
                var e;
                try {
                    return fn.apply(ctx, args);
                } catch (error1) {
                    e = error1;
                    errorObject.value = e;
                    return errorObject;
                }
            };
            logTryCatch = function(fn, ctx, deferred, args) {
                var msg, result;
                result = tryCatch(fn, ctx, args);
                if (result === errorObject) {
                    msg = "error within chunking iterator: " + errorObject.value;
                    $log.error(msg);
                    deferred.reject(msg);
                }
                return "cancel safe" !== result;
            };
            _getIterateeValue = function(collection, array, index) {
                var _isArray, valOrKey;
                _isArray = collection === array;
                valOrKey = array[index];
                return _isArray ? valOrKey : collection[valOrKey];
            };
            _ignoreFields = [ "length", "forEach", "map" ];
            getArrayAndKeys = function(collection, keys, bailOutCb, cb) {
                var array, propName;
                if (angular.isArray(collection)) array = collection; else if (keys) array = keys; else {
                    array = [];
                    for (propName in collection) {
                        collection[propName];
                        collection.hasOwnProperty(propName) && !_.includes(_ignoreFields, propName) && array.push(propName);
                    }
                }
                null == cb && (cb = bailOutCb);
                return angular.isArray(array) && !(null != array ? array.length : void 0) && cb !== bailOutCb ? bailOutCb() : cb(array, keys);
            };
            /*
        Author: Nicholas McCready & jfriend00
        _async handles things asynchronous-like :), to allow the UI to be free'd to do other things
        Code taken from http://stackoverflow.com/questions/10344498/best-way-to-iterate-over-an-array-without-blocking-the-ui
      
        The design of any functionality of _async is to be like lodash/underscore and replicate it but call things
        asynchronously underneath. Each should be sufficient for most things to be derived from.
      
        Optional Asynchronous Chunking via promises.
       */
            doChunk = function(collection, chunkSizeOrDontChunk, pauseMilli, chunkCb, pauseCb, overallD, index, _keys) {
                return getArrayAndKeys(collection, _keys, function(array, keys) {
                    var cnt, i, keepGoing, val;
                    cnt = chunkSizeOrDontChunk && chunkSizeOrDontChunk < array.length ? chunkSizeOrDontChunk : array.length;
                    i = index;
                    keepGoing = !0;
                    for (;keepGoing && cnt-- && i < (array ? array.length : i + 1); ) {
                        val = _getIterateeValue(collection, array, i);
                        keepGoing = !!angular.isFunction(val) || logTryCatch(chunkCb, void 0, overallD, [ val, i ]);
                        ++i;
                    }
                    if (array) {
                        if (!(keepGoing && i < array.length)) return overallD.resolve();
                        index = i;
                        if (chunkSizeOrDontChunk) {
                            null != pauseCb && _.isFunction(pauseCb) && logTryCatch(pauseCb, void 0, overallD, []);
                            return $timeout(function() {
                                return doChunk(collection, chunkSizeOrDontChunk, pauseMilli, chunkCb, pauseCb, overallD, index, keys);
                            }, pauseMilli, !1);
                        }
                    }
                });
            };
            each = function(collection, chunk, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, _keys) {
                var error, overallD, ret;
                null == chunkSizeOrDontChunk && (chunkSizeOrDontChunk = defaultChunkSize);
                null == index && (index = 0);
                null == pauseMilli && (pauseMilli = 1);
                ret = void 0;
                overallD = uiGmapPromise.defer();
                ret = overallD.promise;
                if (!pauseMilli) {
                    error = "pause (delay) must be set from _async!";
                    $log.error(error);
                    overallD.reject(error);
                    return ret;
                }
                return getArrayAndKeys(collection, _keys, function() {
                    overallD.resolve();
                    return ret;
                }, function(array, keys) {
                    doChunk(collection, chunkSizeOrDontChunk, pauseMilli, chunk, pauseCb, overallD, index, keys);
                    return ret;
                });
            };
            map = function(collection, iterator, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, _keys) {
                var results;
                results = [];
                return getArrayAndKeys(collection, _keys, function() {
                    return uiGmapPromise.resolve(results);
                }, function(array, keys) {
                    return each(collection, function(o) {
                        return results.push(iterator(o));
                    }, chunkSizeOrDontChunk, pauseCb, index, pauseMilli, keys).then(function() {
                        return results;
                    });
                });
            };
            return {
                each: each,
                map: map,
                managePromiseQueue: managePromiseQueue,
                promiseLock: managePromiseQueue,
                defaultChunkSize: defaultChunkSize,
                getArrayAndKeys: getArrayAndKeys,
                chunkSizeFrom: function(fromSize, ret) {
                    null == ret && (ret = void 0);
                    _.isNumber(fromSize) && (ret = fromSize);
                    (uiGmapGmapUtil.isFalse(fromSize) || !1 === fromSize) && (ret = !1);
                    return ret;
                }
            };
        } ]);
    }).call(this);
    (function() {
        var indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) if (i in this && this[i] === item) return i;
            return -1;
        };
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapBaseObject", function() {
            var BaseObject, baseObjectKeywords;
            baseObjectKeywords = [ "extended", "included" ];
            BaseObject = function() {
                function BaseObject() {}
                BaseObject.extend = function(obj) {
                    var key, ref, value;
                    for (key in obj) {
                        value = obj[key];
                        indexOf.call(baseObjectKeywords, key) < 0 && (this[key] = value);
                    }
                    null != (ref = obj.extended) && ref.apply(this);
                    return this;
                };
                BaseObject.include = function(obj) {
                    var key, ref, value;
                    for (key in obj) {
                        value = obj[key];
                        indexOf.call(baseObjectKeywords, key) < 0 && (this.prototype[key] = value);
                    }
                    null != (ref = obj.included) && ref.apply(this);
                    return this;
                };
                return BaseObject;
            }();
            return BaseObject;
        });
    }).call(this);
    /*
    Useful function callbacks that should be defined at later time.
    Mainly to be used for specs to verify creation / linking.

    This is to lead a common design in notifying child stuff.
 */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapChildEvents", function() {
            return {
                onChildCreation: function(child) {}
            };
        });
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapCtrlHandle", [ "$q", function($q) {
            var CtrlHandle;
            return CtrlHandle = {
                handle: function($scope, $element) {
                    $scope.$on("$destroy", function() {
                        return CtrlHandle.handle($scope);
                    });
                    $scope.deferred = $q.defer();
                    return {
                        getScope: function() {
                            return $scope;
                        }
                    };
                },
                mapPromise: function(scope, ctrl) {
                    var mapScope;
                    mapScope = ctrl.getScope();
                    mapScope.deferred.promise.then(function(map) {
                        return scope.map = map;
                    });
                    return mapScope.deferred.promise;
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapEventsHelper", [ "uiGmapLogger", function($log) {
            var _getEventsObj, _hasEvents;
            _hasEvents = function(obj) {
                return angular.isDefined(obj.events) && null != obj.events && angular.isObject(obj.events);
            };
            _getEventsObj = function(scope, model) {
                return _hasEvents(scope) ? scope : _hasEvents(model) ? model : void 0;
            };
            return {
                setEvents: function(gObject, scope, model, ignores) {
                    var eventObj;
                    eventObj = _getEventsObj(scope, model);
                    if (null != eventObj) return _.compact(_.map(eventObj.events, function(eventHandler, eventName) {
                        var doIgnore;
                        ignores && (doIgnore = _(ignores).includes(eventName));
                        if (eventObj.events.hasOwnProperty(eventName) && angular.isFunction(eventObj.events[eventName]) && !doIgnore) return google.maps.event.addListener(gObject, eventName, function() {
                            scope.$evalAsync || (scope.$evalAsync = function() {});
                            return scope.$evalAsync(eventHandler.apply(scope, [ gObject, eventName, model, arguments ]));
                        });
                    }));
                },
                removeEvents: function(listeners) {
                    var key, l;
                    if (listeners) for (key in listeners) {
                        l = listeners[key];
                        l && listeners.hasOwnProperty(key) && google.maps.event.removeListener(l);
                    }
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapFitHelper", [ "uiGmapLogger", "$timeout", function($log, $timeout) {
            return {
                fit: function(markersOrPoints, gMap) {
                    var bounds, everSet, key, markerOrPoint, point;
                    if (gMap && (null != markersOrPoints ? markersOrPoints.length : void 0)) {
                        bounds = new google.maps.LatLngBounds();
                        everSet = !1;
                        for (key in markersOrPoints) {
                            markerOrPoint = markersOrPoints[key];
                            if (markerOrPoint) {
                                everSet || (everSet = !0);
                                point = _.isFunction(markerOrPoint.getPosition) ? markerOrPoint.getPosition() : markerOrPoint;
                            }
                            bounds.extend(point);
                        }
                        if (everSet) return $timeout(function() {
                            return gMap.fitBounds(bounds);
                        });
                    }
                }
            };
        } ]);
    }).call(this);
    /*global _:true, angular:true, google:true */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapGmapUtil", [ "uiGmapLogger", "$compile", function(Logger, $compile) {
            var _isFalse, _isTruthy, getCoords, getLatitude, getLongitude, validateCoords;
            _isTruthy = function(value, bool, optionsArray) {
                return value === bool || -1 !== optionsArray.indexOf(value);
            };
            _isFalse = function(value) {
                return _isTruthy(value, !1, [ "false", "FALSE", 0, "n", "N", "no", "NO" ]);
            };
            getLatitude = function(value) {
                return Array.isArray(value) && 2 === value.length ? value[1] : angular.isDefined(value.type) && "Point" === value.type ? value.coordinates[1] : value.latitude;
            };
            getLongitude = function(value) {
                return Array.isArray(value) && 2 === value.length ? value[0] : angular.isDefined(value.type) && "Point" === value.type ? value.coordinates[0] : value.longitude;
            };
            getCoords = function(value) {
                if (value) return value instanceof google.maps.LatLng ? value : Array.isArray(value) && 2 === value.length ? new google.maps.LatLng(value[1], value[0]) : angular.isDefined(value.type) && "Point" === value.type ? new google.maps.LatLng(value.coordinates[1], value.coordinates[0]) : new google.maps.LatLng(value.latitude, value.longitude);
            };
            validateCoords = function(coords) {
                if (angular.isUndefined(coords)) return !1;
                if (_.isArray(coords)) {
                    if (2 === coords.length) return !0;
                } else if (null != coords && (null != coords ? coords.type : void 0) && "Point" === coords.type && _.isArray(coords.coordinates) && 2 === coords.coordinates.length) return !0;
                return !(!coords || !angular.isDefined((null != coords ? coords.latitude : void 0) && angular.isDefined(null != coords ? coords.longitude : void 0)));
            };
            return {
                setCoordsFromEvent: function(prevValue, newLatLon) {
                    if (prevValue) {
                        if (Array.isArray(prevValue) && 2 === prevValue.length) {
                            prevValue[1] = newLatLon.lat();
                            prevValue[0] = newLatLon.lng();
                        } else if (angular.isDefined(prevValue.type) && "Point" === prevValue.type) {
                            prevValue.coordinates[1] = newLatLon.lat();
                            prevValue.coordinates[0] = newLatLon.lng();
                        } else {
                            prevValue.latitude = newLatLon.lat();
                            prevValue.longitude = newLatLon.lng();
                        }
                        return prevValue;
                    }
                },
                getLabelPositionPoint: function(anchor) {
                    var xPos, yPos;
                    if (void 0 !== anchor) {
                        anchor = /^([-\d\.]+)\s([-\d\.]+)$/.exec(anchor);
                        xPos = parseFloat(anchor[1]);
                        yPos = parseFloat(anchor[2]);
                        return null != xPos && null != yPos ? new google.maps.Point(xPos, yPos) : void 0;
                    }
                },
                createWindowOptions: function(gMarker, scope, content, defaults) {
                    var options;
                    if (null != content && null != defaults && null != $compile) {
                        options = angular.extend({}, defaults, {
                            content: this.buildContent(scope, defaults, content),
                            position: null != defaults.position ? defaults.position : angular.isObject(gMarker) ? gMarker.getPosition() : getCoords(scope.coords)
                        });
                        null != gMarker && null == (null != options ? options.pixelOffset : void 0) && (null == options.boxClass || (options.pixelOffset = {
                            height: 0,
                            width: -2
                        }));
                        return options;
                    }
                    if (defaults) return defaults;
                    Logger.error("infoWindow defaults not defined");
                    return content ? void 0 : Logger.error("infoWindow content not defined");
                },
                buildContent: function(scope, defaults, content) {
                    var parsed, ret;
                    if (null != defaults.content) ret = defaults.content; else if (null != $compile) {
                        content = content.replace(/^\s+|\s+$/g, "");
                        parsed = "" === content ? "" : $compile(content)(scope);
                        parsed.length > 0 && (ret = parsed[0]);
                    } else ret = content;
                    return ret;
                },
                defaultDelay: 50,
                isTrue: function(value) {
                    return _isTruthy(value, !0, [ "true", "TRUE", 1, "y", "Y", "yes", "YES" ]);
                },
                isFalse: _isFalse,
                isFalsy: function(value) {
                    return _isTruthy(value, !1, [ void 0, null ]) || _isFalse(value);
                },
                getCoords: getCoords,
                validateCoords: validateCoords,
                equalCoords: function(coord1, coord2) {
                    return getLatitude(coord1) === getLatitude(coord2) && getLongitude(coord1) === getLongitude(coord2);
                },
                validatePath: function(path) {
                    var array, i, polygon, trackMaxVertices;
                    i = 0;
                    if (angular.isUndefined(path.type)) {
                        if (!Array.isArray(path) || path.length < 2) return !1;
                        for (;i < path.length; ) {
                            if (!(angular.isDefined(path[i].latitude) && angular.isDefined(path[i].longitude) || "function" == typeof path[i].lat && "function" == typeof path[i].lng)) return !1;
                            i++;
                        }
                        return !0;
                    }
                    if (angular.isUndefined(path.coordinates)) return !1;
                    if ("Polygon" === path.type) {
                        if (path.coordinates[0].length < 4) return !1;
                        array = path.coordinates[0];
                    } else if ("MultiPolygon" === path.type) {
                        trackMaxVertices = {
                            max: 0,
                            index: 0
                        };
                        _.forEach(path.coordinates, function(polygon, index) {
                            if (polygon[0].length > this.max) {
                                this.max = polygon[0].length;
                                return this.index = index;
                            }
                        }, trackMaxVertices);
                        polygon = path.coordinates[trackMaxVertices.index];
                        array = polygon[0];
                        if (array.length < 4) return !1;
                    } else {
                        if ("LineString" !== path.type) return !1;
                        if (path.coordinates.length < 2) return !1;
                        array = path.coordinates;
                    }
                    for (;i < array.length; ) {
                        if (2 !== array[i].length) return !1;
                        i++;
                    }
                    return !0;
                },
                convertPathPoints: function(path) {
                    var array, i, latlng, result, trackMaxVertices;
                    i = 0;
                    result = new google.maps.MVCArray();
                    if (angular.isUndefined(path.type)) for (;i < path.length; ) {
                        angular.isDefined(path[i].latitude) && angular.isDefined(path[i].longitude) ? latlng = new google.maps.LatLng(path[i].latitude, path[i].longitude) : "function" == typeof path[i].lat && "function" == typeof path[i].lng && (latlng = path[i]);
                        result.push(latlng);
                        i++;
                    } else {
                        if ("Polygon" === path.type) array = path.coordinates[0]; else if ("MultiPolygon" === path.type) {
                            trackMaxVertices = {
                                max: 0,
                                index: 0
                            };
                            _.forEach(path.coordinates, function(polygon, index) {
                                if (polygon[0].length > this.max) {
                                    this.max = polygon[0].length;
                                    return this.index = index;
                                }
                            }, trackMaxVertices);
                            array = path.coordinates[trackMaxVertices.index][0];
                        } else "LineString" === path.type && (array = path.coordinates);
                        for (;i < array.length; ) {
                            result.push(new google.maps.LatLng(array[i][1], array[i][0]));
                            i++;
                        }
                    }
                    return result;
                },
                getPath: function(object, key) {
                    var obj;
                    if (null == key || !_.isString(key)) return key;
                    obj = object;
                    _.each(key.split("."), function(value) {
                        if (obj) return obj = obj[value];
                    });
                    return obj;
                },
                validateBoundPoints: function(bounds) {
                    return !(angular.isUndefined(bounds.sw.latitude) || angular.isUndefined(bounds.sw.longitude) || angular.isUndefined(bounds.ne.latitude) || angular.isUndefined(bounds.ne.longitude));
                },
                convertBoundPoints: function(bounds) {
                    var result;
                    result = new google.maps.LatLngBounds(new google.maps.LatLng(bounds.sw.latitude, bounds.sw.longitude), new google.maps.LatLng(bounds.ne.latitude, bounds.ne.longitude));
                    return result;
                },
                fitMapBounds: function(map, bounds) {
                    return map.fitBounds(bounds);
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapIsReady", [ "$q", "$timeout", function($q, $timeout) {
            var _checkIfReady, _ctr, _promises, _proms;
            _ctr = 0;
            _proms = [];
            _promises = function() {
                return $q.all(_proms);
            };
            _checkIfReady = function(deferred, expectedInstances, retriesLeft) {
                return $timeout(function() {
                    retriesLeft <= 0 ? deferred.reject("Your maps are not found we have checked the maximum amount of times. :)") : _ctr !== expectedInstances ? _checkIfReady(deferred, expectedInstances, retriesLeft - 1) : deferred.resolve(_promises());
                }, 100);
            };
            return {
                spawn: function() {
                    var d;
                    d = $q.defer();
                    _proms.push(d.promise);
                    _ctr += 1;
                    return {
                        instance: _ctr,
                        deferred: d
                    };
                },
                promises: _promises,
                instances: function() {
                    return _ctr;
                },
                promise: function(expectedInstances, numRetries) {
                    var d;
                    null == expectedInstances && (expectedInstances = 1);
                    null == numRetries && (numRetries = 50);
                    d = $q.defer();
                    _checkIfReady(d, expectedInstances, numRetries);
                    return d.promise;
                },
                reset: function() {
                    _ctr = 0;
                    _proms.length = 0;
                },
                decrement: function() {
                    _ctr > 0 && (_ctr -= 1);
                    _proms.length && (_proms.length -= 1);
                }
            };
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapLinked", [ "uiGmapBaseObject", function(BaseObject) {
            var Linked;
            Linked = function(superClass) {
                function Linked(scope, element, attrs, ctrls) {
                    this.scope = scope;
                    this.element = element;
                    this.attrs = attrs;
                    this.ctrls = ctrls;
                }
                extend(Linked, superClass);
                return Linked;
            }(BaseObject);
            return Linked;
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapLogger", [ "nemSimpleLogger", function(nemSimpleLogger) {
            return nemSimpleLogger.spawn();
        } ]);
    }).call(this);
    /*global _:true, angular:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapModelKey", [ "uiGmapBaseObject", "uiGmapGmapUtil", function(BaseObject, GmapUtil) {
            return function(superClass) {
                function _Class(scope1, _interface) {
                    this.scope = scope1;
                    this.interface = null != _interface ? _interface : {
                        scopeKeys: []
                    };
                    this.modelsLength = bind(this.modelsLength, this);
                    this.updateChild = bind(this.updateChild, this);
                    this.destroy = bind(this.destroy, this);
                    this.setChildScope = bind(this.setChildScope, this);
                    this.getChanges = bind(this.getChanges, this);
                    this.getProp = bind(this.getProp, this);
                    this.setIdKey = bind(this.setIdKey, this);
                    this.modelKeyComparison = bind(this.modelKeyComparison, this);
                    _Class.__super__.constructor.call(this);
                    this.defaultIdKey = "id";
                    this.idKey = void 0;
                }
                extend(_Class, superClass);
                _Class.prototype.evalModelHandle = function(model, modelKey) {
                    if (null != model && null != modelKey) {
                        if ("self" === modelKey) return model;
                        _.isFunction(modelKey) && (modelKey = modelKey());
                        return GmapUtil.getPath(model, modelKey);
                    }
                };
                _Class.prototype.modelKeyComparison = function(model1, model2) {
                    var coord1, coord2, hasCoords, isEqual, scope, without;
                    hasCoords = this.interface.scopeKeys.indexOf("coords") >= 0;
                    (hasCoords && null != this.scope.coords || !hasCoords) && (scope = this.scope);
                    if (null == scope) throw "No scope set!";
                    if (hasCoords) {
                        coord1 = this.scopeOrModelVal("coords", scope, model1);
                        coord2 = this.scopeOrModelVal("coords", scope, model2);
                        isEqual = GmapUtil.equalCoords(coord1, coord2);
                        if (!isEqual) return isEqual;
                    }
                    without = _.without(this.interface.scopeKeys, "coords");
                    isEqual = _.every(without, function(_this) {
                        return function(k) {
                            return _this.scopeOrModelVal(scope[k], scope, model1) === _this.scopeOrModelVal(scope[k], scope, model2);
                        };
                    }(this));
                    return isEqual;
                };
                _Class.prototype.setIdKey = function(scope) {
                    return this.idKey = null != scope.idKey ? scope.idKey : this.defaultIdKey;
                };
                _Class.prototype.setVal = function(model, key, newValue) {
                    this.modelOrKey(model, newValue);
                    return model;
                };
                _Class.prototype.modelOrKey = function(model, key) {
                    if (null != key) return "self" !== key ? GmapUtil.getPath(model, key) : model;
                };
                _Class.prototype.getProp = function(propName, scope, model) {
                    return this.scopeOrModelVal(propName, scope, model);
                };
                /*
        For the cases were watching a large object we only want to know the list of props
        that actually changed.
        Also we want to limit the amount of props we analyze to whitelisted props that are
        actually tracked by scope. (should make things faster with whitelisted)
         */
                _Class.prototype.getChanges = function(now, prev, whitelistedProps) {
                    var c, changes, prop;
                    if (whitelistedProps) {
                        prev = _.pick(prev, whitelistedProps);
                        now = _.pick(now, whitelistedProps);
                    }
                    changes = {};
                    prop = {};
                    c = {};
                    for (prop in now) if (!prev || prev[prop] !== now[prop]) if (_.isArray(now[prop])) changes[prop] = now[prop]; else if (_.isObject(now[prop])) {
                        c = this.getChanges(now[prop], prev ? prev[prop] : null);
                        _.isEmpty(c) || (changes[prop] = c);
                    } else changes[prop] = now[prop];
                    return changes;
                };
                _Class.prototype.scopeOrModelVal = function(key, scope, model, doWrap) {
                    var maybeWrap, modelKey, modelProp, scopeProp;
                    null == doWrap && (doWrap = !1);
                    maybeWrap = function(isScope, ret, doWrap) {
                        null == doWrap && (doWrap = !1);
                        return doWrap ? {
                            isScope: isScope,
                            value: ret
                        } : ret;
                    };
                    scopeProp = _.get(scope, key);
                    if (_.isFunction(scopeProp)) return maybeWrap(!0, scopeProp(model), doWrap);
                    if (_.isObject(scopeProp)) return maybeWrap(!0, scopeProp, doWrap);
                    if (!_.isString(scopeProp)) return maybeWrap(!0, scopeProp, doWrap);
                    modelKey = scopeProp;
                    modelProp = modelKey ? "self" === modelKey ? model : _.get(model, modelKey) : _.get(model, key);
                    return _.isFunction(modelProp) ? maybeWrap(!1, modelProp(), doWrap) : maybeWrap(!1, modelProp, doWrap);
                };
                _Class.prototype.setChildScope = function(keys, childScope, model) {
                    var isScopeObj, key, name, newValue;
                    for (key in keys) {
                        name = keys[key];
                        isScopeObj = this.scopeOrModelVal(name, childScope, model, !0);
                        if (null != (null != isScopeObj ? isScopeObj.value : void 0)) {
                            newValue = isScopeObj.value;
                            newValue !== childScope[name] && (childScope[name] = newValue);
                        }
                    }
                    return childScope.model = model;
                };
                _Class.prototype.onDestroy = function(scope) {};
                _Class.prototype.destroy = function(manualOverride) {
                    var ref;
                    null == manualOverride && (manualOverride = !1);
                    return null == this.scope || (null != (ref = this.scope) ? ref.$$destroyed : void 0) || !this.needToManualDestroy && !manualOverride ? this.clean() : this.scope.$destroy();
                };
                _Class.prototype.updateChild = function(child, model) {
                    if (null != model[this.idKey]) return child.updateModel(model);
                    this.$log.error("Model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.");
                };
                _Class.prototype.modelsLength = function(arrayOrObjModels) {
                    var len, toCheck;
                    null == arrayOrObjModels && (arrayOrObjModels = void 0);
                    len = 0;
                    toCheck = arrayOrObjModels || this.scope.models;
                    if (null == toCheck) return len;
                    len = angular.isArray(toCheck) || null != toCheck.length ? toCheck.length : Object.keys(toCheck).length;
                    return len;
                };
                return _Class;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapModelsWatcher", [ "uiGmapLogger", "uiGmap_async", "$q", "uiGmapPromise", function(Logger, _async, $q, uiGmapPromise) {
            return {
                didQueueInitPromise: function(existingPiecesObj, scope) {
                    if (0 === scope.models.length) {
                        _async.promiseLock(existingPiecesObj, uiGmapPromise.promiseTypes.init, null, null, function() {
                            return uiGmapPromise.resolve();
                        });
                        return !0;
                    }
                    return !1;
                },
                figureOutState: function(idKey, scope, childObjects, comparison, callBack) {
                    var adds, children, mappedScopeModelIds, removals, updates;
                    adds = [];
                    mappedScopeModelIds = {};
                    removals = [];
                    updates = [];
                    scope.models.forEach(function(m) {
                        var child;
                        if (null == m[idKey]) return Logger.error(" id missing for model #{m.toString()},\ncan not use do comparison/insertion");
                        mappedScopeModelIds[m[idKey]] = {};
                        if (null == childObjects.get(m[idKey])) return adds.push(m);
                        child = childObjects.get(m[idKey]);
                        return comparison(m, child.clonedModel, scope) ? void 0 : updates.push({
                            model: m,
                            child: child
                        });
                    });
                    children = childObjects.values();
                    children.forEach(function(c) {
                        var id;
                        if (null != c) if (null != c.model) {
                            id = c.model[idKey];
                            if (null == mappedScopeModelIds[id]) return removals.push(c);
                        } else Logger.error("child.model undefined in ModelsWatcher."); else Logger.error("child undefined in ModelsWatcher.");
                    });
                    return {
                        adds: adds,
                        removals: removals,
                        updates: updates
                    };
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").service("uiGmapPromise", [ "$q", "$timeout", "uiGmapLogger", function($q, $timeout, $log) {
            var ExposedPromise, SniffedPromise, defer, isInProgress, isResolved, promise, promiseStatus, promiseStatuses, promiseTypes, resolve, strPromiseStatuses;
            promiseTypes = {
                create: "create",
                update: "update",
                delete: "delete",
                init: "init"
            };
            promiseStatuses = {
                IN_PROGRESS: 0,
                RESOLVED: 1,
                REJECTED: 2
            };
            strPromiseStatuses = function() {
                var obj;
                obj = {};
                obj["" + promiseStatuses.IN_PROGRESS] = "in-progress";
                obj["" + promiseStatuses.RESOLVED] = "resolved";
                obj["" + promiseStatuses.REJECTED] = "rejected";
                return obj;
            }();
            isInProgress = function(promise) {
                return promise.$$state ? promise.$$state.status === promiseStatuses.IN_PROGRESS : !promise.hasOwnProperty("$$v") || void 0;
            };
            isResolved = function(promise) {
                return promise.$$state ? promise.$$state.status === promiseStatuses.RESOLVED : !!promise.hasOwnProperty("$$v") || void 0;
            };
            promiseStatus = function(status) {
                return strPromiseStatuses[status] || "done w error";
            };
            ExposedPromise = function(promise) {
                var cancelDeferred, combined, wrapped;
                cancelDeferred = $q.defer();
                combined = $q.all([ promise, cancelDeferred.promise ]);
                wrapped = $q.defer();
                promise.then(cancelDeferred.resolve, function() {}, function(notify) {
                    cancelDeferred.notify(notify);
                    return wrapped.notify(notify);
                });
                combined.then(function(successes) {
                    return wrapped.resolve(successes[0] || successes[1]);
                }, function(error) {
                    return wrapped.reject(error);
                });
                wrapped.promise.cancel = function(reason) {
                    null == reason && (reason = "canceled");
                    return cancelDeferred.reject(reason);
                };
                wrapped.promise.notify = function(msg) {
                    null == msg && (msg = "cancel safe");
                    wrapped.notify(msg);
                    if (promise.hasOwnProperty("notify")) return promise.notify(msg);
                };
                null != promise.promiseType && (wrapped.promise.promiseType = promise.promiseType);
                return wrapped.promise;
            };
            SniffedPromise = function(fnPromise, promiseType) {
                return {
                    promise: fnPromise,
                    promiseType: promiseType
                };
            };
            defer = function() {
                return $q.defer();
            };
            resolve = function() {
                var d;
                d = $q.defer();
                d.resolve.apply(void 0, arguments);
                return d.promise;
            };
            promise = function(fnToWrap) {
                var d;
                if (_.isFunction(fnToWrap)) {
                    d = $q.defer();
                    $timeout(function() {
                        var result;
                        result = fnToWrap();
                        return d.resolve(result);
                    });
                    return d.promise;
                }
                $log.error("uiGmapPromise.promise() only accepts functions");
            };
            return {
                defer: defer,
                promise: promise,
                resolve: resolve,
                promiseTypes: promiseTypes,
                isInProgress: isInProgress,
                isResolved: isResolved,
                promiseStatus: promiseStatus,
                ExposedPromise: ExposedPromise,
                SniffedPromise: SniffedPromise
            };
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapPropMap", function() {
            return function() {
                function PropMap() {
                    this.removeAll = bind(this.removeAll, this);
                    this.slice = bind(this.slice, this);
                    this.push = bind(this.push, this);
                    this.keys = bind(this.keys, this);
                    this.values = bind(this.values, this);
                    this.remove = bind(this.remove, this);
                    this.put = bind(this.put, this);
                    this.stateChanged = bind(this.stateChanged, this);
                    this.get = bind(this.get, this);
                    this.length = 0;
                    this.dict = {};
                    this.didValsStateChange = !1;
                    this.didKeysStateChange = !1;
                    this.allVals = [];
                    this.allKeys = [];
                }
                PropMap.prototype.get = function(key) {
                    return this.dict[key];
                };
                PropMap.prototype.stateChanged = function() {
                    this.didValsStateChange = !0;
                    return this.didKeysStateChange = !0;
                };
                PropMap.prototype.put = function(key, value) {
                    null == this.get(key) && this.length++;
                    this.stateChanged();
                    return this.dict[key] = value;
                };
                PropMap.prototype.remove = function(key, isSafe) {
                    var value;
                    null == isSafe && (isSafe = !1);
                    if (!isSafe || this.get(key)) {
                        value = this.dict[key];
                        delete this.dict[key];
                        this.length--;
                        this.stateChanged();
                        return value;
                    }
                };
                PropMap.prototype.valuesOrKeys = function(str) {
                    var keys, vals;
                    null == str && (str = "Keys");
                    if (!this["did" + str + "StateChange"]) return this["all" + str];
                    vals = [];
                    keys = [];
                    _.each(this.dict, function(v, k) {
                        vals.push(v);
                        return keys.push(k);
                    });
                    this.didKeysStateChange = !1;
                    this.didValsStateChange = !1;
                    this.allVals = vals;
                    this.allKeys = keys;
                    return this["all" + str];
                };
                PropMap.prototype.values = function() {
                    return this.valuesOrKeys("Vals");
                };
                PropMap.prototype.keys = function() {
                    return this.valuesOrKeys();
                };
                PropMap.prototype.push = function(obj, key) {
                    null == key && (key = "key");
                    return this.put(obj[key], obj);
                };
                PropMap.prototype.slice = function() {
                    return this.keys().map(function(_this) {
                        return function(k) {
                            return _this.remove(k);
                        };
                    }(this));
                };
                PropMap.prototype.removeAll = function() {
                    return this.slice();
                };
                PropMap.prototype.each = function(cb) {
                    return _.each(this.dict, function(v, k) {
                        return cb(v);
                    });
                };
                PropMap.prototype.map = function(cb) {
                    return _.map(this.dict, function(v, k) {
                        return cb(v);
                    });
                };
                return PropMap;
            }();
        });
    }).call(this);
    /*globals angular,_ */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapPropertyAction", [ "uiGmapLogger", function(Logger) {
            var PropertyAction;
            PropertyAction = function(setterFn) {
                this.setIfChange = function(callingKey) {
                    return function(newVal, oldVal) {
                        if (!_.isEqual(oldVal, newVal)) return setterFn(callingKey, newVal);
                    };
                };
                this.sic = this.setIfChange;
                return this;
            };
            return PropertyAction;
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps.directives.api.managers").factory("uiGmapClustererMarkerManager", [ "uiGmapLogger", "uiGmapFitHelper", "uiGmapPropMap", "uiGmapEventsHelper", function($log, FitHelper, PropMap, EventsHelper) {
            var ClustererMarkerManager;
            ClustererMarkerManager = function() {
                function ClustererMarkerManager(gMap, opt_markers, opt_options, opt_events) {
                    null == opt_markers && (opt_markers = {});
                    this.opt_options = null != opt_options ? opt_options : {};
                    this.opt_events = opt_events;
                    this.checkSync = bind(this.checkSync, this);
                    this.getGMarkers = bind(this.getGMarkers, this);
                    this.fit = bind(this.fit, this);
                    this.destroy = bind(this.destroy, this);
                    this.attachEvents = bind(this.attachEvents, this);
                    this.clear = bind(this.clear, this);
                    this.draw = bind(this.draw, this);
                    this.removeMany = bind(this.removeMany, this);
                    this.remove = bind(this.remove, this);
                    this.addMany = bind(this.addMany, this);
                    this.update = bind(this.update, this);
                    this.add = bind(this.add, this);
                    this.type = ClustererMarkerManager.type;
                    this.clusterer = new NgMapMarkerClusterer(gMap, opt_markers, this.opt_options);
                    this.propMapGMarkers = new PropMap();
                    this.attachEvents(this.opt_events, "opt_events");
                    this.clusterer.setIgnoreHidden(!0);
                    this.noDrawOnSingleAddRemoves = !0;
                    $log.info(this);
                }
                ClustererMarkerManager.type = "ClustererMarkerManager";
                ClustererMarkerManager.prototype.checkKey = function(gMarker) {
                    var msg;
                    if (null == gMarker.key) {
                        msg = "gMarker.key undefined and it is REQUIRED!!";
                        return $log.error(msg);
                    }
                };
                ClustererMarkerManager.prototype.add = function(gMarker) {
                    this.checkKey(gMarker);
                    this.clusterer.addMarker(gMarker, this.noDrawOnSingleAddRemoves);
                    this.propMapGMarkers.put(gMarker.key, gMarker);
                    return this.checkSync();
                };
                ClustererMarkerManager.prototype.update = function(gMarker) {
                    this.remove(gMarker);
                    return this.add(gMarker);
                };
                ClustererMarkerManager.prototype.addMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(gMarker) {
                            return _this.add(gMarker);
                        };
                    }(this));
                };
                ClustererMarkerManager.prototype.remove = function(gMarker) {
                    var exists;
                    this.checkKey(gMarker);
                    exists = this.propMapGMarkers.get(gMarker.key);
                    if (exists) {
                        this.clusterer.removeMarker(gMarker, this.noDrawOnSingleAddRemoves);
                        this.propMapGMarkers.remove(gMarker.key);
                    }
                    return this.checkSync();
                };
                ClustererMarkerManager.prototype.removeMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(gMarker) {
                            return _this.remove(gMarker);
                        };
                    }(this));
                };
                ClustererMarkerManager.prototype.draw = function() {
                    return this.clusterer.repaint();
                };
                ClustererMarkerManager.prototype.clear = function() {
                    this.removeMany(this.getGMarkers());
                    return this.clusterer.repaint();
                };
                ClustererMarkerManager.prototype.attachEvents = function(options, optionsName) {
                    var eventName, results;
                    this.listeners = [];
                    if (angular.isDefined(options) && null != options && angular.isObject(options)) {
                        results = [];
                        for (eventName in options) {
                            options[eventName];
                            if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
                                $log.info(optionsName + ": Attaching event: " + eventName + " to clusterer");
                                results.push(this.listeners.push(google.maps.event.addListener(this.clusterer, eventName, options[eventName])));
                            } else results.push(void 0);
                        }
                        return results;
                    }
                };
                ClustererMarkerManager.prototype.clearEvents = function() {
                    EventsHelper.removeEvents(this.listeners);
                    return this.listeners = [];
                };
                ClustererMarkerManager.prototype.destroy = function() {
                    this.clearEvents();
                    return this.clear();
                };
                ClustererMarkerManager.prototype.fit = function() {
                    return FitHelper.fit(this.getGMarkers(), this.clusterer.getMap());
                };
                ClustererMarkerManager.prototype.getGMarkers = function() {
                    return this.clusterer.getMarkers().values();
                };
                ClustererMarkerManager.prototype.checkSync = function() {};
                return ClustererMarkerManager;
            }();
            return ClustererMarkerManager;
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.managers").service("uiGmapGoogleMapObjectManager", [ function() {
            var _availableInstances, _usedInstances;
            _availableInstances = [];
            _usedInstances = [];
            return {
                createMapInstance: function(parentElement, options) {
                    var instance;
                    instance = null;
                    if (0 === _availableInstances.length) {
                        instance = new google.maps.Map(parentElement, options);
                        _usedInstances.push(instance);
                    } else {
                        instance = _availableInstances.pop();
                        angular.element(parentElement).append(instance.getDiv());
                        instance.setOptions(options);
                        _usedInstances.push(instance);
                    }
                    return instance;
                },
                recycleMapInstance: function(instance) {
                    var index;
                    index = _usedInstances.indexOf(instance);
                    if (index < 0) throw new Error("Expected map instance to be a previously used instance");
                    _usedInstances.splice(index, 1);
                    return _availableInstances.push(instance);
                }
            };
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps.directives.api.managers").factory("uiGmapMarkerManager", [ "uiGmapLogger", "uiGmapFitHelper", "uiGmapPropMap", function(Logger, FitHelper, PropMap) {
            var MarkerManager;
            MarkerManager = function() {
                function MarkerManager(gMap, opt_markers, opt_options) {
                    this.getGMarkers = bind(this.getGMarkers, this);
                    this.fit = bind(this.fit, this);
                    this.handleOptDraw = bind(this.handleOptDraw, this);
                    this.clear = bind(this.clear, this);
                    this.destroy = bind(this.destroy, this);
                    this.draw = bind(this.draw, this);
                    this.removeMany = bind(this.removeMany, this);
                    this.remove = bind(this.remove, this);
                    this.addMany = bind(this.addMany, this);
                    this.update = bind(this.update, this);
                    this.add = bind(this.add, this);
                    this.type = MarkerManager.type;
                    this.gMap = gMap;
                    this.gMarkers = new PropMap();
                    this.$log = Logger;
                    this.$log.info(this);
                }
                MarkerManager.type = "MarkerManager";
                MarkerManager.prototype.add = function(gMarker, optDraw) {
                    var exists, msg;
                    null == optDraw && (optDraw = !0);
                    if (null == gMarker.key) {
                        msg = "gMarker.key undefined and it is REQUIRED!!";
                        Logger.error(msg);
                        throw msg;
                    }
                    exists = this.gMarkers.get(gMarker.key);
                    if (!exists) {
                        this.handleOptDraw(gMarker, optDraw, !0);
                        return this.gMarkers.put(gMarker.key, gMarker);
                    }
                };
                MarkerManager.prototype.update = function(gMarker, optDraw) {
                    null == optDraw && (optDraw = !0);
                    this.remove(gMarker, optDraw);
                    return this.add(gMarker, optDraw);
                };
                MarkerManager.prototype.addMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(gMarker) {
                            return _this.add(gMarker);
                        };
                    }(this));
                };
                MarkerManager.prototype.remove = function(gMarker, optDraw) {
                    null == optDraw && (optDraw = !0);
                    this.handleOptDraw(gMarker, optDraw, !1);
                    if (this.gMarkers.get(gMarker.key)) return this.gMarkers.remove(gMarker.key);
                };
                MarkerManager.prototype.removeMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(marker) {
                            return _this.remove(marker);
                        };
                    }(this));
                };
                MarkerManager.prototype.draw = function() {
                    var deletes;
                    deletes = [];
                    this.gMarkers.each(function(_this) {
                        return function(gMarker) {
                            if (!gMarker.isDrawn) {
                                if (gMarker.doAdd) {
                                    gMarker.setMap(_this.gMap);
                                    return gMarker.isDrawn = !0;
                                }
                                return deletes.push(gMarker);
                            }
                        };
                    }(this));
                    return deletes.forEach(function(_this) {
                        return function(gMarker) {
                            gMarker.isDrawn = !1;
                            return _this.remove(gMarker, !0);
                        };
                    }(this));
                };
                MarkerManager.prototype.destroy = function() {
                    return this.clear();
                };
                MarkerManager.prototype.clear = function() {
                    this.gMarkers.each(function(gMarker) {
                        return gMarker.setMap(null);
                    });
                    delete this.gMarkers;
                    return this.gMarkers = new PropMap();
                };
                MarkerManager.prototype.handleOptDraw = function(gMarker, optDraw, doAdd) {
                    if (!0 === optDraw) {
                        doAdd ? gMarker.setMap(this.gMap) : gMarker.setMap(null);
                        return gMarker.isDrawn = !0;
                    }
                    gMarker.isDrawn = !1;
                    return gMarker.doAdd = doAdd;
                };
                MarkerManager.prototype.fit = function() {
                    return FitHelper.fit(this.getGMarkers(), this.gMap);
                };
                MarkerManager.prototype.getGMarkers = function() {
                    return this.gMarkers.values();
                };
                return MarkerManager;
            }();
            return MarkerManager;
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps.directives.api.managers").factory("uiGmapSpiderfierMarkerManager", [ "uiGmapLogger", "uiGmapFitHelper", "uiGmapPropMap", "uiGmapMarkerSpiderfier", function($log, FitHelper, PropMap, MarkerSpiderfier) {
            return function() {
                function SpiderfierMarkerManager(gMap, opt_markers, opt_options, opt_events, scope) {
                    null == opt_markers && (opt_markers = {});
                    this.opt_options = null != opt_options ? opt_options : {};
                    this.opt_events = opt_events;
                    this.scope = scope;
                    this.checkSync = bind(this.checkSync, this);
                    this.isSpiderfied = bind(this.isSpiderfied, this);
                    this.getGMarkers = bind(this.getGMarkers, this);
                    this.fit = bind(this.fit, this);
                    this.destroy = bind(this.destroy, this);
                    this.attachEvents = bind(this.attachEvents, this);
                    this.clear = bind(this.clear, this);
                    this.draw = bind(this.draw, this);
                    this.removeMany = bind(this.removeMany, this);
                    this.remove = bind(this.remove, this);
                    this.addMany = bind(this.addMany, this);
                    this.update = bind(this.update, this);
                    this.add = bind(this.add, this);
                    this.type = SpiderfierMarkerManager.type;
                    this.markerSpiderfier = new MarkerSpiderfier(gMap, this.opt_options);
                    this.propMapGMarkers = new PropMap();
                    this.attachEvents(this.opt_events, "opt_events");
                    this.noDrawOnSingleAddRemoves = !0;
                    $log.info(this);
                }
                SpiderfierMarkerManager.type = "SpiderfierMarkerManager";
                SpiderfierMarkerManager.prototype.checkKey = function(gMarker) {
                    var msg;
                    if (null == gMarker.key) {
                        msg = "gMarker.key undefined and it is REQUIRED!!";
                        return $log.error(msg);
                    }
                };
                SpiderfierMarkerManager.prototype.add = function(gMarker) {
                    gMarker.setMap(this.markerSpiderfier.map);
                    this.checkKey(gMarker);
                    this.markerSpiderfier.addMarker(gMarker, this.noDrawOnSingleAddRemoves);
                    this.propMapGMarkers.put(gMarker.key, gMarker);
                    return this.checkSync();
                };
                SpiderfierMarkerManager.prototype.update = function(gMarker) {
                    this.remove(gMarker);
                    return this.add(gMarker);
                };
                SpiderfierMarkerManager.prototype.addMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(gMarker) {
                            return _this.add(gMarker);
                        };
                    }(this));
                };
                SpiderfierMarkerManager.prototype.remove = function(gMarker) {
                    var exists;
                    this.checkKey(gMarker);
                    exists = this.propMapGMarkers.get(gMarker.key);
                    if (exists) {
                        gMarker.setMap(null);
                        this.markerSpiderfier.removeMarker(gMarker, this.noDrawOnSingleAddRemoves);
                        this.propMapGMarkers.remove(gMarker.key);
                    }
                    return this.checkSync();
                };
                SpiderfierMarkerManager.prototype.removeMany = function(gMarkers) {
                    return gMarkers.forEach(function(_this) {
                        return function(gMarker) {
                            return _this.remove(gMarker);
                        };
                    }(this));
                };
                SpiderfierMarkerManager.prototype.draw = function() {};
                SpiderfierMarkerManager.prototype.clear = function() {
                    return this.removeMany(this.getGMarkers());
                };
                SpiderfierMarkerManager.prototype.attachEvents = function(options, optionsName) {
                    if (angular.isDefined(options) && null != options && angular.isObject(options)) return _.each(options, function(_this) {
                        return function(eventHandler, eventName) {
                            if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
                                $log.info(optionsName + ": Attaching event: " + eventName + " to markerSpiderfier");
                                return _this.markerSpiderfier.addListener(eventName, function() {
                                    return "spiderfy" === eventName || "unspiderfy" === eventName ? _this.scope.$evalAsync(options[eventName].apply(options, arguments)) : _this.scope.$evalAsync(options[eventName].apply(options, [ arguments[0], eventName, arguments[0].model, arguments ]));
                                });
                            }
                        };
                    }(this));
                };
                SpiderfierMarkerManager.prototype.clearEvents = function(options, optionsName) {
                    var eventName;
                    if (angular.isDefined(options) && null != options && angular.isObject(options)) for (eventName in options) {
                        options[eventName];
                        if (options.hasOwnProperty(eventName) && angular.isFunction(options[eventName])) {
                            $log.info(optionsName + ": Clearing event: " + eventName + " to markerSpiderfier");
                            this.markerSpiderfier.clearListeners(eventName);
                        }
                    }
                };
                SpiderfierMarkerManager.prototype.destroy = function() {
                    this.clearEvents(this.opt_events, "opt_events");
                    return this.clear();
                };
                SpiderfierMarkerManager.prototype.fit = function() {
                    return FitHelper.fit(this.getGMarkers(), this.markerSpiderfier.map);
                };
                SpiderfierMarkerManager.prototype.getGMarkers = function() {
                    return this.markerSpiderfier.getMarkers();
                };
                SpiderfierMarkerManager.prototype.isSpiderfied = function() {
                    return _.find(this.getGMarkers(), function(gMarker) {
                        return null != (null != gMarker ? gMarker._omsData : void 0);
                    });
                };
                SpiderfierMarkerManager.prototype.checkSync = function() {};
                return SpiderfierMarkerManager;
            }();
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps").factory("uiGmapadd-events", [ "$timeout", function($timeout) {
            var addEvent, addEvents;
            addEvent = function(target, eventName, handler) {
                return google.maps.event.addListener(target, eventName, function() {
                    handler.apply(this, arguments);
                    return $timeout(function() {}, !0);
                });
            };
            addEvents = function(target, eventName, handler) {
                var remove;
                if (handler) return addEvent(target, eventName, handler);
                remove = [];
                angular.forEach(eventName, function(_handler, key) {
                    return remove.push(addEvent(target, key, _handler));
                });
                return function() {
                    angular.forEach(remove, function(listener) {
                        return google.maps.event.removeListener(listener);
                    });
                    return remove = null;
                };
            };
            return addEvents;
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps").factory("uiGmaparray-sync", [ "uiGmapadd-events", function(mapEvents) {
            return function(mapArray, scope, pathEval, pathChangedFn) {
                var geojsonArray, geojsonHandlers, geojsonWatcher, isSetFromScope, legacyHandlers, legacyWatcher, mapArrayListener, scopePath, watchListener;
                isSetFromScope = !1;
                scopePath = scope.$eval(pathEval);
                if (!scope.static) {
                    legacyHandlers = {
                        set_at: function(index) {
                            var value;
                            if (!isSetFromScope) {
                                value = mapArray.getAt(index);
                                if (value) {
                                    if (value.lng && value.lat) {
                                        scopePath[index].latitude = value.lat();
                                        return scopePath[index].longitude = value.lng();
                                    }
                                    return scopePath[index] = value;
                                }
                            }
                        },
                        insert_at: function(index) {
                            var value;
                            if (!isSetFromScope) {
                                value = mapArray.getAt(index);
                                if (value) return value.lng && value.lat ? scopePath.splice(index, 0, {
                                    latitude: value.lat(),
                                    longitude: value.lng()
                                }) : scopePath.splice(index, 0, value);
                            }
                        },
                        remove_at: function(index) {
                            if (!isSetFromScope) return scopePath.splice(index, 1);
                        }
                    };
                    "Polygon" === scopePath.type ? geojsonArray = scopePath.coordinates[0] : "LineString" === scopePath.type && (geojsonArray = scopePath.coordinates);
                    geojsonHandlers = {
                        set_at: function(index) {
                            var value;
                            if (!isSetFromScope) {
                                value = mapArray.getAt(index);
                                if (value && value.lng && value.lat) {
                                    geojsonArray[index][1] = value.lat();
                                    return geojsonArray[index][0] = value.lng();
                                }
                            }
                        },
                        insert_at: function(index) {
                            var value;
                            if (!isSetFromScope) {
                                value = mapArray.getAt(index);
                                if (value && value.lng && value.lat) return geojsonArray.splice(index, 0, [ value.lng(), value.lat() ]);
                            }
                        },
                        remove_at: function(index) {
                            if (!isSetFromScope) return geojsonArray.splice(index, 1);
                        }
                    };
                    mapArrayListener = mapEvents(mapArray, angular.isUndefined(scopePath.type) ? legacyHandlers : geojsonHandlers);
                }
                legacyWatcher = function(newPath) {
                    var changed, i, l, newLength, newValue, oldArray, oldLength, oldValue;
                    isSetFromScope = !0;
                    oldArray = mapArray;
                    changed = !1;
                    if (newPath) {
                        i = 0;
                        oldLength = oldArray.getLength();
                        newLength = newPath.length;
                        l = Math.min(oldLength, newLength);
                        newValue = void 0;
                        for (;i < l; ) {
                            oldValue = oldArray.getAt(i);
                            newValue = newPath[i];
                            if ("function" == typeof newValue.equals) {
                                if (!newValue.equals(oldValue)) {
                                    oldArray.setAt(i, newValue);
                                    changed = !0;
                                }
                            } else if (oldValue.lat() !== newValue.latitude || oldValue.lng() !== newValue.longitude) {
                                oldArray.setAt(i, new google.maps.LatLng(newValue.latitude, newValue.longitude));
                                changed = !0;
                            }
                            i++;
                        }
                        for (;i < newLength; ) {
                            newValue = newPath[i];
                            "function" == typeof newValue.lat && "function" == typeof newValue.lng ? oldArray.push(newValue) : oldArray.push(new google.maps.LatLng(newValue.latitude, newValue.longitude));
                            changed = !0;
                            i++;
                        }
                        for (;i < oldLength; ) {
                            oldArray.pop();
                            changed = !0;
                            i++;
                        }
                    }
                    isSetFromScope = !1;
                    if (changed) return pathChangedFn(oldArray);
                };
                geojsonWatcher = function(newPath) {
                    var array, changed, i, l, newLength, newValue, oldArray, oldLength, oldValue;
                    isSetFromScope = !0;
                    oldArray = mapArray;
                    changed = !1;
                    if (newPath) {
                        "Polygon" === scopePath.type ? array = newPath.coordinates[0] : "LineString" === scopePath.type && (array = newPath.coordinates);
                        i = 0;
                        oldLength = oldArray.getLength();
                        newLength = array.length;
                        l = Math.min(oldLength, newLength);
                        newValue = void 0;
                        for (;i < l; ) {
                            oldValue = oldArray.getAt(i);
                            newValue = array[i];
                            if (oldValue.lat() !== newValue[1] || oldValue.lng() !== newValue[0]) {
                                oldArray.setAt(i, new google.maps.LatLng(newValue[1], newValue[0]));
                                changed = !0;
                            }
                            i++;
                        }
                        for (;i < newLength; ) {
                            newValue = array[i];
                            oldArray.push(new google.maps.LatLng(newValue[1], newValue[0]));
                            changed = !0;
                            i++;
                        }
                        for (;i < oldLength; ) {
                            oldArray.pop();
                            changed = !0;
                            i++;
                        }
                    }
                    isSetFromScope = !1;
                    if (changed) return pathChangedFn(oldArray);
                };
                scope.static || (watchListener = angular.isUndefined(scopePath.type) ? scope.$watchCollection(pathEval, legacyWatcher) : scope.$watch(pathEval, geojsonWatcher, !0));
                return function() {
                    if (mapArrayListener) {
                        mapArrayListener();
                        mapArrayListener = null;
                    }
                    if (watchListener) {
                        watchListener();
                        return watchListener = null;
                    }
                };
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.utils").factory("uiGmapChromeFixes", [ "$timeout", function($timeout) {
            return {
                maybeRepaint: function(el) {
                    if (el) {
                        el.style.opacity = .9;
                        return $timeout(function() {
                            return el.style.opacity = 1;
                        });
                    }
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps").service("uiGmapObjectIterators", function() {
            var _ignores, _iterators, _slapForEach, _slapMap;
            _ignores = [ "length", "forEach", "map" ];
            _iterators = [];
            _slapForEach = function(object) {
                object.forEach = function(cb) {
                    return _.each(_.omit(object, _ignores), function(val) {
                        if (!_.isFunction(val)) return cb(val);
                    });
                };
                return object;
            };
            _iterators.push(_slapForEach);
            _slapMap = function(object) {
                object.map = function(cb) {
                    return _.map(_.omit(object, _ignores), function(val) {
                        if (!_.isFunction(val)) return cb(val);
                    });
                };
                return object;
            };
            _iterators.push(_slapMap);
            return {
                slapMap: _slapMap,
                slapForEach: _slapForEach,
                slapAll: function(object) {
                    _iterators.forEach(function(it) {
                        return it(object);
                    });
                    return object;
                }
            };
        });
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.options.builders").service("uiGmapCommonOptionsBuilder", [ "uiGmapBaseObject", "uiGmapLogger", "uiGmapModelKey", function(BaseObject, $log, ModelKey) {
            return function(superClass) {
                function CommonOptionsBuilder() {
                    this.watchProps = bind(this.watchProps, this);
                    this.buildOpts = bind(this.buildOpts, this);
                    return CommonOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(CommonOptionsBuilder, superClass);
                CommonOptionsBuilder.prototype.props = [ "clickable", "draggable", "editable", "visible", {
                    prop: "stroke",
                    isColl: !0
                } ];
                CommonOptionsBuilder.prototype.getCorrectModel = function(scope) {
                    return angular.isDefined(null != scope ? scope.model : void 0) ? scope.model : scope;
                };
                CommonOptionsBuilder.prototype.buildOpts = function(customOpts, cachedEval, forEachOpts) {
                    var model, opts, stroke;
                    null == customOpts && (customOpts = {});
                    null == forEachOpts && (forEachOpts = {});
                    if (this.scope) {
                        if (this.gMap) {
                            model = this.getCorrectModel(this.scope);
                            stroke = this.scopeOrModelVal("stroke", this.scope, model);
                            opts = angular.extend(customOpts, this.DEFAULTS, {
                                map: this.gMap,
                                strokeColor: null != stroke ? stroke.color : void 0,
                                strokeOpacity: null != stroke ? stroke.opacity : void 0,
                                strokeWeight: null != stroke ? stroke.weight : void 0
                            });
                            angular.forEach(angular.extend(forEachOpts, {
                                clickable: !0,
                                draggable: !1,
                                editable: !1,
                                static: !1,
                                fit: !1,
                                visible: !0,
                                zIndex: 0,
                                icons: []
                            }), function(_this) {
                                return function(defaultValue, key) {
                                    var val;
                                    val = cachedEval ? cachedEval[key] : _this.scopeOrModelVal(key, _this.scope, model);
                                    return angular.isUndefined(val) ? opts[key] = defaultValue : opts[key] = model[key];
                                };
                            }(this));
                            opts.static && (opts.editable = !1);
                            return opts;
                        }
                        $log.error("this.map not defined in CommonOptionsBuilder can not buildOpts");
                    } else $log.error("this.scope not defined in CommonOptionsBuilder can not buildOpts");
                };
                CommonOptionsBuilder.prototype.watchProps = function(props) {
                    null == props && (props = this.props);
                    return props.forEach(function(_this) {
                        return function(prop) {
                            if (null != _this.attrs[prop] || null != _this.attrs[null != prop ? prop.prop : void 0]) return (null != prop ? prop.isColl : void 0) ? _this.scope.$watchCollection(prop.prop, _this.setMyOptions) : _this.scope.$watch(prop, _this.setMyOptions);
                        };
                    }(this));
                };
                return CommonOptionsBuilder;
            }(ModelKey);
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.options.builders").factory("uiGmapPolylineOptionsBuilder", [ "uiGmapCommonOptionsBuilder", function(CommonOptionsBuilder) {
            return function(superClass) {
                function PolylineOptionsBuilder() {
                    return PolylineOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(PolylineOptionsBuilder, superClass);
                PolylineOptionsBuilder.prototype.buildOpts = function(pathPoints, cachedEval) {
                    return PolylineOptionsBuilder.__super__.buildOpts.call(this, {
                        path: pathPoints
                    }, cachedEval, {
                        geodesic: !1
                    });
                };
                return PolylineOptionsBuilder;
            }(CommonOptionsBuilder);
        } ]).factory("uiGmapShapeOptionsBuilder", [ "uiGmapCommonOptionsBuilder", function(CommonOptionsBuilder) {
            return function(superClass) {
                function ShapeOptionsBuilder() {
                    return ShapeOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(ShapeOptionsBuilder, superClass);
                ShapeOptionsBuilder.prototype.buildOpts = function(customOpts, cachedEval, forEachOpts) {
                    var fill, model;
                    model = this.getCorrectModel(this.scope);
                    fill = cachedEval ? cachedEval.fill : this.scopeOrModelVal("fill", this.scope, model);
                    customOpts = angular.extend(customOpts, {
                        fillColor: null != fill ? fill.color : void 0,
                        fillOpacity: null != fill ? fill.opacity : void 0
                    });
                    return ShapeOptionsBuilder.__super__.buildOpts.call(this, customOpts, cachedEval, forEachOpts);
                };
                return ShapeOptionsBuilder;
            }(CommonOptionsBuilder);
        } ]).factory("uiGmapPolygonOptionsBuilder", [ "uiGmapShapeOptionsBuilder", function(ShapeOptionsBuilder) {
            return function(superClass) {
                function PolygonOptionsBuilder() {
                    return PolygonOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(PolygonOptionsBuilder, superClass);
                PolygonOptionsBuilder.prototype.buildOpts = function(pathPoints, cachedEval) {
                    return PolygonOptionsBuilder.__super__.buildOpts.call(this, {
                        path: pathPoints
                    }, cachedEval, {
                        geodesic: !1
                    });
                };
                return PolygonOptionsBuilder;
            }(ShapeOptionsBuilder);
        } ]).factory("uiGmapRectangleOptionsBuilder", [ "uiGmapShapeOptionsBuilder", function(ShapeOptionsBuilder) {
            return function(superClass) {
                function RectangleOptionsBuilder() {
                    return RectangleOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(RectangleOptionsBuilder, superClass);
                RectangleOptionsBuilder.prototype.buildOpts = function(bounds, cachedEval) {
                    return RectangleOptionsBuilder.__super__.buildOpts.call(this, {
                        bounds: bounds
                    }, cachedEval);
                };
                return RectangleOptionsBuilder;
            }(ShapeOptionsBuilder);
        } ]).factory("uiGmapCircleOptionsBuilder", [ "uiGmapShapeOptionsBuilder", function(ShapeOptionsBuilder) {
            return function(superClass) {
                function CircleOptionsBuilder() {
                    return CircleOptionsBuilder.__super__.constructor.apply(this, arguments);
                }
                extend(CircleOptionsBuilder, superClass);
                CircleOptionsBuilder.prototype.buildOpts = function(center, radius, cachedEval) {
                    return CircleOptionsBuilder.__super__.buildOpts.call(this, {
                        center: center,
                        radius: radius
                    }, cachedEval);
                };
                return CircleOptionsBuilder;
            }(ShapeOptionsBuilder);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.options").service("uiGmapMarkerOptions", [ "uiGmapLogger", "uiGmapGmapUtil", function($log, GmapUtil) {
            return _.extend(GmapUtil, {
                createOptions: function(coords, icon, defaults, map) {
                    var opts;
                    null == defaults && (defaults = {});
                    opts = angular.extend({}, defaults, {
                        position: null != defaults.position ? defaults.position : GmapUtil.getCoords(coords),
                        visible: null != defaults.visible ? defaults.visible : GmapUtil.validateCoords(coords)
                    });
                    null == defaults.icon && null == icon || (opts = angular.extend(opts, {
                        icon: null != defaults.icon ? defaults.icon : icon
                    }));
                    null != map && (opts.map = map);
                    return opts;
                },
                isLabel: function(options) {
                    return null != options && (null != options.labelContent || null != options.labelAnchor || null != options.labelClass || null != options.labelStyle || null != options.labelVisible);
                }
            });
        } ]);
    }).call(this);
    /*global _,angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapBasePolyChildModel", [ "uiGmapLogger", "$timeout", "uiGmaparray-sync", "uiGmapGmapUtil", "uiGmapEventsHelper", function($log, $timeout, arraySync, GmapUtil, EventsHelper) {
            return function(Builder, gFactory) {
                return function(superClass) {
                    function BasePolyChildModel(arg) {
                        var create, gObjectChangeCb, ref;
                        this.scope = arg.scope, this.attrs = arg.attrs, this.gMap = arg.gMap, this.defaults = arg.defaults, 
                        this.model = arg.model, gObjectChangeCb = arg.gObjectChangeCb, this.isScopeModel = null != (ref = arg.isScopeModel) && ref;
                        this.clean = bind(this.clean, this);
                        this.isScopeModel && (this.clonedModel = _.clone(this.model, !0));
                        this.isDragging = !1;
                        this.internalEvents = {
                            dragend: function(_this) {
                                return function() {
                                    return _.defer(function() {
                                        return _this.isDragging = !1;
                                    });
                                };
                            }(this),
                            dragstart: function(_this) {
                                return function() {
                                    return _this.isDragging = !0;
                                };
                            }(this)
                        };
                        create = function(_this) {
                            return function() {
                                var maybeCachedEval;
                                if (!_this.isDragging) {
                                    _this.pathPoints = _this.convertPathPoints(_this.scope.path);
                                    null != _this.gObject && _this.clean();
                                    null != _this.scope.model && (maybeCachedEval = _this.scope);
                                    _this.pathPoints.length > 0 && (_this.gObject = gFactory(_this.buildOpts(_this.pathPoints, maybeCachedEval)));
                                    if (_this.gObject) {
                                        arraySync(_this.gObject.getPath(), _this.scope, "path", function(pathPoints) {
                                            _this.pathPoints = pathPoints;
                                            if (null != gObjectChangeCb) return gObjectChangeCb();
                                        });
                                        angular.isDefined(_this.scope.events) && angular.isObject(_this.scope.events) && (_this.listeners = _this.model ? EventsHelper.setEvents(_this.gObject, _this.scope, _this.model) : EventsHelper.setEvents(_this.gObject, _this.scope, _this.scope));
                                        return _this.internalListeners = _this.model ? EventsHelper.setEvents(_this.gObject, {
                                            events: _this.internalEvents
                                        }, _this.model) : EventsHelper.setEvents(_this.gObject, {
                                            events: _this.internalEvents
                                        }, _this.scope);
                                    }
                                }
                            };
                        }(this);
                        create();
                        this.scope.$watch("path", function(_this) {
                            return function(newValue, oldValue) {
                                if (!_.isEqual(newValue, oldValue) || !_this.gObject) return create();
                            };
                        }(this), !0);
                        !this.scope.static && angular.isDefined(this.scope.editable) && this.scope.$watch("editable", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) {
                                    newValue = !_this.isFalse(newValue);
                                    return null != (ref1 = _this.gObject) ? ref1.setEditable(newValue) : void 0;
                                }
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.draggable) && this.scope.$watch("draggable", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) {
                                    newValue = !_this.isFalse(newValue);
                                    return null != (ref1 = _this.gObject) ? ref1.setDraggable(newValue) : void 0;
                                }
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.visible) && this.scope.$watch("visible", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                newValue !== oldValue && (newValue = !_this.isFalse(newValue));
                                return null != (ref1 = _this.gObject) ? ref1.setVisible(newValue) : void 0;
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.geodesic) && this.scope.$watch("geodesic", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) {
                                    newValue = !_this.isFalse(newValue);
                                    return null != (ref1 = _this.gObject) ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
                                }
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.weight) && this.scope.$watch("stroke.weight", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) return null != (ref1 = _this.gObject) ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.color) && this.scope.$watch("stroke.color", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) return null != (ref1 = _this.gObject) ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.stroke) && angular.isDefined(this.scope.stroke.opacity) && this.scope.$watch("stroke.opacity", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) return null != (ref1 = _this.gObject) ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
                            };
                        }(this), !0);
                        angular.isDefined(this.scope.icons) && this.scope.$watch("icons", function(_this) {
                            return function(newValue, oldValue) {
                                var ref1;
                                if (newValue !== oldValue) return null != (ref1 = _this.gObject) ? ref1.setOptions(_this.buildOpts(_this.gObject.getPath())) : void 0;
                            };
                        }(this), !0);
                        this.scope.$on("$destroy", function(_this) {
                            return function() {
                                _this.clean();
                                return _this.scope = null;
                            };
                        }(this));
                        angular.isDefined(this.scope.fill) && angular.isDefined(this.scope.fill.color) && this.scope.$watch("fill.color", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
                            };
                        }(this));
                        angular.isDefined(this.scope.fill) && angular.isDefined(this.scope.fill.opacity) && this.scope.$watch("fill.opacity", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
                            };
                        }(this));
                        angular.isDefined(this.scope.zIndex) && this.scope.$watch("zIndex", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.gObject.setOptions(_this.buildOpts(_this.gObject.getPath()));
                            };
                        }(this));
                    }
                    extend(BasePolyChildModel, superClass);
                    BasePolyChildModel.include(GmapUtil);
                    BasePolyChildModel.prototype.clean = function() {
                        var ref;
                        EventsHelper.removeEvents(this.listeners);
                        EventsHelper.removeEvents(this.internalListeners);
                        null != (ref = this.gObject) && ref.setMap(null);
                        return this.gObject = null;
                    };
                    return BasePolyChildModel;
                }(Builder);
            };
        } ]);
    }).call(this);
    /*
@authors
Nicholas McCready - https://twitter.com/nmccready
Original idea from: http://stackoverflow.com/questions/22758950/google-map-drawing-freehand  , &
  http://jsfiddle.net/YsQdh/88/
 */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api.models.child").factory("uiGmapDrawFreeHandChildModel", [ "uiGmapLogger", "$q", function($log, $q) {
            var drawFreeHand, freeHandMgr;
            drawFreeHand = function(map, polys, done) {
                var move, poly;
                poly = new google.maps.Polyline({
                    map: map,
                    clickable: !1
                });
                move = google.maps.event.addListener(map, "mousemove", function(e) {
                    return poly.getPath().push(e.latLng);
                });
                google.maps.event.addListenerOnce(map, "mouseup", function(e) {
                    var path;
                    google.maps.event.removeListener(move);
                    path = poly.getPath();
                    poly.setMap(null);
                    polys.push(new google.maps.Polygon({
                        map: map,
                        path: path
                    }));
                    poly = null;
                    google.maps.event.clearListeners(map.getDiv(), "mousedown");
                    return done();
                });
            };
            freeHandMgr = function(map1, scope) {
                var disableMap, enableMap;
                this.map = map1;
                disableMap = function(_this) {
                    return function() {
                        var mapOptions;
                        mapOptions = {
                            draggable: !1,
                            disableDefaultUI: !0,
                            scrollwheel: !1,
                            disableDoubleClickZoom: !1
                        };
                        $log.info("disabling map move");
                        return _this.map.setOptions(mapOptions);
                    };
                }(this);
                enableMap = function(_this) {
                    return function() {
                        var mapOptions, ref;
                        mapOptions = {
                            draggable: !0,
                            disableDefaultUI: !1,
                            scrollwheel: !0,
                            disableDoubleClickZoom: !0
                        };
                        null != (ref = _this.deferred) && ref.resolve();
                        return _.defer(function() {
                            return _this.map.setOptions(_.extend(mapOptions, scope.options));
                        });
                    };
                }(this);
                this.engage = function(_this) {
                    return function(polys1) {
                        _this.polys = polys1;
                        _this.deferred = $q.defer();
                        disableMap();
                        $log.info("DrawFreeHandChildModel is engaged (drawing).");
                        google.maps.event.addDomListener(_this.map.getDiv(), "mousedown", function(e) {
                            return drawFreeHand(_this.map, _this.polys, enableMap);
                        });
                        return _this.deferred.promise;
                    };
                }(this);
                return this;
            };
            return freeHandMgr;
        } ]);
    }).call(this);
    /*global _:true,angular:true,google:true, RichMarker:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.child").factory("uiGmapMarkerChildModel", [ "uiGmapModelKey", "uiGmapGmapUtil", "uiGmapLogger", "uiGmapEventsHelper", "uiGmapPropertyAction", "uiGmapMarkerOptions", "uiGmapIMarker", "uiGmapMarkerManager", "uiGmapPromise", function(ModelKey, GmapUtil, $log, EventsHelper, PropertyAction, MarkerOptions, IMarker, MarkerManager, uiGmapPromise) {
            var MarkerChildModel;
            MarkerChildModel = function(superClass) {
                function MarkerChildModel(opts) {
                    this.internalEvents = bind(this.internalEvents, this);
                    this.setLabelOptions = bind(this.setLabelOptions, this);
                    this.setOptions = bind(this.setOptions, this);
                    this.setIcon = bind(this.setIcon, this);
                    this.setCoords = bind(this.setCoords, this);
                    this.isNotValid = bind(this.isNotValid, this);
                    this.maybeSetScopeValue = bind(this.maybeSetScopeValue, this);
                    this.createMarker = bind(this.createMarker, this);
                    this.setMyScope = bind(this.setMyScope, this);
                    this.updateModel = bind(this.updateModel, this);
                    this.handleModelChanges = bind(this.handleModelChanges, this);
                    this.destroy = bind(this.destroy, this);
                    var action, ref, ref1, ref2, ref3, ref4, scope;
                    scope = opts.scope, this.model = opts.model, this.keys = opts.keys, this.gMap = opts.gMap, 
                    this.defaults = null != (ref = opts.defaults) ? ref : {}, this.doClick = opts.doClick, 
                    this.gManager = opts.gManager, this.doDrawSelf = null == (ref1 = opts.doDrawSelf) || ref1, 
                    this.trackModel = null == (ref2 = opts.trackModel) || ref2, this.needRedraw = null != (ref3 = opts.needRedraw) && ref3, 
                    this.isScopeModel = null != (ref4 = opts.isScopeModel) && ref4;
                    this.isScopeModel && (this.clonedModel = _.clone(this.model, !0));
                    this.deferred = uiGmapPromise.defer();
                    _.each(this.keys, function(_this) {
                        return function(v, k) {
                            var keyValue;
                            keyValue = _this.keys[k];
                            if (null != keyValue && !_.isFunction(keyValue) && _.isString(keyValue)) return _this[k + "Key"] = keyValue;
                        };
                    }(this));
                    this.idKey = this.idKeyKey || "id";
                    null != this.model[this.idKey] && (this.id = this.model[this.idKey]);
                    MarkerChildModel.__super__.constructor.call(this, scope);
                    this.scope.getGMarker = function(_this) {
                        return function() {
                            return _this.gObject;
                        };
                    }(this);
                    this.firstTime = !0;
                    if (this.trackModel) {
                        this.scope.model = this.model;
                        this.scope.$watch("model", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.handleModelChanges(newValue, oldValue);
                            };
                        }(this), !0);
                    } else {
                        action = new PropertyAction(function(_this) {
                            return function(calledKey) {
                                _.isFunction(calledKey) && (calledKey = "all");
                                if (!_this.firstTime) return _this.setMyScope(calledKey, scope);
                            };
                        }(this), !1);
                        _.each(this.keys, function(v, k) {
                            return scope.$watch(k, action.sic(k), !0);
                        });
                    }
                    this.scope.$on("$destroy", function(_this) {
                        return function() {
                            return destroy(_this);
                        };
                    }(this));
                    this.createMarker(this.model);
                    $log.info(this);
                }
                var destroy;
                extend(MarkerChildModel, superClass);
                MarkerChildModel.include(GmapUtil);
                MarkerChildModel.include(EventsHelper);
                MarkerChildModel.include(MarkerOptions);
                destroy = function(child) {
                    if (null != (null != child ? child.gObject : void 0)) {
                        child.removeEvents(child.externalListeners);
                        child.removeEvents(child.internalListeners);
                        if (null != child ? child.gObject : void 0) {
                            child.removeFromManager && child.gManager.remove(child.gObject);
                            child.gObject.setMap(null);
                            return child.gObject = null;
                        }
                    }
                };
                MarkerChildModel.prototype.destroy = function(removeFromManager) {
                    null == removeFromManager && (removeFromManager = !0);
                    this.removeFromManager = removeFromManager;
                    return this.scope.$destroy();
                };
                MarkerChildModel.prototype.handleModelChanges = function(newValue, oldValue) {
                    var changes, ctr, len;
                    changes = this.getChanges(newValue, oldValue, IMarker.keys);
                    if (!this.firstTime) {
                        ctr = 0;
                        len = _.keys(changes).length;
                        return _.each(changes, function(_this) {
                            return function(v, k) {
                                var doDraw;
                                ctr += 1;
                                doDraw = len === ctr;
                                _this.setMyScope(k, newValue, oldValue, !1, !0, doDraw);
                                return _this.needRedraw = !0;
                            };
                        }(this));
                    }
                };
                MarkerChildModel.prototype.updateModel = function(model) {
                    this.isScopeModel && (this.clonedModel = _.clone(model, !0));
                    return this.setMyScope("all", model, this.model);
                };
                MarkerChildModel.prototype.renderGMarker = function(doDraw, validCb) {
                    var coords, isSpiderfied, ref;
                    null == doDraw && (doDraw = !0);
                    coords = this.getProp("coords", this.scope, this.model);
                    null != (null != (ref = this.gManager) ? ref.isSpiderfied : void 0) && (isSpiderfied = this.gManager.isSpiderfied());
                    if (null != coords) {
                        if (!this.validateCoords(coords)) {
                            $log.debug("MarkerChild does not have coords yet. They may be defined later.");
                            return;
                        }
                        null != validCb && validCb();
                        doDraw && this.gObject && this.gManager.add(this.gObject);
                        if (isSpiderfied) return this.gManager.markerSpiderfier.spiderListener(this.gObject, window.event);
                    } else if (doDraw && this.gObject) return this.gManager.remove(this.gObject);
                };
                MarkerChildModel.prototype.setMyScope = function(thingThatChanged, model, oldModel, isInit, doDraw) {
                    var justCreated;
                    null == oldModel && (oldModel = void 0);
                    null == isInit && (isInit = !1);
                    null == doDraw && (doDraw = !0);
                    null == model ? model = this.model : this.model = model;
                    if (!this.gObject) {
                        this.setOptions(this.scope, doDraw);
                        justCreated = !0;
                    }
                    switch (thingThatChanged) {
                      case "all":
                        return _.each(this.keys, function(_this) {
                            return function(v, k) {
                                return _this.setMyScope(k, model, oldModel, isInit, doDraw);
                            };
                        }(this));

                      case "icon":
                        return this.maybeSetScopeValue({
                            gSetter: this.setIcon,
                            doDraw: doDraw
                        });

                      case "coords":
                        return this.maybeSetScopeValue({
                            gSetter: this.setCoords,
                            doDraw: doDraw
                        });

                      case "options":
                        if (!justCreated) return this.createMarker(model, oldModel, isInit, doDraw);
                    }
                };
                MarkerChildModel.prototype.createMarker = function(model, oldModel, isInit, doDraw) {
                    null == oldModel && (oldModel = void 0);
                    null == isInit && (isInit = !1);
                    null == doDraw && (doDraw = !0);
                    this.maybeSetScopeValue({
                        gSetter: this.setOptions,
                        doDraw: doDraw
                    });
                    return this.firstTime = !1;
                };
                MarkerChildModel.prototype.maybeSetScopeValue = function(arg) {
                    var doDraw, gSetter, ref;
                    gSetter = arg.gSetter, doDraw = null == (ref = arg.doDraw) || ref;
                    null != gSetter && gSetter(this.scope, doDraw);
                    if (this.doDrawSelf && doDraw) return this.gManager.draw();
                };
                MarkerChildModel.prototype.isNotValid = function(scope, doCheckGmarker) {
                    var hasIdenticalScopes, hasNoGmarker;
                    null == doCheckGmarker && (doCheckGmarker = !0);
                    hasNoGmarker = !!doCheckGmarker && void 0 === this.gObject;
                    hasIdenticalScopes = !this.trackModel && scope.$id !== this.scope.$id;
                    return hasIdenticalScopes || hasNoGmarker;
                };
                MarkerChildModel.prototype.setCoords = function(scope, doDraw) {
                    null == doDraw && (doDraw = !0);
                    if (!this.isNotValid(scope) && null != this.gObject) return this.renderGMarker(doDraw, function(_this) {
                        return function() {
                            var newGValue, newModelVal, oldGValue;
                            newModelVal = _this.getProp("coords", scope, _this.model);
                            newGValue = _this.getCoords(newModelVal);
                            oldGValue = _this.gObject.getPosition();
                            if (null == oldGValue || null == newGValue || newGValue.lng() !== oldGValue.lng() || newGValue.lat() !== oldGValue.lat()) {
                                _this.gObject.setPosition(newGValue);
                                return _this.gObject.setVisible(_this.validateCoords(newModelVal));
                            }
                        };
                    }(this));
                };
                MarkerChildModel.prototype.setIcon = function(scope, doDraw) {
                    null == doDraw && (doDraw = !0);
                    if (!this.isNotValid(scope) && null != this.gObject) return this.renderGMarker(doDraw, function(_this) {
                        return function() {
                            var coords, newValue, oldValue;
                            oldValue = _this.gObject.getIcon();
                            newValue = _this.getProp("icon", scope, _this.model);
                            if (oldValue !== newValue) {
                                _this.gObject.setIcon(newValue);
                                coords = _this.getProp("coords", scope, _this.model);
                                _this.gObject.setPosition(_this.getCoords(coords));
                                return _this.gObject.setVisible(_this.validateCoords(coords));
                            }
                        };
                    }(this));
                };
                MarkerChildModel.prototype.setOptions = function(scope, doDraw) {
                    var ref;
                    null == doDraw && (doDraw = !0);
                    if (!this.isNotValid(scope, !1)) {
                        this.renderGMarker(doDraw, function(_this) {
                            return function() {
                                var _options, coords, icon;
                                coords = _this.getProp("coords", scope, _this.model);
                                icon = _this.getProp("icon", scope, _this.model);
                                _options = _this.getProp("options", scope, _this.model);
                                _this.opts = _this.createOptions(coords, icon, _options);
                                if (_this.isLabel(_this.gObject) !== _this.isLabel(_this.opts) && null != _this.gObject) {
                                    _this.gManager.remove(_this.gObject);
                                    _this.gObject = void 0;
                                }
                                null != _this.gObject && _this.gObject.setOptions(_this.setLabelOptions(_this.opts));
                                if (!_this.gObject) {
                                    if (_this.isLabel(_this.opts)) _this.gObject = new MarkerWithLabel(_this.setLabelOptions(_this.opts)); else if (_this.opts.content) {
                                        _this.gObject = new RichMarker(_this.opts);
                                        _this.gObject.getIcon = _this.gObject.getContent;
                                        _this.gObject.setIcon = _this.gObject.setContent;
                                    } else _this.gObject = new google.maps.Marker(_this.opts);
                                    _.extend(_this.gObject, {
                                        model: _this.model
                                    });
                                }
                                _this.externalListeners && _this.removeEvents(_this.externalListeners);
                                _this.internalListeners && _this.removeEvents(_this.internalListeners);
                                _this.externalListeners = _this.setEvents(_this.gObject, _this.scope, _this.model, [ "dragend" ]);
                                _this.internalListeners = _this.setEvents(_this.gObject, {
                                    events: _this.internalEvents(),
                                    $evalAsync: function() {}
                                }, _this.model);
                                if (null != _this.id) return _this.gObject.key = _this.id;
                            };
                        }(this));
                        if (this.gObject && (this.gObject.getMap() || this.gManager.type !== MarkerManager.type)) this.deferred.resolve(this.gObject); else {
                            if (!this.gObject) return this.deferred.reject("gObject is null");
                            if (null == (ref = this.gObject) || !ref.getMap() || this.gManager.type !== MarkerManager.type) {
                                $log.debug("gObject has no map yet");
                                this.deferred.resolve(this.gObject);
                            }
                        }
                        return this.model[this.fitKey] ? this.gManager.fit() : void 0;
                    }
                };
                MarkerChildModel.prototype.setLabelOptions = function(opts) {
                    opts.labelAnchor && (opts.labelAnchor = this.getLabelPositionPoint(opts.labelAnchor));
                    return opts;
                };
                MarkerChildModel.prototype.internalEvents = function() {
                    return {
                        dragend: function(_this) {
                            return function(marker, eventName, model, mousearg) {
                                var events, modelToSet, newCoords;
                                modelToSet = _this.trackModel ? _this.scope.model : _this.model;
                                newCoords = _this.setCoordsFromEvent(_this.modelOrKey(modelToSet, _this.coordsKey), _this.gObject.getPosition());
                                modelToSet = _this.setVal(model, _this.coordsKey, newCoords);
                                events = _this.scope.events;
                                null != (null != events ? events.dragend : void 0) && events.dragend(marker, eventName, modelToSet, mousearg);
                                return _this.scope.$apply();
                            };
                        }(this),
                        click: function(_this) {
                            return function(marker, eventName, model, mousearg) {
                                var click;
                                click = _this.getProp("click", _this.scope, _this.model);
                                if (_this.doClick && angular.isFunction(click)) return _this.scope.$evalAsync(click(marker, eventName, _this.model, mousearg));
                            };
                        }(this)
                    };
                };
                return MarkerChildModel;
            }(ModelKey);
            return MarkerChildModel;
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolygonChildModel", [ "uiGmapBasePolyChildModel", "uiGmapPolygonOptionsBuilder", function(BaseGen, Builder) {
            var base, gFactory;
            gFactory = function(opts) {
                return new google.maps.Polygon(opts);
            };
            base = new BaseGen(Builder, gFactory);
            return function(superClass) {
                function PolygonChildModel() {
                    return PolygonChildModel.__super__.constructor.apply(this, arguments);
                }
                extend(PolygonChildModel, superClass);
                return PolygonChildModel;
            }(base);
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolylineChildModel", [ "uiGmapBasePolyChildModel", "uiGmapPolylineOptionsBuilder", function(BaseGen, Builder) {
            var base, gFactory;
            gFactory = function(opts) {
                return new google.maps.Polyline(opts);
            };
            base = BaseGen(Builder, gFactory);
            return function(superClass) {
                function PolylineChildModel() {
                    return PolylineChildModel.__super__.constructor.apply(this, arguments);
                }
                extend(PolylineChildModel, superClass);
                return PolylineChildModel;
            }(base);
        } ]);
    }).call(this);
    /*global _:true,angular:true,google:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.child").factory("uiGmapWindowChildModel", [ "uiGmapBaseObject", "uiGmapGmapUtil", "uiGmapLogger", "$compile", "$http", "$templateCache", "uiGmapChromeFixes", "uiGmapEventsHelper", function(BaseObject, GmapUtil, $log, $compile, $http, $templateCache, ChromeFixes, EventsHelper) {
            var WindowChildModel;
            WindowChildModel = function(superClass) {
                function WindowChildModel(opts) {
                    this.updateModel = bind(this.updateModel, this);
                    this.destroy = bind(this.destroy, this);
                    this.remove = bind(this.remove, this);
                    this.getLatestPosition = bind(this.getLatestPosition, this);
                    this.hideWindow = bind(this.hideWindow, this);
                    this.showWindow = bind(this.showWindow, this);
                    this.handleClick = bind(this.handleClick, this);
                    this.watchOptions = bind(this.watchOptions, this);
                    this.watchCoords = bind(this.watchCoords, this);
                    this.createGWin = bind(this.createGWin, this);
                    this.watchElement = bind(this.watchElement, this);
                    this.watchAndDoShow = bind(this.watchAndDoShow, this);
                    this.doShow = bind(this.doShow, this);
                    var maybeMarker, ref, ref1, ref2, ref3;
                    this.model = null != (ref = opts.model) ? ref : {}, this.scope = opts.scope, this.opts = opts.opts, 
                    this.isIconVisibleOnClick = opts.isIconVisibleOnClick, this.gMap = opts.gMap, this.markerScope = opts.markerScope, 
                    this.element = opts.element, this.needToManualDestroy = null != (ref1 = opts.needToManualDestroy) && ref1, 
                    this.markerIsVisibleAfterWindowClose = null == (ref2 = opts.markerIsVisibleAfterWindowClose) || ref2, 
                    this.isScopeModel = null != (ref3 = opts.isScopeModel) && ref3;
                    this.isScopeModel && (this.clonedModel = _.clone(this.model, !0));
                    this.getGmarker = function() {
                        var ref4, ref5;
                        if (null != (null != (ref4 = this.markerScope) ? ref4.getGMarker : void 0)) return null != (ref5 = this.markerScope) ? ref5.getGMarker() : void 0;
                    };
                    this.listeners = [];
                    this.createGWin();
                    maybeMarker = this.getGmarker();
                    null != maybeMarker && maybeMarker.setClickable(!0);
                    this.watchElement();
                    this.watchOptions();
                    this.watchCoords();
                    this.watchAndDoShow();
                    this.scope.$on("$destroy", function(_this) {
                        return function() {
                            return _this.destroy();
                        };
                    }(this));
                    $log.info(this);
                }
                extend(WindowChildModel, superClass);
                WindowChildModel.include(GmapUtil);
                WindowChildModel.include(EventsHelper);
                WindowChildModel.prototype.doShow = function(wasOpen) {
                    return !0 === this.scope.show || wasOpen ? this.showWindow() : this.hideWindow();
                };
                WindowChildModel.prototype.watchAndDoShow = function() {
                    null != this.model.show && (this.scope.show = this.model.show);
                    this.scope.$watch("show", this.doShow, !0);
                    return this.doShow();
                };
                WindowChildModel.prototype.watchElement = function() {
                    return this.scope.$watch(function(_this) {
                        return function() {
                            var ref, wasOpen;
                            if ((_this.element || _this.html) && _this.html !== _this.element.html() && _this.gObject) {
                                null != (ref = _this.opts) && (ref.content = void 0);
                                wasOpen = _this.gObject.isOpen();
                                _this.remove();
                                return _this.createGWin(wasOpen);
                            }
                        };
                    }(this));
                };
                WindowChildModel.prototype.createGWin = function(isOpen) {
                    var _opts, defaults, maybeMarker, ref, ref1;
                    null == isOpen && (isOpen = !1);
                    maybeMarker = this.getGmarker();
                    defaults = {};
                    if (null != this.opts) {
                        this.scope.coords && (this.opts.position = this.getCoords(this.scope.coords));
                        defaults = this.opts;
                    }
                    this.element && (this.html = _.isObject(this.element) ? this.element.html() : this.element);
                    _opts = this.scope.options ? this.scope.options : defaults;
                    this.opts = this.createWindowOptions(maybeMarker, this.markerScope || this.scope, this.html, _opts);
                    if (null != this.opts) {
                        if (!this.gObject) {
                            this.opts.boxClass && window.InfoBox && "function" == typeof window.InfoBox ? this.gObject = new window.InfoBox(this.opts) : this.gObject = new google.maps.InfoWindow(this.opts);
                            this.listeners.push(google.maps.event.addListener(this.gObject, "domready", function() {
                                return ChromeFixes.maybeRepaint(this.content);
                            }));
                            this.listeners.push(google.maps.event.addListener(this.gObject, "closeclick", function(_this) {
                                return function() {
                                    if (maybeMarker) {
                                        maybeMarker.setAnimation(_this.oldMarkerAnimation);
                                        _this.markerIsVisibleAfterWindowClose && _.delay(function() {
                                            maybeMarker.setVisible(!1);
                                            return maybeMarker.setVisible(_this.markerIsVisibleAfterWindowClose);
                                        }, 250);
                                    }
                                    _this.gObject.close();
                                    _this.model.show = !1;
                                    return null != _this.scope.closeClick ? _this.scope.$evalAsync(_this.scope.closeClick()) : _this.scope.$evalAsync();
                                };
                            }(this)));
                        }
                        this.gObject.setContent(this.opts.content);
                        this.handleClick((null != (ref = this.scope) && null != (ref1 = ref.options) ? ref1.forceClick : void 0) || isOpen);
                        return this.doShow(this.gObject.isOpen());
                    }
                };
                WindowChildModel.prototype.watchCoords = function() {
                    var scope;
                    scope = null != this.markerScope ? this.markerScope : this.scope;
                    return scope.$watch("coords", function(_this) {
                        return function(newValue, oldValue) {
                            var pos;
                            if (newValue !== oldValue) {
                                if (null == newValue) _this.hideWindow(); else if (!_this.validateCoords(newValue)) {
                                    $log.error("WindowChildMarker cannot render marker as scope.coords as no position on marker: " + JSON.stringify(_this.model));
                                    return;
                                }
                                pos = _this.getCoords(newValue);
                                _this.doShow();
                                _this.gObject.setPosition(pos);
                                if (_this.opts) return _this.opts.position = pos;
                            }
                        };
                    }(this), !0);
                };
                WindowChildModel.prototype.watchOptions = function() {
                    return this.scope.$watch("options", function(_this) {
                        return function(newValue, oldValue) {
                            if (newValue !== oldValue) {
                                _this.opts = newValue;
                                if (null != _this.gObject) {
                                    _this.gObject.setOptions(_this.opts);
                                    if (null != _this.opts.visible && _this.opts.visible) return _this.showWindow();
                                    if (null != _this.opts.visible) return _this.hideWindow();
                                }
                            }
                        };
                    }(this), !0);
                };
                WindowChildModel.prototype.handleClick = function(forceClick) {
                    var click, maybeMarker;
                    if (null != this.gObject) {
                        maybeMarker = this.getGmarker();
                        click = function(_this) {
                            return function() {
                                null == _this.gObject && _this.createGWin();
                                _this.showWindow();
                                if (null != maybeMarker) {
                                    _this.initialMarkerVisibility = maybeMarker.getVisible();
                                    _this.oldMarkerAnimation = maybeMarker.getAnimation();
                                    return maybeMarker.setVisible(_this.isIconVisibleOnClick);
                                }
                            };
                        }(this);
                        forceClick && click();
                        return maybeMarker ? this.listeners = this.listeners.concat(this.setEvents(maybeMarker, {
                            events: {
                                click: click
                            }
                        }, this.model)) : void 0;
                    }
                };
                WindowChildModel.prototype.showWindow = function() {
                    var compiled, show, templateScope;
                    if (null != this.gObject) {
                        templateScope = null;
                        show = function(_this) {
                            return function() {
                                var isOpen, maybeMarker, pos;
                                if (!_this.gObject.isOpen()) {
                                    maybeMarker = _this.getGmarker();
                                    null != _this.gObject && null != _this.gObject.getPosition && (pos = _this.gObject.getPosition());
                                    maybeMarker && (pos = maybeMarker.getPosition());
                                    if (!pos) return;
                                    _this.gObject.open(_this.gMap, maybeMarker);
                                    isOpen = _this.gObject.isOpen();
                                    if (_this.model.show !== isOpen) return _this.model.show = isOpen;
                                }
                            };
                        }(this);
                        if (this.scope.templateUrl) $http.get(this.scope.templateUrl, {
                            cache: $templateCache
                        }).then(function(_this) {
                            return function(content) {
                                var compiled;
                                templateScope = _this.scope.$new();
                                angular.isDefined(_this.scope.templateParameter) && (templateScope.parameter = _this.scope.templateParameter);
                                compiled = $compile(content.data)(templateScope);
                                _this.gObject.setContent(compiled[0]);
                                return show();
                            };
                        }(this)); else if (this.scope.template) {
                            templateScope = this.scope.$new();
                            angular.isDefined(this.scope.templateParameter) && (templateScope.parameter = this.scope.templateParameter);
                            compiled = $compile(this.scope.template)(templateScope);
                            this.gObject.setContent(compiled[0]);
                            show();
                        } else show();
                        return this.scope.$on("destroy", function() {
                            return templateScope.$destroy();
                        });
                    }
                };
                WindowChildModel.prototype.hideWindow = function() {
                    if (null != this.gObject && this.gObject.isOpen()) return this.gObject.close();
                };
                WindowChildModel.prototype.getLatestPosition = function(overridePos) {
                    var maybeMarker;
                    maybeMarker = this.getGmarker();
                    return null == this.gObject || null == maybeMarker || overridePos ? overridePos ? this.gObject.setPosition(overridePos) : void 0 : this.gObject.setPosition(maybeMarker.getPosition());
                };
                WindowChildModel.prototype.remove = function() {
                    this.hideWindow();
                    this.removeEvents(this.listeners);
                    this.listeners.length = 0;
                    delete this.gObject;
                    return delete this.opts;
                };
                WindowChildModel.prototype.destroy = function(manualOverride) {
                    var ref;
                    null == manualOverride && (manualOverride = !1);
                    this.remove();
                    if (null != this.scope && !(null != (ref = this.scope) ? ref.$$destroyed : void 0) && (this.needToManualDestroy || manualOverride)) return this.scope.$destroy();
                };
                WindowChildModel.prototype.updateModel = function(model) {
                    this.isScopeModel && (this.clonedModel = _.clone(model, !0));
                    return _.extend(this.model, this.clonedModel || model);
                };
                return WindowChildModel;
            }(BaseObject);
            return WindowChildModel;
        } ]);
    }).call(this);
    /*global _, angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapBasePolysParentModel", [ "$timeout", "uiGmapLogger", "uiGmapModelKey", "uiGmapModelsWatcher", "uiGmapPropMap", "uiGmap_async", "uiGmapPromise", "uiGmapFitHelper", function($timeout, $log, ModelKey, ModelsWatcher, PropMap, _async, uiGmapPromise, FitHelper) {
            return function(IPoly, PolyChildModel, gObjectName) {
                return function(superClass) {
                    function BasePolysParentModel(scope, element, attrs, gMap1, defaults) {
                        this.element = element;
                        this.attrs = attrs;
                        this.gMap = gMap1;
                        this.defaults = defaults;
                        this.maybeFit = bind(this.maybeFit, this);
                        this.createChild = bind(this.createChild, this);
                        this.pieceMeal = bind(this.pieceMeal, this);
                        this.createAllNew = bind(this.createAllNew, this);
                        this.watchIdKey = bind(this.watchIdKey, this);
                        this.createChildScopes = bind(this.createChildScopes, this);
                        this.watchDestroy = bind(this.watchDestroy, this);
                        this.onDestroy = bind(this.onDestroy, this);
                        this.rebuildAll = bind(this.rebuildAll, this);
                        this.doINeedToWipe = bind(this.doINeedToWipe, this);
                        this.watchModels = bind(this.watchModels, this);
                        BasePolysParentModel.__super__.constructor.call(this, scope);
                        this.interface = IPoly;
                        this.$log = $log;
                        this.plurals = new PropMap();
                        _.each(IPoly.scopeKeys, function(_this) {
                            return function(name) {
                                return _this[name + "Key"] = void 0;
                            };
                        }(this));
                        this.models = void 0;
                        this.firstTime = !0;
                        this.$log.info(this);
                        this.createChildScopes();
                    }
                    extend(BasePolysParentModel, superClass);
                    BasePolysParentModel.include(ModelsWatcher);
                    BasePolysParentModel.prototype.watchModels = function(scope) {
                        /*
              This was watchCollection but not all model changes were being caught.
              TODO: Make the directive flexible in overriding whether we watch models (and depth) via watch or watchColleciton.
             */
                        return scope.$watch("models", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.doINeedToWipe(newValue) || scope.doRebuildAll ? _this.rebuildAll(scope, !0, !0) : _this.createChildScopes(!1);
                            };
                        }(this), !0);
                    };
                    BasePolysParentModel.prototype.doINeedToWipe = function(newValue) {
                        var newValueIsEmpty;
                        newValueIsEmpty = null == newValue || 0 === newValue.length;
                        return this.plurals.length > 0 && newValueIsEmpty;
                    };
                    BasePolysParentModel.prototype.rebuildAll = function(scope, doCreate, doDelete) {
                        return this.onDestroy(doDelete).then(function(_this) {
                            return function() {
                                if (doCreate) return _this.createChildScopes();
                            };
                        }(this));
                    };
                    BasePolysParentModel.prototype.onDestroy = function() {
                        BasePolysParentModel.__super__.onDestroy.call(this, this.scope);
                        return _async.promiseLock(this, uiGmapPromise.promiseTypes.delete, void 0, void 0, function(_this) {
                            return function() {
                                return _async.each(_this.plurals.values(), function(child) {
                                    return child.destroy(!0);
                                }, _async.chunkSizeFrom(_this.scope.cleanchunk, !1)).then(function() {
                                    var ref;
                                    return null != (ref = _this.plurals) ? ref.removeAll() : void 0;
                                });
                            };
                        }(this));
                    };
                    BasePolysParentModel.prototype.watchDestroy = function(scope) {
                        return scope.$on("$destroy", function(_this) {
                            return function() {
                                return _this.rebuildAll(scope, !1, !0);
                            };
                        }(this));
                    };
                    BasePolysParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
                        null == isCreatingFromScratch && (isCreatingFromScratch = !0);
                        if (angular.isUndefined(this.scope.models)) this.$log.error("No models to create " + gObjectName + "s from! I Need direct models!"); else if (null != this.gMap && null != this.scope.models) {
                            this.watchIdKey(this.scope);
                            return isCreatingFromScratch ? this.createAllNew(this.scope, !1) : this.pieceMeal(this.scope, !1);
                        }
                    };
                    BasePolysParentModel.prototype.watchIdKey = function(scope) {
                        this.setIdKey(scope);
                        return scope.$watch("idKey", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue && null == newValue) {
                                    _this.idKey = newValue;
                                    return _this.rebuildAll(scope, !0, !0);
                                }
                            };
                        }(this));
                    };
                    BasePolysParentModel.prototype.createAllNew = function(scope, isArray) {
                        var maybeCanceled;
                        null == isArray && (isArray = !1);
                        this.models = scope.models;
                        if (this.firstTime) {
                            this.watchModels(scope);
                            this.watchDestroy(scope);
                        }
                        if (!this.didQueueInitPromise(this, scope)) {
                            maybeCanceled = null;
                            return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, "createAllNew", function(canceledMsg) {
                                return maybeCanceled = canceledMsg;
                            }, function(_this) {
                                return function() {
                                    return _async.map(scope.models, function(model) {
                                        var child;
                                        child = _this.createChild(model, _this.gMap);
                                        if (maybeCanceled) {
                                            $log.debug("createNew should fall through safely");
                                            child.isEnabled = !1;
                                        }
                                        return child.pathPoints.getArray();
                                    }, _async.chunkSizeFrom(scope.chunk)).then(function(pathPoints) {
                                        _this.maybeFit(pathPoints);
                                        return _this.firstTime = !1;
                                    });
                                };
                            }(this));
                        }
                    };
                    BasePolysParentModel.prototype.pieceMeal = function(scope, isArray) {
                        var maybeCanceled, payload;
                        null == isArray && (isArray = !0);
                        if (!scope.$$destroyed) {
                            maybeCanceled = null;
                            payload = null;
                            this.models = scope.models;
                            if (null != scope && this.modelsLength() && this.plurals.length) return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, "pieceMeal", function(canceledMsg) {
                                return maybeCanceled = canceledMsg;
                            }, function(_this) {
                                return function() {
                                    return uiGmapPromise.promise(function() {
                                        return _this.figureOutState(_this.idKey, scope, _this.plurals, _this.modelKeyComparison);
                                    }).then(function(state) {
                                        payload = state;
                                        payload.updates.length && _async.each(payload.updates, function(obj) {
                                            _.extend(obj.child.scope, obj.model);
                                            return obj.child.model = obj.model;
                                        });
                                        return _async.each(payload.removals, function(child) {
                                            if (null != child) {
                                                child.destroy();
                                                _this.plurals.remove(child.model[_this.idKey]);
                                                return maybeCanceled;
                                            }
                                        }, _async.chunkSizeFrom(scope.chunk));
                                    }).then(function() {
                                        return _async.each(payload.adds, function(modelToAdd) {
                                            maybeCanceled && $log.debug("pieceMeal should fall through safely");
                                            _this.createChild(modelToAdd, _this.gMap);
                                            return maybeCanceled;
                                        }, _async.chunkSizeFrom(scope.chunk)).then(function() {
                                            return _this.maybeFit();
                                        });
                                    });
                                };
                            }(this));
                            this.inProgress = !1;
                            return this.rebuildAll(this.scope, !0, !0);
                        }
                    };
                    BasePolysParentModel.prototype.createChild = function(model, gMap) {
                        var child, childScope;
                        childScope = this.scope.$new(!1);
                        this.setChildScope(IPoly.scopeKeys, childScope, model);
                        childScope.$watch("model", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) return _this.setChildScope(IPoly.scopeKeys, childScope, newValue);
                            };
                        }(this), !0);
                        childScope.static = this.scope.static;
                        child = new PolyChildModel({
                            isScopeModel: !0,
                            scope: childScope,
                            attrs: this.attrs,
                            gMap: gMap,
                            defaults: this.defaults,
                            model: model,
                            gObjectChangeCb: function(_this) {
                                return function() {
                                    return _this.maybeFit();
                                };
                            }(this)
                        });
                        if (null != model[this.idKey]) {
                            this.plurals.put(model[this.idKey], child);
                            return child;
                        }
                        this.$log.error(gObjectName + " model has no id to assign a child to.\nThis is required for performance. Please assign id,\nor redirect id to a different key.");
                    };
                    BasePolysParentModel.prototype.maybeFit = function(pathPoints) {
                        null == pathPoints && (pathPoints = this.plurals.map(function(p) {
                            return p.pathPoints;
                        }));
                        if (this.scope.fit) {
                            pathPoints = _.flatten(pathPoints);
                            return FitHelper.fit(pathPoints, this.gMap);
                        }
                    };
                    return BasePolysParentModel;
                }(ModelKey);
            };
        } ]);
    }).call(this);
    /*globals angular, _, google */
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapCircleParentModel", [ "uiGmapLogger", "$timeout", "uiGmapGmapUtil", "uiGmapEventsHelper", "uiGmapCircleOptionsBuilder", function($log, $timeout, GmapUtil, EventsHelper, Builder) {
            var _settingFromDirective;
            _settingFromDirective = function(scope, fn) {
                scope.settingFromDirective = !0;
                fn();
                return $timeout(function() {
                    return scope.settingFromDirective = !1;
                });
            };
            return function(superClass) {
                function CircleParentModel(scope, element, attrs, gMap, DEFAULTS) {
                    var clean, gObject, lastRadius;
                    this.attrs = attrs;
                    this.gMap = gMap;
                    this.DEFAULTS = DEFAULTS;
                    this.scope = scope;
                    lastRadius = null;
                    clean = function(_this) {
                        return function() {
                            lastRadius = null;
                            if (null != _this.listeners) {
                                _this.removeEvents(_this.listeners);
                                return _this.listeners = void 0;
                            }
                        };
                    }(this);
                    gObject = new google.maps.Circle(this.buildOpts(GmapUtil.getCoords(scope.center), scope.radius));
                    this.setMyOptions = function(_this) {
                        return function(newVals, oldVals) {
                            if (!scope.settingFromDirective) return !_.isEqual(newVals, oldVals) || newVals !== oldVals || null != newVals && null != oldVals && newVals.coordinates !== oldVals.coordinates ? gObject.setOptions(_this.buildOpts(GmapUtil.getCoords(scope.center), scope.radius)) : void 0;
                        };
                    }(this);
                    this.props = this.props.concat([ {
                        prop: "center",
                        isColl: !0
                    }, {
                        prop: "fill",
                        isColl: !0
                    }, "radius", "zIndex" ]);
                    this.watchProps();
                    null != this.scope.control && (this.scope.control.getCircle = function() {
                        return gObject;
                    });
                    clean();
                    this.listeners = this.setEvents(gObject, scope, scope, [ "radius_changed" ]) || [];
                    this.listeners.push(google.maps.event.addListener(gObject, "radius_changed", function() {
                        /*
              possible google bug, and or because a circle has two radii
              radius_changed appears to fire twice (original and new) which is not too helpful
              therefore we will check for radius changes manually and bail out if nothing has changed
             */
                        var newRadius, work;
                        newRadius = gObject.getRadius();
                        if (newRadius !== lastRadius) {
                            lastRadius = newRadius;
                            work = function() {
                                return _settingFromDirective(scope, function() {
                                    var ref, ref1;
                                    newRadius !== scope.radius && (scope.radius = newRadius);
                                    if ((null != (ref = scope.events) ? ref.radius_changed : void 0) && _.isFunction(null != (ref1 = scope.events) ? ref1.radius_changed : void 0)) return scope.events.radius_changed(gObject, "radius_changed", scope, arguments);
                                });
                            };
                            return angular.mock ? work() : scope.$evalAsync(function() {
                                return work();
                            });
                        }
                    }));
                    this.listeners.push(google.maps.event.addListener(gObject, "center_changed", function() {
                        return scope.$evalAsync(function() {
                            return _settingFromDirective(scope, function() {
                                if (angular.isDefined(scope.center.type)) {
                                    scope.center.coordinates[1] = gObject.getCenter().lat();
                                    return scope.center.coordinates[0] = gObject.getCenter().lng();
                                }
                                scope.center.latitude = gObject.getCenter().lat();
                                return scope.center.longitude = gObject.getCenter().lng();
                            });
                        });
                    }));
                    scope.$on("$destroy", function() {
                        clean();
                        return gObject.setMap(null);
                    });
                    $log.info(this);
                }
                extend(CircleParentModel, superClass);
                CircleParentModel.include(GmapUtil);
                CircleParentModel.include(EventsHelper);
                return CircleParentModel;
            }(Builder);
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapDrawingManagerParentModel", [ "uiGmapLogger", "$timeout", "uiGmapBaseObject", "uiGmapEventsHelper", function($log, $timeout, BaseObject, EventsHelper) {
            return function(superClass) {
                function DrawingManagerParentModel(scope, element, attrs, map) {
                    var gObject, listeners;
                    this.scope = scope;
                    this.attrs = attrs;
                    this.map = map;
                    gObject = new google.maps.drawing.DrawingManager(this.scope.options);
                    gObject.setMap(this.map);
                    listeners = void 0;
                    null != this.scope.control && (this.scope.control.getDrawingManager = function() {
                        return gObject;
                    });
                    !this.scope.static && this.scope.options && this.scope.$watch("options", function(newValue) {
                        return null != gObject ? gObject.setOptions(newValue) : void 0;
                    }, !0);
                    if (null != this.scope.events) {
                        listeners = this.setEvents(gObject, this.scope, this.scope);
                        this.scope.$watch("events", function(_this) {
                            return function(newValue, oldValue) {
                                if (!_.isEqual(newValue, oldValue)) {
                                    null != listeners && _this.removeEvents(listeners);
                                    return listeners = _this.setEvents(gObject, _this.scope, _this.scope);
                                }
                            };
                        }(this));
                    }
                    this.scope.$on("$destroy", function(_this) {
                        return function() {
                            null != listeners && _this.removeEvents(listeners);
                            gObject.setMap(null);
                            return gObject = null;
                        };
                    }(this));
                }
                extend(DrawingManagerParentModel, superClass);
                DrawingManagerParentModel.include(EventsHelper);
                return DrawingManagerParentModel;
            }(BaseObject);
        } ]);
    }).call(this);
    /*
	- interface for all markers to derrive from
 	- to enforce a minimum set of requirements
 		- attributes
 			- coords
 			- icon
		- implementation needed on watches
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapIMarkerParentModel", [ "uiGmapModelKey", "uiGmapLogger", function(ModelKey, Logger) {
            var IMarkerParentModel;
            IMarkerParentModel = function(superClass) {
                function IMarkerParentModel(scope1, element, attrs, map) {
                    this.scope = scope1;
                    this.element = element;
                    this.attrs = attrs;
                    this.map = map;
                    this.onWatch = bind(this.onWatch, this);
                    this.watch = bind(this.watch, this);
                    this.validateScope = bind(this.validateScope, this);
                    IMarkerParentModel.__super__.constructor.call(this, this.scope);
                    this.$log = Logger;
                    if (!this.validateScope(this.scope)) throw new String("Unable to construct IMarkerParentModel due to invalid scope");
                    this.doClick = angular.isDefined(this.attrs.click);
                    null != this.scope.options && (this.DEFAULTS = this.scope.options);
                    this.watch("coords", this.scope);
                    this.watch("icon", this.scope);
                    this.watch("options", this.scope);
                    this.scope.$on("$destroy", function(_this) {
                        return function() {
                            return _this.onDestroy(_this.scope);
                        };
                    }(this));
                }
                extend(IMarkerParentModel, superClass);
                IMarkerParentModel.prototype.DEFAULTS = {};
                IMarkerParentModel.prototype.validateScope = function(scope) {
                    var ret;
                    if (null == scope) {
                        this.$log.error(this.constructor.name + ": invalid scope used");
                        return !1;
                    }
                    ret = null != scope.coords;
                    if (!ret) {
                        this.$log.error(this.constructor.name + ": no valid coords attribute found");
                        return !1;
                    }
                    return ret;
                };
                IMarkerParentModel.prototype.watch = function(propNameToWatch, scope, equalityCheck) {
                    null == equalityCheck && (equalityCheck = !0);
                    return scope.$watch(propNameToWatch, function(_this) {
                        return function(newValue, oldValue) {
                            if (!_.isEqual(newValue, oldValue)) return _this.onWatch(propNameToWatch, scope, newValue, oldValue);
                        };
                    }(this), equalityCheck);
                };
                IMarkerParentModel.prototype.onWatch = function(propNameToWatch, scope, newValue, oldValue) {};
                return IMarkerParentModel;
            }(ModelKey);
            return IMarkerParentModel;
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapIWindowParentModel", [ "uiGmapModelKey", "uiGmapGmapUtil", "uiGmapLogger", function(ModelKey, GmapUtil, Logger) {
            return function(superClass) {
                function IWindowParentModel(scope, element, attrs, ctrls, $timeout, $compile, $http, $templateCache) {
                    IWindowParentModel.__super__.constructor.call(this, scope);
                    this.$log = Logger;
                    this.$timeout = $timeout;
                    this.$compile = $compile;
                    this.$http = $http;
                    this.$templateCache = $templateCache;
                    this.DEFAULTS = {};
                    null != scope.options && (this.DEFAULTS = scope.options);
                }
                extend(IWindowParentModel, superClass);
                IWindowParentModel.include(GmapUtil);
                IWindowParentModel.prototype.getItem = function(scope, modelsPropToIterate, index) {
                    return "models" === modelsPropToIterate ? scope[modelsPropToIterate][index] : scope[modelsPropToIterate].get(index);
                };
                return IWindowParentModel;
            }(ModelKey);
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapLayerParentModel", [ "uiGmapBaseObject", "uiGmapLogger", "$timeout", function(BaseObject, Logger, $timeout) {
            var LayerParentModel;
            LayerParentModel = function(superClass) {
                function LayerParentModel(scope, element, attrs, gMap, onLayerCreated, $log) {
                    this.scope = scope;
                    this.element = element;
                    this.attrs = attrs;
                    this.gMap = gMap;
                    this.onLayerCreated = null != onLayerCreated ? onLayerCreated : void 0;
                    this.$log = null != $log ? $log : Logger;
                    this.createGoogleLayer = bind(this.createGoogleLayer, this);
                    if (null != this.attrs.type) {
                        this.createGoogleLayer();
                        this.doShow = !0;
                        angular.isDefined(this.attrs.show) && (this.doShow = this.scope.show);
                        this.doShow && null != this.gMap && this.gObject.setMap(this.gMap);
                        this.scope.$watch("show", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) {
                                    _this.doShow = newValue;
                                    return newValue ? _this.gObject.setMap(_this.gMap) : _this.gObject.setMap(null);
                                }
                            };
                        }(this), !0);
                        this.scope.$watch("options", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue && _this.doShow) return _this.gObject.setOptions(newValue);
                            };
                        }(this), !0);
                        this.scope.$on("$destroy", function(_this) {
                            return function() {
                                return _this.gObject.setMap(null);
                            };
                        }(this));
                    } else this.$log.info("type attribute for the layer directive is mandatory. Layer creation aborted!!");
                }
                extend(LayerParentModel, superClass);
                LayerParentModel.prototype.createGoogleLayer = function() {
                    var base;
                    null == this.attrs.options ? this.gObject = void 0 === this.attrs.namespace ? new google.maps[this.attrs.type]() : new google.maps[this.attrs.namespace][this.attrs.type]() : this.gObject = void 0 === this.attrs.namespace ? new google.maps[this.attrs.type](this.scope.options) : new google.maps[this.attrs.namespace][this.attrs.type](this.scope.options);
                    null != this.gObject && this.doShow && this.gObject.setMap(this.gMap);
                    if (null != this.gObject && null != this.onLayerCreated) return "function" == typeof (base = this.onLayerCreated(this.scope, this.gObject)) ? base(this.gObject) : void 0;
                };
                return LayerParentModel;
            }(BaseObject);
            return LayerParentModel;
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapMapTypeParentModel", [ "uiGmapBaseObject", "uiGmapLogger", function(BaseObject, Logger) {
            var MapTypeParentModel;
            MapTypeParentModel = function(superClass) {
                function MapTypeParentModel(scope, element, attrs, gMap, $log) {
                    this.scope = scope;
                    this.element = element;
                    this.attrs = attrs;
                    this.gMap = gMap;
                    this.$log = null != $log ? $log : Logger;
                    this.hideOverlay = bind(this.hideOverlay, this);
                    this.showOverlay = bind(this.showOverlay, this);
                    this.refreshMapType = bind(this.refreshMapType, this);
                    this.createMapType = bind(this.createMapType, this);
                    if (null != this.attrs.options) {
                        this.id = this.gMap.overlayMapTypesCount = this.gMap.overlayMapTypesCount + 1 || 0;
                        this.doShow = !0;
                        this.createMapType();
                        angular.isDefined(this.attrs.show) && (this.doShow = this.scope.show);
                        this.doShow && null != this.gMap && this.showOverlay();
                        this.scope.$watch("show", function(_this) {
                            return function(newValue, oldValue) {
                                if (newValue !== oldValue) {
                                    _this.doShow = newValue;
                                    return newValue ? _this.showOverlay() : _this.hideOverlay();
                                }
                            };
                        }(this), !0);
                        this.scope.$watchCollection("options", function(_this) {
                            return function(newValue, oldValue) {
                                var different, mapTypeProps;
                                if (!_.isEqual(newValue, oldValue)) {
                                    mapTypeProps = [ "tileSize", "maxZoom", "minZoom", "name", "alt" ];
                                    different = _.some(mapTypeProps, function(prop) {
                                        return !oldValue || !newValue || !_.isEqual(newValue[prop], oldValue[prop]);
                                    });
                                    if (different) return _this.refreshMapType();
                                }
                            };
                        }(this));
                        angular.isDefined(this.attrs.refresh) && this.scope.$watch("refresh", function(_this) {
                            return function(newValue, oldValue) {
                                if (!_.isEqual(newValue, oldValue)) return _this.refreshMapType();
                            };
                        }(this), !0);
                        this.scope.$on("$destroy", function(_this) {
                            return function() {
                                _this.hideOverlay();
                                return _this.mapType = null;
                            };
                        }(this));
                    } else this.$log.info("options attribute for the map-type directive is mandatory. Map type creation aborted!!");
                }
                extend(MapTypeParentModel, superClass);
                MapTypeParentModel.prototype.createMapType = function() {
                    if (null != this.scope.options.getTile) this.mapType = this.scope.options; else {
                        if (null == this.scope.options.getTileUrl) {
                            this.$log.info("options should provide either getTile or getTileUrl methods. Map type creation aborted!!");
                            return;
                        }
                        this.mapType = new google.maps.ImageMapType(this.scope.options);
                    }
                    if (this.attrs.id && this.scope.id) {
                        this.gMap.mapTypes.set(this.scope.id, this.mapType);
                        angular.isDefined(this.attrs.show) || (this.doShow = !1);
                    }
                    return this.mapType.layerId = this.id;
                };
                MapTypeParentModel.prototype.refreshMapType = function() {
                    this.hideOverlay();
                    this.mapType = null;
                    this.createMapType();
                    if (this.doShow && null != this.gMap) return this.showOverlay();
                };
                MapTypeParentModel.prototype.showOverlay = function() {
                    return this.gMap.overlayMapTypes.push(this.mapType);
                };
                MapTypeParentModel.prototype.hideOverlay = function() {
                    var found;
                    found = !1;
                    return this.gMap.overlayMapTypes.forEach(function(_this) {
                        return function(mapType, index) {
                            if (!found && mapType.layerId === _this.id) {
                                found = !0;
                                _this.gMap.overlayMapTypes.removeAt(index);
                            }
                        };
                    }(this));
                };
                return MapTypeParentModel;
            }(BaseObject);
            return MapTypeParentModel;
        } ]);
    }).call(this);
    /*global _:true,angular:true, */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapMarkersParentModel", [ "uiGmapIMarkerParentModel", "uiGmapModelsWatcher", "uiGmapPropMap", "uiGmapMarkerChildModel", "uiGmap_async", "uiGmapClustererMarkerManager", "uiGmapMarkerManager", "$timeout", "uiGmapIMarker", "uiGmapPromise", "uiGmapGmapUtil", "uiGmapLogger", "uiGmapSpiderfierMarkerManager", function(IMarkerParentModel, ModelsWatcher, PropMap, MarkerChildModel, _async, ClustererMarkerManager, MarkerManager, $timeout, IMarker, uiGmapPromise, GmapUtil, $log, SpiderfierMarkerManager) {
            var MarkersParentModel, _setPlurals;
            _setPlurals = function(val, objToSet) {
                objToSet.plurals = new PropMap();
                objToSet.scope.plurals = objToSet.plurals;
                return objToSet;
            };
            MarkersParentModel = function(superClass) {
                function MarkersParentModel(scope, element, attrs, map) {
                    this.maybeExecMappedEvent = bind(this.maybeExecMappedEvent, this);
                    this.onDestroy = bind(this.onDestroy, this);
                    this.newChildMarker = bind(this.newChildMarker, this);
                    this.pieceMeal = bind(this.pieceMeal, this);
                    this.rebuildAll = bind(this.rebuildAll, this);
                    this.createAllNew = bind(this.createAllNew, this);
                    this.bindToTypeEvents = bind(this.bindToTypeEvents, this);
                    this.createChildScopes = bind(this.createChildScopes, this);
                    this.validateScope = bind(this.validateScope, this);
                    this.onWatch = bind(this.onWatch, this);
                    MarkersParentModel.__super__.constructor.call(this, scope, element, attrs, map);
                    this.interface = IMarker;
                    _setPlurals(new PropMap(), this);
                    this.scope.pluralsUpdate = {
                        updateCtr: 0
                    };
                    this.$log.info(this);
                    this.doRebuildAll = null != this.scope.doRebuildAll && this.scope.doRebuildAll;
                    this.setIdKey(this.scope);
                    this.scope.$watch("doRebuildAll", function(_this) {
                        return function(newValue, oldValue) {
                            if (newValue !== oldValue) return _this.doRebuildAll = newValue;
                        };
                    }(this));
                    this.modelsLength() || (this.modelsRendered = !1);
                    this.scope.$watch("models", function(_this) {
                        return function(newValue, oldValue) {
                            if (!_.isEqual(newValue, oldValue) || !_this.modelsRendered) {
                                if (0 === newValue.length && 0 === oldValue.length) return;
                                _this.modelsRendered = !0;
                                return _this.onWatch("models", _this.scope, newValue, oldValue);
                            }
                        };
                    }(this), !this.isTrue(attrs.modelsbyref));
                    this.watch("doCluster", this.scope);
                    this.watch("type", this.scope);
                    this.watch("clusterOptions", this.scope);
                    this.watch("clusterEvents", this.scope);
                    this.watch("typeOptions", this.scope);
                    this.watch("typeEvents", this.scope);
                    this.watch("fit", this.scope);
                    this.watch("idKey", this.scope);
                    this.gManager = void 0;
                    this.createAllNew(this.scope);
                }
                extend(MarkersParentModel, superClass);
                MarkersParentModel.include(GmapUtil);
                MarkersParentModel.include(ModelsWatcher);
                MarkersParentModel.prototype.onWatch = function(propNameToWatch, scope, newValue, oldValue) {
                    "idKey" === propNameToWatch && newValue !== oldValue && (this.idKey = newValue);
                    return this.doRebuildAll || "doCluster" === propNameToWatch || "type" === propNameToWatch ? this.rebuildAll(scope) : this.pieceMeal(scope);
                };
                MarkersParentModel.prototype.validateScope = function(scope) {
                    var modelsNotDefined;
                    modelsNotDefined = angular.isUndefined(scope.models) || void 0 === scope.models;
                    modelsNotDefined && this.$log.error(this.constructor.name + ": no valid models attribute found");
                    return MarkersParentModel.__super__.validateScope.call(this, scope) || modelsNotDefined;
                };
                /*
        Not used internally by this parent
        created for consistency for external control in the API
         */
                MarkersParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
                    if (null != this.gMap && null != this.scope.models) return isCreatingFromScratch ? this.createAllNew(this.scope, !1) : this.pieceMeal(this.scope, !1);
                };
                MarkersParentModel.prototype.bindToTypeEvents = function(typeEvents, events) {
                    var internalHandles, self;
                    null == events && (events = [ "click", "mouseout", "mouseover" ]);
                    /*
            You should only be binding to events that produce groups/clusters of somthing.
            Otherwise use the orginal event handle.
            For Example: Click on a cluster pushes a cluster/group obj through which has getMarkers
            However Spiderfy's click is for a single marker so this is not ideal for that.
           */
                    self = this;
                    if (this.origTypeEvents) angular.extend(typeEvents, this.origTypeEvents); else {
                        this.origTypeEvents = {};
                        _.each(events, function(_this) {
                            return function(eventName) {
                                return _this.origTypeEvents[eventName] = null != typeEvents ? typeEvents[eventName] : void 0;
                            };
                        }(this));
                    }
                    internalHandles = {};
                    _.each(events, function(eventName) {
                        return internalHandles[eventName] = function(group) {
                            return self.maybeExecMappedEvent(group, eventName);
                        };
                    });
                    return angular.extend(typeEvents, internalHandles);
                };
                MarkersParentModel.prototype.createAllNew = function(scope) {
                    var isSpiderfied, maybeCanceled, typeEvents, typeOptions;
                    if (null != this.gManager) {
                        this.gManager instanceof SpiderfierMarkerManager && (isSpiderfied = this.gManager.isSpiderfied());
                        this.gManager.clear();
                        delete this.gManager;
                    }
                    typeEvents = scope.typeEvents || scope.clusterEvents;
                    typeOptions = scope.typeOptions || scope.clusterOptions;
                    if (scope.doCluster || "cluster" === scope.type) {
                        null != typeEvents && this.bindToTypeEvents(typeEvents);
                        this.gManager = new ClustererMarkerManager(this.map, void 0, typeOptions, typeEvents);
                    } else if ("spider" === scope.type) {
                        null != typeEvents && this.bindToTypeEvents(typeEvents, [ "spiderfy", "unspiderfy" ]);
                        this.gManager = new SpiderfierMarkerManager(this.map, void 0, typeOptions, typeEvents, this.scope);
                        isSpiderfied && this.gManager.spiderfy();
                    } else this.gManager = new MarkerManager(this.map);
                    if (!this.didQueueInitPromise(this, scope)) {
                        maybeCanceled = null;
                        return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, "createAllNew", function(canceledMsg) {
                            return maybeCanceled = canceledMsg;
                        }, function(_this) {
                            return function() {
                                return _async.each(scope.models, function(model) {
                                    _this.newChildMarker(model, scope);
                                    return maybeCanceled;
                                }, _async.chunkSizeFrom(scope.chunk)).then(function() {
                                    _this.modelsRendered = !0;
                                    scope.fit && _this.gManager.fit();
                                    _this.gManager.draw();
                                    return _this.scope.pluralsUpdate.updateCtr += 1;
                                }, _async.chunkSizeFrom(scope.chunk));
                            };
                        }(this));
                    }
                };
                MarkersParentModel.prototype.rebuildAll = function(scope) {
                    var ref;
                    if (scope.doRebuild || void 0 === scope.doRebuild) return (null != (ref = this.scope.plurals) ? ref.length : void 0) ? this.onDestroy(scope).then(function(_this) {
                        return function() {
                            return _this.createAllNew(scope);
                        };
                    }(this)) : this.createAllNew(scope);
                };
                MarkersParentModel.prototype.pieceMeal = function(scope) {
                    var maybeCanceled, payload;
                    if (!scope.$$destroyed) {
                        maybeCanceled = null;
                        payload = null;
                        if (this.modelsLength() && this.scope.plurals.length) return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, "pieceMeal", function(canceledMsg) {
                            return maybeCanceled = canceledMsg;
                        }, function(_this) {
                            return function() {
                                return uiGmapPromise.promise(function() {
                                    return _this.figureOutState(_this.idKey, scope, _this.scope.plurals, _this.modelKeyComparison);
                                }).then(function(state) {
                                    payload = state;
                                    return _async.each(payload.removals, function(child) {
                                        if (null != child) {
                                            null != child.destroy && child.destroy();
                                            _this.scope.plurals.remove(child.id);
                                            return maybeCanceled;
                                        }
                                    }, _async.chunkSizeFrom(scope.chunk));
                                }).then(function() {
                                    return _async.each(payload.adds, function(modelToAdd) {
                                        _this.newChildMarker(modelToAdd, scope);
                                        return maybeCanceled;
                                    }, _async.chunkSizeFrom(scope.chunk));
                                }).then(function() {
                                    return _async.each(payload.updates, function(update) {
                                        _this.updateChild(update.child, update.model);
                                        return maybeCanceled;
                                    }, _async.chunkSizeFrom(scope.chunk));
                                }).then(function() {
                                    if (payload.adds.length > 0 || payload.removals.length > 0 || payload.updates.length > 0) {
                                        scope.plurals = _this.scope.plurals;
                                        scope.fit && _this.gManager.fit();
                                        _this.gManager.draw();
                                    }
                                    return _this.scope.pluralsUpdate.updateCtr += 1;
                                });
                            };
                        }(this));
                        this.inProgress = !1;
                        return this.rebuildAll(scope);
                    }
                };
                MarkersParentModel.prototype.newChildMarker = function(model, scope) {
                    var child, childScope, keys;
                    if (!model) throw "model undefined";
                    if (null != model[this.idKey]) {
                        this.$log.info("child", child, "markers", this.scope.markerModels);
                        childScope = scope.$new(!1);
                        childScope.events = scope.events;
                        keys = {};
                        IMarker.scopeKeys.forEach(function(k) {
                            return keys[k] = scope[k];
                        });
                        child = new MarkerChildModel({
                            scope: childScope,
                            model: model,
                            keys: keys,
                            gMap: this.map,
                            defaults: this.DEFAULTS,
                            doClick: this.doClick,
                            gManager: this.gManager,
                            doDrawSelf: !1,
                            isScopeModel: !0
                        });
                        this.scope.plurals.put(model[this.idKey], child);
                        return child;
                    }
                    this.$log.error("Marker model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.");
                };
                MarkersParentModel.prototype.onDestroy = function(scope) {
                    MarkersParentModel.__super__.onDestroy.call(this, scope);
                    return _async.promiseLock(this, uiGmapPromise.promiseTypes.delete, void 0, void 0, function(_this) {
                        return function() {
                            return _async.each(_this.scope.plurals.values(), function(model) {
                                if (null != model) return model.destroy(!1);
                            }, _async.chunkSizeFrom(_this.scope.cleanchunk, !1)).then(function() {
                                null != _this.gManager && _this.gManager.destroy();
                                _this.plurals.removeAll();
                                _this.plurals !== _this.scope.plurals && console.error("plurals out of sync for MarkersParentModel");
                                return _this.scope.pluralsUpdate.updateCtr += 1;
                            });
                        };
                    }(this));
                };
                MarkersParentModel.prototype.maybeExecMappedEvent = function(group, fnName) {
                    var pair, typeEvents;
                    if (!this.scope.$$destroyed) {
                        typeEvents = this.scope.typeEvents || this.scope.clusterEvents;
                        if (_.isFunction(null != typeEvents ? typeEvents[fnName] : void 0)) {
                            pair = this.mapTypeToPlurals(group);
                            if (this.origTypeEvents[fnName]) return this.origTypeEvents[fnName](pair.group, pair.mapped);
                        }
                    }
                };
                MarkersParentModel.prototype.mapTypeToPlurals = function(group) {
                    var arrayToMap, mapped, ref;
                    _.isArray(group) ? arrayToMap = group : _.isFunction(group.getMarkers) && (arrayToMap = group.getMarkers());
                    if (null != arrayToMap) {
                        mapped = (null != (ref = this.scope.plurals.values()) ? ref.length : void 0) ? arrayToMap.map(function(_this) {
                            return function(g) {
                                return _this.scope.plurals.get(g.key).model;
                            };
                        }(this)) : [];
                        return {
                            cluster: group,
                            mapped: mapped,
                            group: group
                        };
                    }
                    $log.error("Unable to map event as we cannot find the array group to map");
                };
                MarkersParentModel.prototype.getItem = function(scope, modelsPropToIterate, index) {
                    return "models" === modelsPropToIterate ? scope[modelsPropToIterate][index] : scope[modelsPropToIterate].get(index);
                };
                return MarkersParentModel;
            }(IMarkerParentModel);
            return MarkersParentModel;
        } ]);
    }).call(this);
    (function() {
        [ "Polygon", "Polyline" ].forEach(function(name) {
            return angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmap" + name + "sParentModel", [ "uiGmapBasePolysParentModel", "uiGmap" + name + "ChildModel", "uiGmapI" + name, function(BasePolysParentModel, ChildModel, IPoly) {
                return BasePolysParentModel(IPoly, ChildModel, name);
            } ]);
        });
    }).call(this);
    /*globals angular, _, google */
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapRectangleParentModel", [ "uiGmapLogger", "uiGmapGmapUtil", "uiGmapEventsHelper", "uiGmapRectangleOptionsBuilder", function($log, GmapUtil, EventsHelper, Builder) {
            return function(superClass) {
                function RectangleParentModel(scope, element, attrs, gMap, DEFAULTS) {
                    var bounds, clear, createBounds, dragging, fit, gObject, init, listeners, myListeners, settingBoundsFromScope, updateBounds;
                    this.scope = scope;
                    this.attrs = attrs;
                    this.gMap = gMap;
                    this.DEFAULTS = DEFAULTS;
                    bounds = void 0;
                    dragging = !1;
                    myListeners = [];
                    listeners = void 0;
                    fit = function(_this) {
                        return function() {
                            if (_this.isTrue(_this.attrs.fit)) return _this.fitMapBounds(_this.gMap, bounds);
                        };
                    }(this);
                    createBounds = function(_this) {
                        return function() {
                            var ref, ref1, ref2;
                            if (null != _this.scope.bounds && null != (null != (ref = _this.scope.bounds) ? ref.sw : void 0) && null != (null != (ref1 = _this.scope.bounds) ? ref1.ne : void 0) && _this.validateBoundPoints(_this.scope.bounds)) {
                                bounds = _this.convertBoundPoints(_this.scope.bounds);
                                return $log.info("new new bounds created: " + JSON.stringify(bounds));
                            }
                            return null != _this.scope.bounds.getNorthEast && null != _this.scope.bounds.getSouthWest ? bounds = _this.scope.bounds : null != _this.scope.bounds ? $log.error("Invalid bounds for newValue: " + JSON.stringify(null != (ref2 = _this.scope) ? ref2.bounds : void 0)) : void 0;
                        };
                    }(this);
                    createBounds();
                    gObject = new google.maps.Rectangle(this.buildOpts(bounds));
                    $log.info("gObject (rectangle) created: " + gObject);
                    settingBoundsFromScope = !1;
                    updateBounds = function(_this) {
                        return function() {
                            var b, ne, sw;
                            b = gObject.getBounds();
                            ne = b.getNorthEast();
                            sw = b.getSouthWest();
                            if (!settingBoundsFromScope) return _this.scope.$evalAsync(function(s) {
                                if (null != s.bounds && null != s.bounds.sw && null != s.bounds.ne) {
                                    s.bounds.ne = {
                                        latitude: ne.lat(),
                                        longitude: ne.lng()
                                    };
                                    s.bounds.sw = {
                                        latitude: sw.lat(),
                                        longitude: sw.lng()
                                    };
                                }
                                if (null != s.bounds.getNorthEast && null != s.bounds.getSouthWest) return s.bounds = b;
                            });
                        };
                    }(this);
                    init = function(_this) {
                        return function() {
                            fit();
                            _this.removeEvents(myListeners);
                            myListeners.push(google.maps.event.addListener(gObject, "dragstart", function() {
                                return dragging = !0;
                            }));
                            myListeners.push(google.maps.event.addListener(gObject, "dragend", function() {
                                dragging = !1;
                                return updateBounds();
                            }));
                            return myListeners.push(google.maps.event.addListener(gObject, "bounds_changed", function() {
                                if (!dragging) return updateBounds();
                            }));
                        };
                    }(this);
                    clear = function(_this) {
                        return function() {
                            _this.removeEvents(myListeners);
                            null != listeners && _this.removeEvents(listeners);
                            return gObject.setMap(null);
                        };
                    }(this);
                    null != bounds && init();
                    this.scope.$watch("bounds", function(newValue, oldValue) {
                        var isNew;
                        if (!(_.isEqual(newValue, oldValue) && null != bounds || dragging)) {
                            settingBoundsFromScope = !0;
                            if (null != newValue) {
                                null == bounds ? isNew = !0 : fit();
                                createBounds();
                                gObject.setBounds(bounds);
                                settingBoundsFromScope = !1;
                                return isNew && null != bounds ? init() : void 0;
                            }
                            clear();
                        }
                    }, !0);
                    this.setMyOptions = function(_this) {
                        return function(newVals, oldVals) {
                            if (!_.isEqual(newVals, oldVals) && null != bounds && null != newVals) return gObject.setOptions(_this.buildOpts(bounds));
                        };
                    }(this);
                    this.props.push("bounds");
                    this.watchProps(this.props);
                    if (null != this.attrs.events) {
                        listeners = this.setEvents(gObject, this.scope, this.scope);
                        this.scope.$watch("events", function(_this) {
                            return function(newValue, oldValue) {
                                if (!_.isEqual(newValue, oldValue)) {
                                    null != listeners && _this.removeEvents(listeners);
                                    return listeners = _this.setEvents(gObject, _this.scope, _this.scope);
                                }
                            };
                        }(this));
                    }
                    this.scope.$on("$destroy", function() {
                        return clear();
                    });
                    $log.info(this);
                }
                extend(RectangleParentModel, superClass);
                RectangleParentModel.include(GmapUtil);
                RectangleParentModel.include(EventsHelper);
                return RectangleParentModel;
            }(Builder);
        } ]);
    }).call(this);
    /*global angular:true, google:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapSearchBoxParentModel", [ "uiGmapBaseObject", "uiGmapLogger", "uiGmapEventsHelper", function(BaseObject, Logger, EventsHelper) {
            var SearchBoxParentModel;
            SearchBoxParentModel = function(superClass) {
                function SearchBoxParentModel(scope, element, attrs, gMap, ctrlPosition, template, $log) {
                    var controlDiv;
                    this.scope = scope;
                    this.element = element;
                    this.attrs = attrs;
                    this.gMap = gMap;
                    this.ctrlPosition = ctrlPosition;
                    this.template = template;
                    this.$log = null != $log ? $log : Logger;
                    this.setVisibility = bind(this.setVisibility, this);
                    this.getBounds = bind(this.getBounds, this);
                    this.setBounds = bind(this.setBounds, this);
                    this.createSearchBox = bind(this.createSearchBox, this);
                    this.addToParentDiv = bind(this.addToParentDiv, this);
                    this.addAsMapControl = bind(this.addAsMapControl, this);
                    this.init = bind(this.init, this);
                    if (null != this.attrs.template) {
                        if (angular.isUndefined(this.scope.options)) {
                            this.scope.options = {};
                            this.scope.options.visible = !0;
                        }
                        angular.isUndefined(this.scope.options.visible) && (this.scope.options.visible = !0);
                        angular.isUndefined(this.scope.options.autocomplete) && (this.scope.options.autocomplete = !1);
                        this.visible = this.scope.options.visible;
                        this.autocomplete = this.scope.options.autocomplete;
                        controlDiv = angular.element("<div></div>");
                        controlDiv.append(this.template);
                        this.input = controlDiv.find("input")[0];
                        this.init();
                    } else this.$log.error("template attribute for the search-box directive is mandatory. Places Search Box creation aborted!!");
                }
                extend(SearchBoxParentModel, superClass);
                SearchBoxParentModel.include(EventsHelper);
                SearchBoxParentModel.prototype.init = function() {
                    this.createSearchBox();
                    this.scope.$watch("options", function(_this) {
                        return function(newValue, oldValue) {
                            if (angular.isObject(newValue)) {
                                null != newValue.bounds && _this.setBounds(newValue.bounds);
                                if (null != newValue.visible && _this.visible !== newValue.visible) return _this.setVisibility(newValue.visible);
                            }
                        };
                    }(this), !0);
                    null != this.attrs.parentdiv ? this.addToParentDiv() : this.addAsMapControl();
                    this.visible || this.setVisibility(this.visible);
                    this.autocomplete ? this.listener = google.maps.event.addListener(this.gObject, "place_changed", function(_this) {
                        return function() {
                            return _this.places = _this.gObject.getPlace();
                        };
                    }(this)) : this.listener = google.maps.event.addListener(this.gObject, "places_changed", function(_this) {
                        return function() {
                            return _this.places = _this.gObject.getPlaces();
                        };
                    }(this));
                    this.listeners = this.setEvents(this.gObject, this.scope, this.scope);
                    this.$log.info(this);
                    this.scope.$on("$stateChangeSuccess", function(_this) {
                        return function() {
                            if (null != _this.attrs.parentdiv) return _this.addToParentDiv();
                        };
                    }(this));
                    return this.scope.$on("$destroy", function(_this) {
                        return function() {
                            return _this.gObject = null;
                        };
                    }(this));
                };
                SearchBoxParentModel.prototype.addAsMapControl = function() {
                    return this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].push(this.input);
                };
                SearchBoxParentModel.prototype.addToParentDiv = function() {
                    var ref;
                    this.parentDiv = angular.element(document.getElementById(this.scope.parentdiv));
                    if (null != (ref = this.parentDiv) ? ref.length : void 0) return this.parentDiv.append(this.input);
                };
                SearchBoxParentModel.prototype.createSearchBox = function() {
                    return this.autocomplete ? this.gObject = new google.maps.places.Autocomplete(this.input, this.scope.options) : this.gObject = new google.maps.places.SearchBox(this.input, this.scope.options);
                };
                SearchBoxParentModel.prototype.setBounds = function(bounds) {
                    if (angular.isUndefined(bounds.isEmpty)) this.$log.error("Error: SearchBoxParentModel setBounds. Bounds not an instance of LatLngBounds."); else if (!1 === bounds.isEmpty() && null != this.gObject) return this.gObject.setBounds(bounds);
                };
                SearchBoxParentModel.prototype.getBounds = function() {
                    return this.gObject.getBounds();
                };
                SearchBoxParentModel.prototype.setVisibility = function(val) {
                    null != this.attrs.parentdiv ? !1 === val ? this.parentDiv.addClass("ng-hide") : this.parentDiv.removeClass("ng-hide") : !1 === val ? this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].clear() : this.gMap.controls[google.maps.ControlPosition[this.ctrlPosition]].push(this.input);
                    return this.visible = val;
                };
                return SearchBoxParentModel;
            }(BaseObject);
            return SearchBoxParentModel;
        } ]);
    }).call(this);
    /*global _,angular */
    /*
	WindowsChildModel generator where there are many ChildModels to a parent.
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api.models.parent").factory("uiGmapWindowsParentModel", [ "uiGmapIWindowParentModel", "uiGmapModelsWatcher", "uiGmapPropMap", "uiGmapWindowChildModel", "uiGmapLinked", "uiGmap_async", "uiGmapLogger", "$timeout", "$compile", "$http", "$templateCache", "$interpolate", "uiGmapPromise", "uiGmapIWindow", "uiGmapGmapUtil", function(IWindowParentModel, ModelsWatcher, PropMap, WindowChildModel, Linked, _async, $log, $timeout, $compile, $http, $templateCache, $interpolate, uiGmapPromise, IWindow, GmapUtil) {
            var WindowsParentModel;
            WindowsParentModel = function(superClass) {
                function WindowsParentModel(scope, element, attrs, ctrls, gMap1, markersScope) {
                    this.gMap = gMap1;
                    this.markersScope = markersScope;
                    this.modelKeyComparison = bind(this.modelKeyComparison, this);
                    this.interpolateContent = bind(this.interpolateContent, this);
                    this.setChildScope = bind(this.setChildScope, this);
                    this.createWindow = bind(this.createWindow, this);
                    this.setContentKeys = bind(this.setContentKeys, this);
                    this.pieceMeal = bind(this.pieceMeal, this);
                    this.createAllNew = bind(this.createAllNew, this);
                    this.watchIdKey = bind(this.watchIdKey, this);
                    this.createChildScopes = bind(this.createChildScopes, this);
                    this.watchOurScope = bind(this.watchOurScope, this);
                    this.watchDestroy = bind(this.watchDestroy, this);
                    this.onDestroy = bind(this.onDestroy, this);
                    this.rebuildAll = bind(this.rebuildAll, this);
                    this.doINeedToWipe = bind(this.doINeedToWipe, this);
                    this.watchModels = bind(this.watchModels, this);
                    this.go = bind(this.go, this);
                    WindowsParentModel.__super__.constructor.call(this, scope, element, attrs, ctrls, $timeout, $compile, $http, $templateCache);
                    this.interface = IWindow;
                    this.plurals = new PropMap();
                    _.each(IWindow.scopeKeys, function(_this) {
                        return function(name) {
                            return _this[name + "Key"] = void 0;
                        };
                    }(this));
                    this.linked = new Linked(scope, element, attrs, ctrls);
                    this.contentKeys = void 0;
                    this.isIconVisibleOnClick = void 0;
                    this.firstTime = !0;
                    this.firstWatchModels = !0;
                    this.$log.info(self);
                    this.parentScope = void 0;
                    this.go(scope);
                }
                extend(WindowsParentModel, superClass);
                WindowsParentModel.include(ModelsWatcher);
                WindowsParentModel.prototype.go = function(scope) {
                    this.watchOurScope(scope);
                    this.doRebuildAll = null != this.scope.doRebuildAll && this.scope.doRebuildAll;
                    scope.$watch("doRebuildAll", function(_this) {
                        return function(newValue, oldValue) {
                            if (newValue !== oldValue) return _this.doRebuildAll = newValue;
                        };
                    }(this));
                    return this.createChildScopes();
                };
                WindowsParentModel.prototype.watchModels = function(scope) {
                    var itemToWatch;
                    itemToWatch = null != this.markersScope ? "pluralsUpdate" : "models";
                    return scope.$watch(itemToWatch, function(_this) {
                        return function(newValue, oldValue) {
                            var doScratch;
                            if (!_.isEqual(newValue, oldValue) || _this.firstWatchModels) {
                                _this.firstWatchModels = !1;
                                if (_this.doRebuildAll || _this.doINeedToWipe(scope.models)) return _this.rebuildAll(scope, !0, !0);
                                doScratch = 0 === _this.plurals.length;
                                return null != _this.existingPieces ? _.last(_this.existingPieces._content).then(function() {
                                    return _this.createChildScopes(doScratch);
                                }) : _this.createChildScopes(doScratch);
                            }
                        };
                    }(this), !0);
                };
                WindowsParentModel.prototype.doINeedToWipe = function(newValue) {
                    var newValueIsEmpty;
                    newValueIsEmpty = null == newValue || 0 === newValue.length;
                    return this.plurals.length > 0 && newValueIsEmpty;
                };
                WindowsParentModel.prototype.rebuildAll = function(scope, doCreate, doDelete) {
                    return this.onDestroy(doDelete).then(function(_this) {
                        return function() {
                            if (doCreate) return _this.createChildScopes();
                        };
                    }(this));
                };
                WindowsParentModel.prototype.onDestroy = function(scope) {
                    WindowsParentModel.__super__.onDestroy.call(this, this.scope);
                    return _async.promiseLock(this, uiGmapPromise.promiseTypes.delete, void 0, void 0, function(_this) {
                        return function() {
                            return _async.each(_this.plurals.values(), function(child) {
                                return child.destroy(!0);
                            }, _async.chunkSizeFrom(_this.scope.cleanchunk, !1)).then(function() {
                                var ref;
                                return null != (ref = _this.plurals) ? ref.removeAll() : void 0;
                            });
                        };
                    }(this));
                };
                WindowsParentModel.prototype.watchDestroy = function(scope) {
                    return scope.$on("$destroy", function(_this) {
                        return function() {
                            _this.firstWatchModels = !0;
                            _this.firstTime = !0;
                            return _this.rebuildAll(scope, !1, !0);
                        };
                    }(this));
                };
                WindowsParentModel.prototype.watchOurScope = function(scope) {
                    return _.each(IWindow.scopeKeys, function(_this) {
                        return function(name) {
                            var nameKey;
                            nameKey = name + "Key";
                            return _this[nameKey] = "function" == typeof scope[name] ? scope[name]() : scope[name];
                        };
                    }(this));
                };
                WindowsParentModel.prototype.createChildScopes = function(isCreatingFromScratch) {
                    var modelsNotDefined, ref, ref1;
                    null == isCreatingFromScratch && (isCreatingFromScratch = !0);
                    /*
          being that we cannot tell the difference in Key String vs. a normal value string (TemplateUrl)
          we will assume that all scope values are string expressions either pointing to a key (propName) or using
          'self' to point the model as container/object of interest.
          
          This may force redundant information into the model, but this appears to be the most flexible approach.
           */
                    this.isIconVisibleOnClick = !0;
                    angular.isDefined(this.linked.attrs.isiconvisibleonclick) && (this.isIconVisibleOnClick = this.linked.scope.isIconVisibleOnClick);
                    modelsNotDefined = angular.isUndefined(this.linked.scope.models);
                    if (!modelsNotDefined || void 0 !== this.markersScope && void 0 !== (null != (ref = this.markersScope) ? ref.plurals : void 0) && void 0 !== (null != (ref1 = this.markersScope) ? ref1.models : void 0)) {
                        if (null != this.gMap) {
                            if (null != this.linked.scope.models) {
                                this.watchIdKey(this.linked.scope);
                                return isCreatingFromScratch ? this.createAllNew(this.linked.scope, !1) : this.pieceMeal(this.linked.scope, !1);
                            }
                            this.parentScope = this.markersScope;
                            this.watchIdKey(this.parentScope);
                            return isCreatingFromScratch ? this.createAllNew(this.markersScope, !0, "plurals", !1) : this.pieceMeal(this.markersScope, !0, "plurals", !1);
                        }
                    } else this.$log.error("No models to create windows from! Need direct models or models derived from markers!");
                };
                WindowsParentModel.prototype.watchIdKey = function(scope) {
                    this.setIdKey(scope);
                    return scope.$watch("idKey", function(_this) {
                        return function(newValue, oldValue) {
                            if (newValue !== oldValue && null == newValue) {
                                _this.idKey = newValue;
                                return _this.rebuildAll(scope, !0, !0);
                            }
                        };
                    }(this));
                };
                WindowsParentModel.prototype.createAllNew = function(scope, hasGMarker, modelsPropToIterate, isArray) {
                    var maybeCanceled;
                    null == modelsPropToIterate && (modelsPropToIterate = "models");
                    null == isArray && (isArray = !1);
                    if (this.firstTime) {
                        this.watchModels(scope);
                        this.watchDestroy(scope);
                    }
                    this.setContentKeys(scope.models);
                    if (!this.didQueueInitPromise(this, scope)) {
                        maybeCanceled = null;
                        return _async.promiseLock(this, uiGmapPromise.promiseTypes.create, "createAllNew", function(canceledMsg) {
                            return maybeCanceled = canceledMsg;
                        }, function(_this) {
                            return function() {
                                return _async.each(scope.models, function(model) {
                                    var gMarker, ref;
                                    gMarker = hasGMarker && null != (ref = _this.getItem(scope, modelsPropToIterate, model[_this.idKey])) ? ref.gObject : void 0;
                                    if (!maybeCanceled) {
                                        !gMarker && _this.markersScope && $log.error("Unable to get gMarker from markersScope!");
                                        _this.createWindow(model, gMarker, _this.gMap);
                                    }
                                    return maybeCanceled;
                                }, _async.chunkSizeFrom(scope.chunk)).then(function() {
                                    return _this.firstTime = !1;
                                });
                            };
                        }(this));
                    }
                };
                WindowsParentModel.prototype.pieceMeal = function(scope, hasGMarker, modelsPropToIterate, isArray) {
                    var maybeCanceled, payload;
                    null == modelsPropToIterate && (modelsPropToIterate = "models");
                    null == isArray && (isArray = !0);
                    if (!scope.$$destroyed) {
                        maybeCanceled = null;
                        payload = null;
                        if (null != scope && this.modelsLength() && this.plurals.length) return _async.promiseLock(this, uiGmapPromise.promiseTypes.update, "pieceMeal", function(canceledMsg) {
                            return maybeCanceled = canceledMsg;
                        }, function(_this) {
                            return function() {
                                return uiGmapPromise.promise(function() {
                                    return _this.figureOutState(_this.idKey, scope, _this.plurals, _this.modelKeyComparison);
                                }).then(function(state) {
                                    payload = state;
                                    return _async.each(payload.removals, function(child) {
                                        if (null != child) {
                                            _this.plurals.remove(child.id);
                                            null != child.destroy && child.destroy(!0);
                                            return maybeCanceled;
                                        }
                                    }, _async.chunkSizeFrom(scope.chunk));
                                }).then(function() {
                                    return _async.each(payload.adds, function(modelToAdd) {
                                        var gMarker, ref;
                                        gMarker = null != (ref = _this.getItem(scope, modelsPropToIterate, modelToAdd[_this.idKey])) ? ref.gObject : void 0;
                                        if (!gMarker) throw "Gmarker undefined";
                                        _this.createWindow(modelToAdd, gMarker, _this.gMap);
                                        return maybeCanceled;
                                    });
                                }).then(function() {
                                    return _async.each(payload.updates, function(update) {
                                        _this.updateChild(update.child, update.model);
                                        return maybeCanceled;
                                    }, _async.chunkSizeFrom(scope.chunk));
                                });
                            };
                        }(this));
                        $log.debug("pieceMeal: rebuildAll");
                        return this.rebuildAll(this.scope, !0, !0);
                    }
                };
                WindowsParentModel.prototype.setContentKeys = function(models) {
                    if (this.modelsLength(models)) return this.contentKeys = Object.keys(models[0]);
                };
                WindowsParentModel.prototype.createWindow = function(model, gMarker, gMap) {
                    var child, childScope, fakeElement, opts, ref, ref1;
                    childScope = this.linked.scope.$new(!1);
                    this.setChildScope(childScope, model);
                    childScope.$watch("model", function(_this) {
                        return function(newValue, oldValue) {
                            if (newValue !== oldValue) return _this.setChildScope(childScope, newValue);
                        };
                    }(this), !0);
                    fakeElement = {
                        html: function(_this) {
                            return function() {
                                return _this.interpolateContent(_this.linked.element.html(), model);
                            };
                        }(this)
                    };
                    this.DEFAULTS = this.scopeOrModelVal(this.optionsKey, this.scope, model) || {};
                    opts = this.createWindowOptions(gMarker, childScope, fakeElement.html(), this.DEFAULTS);
                    child = new WindowChildModel({
                        model: model,
                        scope: childScope,
                        opts: opts,
                        isIconVisibleOnClick: this.isIconVisibleOnClick,
                        gMap: gMap,
                        markerScope: null != (ref = this.markersScope) && null != (ref1 = ref.plurals.get(model[this.idKey])) ? ref1.scope : void 0,
                        element: fakeElement,
                        needToManualDestroy: !1,
                        markerIsVisibleAfterWindowClose: !0,
                        isScopeModel: !0
                    });
                    if (null != model[this.idKey]) {
                        this.plurals.put(model[this.idKey], child);
                        return child;
                    }
                    this.$log.error("Window model has no id to assign a child to. This is required for performance. Please assign id, or redirect id to a different key.");
                };
                WindowsParentModel.prototype.setChildScope = function(childScope, model) {
                    _.each(IWindow.scopeKeys, function(_this) {
                        return function(name) {
                            var nameKey, newValue;
                            nameKey = name + "Key";
                            newValue = "self" === _this[nameKey] ? model : model[_this[nameKey]];
                            if (newValue !== childScope[name]) return childScope[name] = newValue;
                        };
                    }(this));
                    return childScope.model = model;
                };
                WindowsParentModel.prototype.interpolateContent = function(content, model) {
                    var exp, i, interpModel, key, len, ref;
                    if (void 0 !== this.contentKeys && 0 !== this.contentKeys.length) {
                        exp = $interpolate(content);
                        interpModel = {};
                        ref = this.contentKeys;
                        for (i = 0, len = ref.length; i < len; i++) {
                            key = ref[i];
                            interpModel[key] = model[key];
                        }
                        return exp(interpModel);
                    }
                };
                WindowsParentModel.prototype.modelKeyComparison = function(model1, model2) {
                    var isEqual, scope;
                    scope = null != this.scope.coords ? this.scope : this.parentScope;
                    if (null == scope) throw "No scope or parentScope set!";
                    isEqual = GmapUtil.equalCoords(this.evalModelHandle(model1, scope.coords), this.evalModelHandle(model2, scope.coords));
                    if (!isEqual) return isEqual;
                    isEqual = _.every(_.without(this.interface.scopeKeys, "coords"), function(_this) {
                        return function(k) {
                            return _this.evalModelHandle(model1, scope[k]) === _this.evalModelHandle(model2, scope[k]);
                        };
                    }(this));
                    return isEqual;
                };
                return WindowsParentModel;
            }(IWindowParentModel);
            return WindowsParentModel;
        } ]);
    }).call(this);
    /*global angular, _ */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapCircle", [ "uiGmapICircle", "uiGmapCircleParentModel", function(ICircle, CircleParentModel) {
            return _.extend(ICircle, {
                link: function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(gMap) {
                        return new CircleParentModel(scope, element, attrs, gMap);
                    });
                }
            });
        } ]);
    }).call(this);
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapControl", [ "uiGmapIControl", "$http", "$templateCache", "$compile", "$controller", "uiGmapGoogleMapApi", function(IControl, $http, $templateCache, $compile, $controller, GoogleMapApi) {
            return function(superClass) {
                function Control() {
                    this.link = bind(this.link, this);
                    Control.__super__.constructor.call(this);
                }
                extend(Control, superClass);
                Control.prototype.transclude = !0;
                Control.prototype.link = function(scope, element, attrs, ctrl, transclude) {
                    return GoogleMapApi.then(function(_this) {
                        return function(maps) {
                            var hasTranscludedContent, index, position;
                            transclude();
                            hasTranscludedContent = transclude().length > 0;
                            if (hasTranscludedContent || !angular.isUndefined(scope.template)) {
                                index = angular.isDefined(scope.index && !isNaN(parseInt(scope.index))) ? parseInt(scope.index) : void 0;
                                position = angular.isDefined(scope.position) ? scope.position.toUpperCase().replace(/-/g, "_") : "TOP_CENTER";
                                if (maps.ControlPosition[position]) return IControl.mapPromise(scope, ctrl).then(function(map) {
                                    var control, controlDiv, pushControl;
                                    control = void 0;
                                    controlDiv = angular.element("<div></div>");
                                    pushControl = function(map, control, index) {
                                        index && (control[0].index = index);
                                        return map.controls[google.maps.ControlPosition[position]].push(control[0]);
                                    };
                                    return hasTranscludedContent ? transclude(function(transcludeEl) {
                                        controlDiv.append(transcludeEl);
                                        return pushControl(map, controlDiv, index);
                                    }) : $http.get(scope.template, {
                                        cache: $templateCache
                                    }).success(function(template) {
                                        var templateCtrl, templateScope;
                                        templateScope = scope.$new();
                                        controlDiv.append(template);
                                        if (angular.isDefined(scope.controller)) {
                                            templateCtrl = $controller(scope.controller, {
                                                $scope: templateScope
                                            });
                                            controlDiv.children().data("$ngControllerController", templateCtrl);
                                        }
                                        return control = $compile(controlDiv.children())(templateScope);
                                    }).error(function(error) {
                                        return _this.$log.error("mapControl: template could not be found");
                                    }).then(function() {
                                        return pushControl(map, control, index);
                                    });
                                });
                                _this.$log.error("mapControl: invalid position property");
                            } else _this.$log.error("mapControl: could not find a valid template property or elements for transclusion");
                        };
                    }(this));
                };
                return Control;
            }(IControl);
        } ]);
    }).call(this);
    /*globals angular, _ */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapDragZoom", [ "uiGmapCtrlHandle", "uiGmapPropertyAction", function(CtrlHandle, PropertyAction) {
            return {
                restrict: "EMA",
                transclude: !0,
                template: '<div class="angular-google-map-dragzoom" ng-transclude style="display: none"></div>',
                require: "^uiGmapGoogleMap",
                scope: {
                    keyboardkey: "=",
                    options: "=",
                    spec: "="
                },
                controller: [ "$scope", "$element", function($scope, $element) {
                    $scope.ctrlType = "uiGmapDragZoom";
                    return _.extend(this, CtrlHandle.handle($scope, $element));
                } ],
                link: function(scope, element, attrs, ctrl) {
                    return CtrlHandle.mapPromise(scope, ctrl).then(function(map) {
                        var enableKeyDragZoom, setKeyAction, setOptionsAction;
                        enableKeyDragZoom = function(opts) {
                            return map.enableKeyDragZoom(opts);
                        };
                        setKeyAction = new PropertyAction(function(key, newVal) {
                            return newVal ? enableKeyDragZoom({
                                key: newVal
                            }) : enableKeyDragZoom();
                        });
                        setOptionsAction = new PropertyAction(function(key, newVal) {
                            if (newVal) return enableKeyDragZoom(newVal);
                        });
                        scope.$watch("keyboardkey", setKeyAction.sic("keyboardkey"));
                        setKeyAction.sic(scope.keyboardkey);
                        scope.$watch("options", setOptionsAction.sic("options"));
                        return setOptionsAction.sic(scope.options);
                    });
                }
            };
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapDrawingManager", [ "uiGmapIDrawingManager", "uiGmapDrawingManagerParentModel", function(IDrawingManager, DrawingManagerParentModel) {
            return _.extend(IDrawingManager, {
                link: function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(map) {
                        return new DrawingManagerParentModel(scope, element, attrs, map);
                    });
                }
            });
        } ]);
    }).call(this);
    /*
  - Link up Polygons to be sent back to a controller
  - inject the draw function into a controllers scope so that controller can call the directive to draw on demand
  - draw function creates the DrawFreeHandChildModel which manages itself
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapApiFreeDrawPolygons", [ "uiGmapLogger", "uiGmapBaseObject", "uiGmapCtrlHandle", "uiGmapDrawFreeHandChildModel", "uiGmapLodash", function($log, BaseObject, CtrlHandle, DrawFreeHandChildModel, uiGmapLodash) {
            return function(superClass) {
                function FreeDrawPolygons() {
                    this.link = bind(this.link, this);
                    return FreeDrawPolygons.__super__.constructor.apply(this, arguments);
                }
                extend(FreeDrawPolygons, superClass);
                FreeDrawPolygons.include(CtrlHandle);
                FreeDrawPolygons.prototype.restrict = "EMA";
                FreeDrawPolygons.prototype.replace = !0;
                FreeDrawPolygons.prototype.require = "^uiGmapGoogleMap";
                FreeDrawPolygons.prototype.scope = {
                    polygons: "=",
                    draw: "="
                };
                FreeDrawPolygons.prototype.link = function(scope, element, attrs, ctrl) {
                    return this.mapPromise(scope, ctrl).then(function(_this) {
                        return function(map) {
                            var freeHand, listener;
                            if (!scope.polygons) return $log.error("No polygons to bind to!");
                            if (!_.isArray(scope.polygons)) return $log.error("Free Draw Polygons must be of type Array!");
                            freeHand = new DrawFreeHandChildModel(map, ctrl.getScope());
                            listener = void 0;
                            return scope.draw = function() {
                                "function" == typeof listener && listener();
                                return freeHand.engage(scope.polygons).then(function() {
                                    var firstTime;
                                    firstTime = !0;
                                    return listener = scope.$watchCollection("polygons", function(newValue, oldValue) {
                                        var removals;
                                        if (!firstTime && newValue !== oldValue) {
                                            removals = uiGmapLodash.differenceObjects(oldValue, newValue);
                                            return removals.forEach(function(p) {
                                                return p.setMap(null);
                                            });
                                        }
                                        firstTime = !1;
                                    });
                                });
                            };
                        };
                    }());
                };
                return FreeDrawPolygons;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapICircle", [ function() {
            ({});
            return {
                restrict: "EA",
                replace: !0,
                require: "^uiGmapGoogleMap",
                scope: {
                    center: "=center",
                    radius: "=radius",
                    stroke: "=stroke",
                    fill: "=fill",
                    clickable: "=",
                    draggable: "=",
                    editable: "=",
                    geodesic: "=",
                    icons: "=icons",
                    visible: "=",
                    events: "=",
                    control: "=",
                    zIndex: "=zindex"
                }
            };
        } ]);
    }).call(this);
    /*
 - interface for all controls to derive from
 - to enforce a minimum set of requirements
	- attributes
		- template
		- position
		- controller
		- index
 */
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIControl", [ "uiGmapBaseObject", "uiGmapLogger", "uiGmapCtrlHandle", function(BaseObject, Logger, CtrlHandle) {
            return function(superClass) {
                function IControl() {
                    this.restrict = "EA";
                    this.replace = !0;
                    this.require = "^uiGmapGoogleMap";
                    this.scope = {
                        template: "@template",
                        position: "@position",
                        controller: "@controller",
                        index: "@index"
                    };
                    this.$log = Logger;
                }
                extend(IControl, superClass);
                IControl.extend(CtrlHandle);
                IControl.prototype.link = function(scope, element, attrs, ctrl) {
                    throw new Exception("Not implemented!!");
                };
                return IControl;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapIDrawingManager", [ function() {
            return {
                restrict: "EA",
                replace: !0,
                require: "^uiGmapGoogleMap",
                scope: {
                    static: "@",
                    control: "=",
                    options: "=",
                    events: "="
                }
            };
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIMarker", [ "uiGmapBaseObject", "uiGmapCtrlHandle", function(BaseObject, CtrlHandle) {
            return function(superClass) {
                function IMarker() {
                    this.restrict = "EMA";
                    this.require = "^uiGmapGoogleMap";
                    this.priority = -1;
                    this.transclude = !0;
                    this.replace = !0;
                    this.scope = _.extend(this.scope || {}, IMarker.scope);
                }
                extend(IMarker, superClass);
                IMarker.scope = {
                    coords: "=coords",
                    icon: "=icon",
                    click: "&click",
                    options: "=options",
                    events: "=events",
                    fit: "=fit",
                    idKey: "=idkey",
                    control: "=control"
                };
                IMarker.scopeKeys = _.keys(IMarker.scope);
                IMarker.keys = IMarker.scopeKeys;
                IMarker.extend(CtrlHandle);
                return IMarker;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIPolygon", [ "uiGmapGmapUtil", "uiGmapBaseObject", "uiGmapLogger", "uiGmapCtrlHandle", function(GmapUtil, BaseObject, Logger, CtrlHandle) {
            return function(superClass) {
                function IPolygon() {}
                extend(IPolygon, superClass);
                IPolygon.scope = {
                    path: "=path",
                    stroke: "=stroke",
                    clickable: "=",
                    draggable: "=",
                    editable: "=",
                    geodesic: "=",
                    fill: "=",
                    icons: "=icons",
                    visible: "=",
                    static: "=",
                    events: "=",
                    zIndex: "=zindex",
                    fit: "=",
                    control: "=control"
                };
                IPolygon.scopeKeys = _.keys(IPolygon.scope);
                IPolygon.include(GmapUtil);
                IPolygon.extend(CtrlHandle);
                IPolygon.prototype.restrict = "EMA";
                IPolygon.prototype.replace = !0;
                IPolygon.prototype.require = "^uiGmapGoogleMap";
                IPolygon.prototype.scope = IPolygon.scope;
                IPolygon.prototype.DEFAULTS = {};
                IPolygon.prototype.$log = Logger;
                return IPolygon;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIPolyline", [ "uiGmapGmapUtil", "uiGmapBaseObject", "uiGmapLogger", "uiGmapCtrlHandle", function(GmapUtil, BaseObject, Logger, CtrlHandle) {
            return function(superClass) {
                function IPolyline() {}
                extend(IPolyline, superClass);
                IPolyline.scope = {
                    path: "=",
                    stroke: "=",
                    clickable: "=",
                    draggable: "=",
                    editable: "=",
                    geodesic: "=",
                    icons: "=",
                    visible: "=",
                    static: "=",
                    fit: "=",
                    events: "=",
                    zIndex: "=zindex"
                };
                IPolyline.scopeKeys = _.keys(IPolyline.scope);
                IPolyline.include(GmapUtil);
                IPolyline.extend(CtrlHandle);
                IPolyline.prototype.restrict = "EMA";
                IPolyline.prototype.replace = !0;
                IPolyline.prototype.require = "^uiGmapGoogleMap";
                IPolyline.prototype.scope = IPolyline.scope;
                IPolyline.prototype.DEFAULTS = {};
                IPolyline.prototype.$log = Logger;
                return IPolyline;
            }(BaseObject);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapIRectangle", [ function() {
            ({});
            return {
                restrict: "EMA",
                require: "^uiGmapGoogleMap",
                replace: !0,
                scope: {
                    bounds: "=",
                    stroke: "=",
                    clickable: "=",
                    draggable: "=",
                    editable: "=",
                    fill: "=",
                    visible: "=",
                    events: "="
                }
            };
        } ]);
    }).call(this);
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapIWindow", [ "uiGmapBaseObject", "uiGmapChildEvents", "uiGmapCtrlHandle", function(BaseObject, ChildEvents, CtrlHandle) {
            return function(superClass) {
                function IWindow() {
                    this.restrict = "EMA";
                    this.template = void 0;
                    this.transclude = !0;
                    this.priority = -100;
                    this.require = "^uiGmapGoogleMap";
                    this.replace = !0;
                    this.scope = _.extend(this.scope || {}, IWindow.scope);
                }
                extend(IWindow, superClass);
                IWindow.scope = {
                    coords: "=coords",
                    template: "=template",
                    templateUrl: "=templateurl",
                    templateParameter: "=templateparameter",
                    isIconVisibleOnClick: "=isiconvisibleonclick",
                    closeClick: "&closeclick",
                    options: "=options",
                    control: "=control",
                    show: "=show"
                };
                IWindow.scopeKeys = _.keys(IWindow.scope);
                IWindow.include(ChildEvents);
                IWindow.extend(CtrlHandle);
                return IWindow;
            }(BaseObject);
        } ]);
    }).call(this);
    /*globals angular,_,google */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapMap", [ "$timeout", "$q", "$log", "uiGmapGmapUtil", "uiGmapBaseObject", "uiGmapCtrlHandle", "uiGmapIsReady", "uiGmapuuid", "uiGmapExtendGWin", "uiGmapExtendMarkerClusterer", "uiGmapGoogleMapsUtilV3", "uiGmapGoogleMapApi", "uiGmapEventsHelper", "uiGmapGoogleMapObjectManager", function($timeout, $q, $log, uiGmapGmapUtil, uiGmapBaseObject, uiGmapCtrlHandle, uiGmapIsReady, uiGmapuuid, uiGmapExtendGWin, uiGmapExtendMarkerClusterer, uiGmapGoogleMapsUtilV3, uiGmapGoogleMapApi, uiGmapEventsHelper, uiGmapGoogleMapObjectManager) {
            var DEFAULTS, initializeItems;
            DEFAULTS = void 0;
            initializeItems = [ uiGmapGoogleMapsUtilV3, uiGmapExtendGWin, uiGmapExtendMarkerClusterer ];
            return function(superClass) {
                function Map() {
                    this.link = bind(this.link, this);
                    var ctrlFn;
                    ctrlFn = function($scope) {
                        var ctrlObj, retCtrl;
                        retCtrl = void 0;
                        $scope.$on("$destroy", function() {
                            return uiGmapIsReady.decrement();
                        });
                        ctrlObj = uiGmapCtrlHandle.handle($scope);
                        $scope.ctrlType = "Map";
                        $scope.deferred.promise.then(function() {
                            return initializeItems.forEach(function(i) {
                                return i.init();
                            });
                        });
                        ctrlObj.getMap = function() {
                            return $scope.map;
                        };
                        retCtrl = _.extend(this, ctrlObj);
                        return retCtrl;
                    };
                    this.controller = [ "$scope", ctrlFn ];
                }
                extend(Map, superClass);
                Map.include(uiGmapGmapUtil);
                Map.prototype.restrict = "EMA";
                Map.prototype.transclude = !0;
                Map.prototype.replace = !1;
                Map.prototype.template = '<div class="angular-google-map"><div class="angular-google-map-container">\n</div><div ng-transclude style="display: none"></div></div>';
                Map.prototype.scope = {
                    center: "=",
                    zoom: "=",
                    dragging: "=",
                    control: "=",
                    options: "=",
                    events: "=",
                    eventOpts: "=",
                    styles: "=",
                    bounds: "=",
                    update: "="
                };
                Map.prototype.link = function(scope, element, attrs) {
                    var listeners;
                    listeners = [];
                    scope.$on("$destroy", function() {
                        uiGmapEventsHelper.removeEvents(listeners);
                        if ("true" === attrs.recycleMapInstance && scope.map) {
                            uiGmapGoogleMapObjectManager.recycleMapInstance(scope.map);
                            return scope.map = null;
                        }
                    });
                    scope.idleAndZoomChanged = !1;
                    return uiGmapGoogleMapApi.then(function(_this) {
                        return function(maps) {
                            var _gMap, customListeners, disabledEvents, dragging, el, eventName, getEventHandler, mapOptions, maybeHookToEvent, opts, ref, resolveSpawned, settingFromDirective, spawned, type, updateCenter, zoomPromise;
                            DEFAULTS = {
                                mapTypeId: maps.MapTypeId.ROADMAP
                            };
                            spawned = uiGmapIsReady.spawn();
                            resolveSpawned = function() {
                                return spawned.deferred.resolve({
                                    instance: spawned.instance,
                                    map: _gMap
                                });
                            };
                            if (angular.isDefined(scope.center) || angular.isDefined(scope.bounds)) {
                                angular.isDefined(scope.center) || (scope.center = new google.maps.LatLngBounds(_this.getCoords(scope.bounds.southwest), _this.getCoords(scope.bounds.northeast)).getCenter());
                                angular.isDefined(scope.zoom) || (scope.zoom = 10);
                                el = angular.element(element);
                                el.addClass("angular-google-map");
                                opts = {
                                    options: {}
                                };
                                attrs.options && (opts.options = scope.options);
                                attrs.styles && (opts.styles = scope.styles);
                                if (attrs.type) {
                                    type = attrs.type.toUpperCase();
                                    google.maps.MapTypeId.hasOwnProperty(type) ? opts.mapTypeId = google.maps.MapTypeId[attrs.type.toUpperCase()] : $log.error("angular-google-maps: invalid map type '" + attrs.type + "'");
                                }
                                mapOptions = angular.extend({}, DEFAULTS, opts, {
                                    center: _this.getCoords(scope.center),
                                    zoom: scope.zoom,
                                    bounds: scope.bounds
                                });
                                _gMap = "true" === attrs.recycleMapInstance ? uiGmapGoogleMapObjectManager.createMapInstance(el.find("div")[1], mapOptions) : new google.maps.Map(el.find("div")[1], mapOptions);
                                _gMap.uiGmap_id = uiGmapuuid.generate();
                                dragging = !1;
                                listeners.push(google.maps.event.addListenerOnce(_gMap, "idle", function() {
                                    scope.deferred.resolve(_gMap);
                                    return resolveSpawned();
                                }));
                                disabledEvents = attrs.events && null != (null != (ref = scope.events) ? ref.blacklist : void 0) ? scope.events.blacklist : [];
                                _.isString(disabledEvents) && (disabledEvents = [ disabledEvents ]);
                                maybeHookToEvent = function(eventName, fn, prefn) {
                                    if (!_.includes(disabledEvents, eventName)) {
                                        prefn && prefn();
                                        return listeners.push(google.maps.event.addListener(_gMap, eventName, function() {
                                            var ref1;
                                            if (!(null != (ref1 = scope.update) ? ref1.lazy : void 0)) return fn();
                                        }));
                                    }
                                };
                                if (!_.includes(disabledEvents, "all")) {
                                    maybeHookToEvent("dragstart", function() {
                                        dragging = !0;
                                        return scope.$evalAsync(function(s) {
                                            if (null != s.dragging) return s.dragging = dragging;
                                        });
                                    });
                                    maybeHookToEvent("dragend", function() {
                                        dragging = !1;
                                        return scope.$evalAsync(function(s) {
                                            if (null != s.dragging) return s.dragging = dragging;
                                        });
                                    });
                                    updateCenter = function(c, s) {
                                        null == c && (c = _gMap.center);
                                        null == s && (s = scope);
                                        if (_.includes(disabledEvents, "center")) {
                                            s.center.latitude !== c.lat() && (s.center.latitude = c.lat());
                                            if (s.center.longitude !== c.lng()) return s.center.longitude = c.lng();
                                        }
                                    };
                                    settingFromDirective = !1;
                                    maybeHookToEvent("idle", function() {
                                        var b, ne, sw;
                                        b = _gMap.getBounds();
                                        ne = b.getNorthEast();
                                        sw = b.getSouthWest();
                                        settingFromDirective = !0;
                                        return scope.$evalAsync(function(s) {
                                            updateCenter();
                                            if (!_.isUndefined(s.bounds) && !_.includes(disabledEvents, "bounds")) {
                                                s.bounds.northeast = {
                                                    latitude: ne.lat(),
                                                    longitude: ne.lng()
                                                };
                                                s.bounds.southwest = {
                                                    latitude: sw.lat(),
                                                    longitude: sw.lng()
                                                };
                                            }
                                            if (!_.includes(disabledEvents, "zoom")) {
                                                s.zoom = _gMap.zoom;
                                                scope.idleAndZoomChanged = !scope.idleAndZoomChanged;
                                            }
                                            return settingFromDirective = !1;
                                        });
                                    });
                                }
                                if (angular.isDefined(scope.events) && null !== scope.events && angular.isObject(scope.events)) {
                                    getEventHandler = function(eventName) {
                                        return function() {
                                            return scope.events[eventName].apply(scope, [ _gMap, eventName, arguments ]);
                                        };
                                    };
                                    customListeners = [];
                                    for (eventName in scope.events) scope.events.hasOwnProperty(eventName) && angular.isFunction(scope.events[eventName]) && customListeners.push(google.maps.event.addListener(_gMap, eventName, getEventHandler(eventName)));
                                    listeners.concat(customListeners);
                                }
                                _gMap.getOptions = function() {
                                    return mapOptions;
                                };
                                scope.map = _gMap;
                                if (null != attrs.control && null != scope.control) {
                                    scope.control.refresh = function(maybeCoords) {
                                        var coords, ref1, ref2;
                                        if (null != _gMap) {
                                            null != ("undefined" != typeof google && null !== google && null != (ref1 = google.maps) && null != (ref2 = ref1.event) ? ref2.trigger : void 0) && null != _gMap && google.maps.event.trigger(_gMap, "resize");
                                            if (null != (null != maybeCoords ? maybeCoords.latitude : void 0) && null != (null != maybeCoords ? maybeCoords.longitude : void 0)) {
                                                coords = _this.getCoords(maybeCoords);
                                                return _this.isTrue(attrs.pan) ? _gMap.panTo(coords) : _gMap.setCenter(coords);
                                            }
                                        }
                                    };
                                    scope.control.getGMap = function() {
                                        return _gMap;
                                    };
                                    scope.control.getMapOptions = function() {
                                        return mapOptions;
                                    };
                                    scope.control.getCustomEventListeners = function() {
                                        return customListeners;
                                    };
                                    scope.control.removeEvents = function(yourListeners) {
                                        return uiGmapEventsHelper.removeEvents(yourListeners);
                                    };
                                }
                                scope.$watch("center", function(newValue, oldValue) {
                                    var coords;
                                    if (newValue !== oldValue && !settingFromDirective) {
                                        coords = _this.getCoords(scope.center);
                                        if ((coords.lat() !== _gMap.center.lat() || coords.lng() !== _gMap.center.lng()) && !dragging) {
                                            _this.validateCoords(newValue) || $log.error("Invalid center for newValue: " + JSON.stringify(newValue));
                                            return _this.isTrue(attrs.pan) && scope.zoom === _gMap.zoom ? _gMap.panTo(coords) : _gMap.setCenter(coords);
                                        }
                                    }
                                }, !0);
                                zoomPromise = null;
                                scope.$watch("zoom", function(newValue, oldValue) {
                                    var ref1, ref2;
                                    if (null != newValue && !_.isEqual(newValue, oldValue) && (null != _gMap ? _gMap.getZoom() : void 0) !== (null != scope ? scope.zoom : void 0) && !settingFromDirective) {
                                        null != zoomPromise && $timeout.cancel(zoomPromise);
                                        return zoomPromise = $timeout(function() {
                                            return _gMap.setZoom(newValue);
                                        }, (null != (ref1 = scope.eventOpts) && null != (ref2 = ref1.debounce) ? ref2.zoomMs : void 0) + 20, !1);
                                    }
                                });
                                scope.$watch("bounds", function(newValue, oldValue) {
                                    var bounds, ne, ref1, ref2, ref3, ref4, sw;
                                    if (newValue !== oldValue) {
                                        if (null != (null != newValue && null != (ref1 = newValue.northeast) ? ref1.latitude : void 0) && null != (null != newValue && null != (ref2 = newValue.northeast) ? ref2.longitude : void 0) && null != (null != newValue && null != (ref3 = newValue.southwest) ? ref3.latitude : void 0) && null != (null != newValue && null != (ref4 = newValue.southwest) ? ref4.longitude : void 0)) {
                                            ne = new google.maps.LatLng(newValue.northeast.latitude, newValue.northeast.longitude);
                                            sw = new google.maps.LatLng(newValue.southwest.latitude, newValue.southwest.longitude);
                                            bounds = new google.maps.LatLngBounds(sw, ne);
                                            return _gMap.fitBounds(bounds);
                                        }
                                        $log.error("Invalid map bounds for new value: " + JSON.stringify(newValue));
                                    }
                                });
                                return [ "options", "styles" ].forEach(function(toWatch) {
                                    return scope.$watch(toWatch, function(newValue, oldValue) {
                                        if (!_.isEqual(newValue, oldValue)) {
                                            "options" === toWatch ? opts.options = newValue : opts.options[toWatch] = newValue;
                                            return null != _gMap ? _gMap.setOptions(opts) : void 0;
                                        }
                                    }, !0);
                                });
                            }
                            $log.error("angular-google-maps: a center or bounds property is required");
                        };
                    }(this));
                };
                return Map;
            }(uiGmapBaseObject);
        } ]);
    }).call(this);
    /*global _:true,angular:true */
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapMarker", [ "uiGmapIMarker", "uiGmapMarkerChildModel", "uiGmapMarkerManager", "uiGmapLogger", function(IMarker, MarkerChildModel, MarkerManager, $log) {
            return function(superClass) {
                function Marker() {
                    Marker.__super__.constructor.call(this);
                    this.template = '<span class="angular-google-map-marker" ng-transclude></span>';
                    $log.info(this);
                }
                extend(Marker, superClass);
                Marker.prototype.controller = [ "$scope", "$element", function($scope, $element) {
                    $scope.ctrlType = "Marker";
                    return _.extend(this, IMarker.handle($scope, $element));
                } ];
                Marker.prototype.link = function(scope, element, attrs, ctrl) {
                    var mapPromise;
                    mapPromise = IMarker.mapPromise(scope, ctrl);
                    mapPromise.then(function(gMap) {
                        var gManager, keys, m;
                        gManager = new MarkerManager(gMap);
                        keys = _.object(IMarker.keys, IMarker.keys);
                        m = new MarkerChildModel({
                            scope: scope,
                            model: scope,
                            keys: keys,
                            gMap: gMap,
                            doClick: !0,
                            gManager: gManager,
                            doDrawSelf: !1,
                            trackModel: !1
                        });
                        m.deferred.promise.then(function(gMarker) {
                            return scope.deferred.resolve(gMarker);
                        });
                        if (null != scope.control) return scope.control.getGMarkers = gManager.getGMarkers;
                    });
                    return scope.$on("$destroy", function() {
                        var gManager;
                        void 0 !== gManager && null !== gManager && gManager.clear();
                        return gManager = null;
                    });
                };
                return Marker;
            }(IMarker);
        } ]);
    }).call(this);
    /*global _:true,angular:true */
    (function() {
        var extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapMarkers", [ "uiGmapIMarker", "uiGmapPlural", "uiGmapMarkersParentModel", "uiGmap_sync", "uiGmapLogger", function(IMarker, Plural, MarkersParentModel, _sync, $log) {
            return function(superClass) {
                function Markers() {
                    Markers.__super__.constructor.call(this);
                    this.template = '<span class="angular-google-map-markers" ng-transclude></span>';
                    Plural.extend(this, {
                        doCluster: "=?docluster",
                        clusterOptions: "=clusteroptions",
                        clusterEvents: "=clusterevents",
                        modelsByRef: "=modelsbyref",
                        type: "=?type",
                        typeOptions: "=?typeoptions",
                        typeEvents: "=?typeevents"
                    });
                    $log.info(this);
                }
                extend(Markers, superClass);
                Markers.prototype.controller = [ "$scope", "$element", function($scope, $element) {
                    $scope.ctrlType = "Markers";
                    return _.extend(this, IMarker.handle($scope, $element));
                } ];
                Markers.prototype.link = function(scope, element, attrs, ctrl) {
                    var parentModel, ready;
                    parentModel = void 0;
                    ready = function() {
                        return scope.deferred.resolve();
                    };
                    return IMarker.mapPromise(scope, ctrl).then(function(map) {
                        var mapScope;
                        mapScope = ctrl.getScope();
                        mapScope.$watch("idleAndZoomChanged", function() {
                            return _.defer(parentModel.gManager.draw);
                        });
                        parentModel = new MarkersParentModel(scope, element, attrs, map);
                        Plural.link(scope, parentModel);
                        if (null != scope.control) {
                            scope.control.getGMarkers = function() {
                                var ref;
                                return null != (ref = parentModel.gManager) ? ref.getGMarkers() : void 0;
                            };
                            scope.control.getChildMarkers = function() {
                                return parentModel.plurals;
                            };
                        }
                        return _.last(parentModel.existingPieces._content).then(function() {
                            return ready();
                        });
                    });
                };
                return Markers;
            }(IMarker);
        } ]);
    }).call(this);
    /*global angular */
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").service("uiGmapPlural", [ function() {
            var _initControl;
            _initControl = function(scope, parent) {
                if (null != scope.control) {
                    scope.control.updateModels = function(models) {
                        scope.models = models;
                        return parent.createChildScopes(!1);
                    };
                    scope.control.newModels = function(models) {
                        scope.models = models;
                        return parent.rebuildAll(scope, !0, !0);
                    };
                    scope.control.clean = function() {
                        return parent.rebuildAll(scope, !1, !0);
                    };
                    scope.control.getPlurals = function() {
                        return parent.plurals;
                    };
                    scope.control.getManager = function() {
                        return parent.gManager;
                    };
                    scope.control.hasManager = function() {
                        return null != parent.gManager == !0;
                    };
                    return scope.control.managerDraw = function() {
                        var ref;
                        if (scope.control.hasManager()) return null != (ref = scope.control.getManager()) ? ref.draw() : void 0;
                    };
                }
            };
            return {
                extend: function(obj, obj2) {
                    return _.extend(obj.scope || {}, obj2 || {}, {
                        idKey: "=idkey",
                        doRebuildAll: "=dorebuildall",
                        models: "=models",
                        chunk: "=chunk",
                        cleanchunk: "=cleanchunk",
                        control: "=control"
                    });
                },
                link: function(scope, parent) {
                    return _initControl(scope, parent);
                }
            };
        } ]);
    }).call(this);
    /*global angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolygon", [ "uiGmapIPolygon", "$timeout", "uiGmapPolygonChildModel", function(IPolygon, $timeout, PolygonChild) {
            return function(superClass) {
                function Polygon() {
                    this.link = bind(this.link, this);
                    return Polygon.__super__.constructor.apply(this, arguments);
                }
                extend(Polygon, superClass);
                Polygon.prototype.link = function(scope, element, attrs, mapCtrl) {
                    var children, promise;
                    children = [];
                    promise = IPolygon.mapPromise(scope, mapCtrl);
                    if (null != scope.control) {
                        scope.control.getInstance = this;
                        scope.control.polygons = children;
                        scope.control.promise = promise;
                    }
                    return promise.then(function(_this) {
                        return function(gMap) {
                            return children.push(new PolygonChild({
                                scope: scope,
                                attrs: attrs,
                                gMap: gMap,
                                defaults: _this.DEFAULTS
                            }));
                        };
                    }(this));
                };
                return Polygon;
            }(IPolygon);
        } ]);
    }).call(this);
    /*global angular:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolygons", [ "uiGmapIPolygon", "$timeout", "uiGmapPolygonsParentModel", "uiGmapPlural", function(Interface, $timeout, ParentModel, Plural) {
            return function(superClass) {
                function Polygons() {
                    this.link = bind(this.link, this);
                    Polygons.__super__.constructor.call(this);
                    Plural.extend(this);
                    this.$log.info(this);
                }
                extend(Polygons, superClass);
                Polygons.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(_this) {
                        return function(map) {
                            (angular.isUndefined(scope.path) || null === scope.path) && _this.$log.warn("polygons: no valid path attribute found");
                            scope.models || _this.$log.warn("polygons: no models found to create from");
                            return Plural.link(scope, new ParentModel(scope, element, attrs, map, _this.DEFAULTS));
                        };
                    }(this));
                };
                return Polygons;
            }(Interface);
        } ]);
    }).call(this);
    /*global angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolyline", [ "uiGmapIPolyline", "$timeout", "uiGmapPolylineChildModel", function(IPolyline, $timeout, PolylineChildModel) {
            return function(superClass) {
                function Polyline() {
                    this.link = bind(this.link, this);
                    return Polyline.__super__.constructor.apply(this, arguments);
                }
                extend(Polyline, superClass);
                Polyline.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return IPolyline.mapPromise(scope, mapCtrl).then(function(_this) {
                        return function(gMap) {
                            !angular.isUndefined(scope.path) && null !== scope.path && _this.validatePath(scope.path) || _this.$log.warn("polyline: no valid path attribute found");
                            return new PolylineChildModel({
                                scope: scope,
                                attrs: attrs,
                                gMap: gMap,
                                defaults: _this.DEFAULTS
                            });
                        };
                    }(this));
                };
                return Polyline;
            }(IPolyline);
        } ]);
    }).call(this);
    /*global angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapPolylines", [ "uiGmapIPolyline", "$timeout", "uiGmapPolylinesParentModel", "uiGmapPlural", function(IPolyline, $timeout, PolylinesParentModel, Plural) {
            return function(superClass) {
                function Polylines() {
                    this.link = bind(this.link, this);
                    Polylines.__super__.constructor.call(this);
                    Plural.extend(this);
                    this.$log.info(this);
                }
                extend(Polylines, superClass);
                Polylines.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(_this) {
                        return function(gMap) {
                            (angular.isUndefined(scope.path) || null === scope.path) && _this.$log.warn("polylines: no valid path attribute found");
                            scope.models || _this.$log.warn("polylines: no models found to create from");
                            return Plural.link(scope, new PolylinesParentModel(scope, element, attrs, gMap, _this.DEFAULTS));
                        };
                    }(this));
                };
                return Polylines;
            }(IPolyline);
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapRectangle", [ "uiGmapLogger", "uiGmapGmapUtil", "uiGmapIRectangle", "uiGmapRectangleParentModel", function($log, GmapUtil, IRectangle, RectangleParentModel) {
            return _.extend(IRectangle, {
                link: function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(gMap) {
                        return new RectangleParentModel(scope, element, attrs, gMap);
                    });
                }
            });
        } ]);
    }).call(this);
    /*global angular:true */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapWindow", [ "uiGmapIWindow", "uiGmapGmapUtil", "uiGmapWindowChildModel", "uiGmapLodash", "uiGmapLogger", function(IWindow, GmapUtil, WindowChildModel, uiGmapLodash, $log) {
            return function(superClass) {
                function Window() {
                    this.link = bind(this.link, this);
                    Window.__super__.constructor.call(this);
                    this.require = [ "^uiGmapGoogleMap", "^?uiGmapMarker" ];
                    this.template = '<span class="angular-google-maps-window" ng-transclude></span>';
                    $log.debug(this);
                    this.childWindows = [];
                }
                extend(Window, superClass);
                Window.include(GmapUtil);
                Window.prototype.link = function(scope, element, attrs, ctrls) {
                    var markerCtrl, markerScope;
                    markerCtrl = ctrls.length > 1 && null != ctrls[1] ? ctrls[1] : void 0;
                    markerScope = null != markerCtrl ? markerCtrl.getScope() : void 0;
                    this.mapPromise = IWindow.mapPromise(scope, ctrls[0]);
                    return this.mapPromise.then(function(_this) {
                        return function(gMap) {
                            var isIconVisibleOnClick;
                            isIconVisibleOnClick = !0;
                            angular.isDefined(attrs.isiconvisibleonclick) && (isIconVisibleOnClick = scope.isIconVisibleOnClick);
                            if (markerCtrl) return markerScope.deferred.promise.then(function(gMarker) {
                                return _this.init(scope, element, isIconVisibleOnClick, gMap, markerScope);
                            });
                            _this.init(scope, element, isIconVisibleOnClick, gMap);
                        };
                    }(this));
                };
                Window.prototype.init = function(scope, element, isIconVisibleOnClick, gMap, markerScope) {
                    var childWindow, defaults, gMarker, hasScopeCoords, opts;
                    defaults = null != scope.options ? scope.options : {};
                    hasScopeCoords = null != scope && this.validateCoords(scope.coords);
                    null != (null != markerScope ? markerScope.getGMarker : void 0) && (gMarker = markerScope.getGMarker());
                    opts = hasScopeCoords ? this.createWindowOptions(gMarker, scope, element.html(), defaults) : defaults;
                    if (null != gMap) {
                        childWindow = new WindowChildModel({
                            scope: scope,
                            opts: opts,
                            isIconVisibleOnClick: isIconVisibleOnClick,
                            gMap: gMap,
                            markerScope: markerScope,
                            element: element
                        });
                        this.childWindows.push(childWindow);
                        scope.$on("$destroy", function(_this) {
                            return function() {
                                _this.childWindows = uiGmapLodash.withoutObjects(_this.childWindows, [ childWindow ], function(child1, child2) {
                                    return child1.scope.$id === child2.scope.$id;
                                });
                                return _this.childWindows.length = 0;
                            };
                        }(this));
                    }
                    if (null != scope.control) {
                        scope.control.getGWindows = function(_this) {
                            return function() {
                                return _this.childWindows.map(function(child) {
                                    return child.gObject;
                                });
                            };
                        }(this);
                        scope.control.getChildWindows = function(_this) {
                            return function() {
                                return _this.childWindows;
                            };
                        }(this);
                        scope.control.getPlurals = scope.control.getChildWindows;
                        scope.control.showWindow = function(_this) {
                            return function() {
                                return _this.childWindows.map(function(child) {
                                    return child.showWindow();
                                });
                            };
                        }(this);
                        scope.control.hideWindow = function(_this) {
                            return function() {
                                return _this.childWindows.map(function(child) {
                                    return child.hideWindow();
                                });
                            };
                        }(this);
                    }
                    if (null != this.onChildCreation && null != childWindow) return this.onChildCreation(childWindow);
                };
                return Window;
            }(IWindow);
        } ]);
    }).call(this);
    /*global angular */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        }, extend = function(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            for (var key in parent) hasProp.call(parent, key) && (child[key] = parent[key]);
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        }, hasProp = {}.hasOwnProperty;
        angular.module("uiGmapgoogle-maps.directives.api").factory("uiGmapWindows", [ "uiGmapIWindow", "uiGmapPlural", "uiGmapWindowsParentModel", "uiGmapPromise", "uiGmapLogger", function(IWindow, Plural, WindowsParentModel, uiGmapPromise, $log) {
            return function(superClass) {
                function Windows() {
                    this.link = bind(this.link, this);
                    Windows.__super__.constructor.call(this);
                    this.require = [ "^uiGmapGoogleMap", "^?uiGmapMarkers" ];
                    this.template = '<span class="angular-google-maps-windows" ng-transclude></span>';
                    Plural.extend(this);
                    $log.debug(this);
                }
                extend(Windows, superClass);
                Windows.prototype.link = function(scope, element, attrs, ctrls) {
                    var mapScope, markerCtrl, markerScope;
                    mapScope = ctrls[0].getScope();
                    markerCtrl = ctrls.length > 1 && null != ctrls[1] ? ctrls[1] : void 0;
                    markerScope = null != markerCtrl ? markerCtrl.getScope() : void 0;
                    return mapScope.deferred.promise.then(function(_this) {
                        return function(map) {
                            var promise, ref;
                            promise = (null != markerScope && null != (ref = markerScope.deferred) ? ref.promise : void 0) || uiGmapPromise.resolve();
                            return promise.then(function() {
                                var pieces, ref1;
                                pieces = null != (ref1 = _this.parentModel) ? ref1.existingPieces : void 0;
                                return pieces ? pieces.then(function() {
                                    return _this.init(scope, element, attrs, ctrls, map, markerScope);
                                }) : _this.init(scope, element, attrs, ctrls, map, markerScope);
                            });
                        };
                    }(this));
                };
                Windows.prototype.init = function(scope, element, attrs, ctrls, map, additionalScope) {
                    var parentModel;
                    parentModel = new WindowsParentModel(scope, element, attrs, ctrls, map, additionalScope);
                    Plural.link(scope, parentModel);
                    if (null != scope.control) {
                        scope.control.getGWindows = function() {
                            return parentModel.plurals.map(function(child) {
                                return child.gObject;
                            });
                        };
                        return scope.control.getChildWindows = function() {
                            return parentModel.plurals;
                        };
                    }
                };
                return Windows;
            }(IWindow);
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
Nick Baugh - https://github.com/niftylettuce
 */
    /*globals angular */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapGoogleMap", [ "uiGmapMap", function(uiGmapMap) {
            return new uiGmapMap();
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    /*
Map marker directive

This directive is used to create a marker on an existing map.
This directive creates a new scope.

{attribute coords required}  object containing latitude and longitude properties
{attribute icon optional}    string url to image used for marker icon
{attribute animate optional} if set to false, the marker won't be animated (on by default)
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapMarker", [ "$timeout", "uiGmapMarker", function($timeout, Marker) {
            return new Marker($timeout);
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    /*
Map marker directive

This directive is used to create a marker on an existing map.
This directive creates a new scope.

{attribute coords required}  object containing latitude and longitude properties
{attribute icon optional}    string url to image used for marker icon
{attribute animate optional} if set to false, the marker won't be animated (on by default)
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapMarkers", [ "$timeout", "uiGmapMarkers", function($timeout, Markers) {
            return new Markers($timeout);
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
Rick Huizinga - https://plus.google.com/+RickHuizinga
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapPolygon", [ "uiGmapPolygon", function(Polygon) {
            return new Polygon();
        } ]);
    }).call(this);
    /*
@authors
Julian Popescu - https://github.com/jpopesculian
Rick Huizinga - https://plus.google.com/+RickHuizinga
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapCircle", [ "uiGmapCircle", function(Circle) {
            return Circle;
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapPolyline", [ "uiGmapPolyline", function(Polyline) {
            return new Polyline();
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapPolylines", [ "uiGmapPolylines", function(Polylines) {
            return new Polylines();
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
Chentsu Lin - https://github.com/ChenTsuLin
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapRectangle", [ "uiGmapLogger", "uiGmapRectangle", function($log, Rectangle) {
            return Rectangle;
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    /*
Map info window directive

This directive is used to create an info window on an existing map.
This directive creates a new scope.

{attribute coords required}  object containing latitude and longitude properties
{attribute show optional}    map will show when this expression returns true
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapWindow", [ "$timeout", "$compile", "$http", "$templateCache", "uiGmapWindow", function($timeout, $compile, $http, $templateCache, Window) {
            return new Window($timeout, $compile, $http, $templateCache);
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
 */
    /*
Map info window directive

This directive is used to create an info window on an existing map.
This directive creates a new scope.

{attribute coords required}  object containing latitude and longitude properties
{attribute show optional}    map will show when this expression returns true
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapWindows", [ "$timeout", "$compile", "$http", "$templateCache", "$interpolate", "uiGmapWindows", function($timeout, $compile, $http, $templateCache, $interpolate, Windows) {
            return new Windows($timeout, $compile, $http, $templateCache, $interpolate);
        } ]);
    }).call(this);
    /*
@authors:
- Nicolas Laplante https://plus.google.com/108189012221374960701
- Nicholas McCready - https://twitter.com/nmccready
 */
    /*
Map Layer directive

This directive is used to create any type of Layer from the google maps sdk.
This directive creates a new scope.

{attribute show optional}  true (default) shows the trafficlayer otherwise it is hidden
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps").directive("uiGmapLayer", [ "$timeout", "uiGmapLogger", "uiGmapLayerParentModel", function($timeout, Logger, LayerParentModel) {
            var Layer;
            Layer = function() {
                function Layer() {
                    this.link = bind(this.link, this);
                    this.$log = Logger;
                    this.restrict = "EMA";
                    this.require = "^uiGmapGoogleMap";
                    this.priority = -1;
                    this.transclude = !0;
                    this.template = "<span class='angular-google-map-layer' ng-transclude></span>";
                    this.replace = !0;
                    this.scope = {
                        show: "=show",
                        type: "=type",
                        namespace: "=namespace",
                        options: "=options",
                        onCreated: "&oncreated"
                    };
                }
                Layer.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(_this) {
                        return function(map) {
                            return null != scope.onCreated ? new LayerParentModel(scope, element, attrs, map, scope.onCreated) : new LayerParentModel(scope, element, attrs, map);
                        };
                    }());
                };
                return Layer;
            }();
            return new Layer();
        } ]);
    }).call(this);
    /*
@authors
Adam Kreitals, kreitals@hotmail.com
 */
    /*
mapControl directive

This directive is used to create a custom control element on an existing map.
This directive creates a new scope.

{attribute template required}  	string url of the template to be used for the control
{attribute position optional}  	string position of the control of the form top-left or TOP_LEFT defaults to TOP_CENTER
{attribute controller optional}	string controller to be applied to the template
{attribute index optional}		number index for controlling the order of similarly positioned mapControl elements
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapMapControl", [ "uiGmapControl", function(Control) {
            return new Control();
        } ]);
    }).call(this);
    /*
@authors
Nicholas McCready - https://twitter.com/nmccready
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapDragZoom", [ "uiGmapDragZoom", function(DragZoom) {
            return DragZoom;
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapDrawingManager", [ "uiGmapDrawingManager", function(DrawingManager) {
            return DrawingManager;
        } ]);
    }).call(this);
    /*
@authors
Nicholas McCready - https://twitter.com/nmccready
 * Brunt of the work is in DrawFreeHandChildModel
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapFreeDrawPolygons", [ "uiGmapApiFreeDrawPolygons", function(FreeDrawPolygons) {
            return new FreeDrawPolygons();
        } ]);
    }).call(this);
    /*
Map Layer directive

This directive is used to create any type of Layer from the google maps sdk.
This directive creates a new scope.

{attribute show optional}  true (default) shows the trafficlayer otherwise it is hidden
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps").directive("uiGmapMapType", [ "$timeout", "uiGmapLogger", "uiGmapMapTypeParentModel", function($timeout, Logger, MapTypeParentModel) {
            var MapType;
            MapType = function() {
                function MapType() {
                    this.link = bind(this.link, this);
                    this.$log = Logger;
                    this.restrict = "EMA";
                    this.require = "^uiGmapGoogleMap";
                    this.priority = -1;
                    this.transclude = !0;
                    this.template = '<span class="angular-google-map-layer" ng-transclude></span>';
                    this.replace = !0;
                    this.scope = {
                        show: "=show",
                        options: "=options",
                        refresh: "=refresh",
                        id: "@"
                    };
                }
                MapType.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return mapCtrl.getScope().deferred.promise.then(function(_this) {
                        return function(map) {
                            return new MapTypeParentModel(scope, element, attrs, map);
                        };
                    }());
                };
                return MapType;
            }();
            return new MapType();
        } ]);
    }).call(this);
    /*
@authors
Nicolas Laplante - https://plus.google.com/108189012221374960701
Nicholas McCready - https://twitter.com/nmccready
Rick Huizinga - https://plus.google.com/+RickHuizinga
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapPolygons", [ "uiGmapPolygons", function(Polygons) {
            return new Polygons();
        } ]);
    }).call(this);
    /*
@authors:
- Nicolas Laplante https://plus.google.com/108189012221374960701
- Nicholas McCready - https://twitter.com/nmccready
- Carrie Kengle - http://about.me/carrie
 */
    /*
Places Search Box directive

This directive is used to create a Places Search Box.
This directive creates a new scope.

{attribute input required}  HTMLInputElement
{attribute options optional} The options that can be set on a SearchBox object (google.maps.places.SearchBoxOptions object specification)
 */
    (function() {
        var bind = function(fn, me) {
            return function() {
                return fn.apply(me, arguments);
            };
        };
        angular.module("uiGmapgoogle-maps").directive("uiGmapSearchBox", [ "uiGmapGoogleMapApi", "uiGmapLogger", "uiGmapSearchBoxParentModel", "$http", "$templateCache", "$compile", function(GoogleMapApi, Logger, SearchBoxParentModel, $http, $templateCache, $compile) {
            var SearchBox;
            SearchBox = function() {
                function SearchBox() {
                    this.link = bind(this.link, this);
                    this.$log = Logger;
                    this.restrict = "EMA";
                    this.require = "^uiGmapGoogleMap";
                    this.priority = -1;
                    this.transclude = !0;
                    this.template = "<span class='angular-google-map-search' ng-transclude></span>";
                    this.replace = !0;
                    this.scope = {
                        template: "=template",
                        events: "=events",
                        position: "=?position",
                        options: "=?options",
                        parentdiv: "=?parentdiv",
                        ngModel: "=?"
                    };
                }
                SearchBox.prototype.require = "ngModel";
                SearchBox.prototype.link = function(scope, element, attrs, mapCtrl) {
                    return GoogleMapApi.then(function(_this) {
                        return function(maps) {
                            if (null == scope.template) {
                                $templateCache.put("uigmap-searchbox-default.tpl.html", '<input type="text">');
                                scope.template = "uigmap-searchbox-default.tpl.html";
                            }
                            return $http.get(scope.template, {
                                cache: $templateCache
                            }).success(function(template) {
                                if (!angular.isUndefined(scope.events)) return mapCtrl.getScope().deferred.promise.then(function(map) {
                                    var ctrlPosition;
                                    ctrlPosition = angular.isDefined(scope.position) ? scope.position.toUpperCase().replace(/-/g, "_") : "TOP_LEFT";
                                    if (maps.ControlPosition[ctrlPosition]) return new SearchBoxParentModel(scope, element, attrs, map, ctrlPosition, $compile(template)(scope));
                                    _this.$log.error("searchBox: invalid position property");
                                });
                                _this.$log.error("searchBox: the events property is required");
                            });
                        };
                    }(this));
                };
                return SearchBox;
            }();
            return new SearchBox();
        } ]);
    }).call(this);
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapShow", [ "$animate", "uiGmapLogger", function($animate, $log) {
            return {
                scope: {
                    uiGmapShow: "=",
                    uiGmapAfterShow: "&",
                    uiGmapAfterHide: "&"
                },
                link: function(scope, element) {
                    var angular_post_1_3_handle, angular_pre_1_3_handle, handle;
                    angular_post_1_3_handle = function(animateAction, cb) {
                        return $animate[animateAction](element, "ng-hide").then(function() {
                            return cb();
                        });
                    };
                    angular_pre_1_3_handle = function(animateAction, cb) {
                        return $animate[animateAction](element, "ng-hide", cb);
                    };
                    handle = function(animateAction, cb) {
                        return angular.version.major > 1 ? $log.error("uiGmapShow is not supported for Angular Major greater than 1.\nYour Major is " + angular.version.major + '"') : 1 === angular.version.major && angular.version.minor < 3 ? angular_pre_1_3_handle(animateAction, cb) : angular_post_1_3_handle(animateAction, cb);
                    };
                    return scope.$watch("uiGmapShow", function(show) {
                        show && handle("removeClass", scope.uiGmapAfterShow);
                        if (!show) return handle("addClass", scope.uiGmapAfterHide);
                    });
                }
            };
        } ]);
    }).call(this);
    /*
@authors:
- Nicholas McCready - https://twitter.com/nmccready
 */
    /*
StreetViewPanorama Directive to care of basic initialization of StreetViewPanorama
 */
    (function() {
        angular.module("uiGmapgoogle-maps").directive("uiGmapStreetViewPanorama", [ "uiGmapGoogleMapApi", "uiGmapLogger", "uiGmapGmapUtil", "uiGmapEventsHelper", function(GoogleMapApi, $log, GmapUtil, EventsHelper) {
            var name;
            name = "uiGmapStreetViewPanorama";
            return {
                restrict: "EMA",
                template: '<div class="angular-google-map-street-view-panorama"></div>',
                replace: !0,
                scope: {
                    focalcoord: "=",
                    radius: "=?",
                    events: "=?",
                    options: "=?",
                    control: "=?",
                    povoptions: "=?",
                    imagestatus: "="
                },
                link: function(scope, element, attrs) {
                    return GoogleMapApi.then(function(_this) {
                        return function(maps) {
                            var clean, create, didCreateOptionsFromDirective, firstTime, handleSettings, listeners, opts, pano, povOpts, sv;
                            pano = void 0;
                            sv = void 0;
                            didCreateOptionsFromDirective = !1;
                            listeners = void 0;
                            opts = null;
                            povOpts = null;
                            clean = function() {
                                EventsHelper.removeEvents(listeners);
                                if (null != pano) {
                                    pano.unbind("position");
                                    pano.setVisible(!1);
                                }
                                if (null != sv) {
                                    null != (null != sv ? sv.setVisible : void 0) && sv.setVisible(!1);
                                    return sv = void 0;
                                }
                            };
                            handleSettings = function(perspectivePoint, focalPoint) {
                                var heading;
                                heading = google.maps.geometry.spherical.computeHeading(perspectivePoint, focalPoint);
                                didCreateOptionsFromDirective = !0;
                                scope.radius = scope.radius || 50;
                                povOpts = angular.extend({
                                    heading: heading,
                                    zoom: 1,
                                    pitch: 0
                                }, scope.povoptions || {});
                                opts = opts = angular.extend({
                                    navigationControl: !1,
                                    addressControl: !1,
                                    linksControl: !1,
                                    position: perspectivePoint,
                                    pov: povOpts,
                                    visible: !0
                                }, scope.options || {});
                                return didCreateOptionsFromDirective = !1;
                            };
                            create = function() {
                                var focalPoint;
                                if (scope.focalcoord) {
                                    if (scope.radius) {
                                        clean();
                                        null == sv && (sv = new google.maps.StreetViewService());
                                        scope.events && (listeners = EventsHelper.setEvents(sv, scope, scope));
                                        focalPoint = GmapUtil.getCoords(scope.focalcoord);
                                        return sv.getPanoramaByLocation(focalPoint, scope.radius, function(streetViewPanoramaData, status) {
                                            var ele, perspectivePoint, ref;
                                            null != scope.imagestatus && (scope.imagestatus = status);
                                            null != (null != (ref = scope.events) ? ref.image_status_changed : void 0) && scope.events.image_status_changed(sv, "image_status_changed", scope, status);
                                            if ("OK" === status) {
                                                perspectivePoint = streetViewPanoramaData.location.latLng;
                                                handleSettings(perspectivePoint, focalPoint);
                                                ele = element[0];
                                                return pano = new google.maps.StreetViewPanorama(ele, opts);
                                            }
                                        });
                                    }
                                    $log.error(name + ": needs a radius to set the camera view from its focal target.");
                                } else $log.error(name + ": focalCoord needs to be defined");
                            };
                            if (null != scope.control) {
                                scope.control.getOptions = function() {
                                    return opts;
                                };
                                scope.control.getPovOptions = function() {
                                    return povOpts;
                                };
                                scope.control.getGObject = function() {
                                    return sv;
                                };
                                scope.control.getGPano = function() {
                                    return pano;
                                };
                            }
                            scope.$watch("options", function(newValue, oldValue) {
                                if (newValue !== oldValue && newValue !== opts && !didCreateOptionsFromDirective) return create();
                            });
                            firstTime = !0;
                            scope.$watch("focalcoord", function(newValue, oldValue) {
                                if ((newValue !== oldValue || firstTime) && null != newValue) {
                                    firstTime = !1;
                                    return create();
                                }
                            });
                            return scope.$on("$destroy", function() {
                                return clean();
                            });
                        };
                    }());
                }
            };
        } ]);
    }).call(this);
    angular.module("uiGmapgoogle-maps.wrapped").service("uiGmapuuid", function() {
        //BEGIN REPLACE
        /* istanbul ignore next */
        /*
 Version: core-1.0
 The MIT License: Copyright (c) 2012 LiosK.
*/
        function UUID() {}
        UUID.generate = function() {
            var a = UUID._gri, b = UUID._ha;
            return b(a(32), 8) + "-" + b(a(16), 4) + "-" + b(16384 | a(12), 4) + "-" + b(32768 | a(14), 4) + "-" + b(a(48), 12);
        };
        UUID._gri = function(a) {
            return 0 > a ? NaN : 30 >= a ? 0 | Math.random() * (1 << a) : 53 >= a ? (0 | 1073741824 * Math.random()) + 1073741824 * (0 | Math.random() * (1 << a - 30)) : NaN;
        };
        UUID._ha = function(a, b) {
            for (var c = a.toString(16), d = b - c.length, e = "0"; 0 < d; d >>>= 1, e += e) 1 & d && (c = e + c);
            return c;
        };
        //END REPLACE
        return UUID;
    });
    // wrap the utility libraries needed in ./lib
    // http://google-maps-utility-library-v3.googlecode.com/svn/
    angular.module("uiGmapgoogle-maps.wrapped").service("uiGmapGoogleMapsUtilV3", function() {
        return {
            init: _.once(function() {
                //BEGIN REPLACE
                /* istanbul ignore next */
                +function() {
                    function ClusterIcon(cluster, styles) {
                        cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView), this.cluster_ = cluster, 
                        this.className_ = cluster.getMarkerClusterer().getClusterClass(), this.styles_ = styles, 
                        this.center_ = null, this.div_ = null, this.sums_ = null, this.visible_ = !1, this.setMap(cluster.getMap());
                    }
                    function Cluster(mc) {
                        this.markerClusterer_ = mc, this.map_ = mc.getMap(), this.gridSize_ = mc.getGridSize(), 
                        this.minClusterSize_ = mc.getMinimumClusterSize(), this.averageCenter_ = mc.getAverageCenter(), 
                        this.hideLabel_ = mc.getHideLabel(), this.markers_ = [], this.center_ = null, this.bounds_ = null, 
                        this.clusterIcon_ = new ClusterIcon(this, mc.getStyles());
                    }
                    function MarkerClusterer(map, opt_markers, opt_options) {
                        this.extend(MarkerClusterer, google.maps.OverlayView), opt_markers = opt_markers || [], 
                        opt_options = opt_options || {}, this.markers_ = [], this.clusters_ = [], this.listeners_ = [], 
                        this.activeMap_ = null, this.ready_ = !1, this.gridSize_ = opt_options.gridSize || 60, 
                        this.minClusterSize_ = opt_options.minimumClusterSize || 2, this.maxZoom_ = opt_options.maxZoom || null, 
                        this.styles_ = opt_options.styles || [], this.title_ = opt_options.title || "", 
                        this.zoomOnClick_ = !0, void 0 !== opt_options.zoomOnClick && (this.zoomOnClick_ = opt_options.zoomOnClick), 
                        this.averageCenter_ = !1, void 0 !== opt_options.averageCenter && (this.averageCenter_ = opt_options.averageCenter), 
                        this.ignoreHidden_ = !1, void 0 !== opt_options.ignoreHidden && (this.ignoreHidden_ = opt_options.ignoreHidden), 
                        this.enableRetinaIcons_ = !1, void 0 !== opt_options.enableRetinaIcons && (this.enableRetinaIcons_ = opt_options.enableRetinaIcons), 
                        this.hideLabel_ = !1, void 0 !== opt_options.hideLabel && (this.hideLabel_ = opt_options.hideLabel), 
                        this.imagePath_ = opt_options.imagePath || MarkerClusterer.IMAGE_PATH, this.imageExtension_ = opt_options.imageExtension || MarkerClusterer.IMAGE_EXTENSION, 
                        this.imageSizes_ = opt_options.imageSizes || MarkerClusterer.IMAGE_SIZES, this.calculator_ = opt_options.calculator || MarkerClusterer.CALCULATOR, 
                        this.batchSize_ = opt_options.batchSize || MarkerClusterer.BATCH_SIZE, this.batchSizeIE_ = opt_options.batchSizeIE || MarkerClusterer.BATCH_SIZE_IE, 
                        this.clusterClass_ = opt_options.clusterClass || "cluster", -1 !== navigator.userAgent.toLowerCase().indexOf("msie") && (this.batchSize_ = this.batchSizeIE_), 
                        this.setupStyles_(), this.addMarkers(opt_markers, !0), this.setMap(map);
                    }
                    /**
 *  google-maps-utility-library-v3-infobox
 *
 * @version: 1.1.14
 * @author: Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)
 * @contributors: Nicholas McCready
 * @date: Fri May 13 2016 16:35:27 GMT-0400 (EDT)
 * @license: Apache License 2.0
 */
                    /**
 * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.
 *  <p>
 *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several
 *  additional properties for advanced styling. An InfoBox can also be used as a map label.
 *  <p>
 *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.
 */
                    /*jslint browser:true */
                    /*global google */
                    /**
 * @name InfoBoxOptions
 * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.
 * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).
 * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.
 * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.
 * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox
 *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)
 *  to the map pixel corresponding to <tt>position</tt>.
 * @property {LatLng} position The geographic location at which to display the InfoBox.
 * @property {number} zIndex The CSS z-index style value for the InfoBox.
 *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.
 * @property {string} [boxClass="infoBox"] The name of the CSS class defining the styles for the InfoBox container.
 * @property {Object} [boxStyle] An object literal whose properties define specific CSS
 *  style values to be applied to the InfoBox. Style values defined here override those that may
 *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the
 *  InfoBox has been created, all previously set styles (except those defined in the style sheet)
 *  are removed from the InfoBox before the new style values are applied.
 * @property {string} closeBoxMargin The CSS margin style value for the close box.
 *  The default is "2px" (a 2-pixel margin on all sides).
 * @property {string} closeBoxURL The URL of the image representing the close box.
 *  Note: The default is the URL for Google's standard close box.
 *  Set this property to "" if no close box is required.
 * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the
 *  map edge after an auto-pan.
 * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.
 *  [Deprecated in favor of the <tt>visible</tt> property.]
 * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.
 * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>
 *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).
 * @property {string} pane The pane where the InfoBox is to appear (default is "floatPane").
 *  Set the pane to "mapPane" if the InfoBox is being used as a map label.
 *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.
 * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,
 *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox
 *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set
 *  this property to <tt>true</tt> if the InfoBox is being used as a map label.
 */
                    /**
 * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.
 *  Call <tt>InfoBox.open</tt> to add the box to the map.
 * @constructor
 * @param {InfoBoxOptions} [opt_opts]
 */
                    function InfoBox(opt_opts) {
                        opt_opts = opt_opts || {};
                        google.maps.OverlayView.apply(this, arguments);
                        // Standard options (in common with google.maps.InfoWindow):
                        //
                        this.content_ = opt_opts.content || "";
                        this.disableAutoPan_ = opt_opts.disableAutoPan || !1;
                        this.maxWidth_ = opt_opts.maxWidth || 0;
                        this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);
                        this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);
                        this.zIndex_ = opt_opts.zIndex || null;
                        // Additional options (unique to InfoBox):
                        //
                        this.boxClass_ = opt_opts.boxClass || "infoBox";
                        this.boxStyle_ = opt_opts.boxStyle || {};
                        this.closeBoxMargin_ = opt_opts.closeBoxMargin || "2px";
                        this.closeBoxURL_ = opt_opts.closeBoxURL || "http://www.google.com/intl/en_us/mapfiles/close.gif";
                        "" === opt_opts.closeBoxURL && (this.closeBoxURL_ = "");
                        this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);
                        void 0 === opt_opts.visible && (void 0 === opt_opts.isHidden ? opt_opts.visible = !0 : opt_opts.visible = !opt_opts.isHidden);
                        this.isHidden_ = !opt_opts.visible;
                        this.alignBottom_ = opt_opts.alignBottom || !1;
                        this.pane_ = opt_opts.pane || "floatPane";
                        this.enableEventPropagation_ = opt_opts.enableEventPropagation || !1;
                        this.div_ = null;
                        this.closeListener_ = null;
                        this.moveListener_ = null;
                        this.contextListener_ = null;
                        this.eventListeners_ = null;
                        this.fixedWidthSet_ = null;
                    }
                    /**
 *  google-maps-utility-library-v3-markerwithlabel
 *
 * @version: 1.1.10
 * @author: Gary Little (inspired by code from Marc Ridey of Google).
 * @contributors: Nicholas McCready
 * @date: Fri May 13 2016 16:29:58 GMT-0400 (EDT)
 * @license: Apache License 2.0
 */
                    /**
 *  MarkerWithLabel allows you to define markers with associated labels. As you would expect,
 *  if the marker is draggable, so too will be the label. In addition, a marker with a label
 *  responds to all mouse events in the same manner as a regular marker. It also fires mouse
 *  events and "property changed" events just as a regular marker would. Version 1.1 adds
 *  support for the raiseOnDrag feature introduced in API V3.3.
 *  <p>
 *  If you drag a marker by its label, you can cancel the drag and return the marker to its
 *  original position by pressing the <code>Esc</code> key. This doesn't work if you drag the marker
 *  itself because this feature is not (yet) supported in the <code>google.maps.Marker</code> class.
 */
                    /*jslint browser:true */
                    /*global document,google */
                    /**
 * @param {Function} childCtor Child class.
 * @param {Function} parentCtor Parent class.
 * @private
 */
                    function inherits(childCtor, parentCtor) {
                        /* @constructor */
                        function tempCtor() {}
                        tempCtor.prototype = parentCtor.prototype;
                        childCtor.superClass_ = parentCtor.prototype;
                        childCtor.prototype = new tempCtor();
                        /* @override */
                        childCtor.prototype.constructor = childCtor;
                    }
                    /**
 * This constructor creates a label and associates it with a marker.
 * It is for the private use of the MarkerWithLabel class.
 * @constructor
 * @param {Marker} marker The marker with which the label is to be associated.
 * @param {string} crossURL The URL of the cross image =.
 * @param {string} handCursor The URL of the hand cursor.
 * @private
 */
                    function MarkerLabel_(marker, crossURL, handCursorURL) {
                        this.marker_ = marker;
                        this.handCursorURL_ = marker.handCursorURL;
                        this.labelDiv_ = document.createElement("div");
                        this.labelDiv_.style.cssText = "position: absolute; overflow: hidden;";
                        // Set up the DIV for handling mouse events in the label. This DIV forms a transparent veil
                        // in the "overlayMouseTarget" pane, a veil that covers just the label. This is done so that
                        // events can be captured even if the label is in the shadow of a google.maps.InfoWindow.
                        // Code is included here to ensure the veil is always exactly the same size as the label.
                        this.eventDiv_ = document.createElement("div");
                        this.eventDiv_.style.cssText = this.labelDiv_.style.cssText;
                        // This is needed for proper behavior on MSIE:
                        this.eventDiv_.setAttribute("onselectstart", "return false;");
                        this.eventDiv_.setAttribute("ondragstart", "return false;");
                        // Get the DIV for the "X" to be displayed when the marker is raised.
                        this.crossDiv_ = MarkerLabel_.getSharedCross(crossURL);
                    }
                    /**
 * @name MarkerWithLabelOptions
 * @class This class represents the optional parameter passed to the {@link MarkerWithLabel} constructor.
 *  The properties available are the same as for <code>google.maps.Marker</code> with the addition
 *  of the properties listed below. To change any of these additional properties after the labeled
 *  marker has been created, call <code>google.maps.Marker.set(propertyName, propertyValue)</code>.
 *  <p>
 *  When any of these properties changes, a property changed event is fired. The names of these
 *  events are derived from the name of the property and are of the form <code>propertyname_changed</code>.
 *  For example, if the content of the label changes, a <code>labelcontent_changed</code> event
 *  is fired.
 *  <p>
 * @property {string|Node} [labelContent] The content of the label (plain text or an HTML DOM node).
 * @property {Point} [labelAnchor] By default, a label is drawn with its anchor point at (0,0) so
 *  that its top left corner is positioned at the anchor point of the associated marker. Use this
 *  property to change the anchor point of the label. For example, to center a 50px-wide label
 *  beneath a marker, specify a <code>labelAnchor</code> of <code>google.maps.Point(25, 0)</code>.
 *  (Note: x-values increase to the right and y-values increase to the top.)
 * @property {string} [labelClass] The name of the CSS class defining the styles for the label.
 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
 *  <code>marginTop</code> are ignored; these styles are for internal use only.
 * @property {Object} [labelStyle] An object literal whose properties define specific CSS
 *  style values to be applied to the label. Style values defined here override those that may
 *  be defined in the <code>labelClass</code> style sheet. If this property is changed after the
 *  label has been created, all previously set styles (except those defined in the style sheet)
 *  are removed from the label before the new style values are applied.
 *  Note that style values for <code>position</code>, <code>overflow</code>, <code>top</code>,
 *  <code>left</code>, <code>zIndex</code>, <code>display</code>, <code>marginLeft</code>, and
 *  <code>marginTop</code> are ignored; these styles are for internal use only.
 * @property {boolean} [labelInBackground] A flag indicating whether a label that overlaps its
 *  associated marker should appear in the background (i.e., in a plane below the marker).
 *  The default is <code>false</code>, which causes the label to appear in the foreground.
 * @property {boolean} [labelVisible] A flag indicating whether the label is to be visible.
 *  The default is <code>true</code>. Note that even if <code>labelVisible</code> is
 *  <code>true</code>, the label will <i>not</i> be visible unless the associated marker is also
 *  visible (i.e., unless the marker's <code>visible</code> property is <code>true</code>).
 * @property {boolean} [raiseOnDrag] A flag indicating whether the label and marker are to be
 *  raised when the marker is dragged. The default is <code>true</code>. If a draggable marker is
 *  being created and a version of Google Maps API earlier than V3.3 is being used, this property
 *  must be set to <code>false</code>.
 * @property {boolean} [optimized] A flag indicating whether rendering is to be optimized for the
 *  marker. <b>Important: The optimized rendering technique is not supported by MarkerWithLabel,
 *  so the value of this parameter is always forced to <code>false</code>.
 * @property {string} [crossImage="http://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png"]
 *  The URL of the cross image to be displayed while dragging a marker.
 * @property {string} [handCursor="http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur"]
 *  The URL of the cursor to be displayed while dragging a marker.
 */
                    /**
 * Creates a MarkerWithLabel with the options specified in {@link MarkerWithLabelOptions}.
 * @constructor
 * @param {MarkerWithLabelOptions} [opt_options] The optional parameters.
 */
                    function MarkerWithLabel(opt_options) {
                        opt_options = opt_options || {};
                        opt_options.labelContent = opt_options.labelContent || "";
                        opt_options.labelAnchor = opt_options.labelAnchor || new google.maps.Point(0, 0);
                        opt_options.labelClass = opt_options.labelClass || "markerLabels";
                        opt_options.labelStyle = opt_options.labelStyle || {};
                        opt_options.labelInBackground = opt_options.labelInBackground || !1;
                        void 0 === opt_options.labelVisible && (opt_options.labelVisible = !0);
                        void 0 === opt_options.raiseOnDrag && (opt_options.raiseOnDrag = !0);
                        void 0 === opt_options.clickable && (opt_options.clickable = !0);
                        void 0 === opt_options.draggable && (opt_options.draggable = !1);
                        void 0 === opt_options.optimized && (opt_options.optimized = !1);
                        opt_options.crossImage = opt_options.crossImage || "http" + ("https:" === document.location.protocol ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/drag_cross_67_16.png";
                        opt_options.handCursor = opt_options.handCursor || "http" + ("https:" === document.location.protocol ? "s" : "") + "://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur";
                        opt_options.optimized = !1;
                        // Optimized rendering is not supported
                        this.label = new MarkerLabel_(this, opt_options.crossImage, opt_options.handCursor);
                        // Bind the label to the marker
                        // Call the parent constructor. It calls Marker.setValues to initialize, so all
                        // the new parameters are conveniently saved and can be accessed with get/set.
                        // Marker.set triggers a property changed event (called "propertyname_changed")
                        // that the marker label listens for in order to react to state changes.
                        google.maps.Marker.apply(this, arguments);
                    }
                    // ==ClosureCompiler==
                    // @compilation_level ADVANCED_OPTIMIZATIONS
                    // @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3.js
                    // @output_wrapper (function() {%output%})();
                    // ==/ClosureCompiler==
                    /**
 * @license
 * Copyright 2013 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
                    /**
 * A RichMarker that allows any HTML/DOM to be added to a map and be draggable.
 *
 * @param {Object.<string, *>=} opt_options Optional properties to set.
 * @extends {google.maps.OverlayView}
 * @constructor
 */
                    function RichMarker(opt_options) {
                        var options = opt_options || {};
                        /**
   * @type {boolean}
   * @private
   */
                        this.ready_ = !1;
                        /**
   * @type {boolean}
   * @private
   */
                        this.dragging_ = !1;
                        opt_options.visible == undefined && (opt_options.visible = !0);
                        opt_options.shadow == undefined && (opt_options.shadow = "7px -3px 5px rgba(88,88,88,0.7)");
                        opt_options.anchor == undefined && (opt_options.anchor = RichMarkerPosition.BOTTOM);
                        this.setValues(options);
                    }
                    ClusterIcon.prototype.onAdd = function() {
                        var cMouseDownInCluster, cDraggingMapByCluster, cClusterIcon = this;
                        this.div_ = document.createElement("div"), this.div_.className = this.className_, 
                        this.visible_ && this.show(), this.getPanes().overlayMouseTarget.appendChild(this.div_), 
                        this.boundsChangedListener_ = google.maps.event.addListener(this.getMap(), "bounds_changed", function() {
                            cDraggingMapByCluster = cMouseDownInCluster;
                        }), google.maps.event.addDomListener(this.div_, "mousedown", function() {
                            cMouseDownInCluster = !0, cDraggingMapByCluster = !1;
                        }), google.maps.event.addDomListener(this.div_, "click", function(e) {
                            if (cMouseDownInCluster = !1, !cDraggingMapByCluster) {
                                var theBounds, mz, mc = cClusterIcon.cluster_.getMarkerClusterer();
                                google.maps.event.trigger(mc, "click", cClusterIcon.cluster_), google.maps.event.trigger(mc, "clusterclick", cClusterIcon.cluster_), 
                                mc.getZoomOnClick() && (mz = mc.getMaxZoom(), theBounds = cClusterIcon.cluster_.getBounds(), 
                                mc.getMap().fitBounds(theBounds), setTimeout(function() {
                                    mc.getMap().fitBounds(theBounds), null !== mz && mc.getMap().getZoom() > mz && mc.getMap().setZoom(mz + 1);
                                }, 100)), e.cancelBubble = !0, e.stopPropagation && e.stopPropagation();
                            }
                        }), google.maps.event.addDomListener(this.div_, "mouseover", function() {
                            var mc = cClusterIcon.cluster_.getMarkerClusterer();
                            google.maps.event.trigger(mc, "mouseover", cClusterIcon.cluster_);
                        }), google.maps.event.addDomListener(this.div_, "mouseout", function() {
                            var mc = cClusterIcon.cluster_.getMarkerClusterer();
                            google.maps.event.trigger(mc, "mouseout", cClusterIcon.cluster_);
                        });
                    }, ClusterIcon.prototype.onRemove = function() {
                        this.div_ && this.div_.parentNode && (this.hide(), google.maps.event.removeListener(this.boundsChangedListener_), 
                        google.maps.event.clearInstanceListeners(this.div_), this.div_.parentNode.removeChild(this.div_), 
                        this.div_ = null);
                    }, ClusterIcon.prototype.draw = function() {
                        if (this.visible_) {
                            var pos = this.getPosFromLatLng_(this.center_);
                            this.div_.style.top = pos.y + "px", this.div_.style.left = pos.x + "px";
                        }
                    }, ClusterIcon.prototype.hide = function() {
                        this.div_ && (this.div_.style.display = "none"), this.visible_ = !1;
                    }, ClusterIcon.prototype.show = function() {
                        if (this.div_) {
                            var img = "", bp = this.backgroundPosition_.split(" "), spriteH = parseInt(bp[0].trim(), 10), spriteV = parseInt(bp[1].trim(), 10), pos = this.getPosFromLatLng_(this.center_);
                            this.div_.style.cssText = this.createCss(pos), img = "<img src='" + this.url_ + "' style='position: absolute; top: " + spriteV + "px; left: " + spriteH + "px; ", 
                            img += this.cluster_.getMarkerClusterer().enableRetinaIcons_ ? "width: " + this.width_ + "px;height: " + this.height_ + "px;" : "clip: rect(" + -1 * spriteV + "px, " + (-1 * spriteH + this.width_) + "px, " + (-1 * spriteV + this.height_) + "px, " + -1 * spriteH + "px);", 
                            img += "'>", this.div_.innerHTML = img + "<div style='position: absolute;top: " + this.anchorText_[0] + "px;left: " + this.anchorText_[1] + "px;color: " + this.textColor_ + ";font-size: " + this.textSize_ + "px;font-family: " + this.fontFamily_ + ";font-weight: " + this.fontWeight_ + ";font-style: " + this.fontStyle_ + ";text-decoration: " + this.textDecoration_ + ";text-align: center;width: " + this.width_ + "px;line-height:" + this.height_ + "px;'>" + (this.cluster_.hideLabel_ ? " " : this.sums_.text) + "</div>", 
                            this.div_.title = void 0 === this.sums_.title || "" === this.sums_.title ? this.cluster_.getMarkerClusterer().getTitle() : this.sums_.title, 
                            this.div_.style.display = "";
                        }
                        this.visible_ = !0;
                    }, ClusterIcon.prototype.useStyle = function(sums) {
                        this.sums_ = sums;
                        var index = Math.max(0, sums.index - 1);
                        index = Math.min(this.styles_.length - 1, index);
                        var style = this.styles_[index];
                        this.url_ = style.url, this.height_ = style.height, this.width_ = style.width, this.anchorText_ = style.anchorText || [ 0, 0 ], 
                        this.anchorIcon_ = style.anchorIcon || [ parseInt(this.height_ / 2, 10), parseInt(this.width_ / 2, 10) ], 
                        this.textColor_ = style.textColor || "black", this.textSize_ = style.textSize || 11, 
                        this.textDecoration_ = style.textDecoration || "none", this.fontWeight_ = style.fontWeight || "bold", 
                        this.fontStyle_ = style.fontStyle || "normal", this.fontFamily_ = style.fontFamily || "Arial,sans-serif", 
                        this.backgroundPosition_ = style.backgroundPosition || "0 0";
                    }, ClusterIcon.prototype.setCenter = function(center) {
                        this.center_ = center;
                    }, ClusterIcon.prototype.createCss = function(pos) {
                        var style = [];
                        return style.push("cursor: pointer;"), style.push("position: absolute; top: " + pos.y + "px; left: " + pos.x + "px;"), 
                        style.push("width: " + this.width_ + "px; height: " + this.height_ + "px;"), style.join("");
                    }, ClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {
                        var pos = this.getProjection().fromLatLngToDivPixel(latlng);
                        return pos.x -= this.anchorIcon_[1], pos.y -= this.anchorIcon_[0], pos.x = parseInt(pos.x, 10), 
                        pos.y = parseInt(pos.y, 10), pos;
                    }, Cluster.prototype.getSize = function() {
                        return this.markers_.length;
                    }, Cluster.prototype.getMarkers = function() {
                        return this.markers_;
                    }, Cluster.prototype.getCenter = function() {
                        return this.center_;
                    }, Cluster.prototype.getMap = function() {
                        return this.map_;
                    }, Cluster.prototype.getMarkerClusterer = function() {
                        return this.markerClusterer_;
                    }, Cluster.prototype.getBounds = function() {
                        var i, bounds = new google.maps.LatLngBounds(this.center_, this.center_), markers = this.getMarkers();
                        for (i = 0; i < markers.length; i++) bounds.extend(markers[i].getPosition());
                        return bounds;
                    }, Cluster.prototype.remove = function() {
                        this.clusterIcon_.setMap(null), this.markers_ = [], delete this.markers_;
                    }, Cluster.prototype.addMarker = function(marker) {
                        var i, mCount, mz;
                        if (this.isMarkerAlreadyAdded_(marker)) return !1;
                        if (this.center_) {
                            if (this.averageCenter_) {
                                var l = this.markers_.length + 1, lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l, lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;
                                this.center_ = new google.maps.LatLng(lat, lng), this.calculateBounds_();
                            }
                        } else this.center_ = marker.getPosition(), this.calculateBounds_();
                        if (marker.isAdded = !0, this.markers_.push(marker), mCount = this.markers_.length, 
                        null !== (mz = this.markerClusterer_.getMaxZoom()) && this.map_.getZoom() > mz) marker.getMap() !== this.map_ && marker.setMap(this.map_); else if (mCount < this.minClusterSize_) marker.getMap() !== this.map_ && marker.setMap(this.map_); else if (mCount === this.minClusterSize_) for (i = 0; mCount > i; i++) this.markers_[i].setMap(null); else marker.setMap(null);
                        return !0;
                    }, Cluster.prototype.isMarkerInClusterBounds = function(marker) {
                        return this.bounds_.contains(marker.getPosition());
                    }, Cluster.prototype.calculateBounds_ = function() {
                        var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
                        this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);
                    }, Cluster.prototype.updateIcon_ = function() {
                        var mCount = this.markers_.length, mz = this.markerClusterer_.getMaxZoom();
                        if (null !== mz && this.map_.getZoom() > mz) return void this.clusterIcon_.hide();
                        if (mCount < this.minClusterSize_) return void this.clusterIcon_.hide();
                        var numStyles = this.markerClusterer_.getStyles().length, sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
                        this.clusterIcon_.setCenter(this.center_), this.clusterIcon_.useStyle(sums), this.clusterIcon_.show();
                    }, Cluster.prototype.isMarkerAlreadyAdded_ = function(marker) {
                        for (var i = 0, n = this.markers_.length; n > i; i++) if (marker === this.markers_[i]) return !0;
                        return !1;
                    }, MarkerClusterer.prototype.onAdd = function() {
                        var cMarkerClusterer = this;
                        this.activeMap_ = this.getMap(), this.ready_ = !0, this.repaint(), this.listeners_ = [ google.maps.event.addListener(this.getMap(), "zoom_changed", function() {
                            cMarkerClusterer.resetViewport_(!1), (this.getZoom() === (this.get("minZoom") || 0) || this.getZoom() === this.get("maxZoom")) && google.maps.event.trigger(this, "idle");
                        }), google.maps.event.addListener(this.getMap(), "idle", function() {
                            cMarkerClusterer.redraw_();
                        }) ];
                    }, MarkerClusterer.prototype.onRemove = function() {
                        var i;
                        for (i = 0; i < this.markers_.length; i++) this.markers_[i].getMap() !== this.activeMap_ && this.markers_[i].setMap(this.activeMap_);
                        for (i = 0; i < this.clusters_.length; i++) this.clusters_[i].remove();
                        for (this.clusters_ = [], i = 0; i < this.listeners_.length; i++) google.maps.event.removeListener(this.listeners_[i]);
                        this.listeners_ = [], this.activeMap_ = null, this.ready_ = !1;
                    }, MarkerClusterer.prototype.draw = function() {}, MarkerClusterer.prototype.setupStyles_ = function() {
                        var i, size;
                        if (!(this.styles_.length > 0)) for (i = 0; i < this.imageSizes_.length; i++) size = this.imageSizes_[i], 
                        this.styles_.push({
                            url: this.imagePath_ + (i + 1) + "." + this.imageExtension_,
                            height: size,
                            width: size
                        });
                    }, MarkerClusterer.prototype.fitMapToMarkers = function() {
                        var i, markers = this.getMarkers(), bounds = new google.maps.LatLngBounds();
                        for (i = 0; i < markers.length; i++) bounds.extend(markers[i].getPosition());
                        this.getMap().fitBounds(bounds);
                    }, MarkerClusterer.prototype.getGridSize = function() {
                        return this.gridSize_;
                    }, MarkerClusterer.prototype.setGridSize = function(gridSize) {
                        this.gridSize_ = gridSize;
                    }, MarkerClusterer.prototype.getMinimumClusterSize = function() {
                        return this.minClusterSize_;
                    }, MarkerClusterer.prototype.setMinimumClusterSize = function(minimumClusterSize) {
                        this.minClusterSize_ = minimumClusterSize;
                    }, MarkerClusterer.prototype.getMaxZoom = function() {
                        return this.maxZoom_;
                    }, MarkerClusterer.prototype.setMaxZoom = function(maxZoom) {
                        this.maxZoom_ = maxZoom;
                    }, MarkerClusterer.prototype.getStyles = function() {
                        return this.styles_;
                    }, MarkerClusterer.prototype.setStyles = function(styles) {
                        this.styles_ = styles;
                    }, MarkerClusterer.prototype.getTitle = function() {
                        return this.title_;
                    }, MarkerClusterer.prototype.setTitle = function(title) {
                        this.title_ = title;
                    }, MarkerClusterer.prototype.getZoomOnClick = function() {
                        return this.zoomOnClick_;
                    }, MarkerClusterer.prototype.setZoomOnClick = function(zoomOnClick) {
                        this.zoomOnClick_ = zoomOnClick;
                    }, MarkerClusterer.prototype.getAverageCenter = function() {
                        return this.averageCenter_;
                    }, MarkerClusterer.prototype.setAverageCenter = function(averageCenter) {
                        this.averageCenter_ = averageCenter;
                    }, MarkerClusterer.prototype.getIgnoreHidden = function() {
                        return this.ignoreHidden_;
                    }, MarkerClusterer.prototype.setIgnoreHidden = function(ignoreHidden) {
                        this.ignoreHidden_ = ignoreHidden;
                    }, MarkerClusterer.prototype.getEnableRetinaIcons = function() {
                        return this.enableRetinaIcons_;
                    }, MarkerClusterer.prototype.setEnableRetinaIcons = function(enableRetinaIcons) {
                        this.enableRetinaIcons_ = enableRetinaIcons;
                    }, MarkerClusterer.prototype.getImageExtension = function() {
                        return this.imageExtension_;
                    }, MarkerClusterer.prototype.setImageExtension = function(imageExtension) {
                        this.imageExtension_ = imageExtension;
                    }, MarkerClusterer.prototype.getImagePath = function() {
                        return this.imagePath_;
                    }, MarkerClusterer.prototype.setImagePath = function(imagePath) {
                        this.imagePath_ = imagePath;
                    }, MarkerClusterer.prototype.getImageSizes = function() {
                        return this.imageSizes_;
                    }, MarkerClusterer.prototype.setImageSizes = function(imageSizes) {
                        this.imageSizes_ = imageSizes;
                    }, MarkerClusterer.prototype.getCalculator = function() {
                        return this.calculator_;
                    }, MarkerClusterer.prototype.setCalculator = function(calculator) {
                        this.calculator_ = calculator;
                    }, MarkerClusterer.prototype.setHideLabel = function(hideLabel) {
                        this.hideLabel_ = hideLabel;
                    }, MarkerClusterer.prototype.getHideLabel = function() {
                        return this.hideLabel_;
                    }, MarkerClusterer.prototype.getBatchSizeIE = function() {
                        return this.batchSizeIE_;
                    }, MarkerClusterer.prototype.setBatchSizeIE = function(batchSizeIE) {
                        this.batchSizeIE_ = batchSizeIE;
                    }, MarkerClusterer.prototype.getClusterClass = function() {
                        return this.clusterClass_;
                    }, MarkerClusterer.prototype.setClusterClass = function(clusterClass) {
                        this.clusterClass_ = clusterClass;
                    }, MarkerClusterer.prototype.getMarkers = function() {
                        return this.markers_;
                    }, MarkerClusterer.prototype.getTotalMarkers = function() {
                        return this.markers_.length;
                    }, MarkerClusterer.prototype.getClusters = function() {
                        return this.clusters_;
                    }, MarkerClusterer.prototype.getTotalClusters = function() {
                        return this.clusters_.length;
                    }, MarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {
                        this.pushMarkerTo_(marker), opt_nodraw || this.redraw_();
                    }, MarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {
                        var key;
                        for (key in markers) markers.hasOwnProperty(key) && this.pushMarkerTo_(markers[key]);
                        opt_nodraw || this.redraw_();
                    }, MarkerClusterer.prototype.pushMarkerTo_ = function(marker) {
                        if (marker.getDraggable()) {
                            var cMarkerClusterer = this;
                            google.maps.event.addListener(marker, "dragend", function() {
                                cMarkerClusterer.ready_ && (this.isAdded = !1, cMarkerClusterer.repaint());
                            });
                        }
                        marker.isAdded = !1, this.markers_.push(marker);
                    }, MarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw, opt_noMapRemove) {
                        var removeFromMap = !opt_noMapRemove, removed = this.removeMarker_(marker, removeFromMap);
                        return !opt_nodraw && removed && this.repaint(), removed;
                    }, MarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw, opt_noMapRemove) {
                        var i, r, removed = !1, removeFromMap = !opt_noMapRemove;
                        for (i = 0; i < markers.length; i++) r = this.removeMarker_(markers[i], removeFromMap), 
                        removed = removed || r;
                        return !opt_nodraw && removed && this.repaint(), removed;
                    }, MarkerClusterer.prototype.removeMarker_ = function(marker, removeFromMap) {
                        var i, index = -1;
                        if (this.markers_.indexOf) index = this.markers_.indexOf(marker); else for (i = 0; i < this.markers_.length; i++) if (marker === this.markers_[i]) {
                            index = i;
                            break;
                        }
                        return -1 !== index && (removeFromMap && marker.setMap(null), this.markers_.splice(index, 1), 
                        !0);
                    }, MarkerClusterer.prototype.clearMarkers = function() {
                        this.resetViewport_(!0), this.markers_ = [];
                    }, MarkerClusterer.prototype.repaint = function() {
                        var oldClusters = this.clusters_.slice();
                        this.clusters_ = [], this.resetViewport_(!1), this.redraw_(), setTimeout(function() {
                            var i;
                            for (i = 0; i < oldClusters.length; i++) oldClusters[i].remove();
                        }, 0);
                    }, MarkerClusterer.prototype.getExtendedBounds = function(bounds) {
                        var projection = this.getProjection(), tr = new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng()), bl = new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng()), trPix = projection.fromLatLngToDivPixel(tr);
                        trPix.x += this.gridSize_, trPix.y -= this.gridSize_;
                        var blPix = projection.fromLatLngToDivPixel(bl);
                        blPix.x -= this.gridSize_, blPix.y += this.gridSize_;
                        var ne = projection.fromDivPixelToLatLng(trPix), sw = projection.fromDivPixelToLatLng(blPix);
                        return bounds.extend(ne), bounds.extend(sw), bounds;
                    }, MarkerClusterer.prototype.redraw_ = function() {
                        this.createClusters_(0);
                    }, MarkerClusterer.prototype.resetViewport_ = function(opt_hide) {
                        var i, marker;
                        for (i = 0; i < this.clusters_.length; i++) this.clusters_[i].remove();
                        for (this.clusters_ = [], i = 0; i < this.markers_.length; i++) marker = this.markers_[i], 
                        marker.isAdded = !1, opt_hide && marker.setMap(null);
                    }, MarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {
                        var dLat = (p2.lat() - p1.lat()) * Math.PI / 180, dLon = (p2.lng() - p1.lng()) * Math.PI / 180, a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
                        return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)) * 6371;
                    }, MarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {
                        return bounds.contains(marker.getPosition());
                    }, MarkerClusterer.prototype.addToClosestCluster_ = function(marker) {
                        var i, d, cluster, center, distance = 4e4, clusterToAddTo = null;
                        for (i = 0; i < this.clusters_.length; i++) cluster = this.clusters_[i], (center = cluster.getCenter()) && (d = this.distanceBetweenPoints_(center, marker.getPosition()), 
                        distance > d && (distance = d, clusterToAddTo = cluster));
                        clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker) ? clusterToAddTo.addMarker(marker) : (cluster = new Cluster(this), 
                        cluster.addMarker(marker), this.clusters_.push(cluster));
                    }, MarkerClusterer.prototype.createClusters_ = function(iFirst) {
                        var i, marker, mapBounds, cMarkerClusterer = this;
                        if (this.ready_) {
                            0 === iFirst && (google.maps.event.trigger(this, "clusteringbegin", this), void 0 !== this.timerRefStatic && (clearTimeout(this.timerRefStatic), 
                            delete this.timerRefStatic)), mapBounds = this.getMap().getZoom() > 3 ? new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast()) : new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));
                            var bounds = this.getExtendedBounds(mapBounds), iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);
                            for (i = iFirst; iLast > i; i++) marker = this.markers_[i], !marker.isAdded && this.isMarkerInBounds_(marker, bounds) && (!this.ignoreHidden_ || this.ignoreHidden_ && marker.getVisible()) && this.addToClosestCluster_(marker);
                            if (iLast < this.markers_.length) this.timerRefStatic = setTimeout(function() {
                                cMarkerClusterer.createClusters_(iLast);
                            }, 0); else for (delete this.timerRefStatic, google.maps.event.trigger(this, "clusteringend", this), 
                            i = 0; i < this.clusters_.length; i++) this.clusters_[i].updateIcon_();
                        }
                    }, MarkerClusterer.prototype.extend = function(obj1, obj2) {
                        return function(object) {
                            var property;
                            for (property in object.prototype) this.prototype[property] = object.prototype[property];
                            return this;
                        }.apply(obj1, [ obj2 ]);
                    }, MarkerClusterer.CALCULATOR = function(markers, numStyles) {
                        for (var index = 0, count = markers.length.toString(), dv = count; 0 !== dv; ) dv = parseInt(dv / 10, 10), 
                        index++;
                        return index = Math.min(index, numStyles), {
                            text: count,
                            index: index,
                            title: ""
                        };
                    }, MarkerClusterer.BATCH_SIZE = 2e3, MarkerClusterer.BATCH_SIZE_IE = 500, MarkerClusterer.IMAGE_PATH = "//cdn.rawgit.com/mahnunchik/markerclustererplus/master/images/m", 
                    MarkerClusterer.IMAGE_EXTENSION = "png", MarkerClusterer.IMAGE_SIZES = [ 53, 56, 66, 78, 90 ], 
                    "function" != typeof String.prototype.trim && (String.prototype.trim = function() {
                        return this.replace(/^\s+|\s+$/g, "");
                    });
                    /* InfoBox extends OverlayView in the Google Maps API v3.
 */
                    InfoBox.prototype = new google.maps.OverlayView();
                    /**
 * Creates the DIV representing the InfoBox.
 * @private
 */
                    InfoBox.prototype.createInfoBoxDiv_ = function() {
                        var i, events, bw, me = this, cancelHandler = function(e) {
                            e.cancelBubble = !0;
                            e.stopPropagation && e.stopPropagation();
                        }, ignoreHandler = function(e) {
                            e.returnValue = !1;
                            e.preventDefault && e.preventDefault();
                            me.enableEventPropagation_ || cancelHandler(e);
                        };
                        if (!this.div_) {
                            this.div_ = document.createElement("div");
                            this.setBoxStyle_();
                            if (void 0 === this.content_.nodeType) this.div_.innerHTML = this.getCloseBoxImg_() + this.content_; else {
                                this.div_.innerHTML = this.getCloseBoxImg_();
                                this.div_.appendChild(this.content_);
                            }
                            // Add the InfoBox DIV to the DOM
                            this.getPanes()[this.pane_].appendChild(this.div_);
                            this.addClickHandler_();
                            if (this.div_.style.width) this.fixedWidthSet_ = !0; else if (0 !== this.maxWidth_ && this.div_.offsetWidth > this.maxWidth_) {
                                this.div_.style.width = this.maxWidth_;
                                this.div_.style.overflow = "auto";
                                this.fixedWidthSet_ = !0;
                            } else {
                                // The following code is needed to overcome problems with MSIE
                                bw = this.getBoxWidths_();
                                this.div_.style.width = this.div_.offsetWidth - bw.left - bw.right + "px";
                                this.fixedWidthSet_ = !1;
                            }
                            this.panBox_(this.disableAutoPan_);
                            if (!this.enableEventPropagation_) {
                                this.eventListeners_ = [];
                                // Cancel event propagation.
                                //
                                // Note: mousemove not included (to resolve Issue 152)
                                events = [ "mousedown", "mouseover", "mouseout", "mouseup", "click", "dblclick", "touchstart", "touchend", "touchmove" ];
                                for (i = 0; i < events.length; i++) this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));
                                // Workaround for Google bug that causes the cursor to change to a pointer
                                // when the mouse moves over a marker underneath InfoBox.
                                this.eventListeners_.push(google.maps.event.addDomListener(this.div_, "mouseover", function(e) {
                                    this.style.cursor = "default";
                                }));
                            }
                            this.contextListener_ = google.maps.event.addDomListener(this.div_, "contextmenu", ignoreHandler);
                            /**
     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.
     * @name InfoBox#domready
     * @event
     */
                            google.maps.event.trigger(this, "domready");
                        }
                    };
                    /**
 * Returns the HTML <IMG> tag for the close box.
 * @private
 */
                    InfoBox.prototype.getCloseBoxImg_ = function() {
                        var img = "";
                        if ("" !== this.closeBoxURL_) {
                            img = "<img";
                            img += " src='" + this.closeBoxURL_ + "'";
                            img += " align=right";
                            // Do this because Opera chokes on style='float: right;'
                            img += " style='";
                            img += " position: relative;";
                            // Required by MSIE
                            img += " cursor: pointer;";
                            img += " margin: " + this.closeBoxMargin_ + ";";
                            img += "'>";
                        }
                        return img;
                    };
                    /**
 * Adds the click handler to the InfoBox close box.
 * @private
 */
                    InfoBox.prototype.addClickHandler_ = function() {
                        var closeBox;
                        if ("" !== this.closeBoxURL_) {
                            closeBox = this.div_.firstChild;
                            this.closeListener_ = google.maps.event.addDomListener(closeBox, "click", this.getCloseClickHandler_());
                        } else this.closeListener_ = null;
                    };
                    /**
 * Returns the function to call when the user clicks the close box of an InfoBox.
 * @private
 */
                    InfoBox.prototype.getCloseClickHandler_ = function() {
                        var me = this;
                        return function(e) {
                            // 1.0.3 fix: Always prevent propagation of a close box click to the map:
                            e.cancelBubble = !0;
                            e.stopPropagation && e.stopPropagation();
                            /**
     * This event is fired when the InfoBox's close box is clicked.
     * @name InfoBox#closeclick
     * @event
     */
                            google.maps.event.trigger(me, "closeclick");
                            me.close();
                        };
                    };
                    /**
 * Pans the map so that the InfoBox appears entirely within the map's visible area.
 * @private
 */
                    InfoBox.prototype.panBox_ = function(disablePan) {
                        var map, xOffset = 0, yOffset = 0;
                        if (!disablePan) {
                            map = this.getMap();
                            if (map instanceof google.maps.Map) {
                                // Only pan if attached to map, not panorama
                                map.getBounds().contains(this.position_) || // Marker not in visible area of map, so set center
                                // of map to the marker position first.
                                map.setCenter(this.position_);
                                map.getBounds();
                                var mapDiv = map.getDiv(), mapWidth = mapDiv.offsetWidth, mapHeight = mapDiv.offsetHeight, iwOffsetX = this.pixelOffset_.width, iwOffsetY = this.pixelOffset_.height, iwWidth = this.div_.offsetWidth, iwHeight = this.div_.offsetHeight, padX = this.infoBoxClearance_.width, padY = this.infoBoxClearance_.height, pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);
                                pixPosition.x < -iwOffsetX + padX ? xOffset = pixPosition.x + iwOffsetX - padX : pixPosition.x + iwWidth + iwOffsetX + padX > mapWidth && (xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth);
                                this.alignBottom_ ? pixPosition.y < -iwOffsetY + padY + iwHeight ? yOffset = pixPosition.y + iwOffsetY - padY - iwHeight : pixPosition.y + iwOffsetY + padY > mapHeight && (yOffset = pixPosition.y + iwOffsetY + padY - mapHeight) : pixPosition.y < -iwOffsetY + padY ? yOffset = pixPosition.y + iwOffsetY - padY : pixPosition.y + iwHeight + iwOffsetY + padY > mapHeight && (yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight);
                                if (0 !== xOffset || 0 !== yOffset) {
                                    // Move the map to the shifted center.
                                    //
                                    map.getCenter();
                                    map.panBy(xOffset, yOffset);
                                }
                            }
                        }
                    };
                    /**
 * Sets the style of the InfoBox by setting the style sheet and applying
 * other specific styles requested.
 * @private
 */
                    InfoBox.prototype.setBoxStyle_ = function() {
                        var i, boxStyle;
                        if (this.div_) {
                            // Apply style values from the style sheet defined in the boxClass parameter:
                            this.div_.className = this.boxClass_;
                            // Clear existing inline style values:
                            this.div_.style.cssText = "";
                            // Apply style values defined in the boxStyle parameter:
                            boxStyle = this.boxStyle_;
                            for (i in boxStyle) boxStyle.hasOwnProperty(i) && (this.div_.style[i] = boxStyle[i]);
                            // Fix for iOS disappearing InfoBox problem.
                            // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad
                            this.div_.style.WebkitTransform = "translateZ(0)";
                            // Fix up opacity style for benefit of MSIE:
                            //
                            if (void 0 !== this.div_.style.opacity && "" !== this.div_.style.opacity) {
                                // See http://www.quirksmode.org/css/opacity.html
                                this.div_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(Opacity=' + 100 * this.div_.style.opacity + ')"';
                                this.div_.style.filter = "alpha(opacity=" + 100 * this.div_.style.opacity + ")";
                            }
                            // Apply required styles:
                            //
                            this.div_.style.position = "absolute";
                            this.div_.style.visibility = "hidden";
                            null !== this.zIndex_ && (this.div_.style.zIndex = this.zIndex_);
                        }
                    };
                    /**
 * Get the widths of the borders of the InfoBox.
 * @private
 * @return {Object} widths object (top, bottom left, right)
 */
                    InfoBox.prototype.getBoxWidths_ = function() {
                        var computedStyle, bw = {
                            top: 0,
                            bottom: 0,
                            left: 0,
                            right: 0
                        }, box = this.div_;
                        if (document.defaultView && document.defaultView.getComputedStyle) {
                            computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, "");
                            if (computedStyle) {
                                // The computed styles are always in pixel units (good!)
                                bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;
                                bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
                                bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;
                                bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;
                            }
                        } else if (document.documentElement.currentStyle && box.currentStyle) {
                            // The current styles may not be in pixel units, but assume they are (bad!)
                            bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;
                            bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;
                            bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;
                            bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;
                        }
                        return bw;
                    };
                    /**
 * Invoked when <tt>close</tt> is called. Do not call it directly.
 */
                    InfoBox.prototype.onRemove = function() {
                        if (this.div_) {
                            this.div_.parentNode.removeChild(this.div_);
                            this.div_ = null;
                        }
                    };
                    /**
 * Draws the InfoBox based on the current map projection and zoom level.
 */
                    InfoBox.prototype.draw = function() {
                        this.createInfoBoxDiv_();
                        var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);
                        this.div_.style.left = pixPosition.x + this.pixelOffset_.width + "px";
                        this.alignBottom_ ? this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + "px" : this.div_.style.top = pixPosition.y + this.pixelOffset_.height + "px";
                        this.isHidden_ ? this.div_.style.visibility = "hidden" : this.div_.style.visibility = "visible";
                    };
                    /**
 * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,
 *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>
 *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one
 *  is <tt>open</tt>ed.
 * @param {InfoBoxOptions} opt_opts
 */
                    InfoBox.prototype.setOptions = function(opt_opts) {
                        if (void 0 !== opt_opts.boxClass) {
                            // Must be first
                            this.boxClass_ = opt_opts.boxClass;
                            this.setBoxStyle_();
                        }
                        if (void 0 !== opt_opts.boxStyle) {
                            // Must be second
                            this.boxStyle_ = opt_opts.boxStyle;
                            this.setBoxStyle_();
                        }
                        void 0 !== opt_opts.content && this.setContent(opt_opts.content);
                        void 0 !== opt_opts.disableAutoPan && (this.disableAutoPan_ = opt_opts.disableAutoPan);
                        void 0 !== opt_opts.maxWidth && (this.maxWidth_ = opt_opts.maxWidth);
                        void 0 !== opt_opts.pixelOffset && (this.pixelOffset_ = opt_opts.pixelOffset);
                        void 0 !== opt_opts.alignBottom && (this.alignBottom_ = opt_opts.alignBottom);
                        void 0 !== opt_opts.position && this.setPosition(opt_opts.position);
                        void 0 !== opt_opts.zIndex && this.setZIndex(opt_opts.zIndex);
                        void 0 !== opt_opts.closeBoxMargin && (this.closeBoxMargin_ = opt_opts.closeBoxMargin);
                        void 0 !== opt_opts.closeBoxURL && (this.closeBoxURL_ = opt_opts.closeBoxURL);
                        void 0 !== opt_opts.infoBoxClearance && (this.infoBoxClearance_ = opt_opts.infoBoxClearance);
                        void 0 !== opt_opts.isHidden && (this.isHidden_ = opt_opts.isHidden);
                        void 0 !== opt_opts.visible && (this.isHidden_ = !opt_opts.visible);
                        void 0 !== opt_opts.enableEventPropagation && (this.enableEventPropagation_ = opt_opts.enableEventPropagation);
                        this.div_ && this.draw();
                    };
                    /**
 * Sets the content of the InfoBox.
 *  The content can be plain text or an HTML DOM node.
 * @param {string|Node} content
 */
                    InfoBox.prototype.setContent = function(content) {
                        this.content_ = content;
                        if (this.div_) {
                            if (this.closeListener_) {
                                google.maps.event.removeListener(this.closeListener_);
                                this.closeListener_ = null;
                            }
                            // Odd code required to make things work with MSIE.
                            //
                            this.fixedWidthSet_ || (this.div_.style.width = "");
                            if (void 0 === content.nodeType) this.div_.innerHTML = this.getCloseBoxImg_() + content; else {
                                this.div_.innerHTML = this.getCloseBoxImg_();
                                this.div_.appendChild(content);
                            }
                            // Perverse code required to make things work with MSIE.
                            // (Ensures the close box does, in fact, float to the right.)
                            //
                            if (!this.fixedWidthSet_) {
                                this.div_.style.width = this.div_.offsetWidth + "px";
                                if (void 0 === content.nodeType) this.div_.innerHTML = this.getCloseBoxImg_() + content; else {
                                    this.div_.innerHTML = this.getCloseBoxImg_();
                                    this.div_.appendChild(content);
                                }
                            }
                            this.addClickHandler_();
                        }
                        /**
   * This event is fired when the content of the InfoBox changes.
   * @name InfoBox#content_changed
   * @event
   */
                        google.maps.event.trigger(this, "content_changed");
                    };
                    /**
 * Sets the geographic location of the InfoBox.
 * @param {LatLng} latlng
 */
                    InfoBox.prototype.setPosition = function(latlng) {
                        this.position_ = latlng;
                        this.div_ && this.draw();
                        /**
   * This event is fired when the position of the InfoBox changes.
   * @name InfoBox#position_changed
   * @event
   */
                        google.maps.event.trigger(this, "position_changed");
                    };
                    /**
 * Sets the zIndex style for the InfoBox.
 * @param {number} index
 */
                    InfoBox.prototype.setZIndex = function(index) {
                        this.zIndex_ = index;
                        this.div_ && (this.div_.style.zIndex = index);
                        /**
   * This event is fired when the zIndex of the InfoBox changes.
   * @name InfoBox#zindex_changed
   * @event
   */
                        google.maps.event.trigger(this, "zindex_changed");
                    };
                    /**
 * Sets the visibility of the InfoBox.
 * @param {boolean} isVisible
 */
                    InfoBox.prototype.setVisible = function(isVisible) {
                        this.isHidden_ = !isVisible;
                        this.div_ && (this.div_.style.visibility = this.isHidden_ ? "hidden" : "visible");
                    };
                    /**
 * Returns the content of the InfoBox.
 * @returns {string}
 */
                    InfoBox.prototype.getContent = function() {
                        return this.content_;
                    };
                    /**
 * Returns the geographic location of the InfoBox.
 * @returns {LatLng}
 */
                    InfoBox.prototype.getPosition = function() {
                        return this.position_;
                    };
                    /**
 * Returns the zIndex for the InfoBox.
 * @returns {number}
 */
                    InfoBox.prototype.getZIndex = function() {
                        return this.zIndex_;
                    };
                    /**
 * Returns a flag indicating whether the InfoBox is visible.
 * @returns {boolean}
 */
                    InfoBox.prototype.getVisible = function() {
                        var isVisible;
                        isVisible = void 0 !== this.getMap() && null !== this.getMap() && !this.isHidden_;
                        return isVisible;
                    };
                    /**
 * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]
 */
                    InfoBox.prototype.show = function() {
                        this.isHidden_ = !1;
                        this.div_ && (this.div_.style.visibility = "visible");
                    };
                    /**
 * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]
 */
                    InfoBox.prototype.hide = function() {
                        this.isHidden_ = !0;
                        this.div_ && (this.div_.style.visibility = "hidden");
                    };
                    /**
 * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>
 *  (usually a <tt>google.maps.Marker</tt>) is specified, the position
 *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the
 *  anchor is dragged to a new location, the InfoBox moves as well.
 * @param {Map|StreetViewPanorama} map
 * @param {MVCObject} [anchor]
 */
                    InfoBox.prototype.open = function(map, anchor) {
                        var me = this;
                        if (anchor) {
                            this.position_ = anchor.getPosition();
                            this.moveListener_ = google.maps.event.addListener(anchor, "position_changed", function() {
                                me.setPosition(this.getPosition());
                            });
                        }
                        this.setMap(map);
                        this.div_ && this.panBox_();
                    };
                    /**
 * Removes the InfoBox from the map.
 */
                    InfoBox.prototype.close = function() {
                        var i;
                        if (this.closeListener_) {
                            google.maps.event.removeListener(this.closeListener_);
                            this.closeListener_ = null;
                        }
                        if (this.eventListeners_) {
                            for (i = 0; i < this.eventListeners_.length; i++) google.maps.event.removeListener(this.eventListeners_[i]);
                            this.eventListeners_ = null;
                        }
                        if (this.moveListener_) {
                            google.maps.event.removeListener(this.moveListener_);
                            this.moveListener_ = null;
                        }
                        if (this.contextListener_) {
                            google.maps.event.removeListener(this.contextListener_);
                            this.contextListener_ = null;
                        }
                        this.setMap(null);
                    };
                    /**
 *  google-maps-utility-library-v3-keydragzoom
 *
 * @version: 2.0.9
 * @author: Nianwei Liu [nianwei at gmail dot com] & Gary Little [gary at luxcentral dot com]
 * @contributors: undefined
 * @date: Fri May 13 2016 13:45:18 GMT-0400 (EDT)
 * @license: Apache License 2.0
 */
                    /**
 * @fileoverview This library adds a drag zoom capability to a V3 Google map.
 *  When drag zoom is enabled, holding down a designated hot key <code>(shift | ctrl | alt)</code>
 *  while dragging a box around an area of interest will zoom the map in to that area when
 *  the mouse button is released. Optionally, a visual control can also be supplied for turning
 *  a drag zoom operation on and off.
 *  Only one line of code is needed: <code>google.maps.Map.enableKeyDragZoom();</code>
 *  <p>
 *  NOTE: Do not use Ctrl as the hot key with Google Maps JavaScript API V3 since, unlike with V2,
 *  it causes a context menu to appear when running on the Macintosh.
 *  <p>
 *  Note that if the map's container has a border around it, the border widths must be specified
 *  in pixel units (or as thin, medium, or thick). This is required because of an MSIE limitation.
 *   <p>NL: 2009-05-28: initial port to core API V3.
 *  <br>NL: 2009-11-02: added a temp fix for -moz-transform for FF3.5.x using code from Paul Kulchenko (http://notebook.kulchenko.com/maps/gridmove).
 *  <br>NL: 2010-02-02: added a fix for IE flickering on divs onmousemove, caused by scroll value when get mouse position.
 *  <br>GL: 2010-06-15: added a visual control option.
 */
                    !function() {
                        /**
   * @name KeyDragZoomOptions
   * @class This class represents the optional parameter passed into <code>google.maps.Map.enableKeyDragZoom</code>.
   * @property {string} [key="shift"] The hot key to hold down to activate a drag zoom, <code>shift | ctrl | alt</code>.
   *  NOTE: Do not use Ctrl as the hot key with Google Maps JavaScript API V3 since, unlike with V2,
   *  it causes a context menu to appear when running on the Macintosh. Also note that the
   *  <code>alt</code> hot key refers to the Option key on a Macintosh.
   * @property {Object} [boxStyle={border: "4px solid #736AFF"}]
   *  An object literal defining the CSS styles of the zoom box.
   *  Border widths must be specified in pixel units (or as thin, medium, or thick).
   * @property {Object} [veilStyle={backgroundColor: "gray", opacity: 0.25, cursor: "crosshair"}]
   *  An object literal defining the CSS styles of the veil pane which covers the map when a drag
   *  zoom is activated. The previous name for this property was <code>paneStyle</code> but the use
   *  of this name is now deprecated.
   * @property {boolean} [noZoom=false] A flag indicating whether to disable zooming after an area is
   *  selected. Set this to <code>true</code> to allow KeyDragZoom to be used as a simple area
   *  selection tool.
   * @property {boolean} [visualEnabled=false] A flag indicating whether a visual control is to be used.
   * @property {string} [visualClass=""] The name of the CSS class defining the styles for the visual
   *  control. To prevent the visual control from being printed, set this property to the name of
   *  a class, defined inside a <code>@media print</code> rule, which sets the CSS
   *  <code>display</code> style to <code>none</code>.
   * @property {ControlPosition} [visualPosition=google.maps.ControlPosition.LEFT_TOP]
   *  The position of the visual control.
   * @property {Size} [visualPositionOffset=google.maps.Size(35, 0)] The width and height values
   *  provided by this property are the offsets (in pixels) from the location at which the control
   *  would normally be drawn to the desired drawing location.
   * @property {number} [visualPositionIndex=null] The index of the visual control.
   *  The index is for controlling the placement of the control relative to other controls at the
   *  position given by <code>visualPosition</code>; controls with a lower index are placed first.
   *  Use a negative value to place the control <i>before</i> any default controls. No index is
   *  generally required.
   * @property {String} [visualSprite="http://maps.gstatic.com/mapfiles/ftr/controls/dragzoom_btn.png"]
   *  The URL of the sprite image used for showing the visual control in the on, off, and hot
   *  (i.e., when the mouse is over the control) states. The three images within the sprite must
   *  be the same size and arranged in on-hot-off order in a single row with no spaces between images.
   * @property {Size} [visualSize=google.maps.Size(20, 20)] The width and height values provided by
   *  this property are the size (in pixels) of each of the images within <code>visualSprite</code>.
   * @property {Object} [visualTips={off: "Turn on drag zoom mode", on: "Turn off drag zoom mode"}]
   *  An object literal defining the help tips that appear when
   *  the mouse moves over the visual control. The <code>off</code> property is the tip to be shown
   *  when the control is off and the <code>on</code> property is the tip to be shown when the
   *  control is on.
   */
                        /**
   * @name DragZoom
   * @class This class represents a drag zoom object for a map. The object is activated by holding down the hot key
   * or by turning on the visual control.
   * This object is created when <code>google.maps.Map.enableKeyDragZoom</code> is called; it cannot be created directly.
   * Use <code>google.maps.Map.getDragZoomObject</code> to gain access to this object in order to attach event listeners.
   * @param {Map} map The map to which the DragZoom object is to be attached.
   * @param {KeyDragZoomOptions} [opt_zoomOpts] The optional parameters.
   */
                        function DragZoom(map, opt_zoomOpts) {
                            var me = this, ov = new google.maps.OverlayView();
                            ov.onAdd = function() {
                                me.init_(map, opt_zoomOpts);
                            };
                            ov.draw = function() {};
                            ov.onRemove = function() {};
                            ov.setMap(map);
                            this.prjov_ = ov;
                        }
                        /*jslint browser:true */
                        /*global window,google */
                        /* Utility functions use "var funName=function()" syntax to allow use of the */
                        /* Dean Edwards Packer compression tool (with Shrink variables, without Base62 encode). */
                        /**
   * Converts "thin", "medium", and "thick" to pixel widths
   * in an MSIE environment. Not called for other browsers
   * because getComputedStyle() returns pixel widths automatically.
   * @param {string} widthValue The value of the border width parameter.
   */
                        var toPixels = function(widthValue) {
                            var px;
                            switch (widthValue) {
                              case "thin":
                                px = "2px";
                                break;

                              case "medium":
                                px = "4px";
                                break;

                              case "thick":
                                px = "6px";
                                break;

                              default:
                                px = widthValue;
                            }
                            return px;
                        }, getBorderWidths = function(h) {
                            var computedStyle, bw = {};
                            if (document.defaultView && document.defaultView.getComputedStyle) {
                                computedStyle = h.ownerDocument.defaultView.getComputedStyle(h, "");
                                if (computedStyle) {
                                    // The computed styles are always in pixel units (good!)
                                    bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;
                                    bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
                                    bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;
                                    bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;
                                    return bw;
                                }
                            } else if (document.documentElement.currentStyle && h.currentStyle) {
                                // The current styles may not be in pixel units so try to convert (bad!)
                                bw.top = parseInt(toPixels(h.currentStyle.borderTopWidth), 10) || 0;
                                bw.bottom = parseInt(toPixels(h.currentStyle.borderBottomWidth), 10) || 0;
                                bw.left = parseInt(toPixels(h.currentStyle.borderLeftWidth), 10) || 0;
                                bw.right = parseInt(toPixels(h.currentStyle.borderRightWidth), 10) || 0;
                                return bw;
                            }
                            // Shouldn't get this far for any modern browser
                            bw.top = parseInt(h.style["border-top-width"], 10) || 0;
                            bw.bottom = parseInt(h.style["border-bottom-width"], 10) || 0;
                            bw.left = parseInt(h.style["border-left-width"], 10) || 0;
                            bw.right = parseInt(h.style["border-right-width"], 10) || 0;
                            return bw;
                        }, scroll = {
                            x: 0,
                            y: 0
                        }, getScrollValue = function(e) {
                            scroll.x = void 0 !== document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft;
                            scroll.y = void 0 !== document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop;
                        };
                        getScrollValue();
                        /**
   * Get the position of the mouse relative to the document.
   * @param {Event} e  The mouse event.
   * @return {Object} The position object {left, top}.
   */
                        var getMousePosition = function(e) {
                            var posX = 0, posY = 0;
                            e = e || window.event;
                            if (void 0 !== e.pageX) {
                                posX = e.pageX;
                                posY = e.pageY;
                            } else if (void 0 !== e.clientX) {
                                // MSIE
                                posX = e.clientX + scroll.x;
                                posY = e.clientY + scroll.y;
                            }
                            return {
                                left: posX,
                                top: posY
                            };
                        }, getElementPosition = function(h) {
                            // Add offsets for all ancestors in the hierarchy
                            for (var posX = h.offsetLeft, posY = h.offsetTop, parent = h.offsetParent; null !== parent; ) {
                                // Adjust for scrolling elements which may affect the map position.
                                //
                                // See http://www.howtocreate.co.uk/tutorials/javascript/browserspecific
                                //
                                // "...make sure that every element [on a Web page] with an overflow
                                // of anything other than visible also has a position style set to
                                // something other than the default static..."
                                if (parent !== document.body && parent !== document.documentElement) {
                                    posX -= parent.scrollLeft;
                                    posY -= parent.scrollTop;
                                }
                                // See http://groups.google.com/group/google-maps-js-api-v3/browse_thread/thread/4cb86c0c1037a5e5
                                // Example: http://notebook.kulchenko.com/maps/gridmove
                                var m = parent, moffx = m.offsetLeft, moffy = m.offsetTop;
                                // This covers those cases where a transform is used:
                                if (!moffx && !moffy && window.getComputedStyle) {
                                    var matrix = document.defaultView.getComputedStyle(m, null).MozTransform || document.defaultView.getComputedStyle(m, null).WebkitTransform;
                                    if (matrix && "string" == typeof matrix) {
                                        var parms = matrix.split(",");
                                        moffx += parseInt(parms[4], 10) || 0;
                                        moffy += parseInt(parms[5], 10) || 0;
                                    }
                                }
                                posX += moffx;
                                posY += moffy;
                                parent = parent.offsetParent;
                            }
                            return {
                                left: posX,
                                top: posY
                            };
                        }, setVals = function(obj, vals) {
                            if (obj && vals) for (var x in vals) vals.hasOwnProperty(x) && (obj[x] = vals[x]);
                            return obj;
                        }, setOpacity = function(h, op) {
                            void 0 !== op && (h.style.opacity = op);
                            void 0 !== h.style.opacity && "" !== h.style.opacity && (h.style.filter = "alpha(opacity=" + 100 * h.style.opacity + ")");
                        };
                        /**
   * Initialize the tool.
   * @param {Map} map The map to which the DragZoom object is to be attached.
   * @param {KeyDragZoomOptions} [opt_zoomOpts] The optional parameters.
   */
                        DragZoom.prototype.init_ = function(map, opt_zoomOpts) {
                            var i, me = this;
                            this.map_ = map;
                            opt_zoomOpts = opt_zoomOpts || {};
                            this.key_ = opt_zoomOpts.key || "shift";
                            this.key_ = this.key_.toLowerCase();
                            this.borderWidths_ = getBorderWidths(this.map_.getDiv());
                            this.veilDiv_ = [];
                            for (i = 0; i < 4; i++) {
                                this.veilDiv_[i] = document.createElement("div");
                                // Prevents selection of other elements on the webpage
                                // when a drag zoom operation is in progress:
                                this.veilDiv_[i].onselectstart = function() {
                                    return !1;
                                };
                                // Apply default style values for the veil:
                                setVals(this.veilDiv_[i].style, {
                                    backgroundColor: "gray",
                                    opacity: .25,
                                    cursor: "crosshair"
                                });
                                // Apply style values specified in veilStyle parameter:
                                setVals(this.veilDiv_[i].style, opt_zoomOpts.paneStyle);
                                // Old option name was "paneStyle"
                                setVals(this.veilDiv_[i].style, opt_zoomOpts.veilStyle);
                                // New name is "veilStyle"
                                // Apply mandatory style values:
                                setVals(this.veilDiv_[i].style, {
                                    position: "absolute",
                                    overflow: "hidden",
                                    display: "none"
                                });
                                // Workaround for Firefox Shift-Click problem:
                                "shift" === this.key_ && (this.veilDiv_[i].style.MozUserSelect = "none");
                                setOpacity(this.veilDiv_[i]);
                                // An IE fix: If the background is transparent it cannot capture mousedown
                                // events, so if it is, change the background to white with 0 opacity.
                                if ("transparent" === this.veilDiv_[i].style.backgroundColor) {
                                    this.veilDiv_[i].style.backgroundColor = "white";
                                    setOpacity(this.veilDiv_[i], 0);
                                }
                                this.map_.getDiv().appendChild(this.veilDiv_[i]);
                            }
                            this.noZoom_ = opt_zoomOpts.noZoom || !1;
                            this.visualEnabled_ = opt_zoomOpts.visualEnabled || !1;
                            this.visualClass_ = opt_zoomOpts.visualClass || "";
                            this.visualPosition_ = opt_zoomOpts.visualPosition || google.maps.ControlPosition.LEFT_TOP;
                            this.visualPositionOffset_ = opt_zoomOpts.visualPositionOffset || new google.maps.Size(35, 0);
                            this.visualPositionIndex_ = opt_zoomOpts.visualPositionIndex || null;
                            this.visualSprite_ = opt_zoomOpts.visualSprite || "http" + ("https:" === document.location.protocol ? "s" : "") + "://maps.gstatic.com/mapfiles/ftr/controls/dragzoom_btn.png";
                            this.visualSize_ = opt_zoomOpts.visualSize || new google.maps.Size(20, 20);
                            this.visualTips_ = opt_zoomOpts.visualTips || {};
                            this.visualTips_.off = this.visualTips_.off || "Turn on drag zoom mode";
                            this.visualTips_.on = this.visualTips_.on || "Turn off drag zoom mode";
                            this.boxDiv_ = document.createElement("div");
                            // Apply default style values for the zoom box:
                            setVals(this.boxDiv_.style, {
                                border: "4px solid #736AFF"
                            });
                            // Apply style values specified in boxStyle parameter:
                            setVals(this.boxDiv_.style, opt_zoomOpts.boxStyle);
                            // Apply mandatory style values:
                            setVals(this.boxDiv_.style, {
                                position: "absolute",
                                display: "none"
                            });
                            setOpacity(this.boxDiv_);
                            this.map_.getDiv().appendChild(this.boxDiv_);
                            this.boxBorderWidths_ = getBorderWidths(this.boxDiv_);
                            this.listeners_ = [ google.maps.event.addDomListener(document, "keydown", function(e) {
                                me.onKeyDown_(e);
                            }), google.maps.event.addDomListener(document, "keyup", function(e) {
                                me.onKeyUp_(e);
                            }), google.maps.event.addDomListener(this.veilDiv_[0], "mousedown", function(e) {
                                me.onMouseDown_(e);
                            }), google.maps.event.addDomListener(this.veilDiv_[1], "mousedown", function(e) {
                                me.onMouseDown_(e);
                            }), google.maps.event.addDomListener(this.veilDiv_[2], "mousedown", function(e) {
                                me.onMouseDown_(e);
                            }), google.maps.event.addDomListener(this.veilDiv_[3], "mousedown", function(e) {
                                me.onMouseDown_(e);
                            }), google.maps.event.addDomListener(document, "mousedown", function(e) {
                                me.onMouseDownDocument_(e);
                            }), google.maps.event.addDomListener(document, "mousemove", function(e) {
                                me.onMouseMove_(e);
                            }), google.maps.event.addDomListener(document, "mouseup", function(e) {
                                me.onMouseUp_(e);
                            }), google.maps.event.addDomListener(window, "scroll", getScrollValue) ];
                            this.hotKeyDown_ = !1;
                            this.mouseDown_ = !1;
                            this.dragging_ = !1;
                            this.startPt_ = null;
                            this.endPt_ = null;
                            this.mapWidth_ = null;
                            this.mapHeight_ = null;
                            this.mousePosn_ = null;
                            this.mapPosn_ = null;
                            if (this.visualEnabled_) {
                                this.buttonDiv_ = this.initControl_(this.visualPositionOffset_);
                                null !== this.visualPositionIndex_ && (this.buttonDiv_.index = this.visualPositionIndex_);
                                this.map_.controls[this.visualPosition_].push(this.buttonDiv_);
                                this.controlIndex_ = this.map_.controls[this.visualPosition_].length - 1;
                            }
                        };
                        /**
   * Initializes the visual control and returns its DOM element.
   * @param {Size} offset The offset of the control from its normal position.
   * @return {Node} The DOM element containing the visual control.
   */
                        DragZoom.prototype.initControl_ = function(offset) {
                            var control, image, me = this;
                            control = document.createElement("div");
                            control.className = this.visualClass_;
                            control.style.position = "relative";
                            control.style.overflow = "hidden";
                            control.style.height = this.visualSize_.height + "px";
                            control.style.width = this.visualSize_.width + "px";
                            control.title = this.visualTips_.off;
                            image = document.createElement("img");
                            image.src = this.visualSprite_;
                            image.style.position = "absolute";
                            image.style.left = -2 * this.visualSize_.width + "px";
                            image.style.top = "0px";
                            control.appendChild(image);
                            control.onclick = function(e) {
                                me.hotKeyDown_ = !me.hotKeyDown_;
                                if (me.hotKeyDown_) {
                                    me.buttonDiv_.firstChild.style.left = -0 * me.visualSize_.width + "px";
                                    me.buttonDiv_.title = me.visualTips_.on;
                                    me.activatedByControl_ = !0;
                                    google.maps.event.trigger(me, "activate");
                                } else {
                                    me.buttonDiv_.firstChild.style.left = -2 * me.visualSize_.width + "px";
                                    me.buttonDiv_.title = me.visualTips_.off;
                                    google.maps.event.trigger(me, "deactivate");
                                }
                                me.onMouseMove_(e);
                            };
                            control.onmouseover = function() {
                                me.buttonDiv_.firstChild.style.left = -1 * me.visualSize_.width + "px";
                            };
                            control.onmouseout = function() {
                                if (me.hotKeyDown_) {
                                    me.buttonDiv_.firstChild.style.left = -0 * me.visualSize_.width + "px";
                                    me.buttonDiv_.title = me.visualTips_.on;
                                } else {
                                    me.buttonDiv_.firstChild.style.left = -2 * me.visualSize_.width + "px";
                                    me.buttonDiv_.title = me.visualTips_.off;
                                }
                            };
                            control.ondragstart = function() {
                                return !1;
                            };
                            setVals(control.style, {
                                cursor: "pointer",
                                marginTop: offset.height + "px",
                                marginLeft: offset.width + "px"
                            });
                            return control;
                        };
                        /**
   * Returns <code>true</code> if the hot key is being pressed when an event occurs.
   * @param {Event} e The keyboard event.
   * @return {boolean} Flag indicating whether the hot key is down.
   */
                        DragZoom.prototype.isHotKeyDown_ = function(e) {
                            var isHot;
                            e = e || window.event;
                            isHot = e.shiftKey && "shift" === this.key_ || e.altKey && "alt" === this.key_ || e.ctrlKey && "ctrl" === this.key_;
                            if (!isHot) // Need to look at keyCode for Opera because it
                            // doesn't set the shiftKey, altKey, ctrlKey properties
                            // unless a non-modifier event is being reported.
                            //
                            // See http://cross-browser.com/x/examples/shift_mode.php
                            // Also see http://unixpapa.com/js/key.html
                            switch (e.keyCode) {
                              case 16:
                                "shift" === this.key_ && (isHot = !0);
                                break;

                              case 17:
                                "ctrl" === this.key_ && (isHot = !0);
                                break;

                              case 18:
                                "alt" === this.key_ && (isHot = !0);
                            }
                            return isHot;
                        };
                        /**
   * Returns <code>true</code> if the mouse is on top of the map div.
   * The position is captured in onMouseMove_.
   * @return {boolean}
   */
                        DragZoom.prototype.isMouseOnMap_ = function() {
                            var mousePosn = this.mousePosn_;
                            if (mousePosn) {
                                var mapPosn = this.mapPosn_, mapDiv = this.map_.getDiv();
                                return mousePosn.left > mapPosn.left && mousePosn.left < mapPosn.left + mapDiv.offsetWidth && mousePosn.top > mapPosn.top && mousePosn.top < mapPosn.top + mapDiv.offsetHeight;
                            }
                            // if user never moved mouse
                            return !1;
                        };
                        /**
   * Show the veil if the hot key is down and the mouse is over the map,
   * otherwise hide the veil.
   */
                        DragZoom.prototype.setVeilVisibility_ = function() {
                            var i;
                            if (this.map_ && this.hotKeyDown_ && this.isMouseOnMap_()) {
                                var mapDiv = this.map_.getDiv();
                                this.mapWidth_ = mapDiv.offsetWidth - (this.borderWidths_.left + this.borderWidths_.right);
                                this.mapHeight_ = mapDiv.offsetHeight - (this.borderWidths_.top + this.borderWidths_.bottom);
                                if (this.activatedByControl_) {
                                    // Veil covers entire map (except control)
                                    var left = parseInt(this.buttonDiv_.style.left, 10) + this.visualPositionOffset_.width, top = parseInt(this.buttonDiv_.style.top, 10) + this.visualPositionOffset_.height, width = this.visualSize_.width, height = this.visualSize_.height;
                                    // Left veil rectangle:
                                    this.veilDiv_[0].style.top = "0px";
                                    this.veilDiv_[0].style.left = "0px";
                                    this.veilDiv_[0].style.width = left + "px";
                                    this.veilDiv_[0].style.height = this.mapHeight_ + "px";
                                    // Right veil rectangle:
                                    this.veilDiv_[1].style.top = "0px";
                                    this.veilDiv_[1].style.left = left + width + "px";
                                    this.veilDiv_[1].style.width = this.mapWidth_ - (left + width) + "px";
                                    this.veilDiv_[1].style.height = this.mapHeight_ + "px";
                                    // Top veil rectangle:
                                    this.veilDiv_[2].style.top = "0px";
                                    this.veilDiv_[2].style.left = left + "px";
                                    this.veilDiv_[2].style.width = width + "px";
                                    this.veilDiv_[2].style.height = top + "px";
                                    // Bottom veil rectangle:
                                    this.veilDiv_[3].style.top = top + height + "px";
                                    this.veilDiv_[3].style.left = left + "px";
                                    this.veilDiv_[3].style.width = width + "px";
                                    this.veilDiv_[3].style.height = this.mapHeight_ - (top + height) + "px";
                                    for (i = 0; i < this.veilDiv_.length; i++) this.veilDiv_[i].style.display = "block";
                                } else {
                                    this.veilDiv_[0].style.left = "0px";
                                    this.veilDiv_[0].style.top = "0px";
                                    this.veilDiv_[0].style.width = this.mapWidth_ + "px";
                                    this.veilDiv_[0].style.height = this.mapHeight_ + "px";
                                    for (i = 1; i < this.veilDiv_.length; i++) {
                                        this.veilDiv_[i].style.width = "0px";
                                        this.veilDiv_[i].style.height = "0px";
                                    }
                                    for (i = 0; i < this.veilDiv_.length; i++) this.veilDiv_[i].style.display = "block";
                                }
                            } else for (i = 0; i < this.veilDiv_.length; i++) this.veilDiv_[i].style.display = "none";
                        };
                        /**
   * Handle key down. Show the veil if the hot key has been pressed.
   * @param {Event} e The keyboard event.
   */
                        DragZoom.prototype.onKeyDown_ = function(e) {
                            if (this.map_ && !this.hotKeyDown_ && this.isHotKeyDown_(e)) {
                                this.mapPosn_ = getElementPosition(this.map_.getDiv());
                                this.hotKeyDown_ = !0;
                                this.activatedByControl_ = !1;
                                this.setVeilVisibility_();
                                /**
       * This event is fired when the hot key is pressed.
       * @name DragZoom#activate
       * @event
       */
                                google.maps.event.trigger(this, "activate");
                            }
                        };
                        /**
   * Get the <code>google.maps.Point</code> of the mouse position.
   * @param {Event} e The mouse event.
   * @return {Point} The mouse position.
   */
                        DragZoom.prototype.getMousePoint_ = function(e) {
                            var mousePosn = getMousePosition(e), p = new google.maps.Point();
                            p.x = mousePosn.left - this.mapPosn_.left - this.borderWidths_.left;
                            p.y = mousePosn.top - this.mapPosn_.top - this.borderWidths_.top;
                            p.x = Math.min(p.x, this.mapWidth_);
                            p.y = Math.min(p.y, this.mapHeight_);
                            p.x = Math.max(p.x, 0);
                            p.y = Math.max(p.y, 0);
                            return p;
                        };
                        /**
   * Handle mouse down.
   * @param {Event} e The mouse event.
   */
                        DragZoom.prototype.onMouseDown_ = function(e) {
                            if (this.map_ && this.hotKeyDown_) {
                                this.mapPosn_ = getElementPosition(this.map_.getDiv());
                                this.dragging_ = !0;
                                this.startPt_ = this.endPt_ = this.getMousePoint_(e);
                                this.boxDiv_.style.width = this.boxDiv_.style.height = "0px";
                                var prj = this.prjov_.getProjection(), latlng = prj.fromContainerPixelToLatLng(this.startPt_);
                                /**
       * This event is fired when the drag operation begins.
       * The parameter passed is the geographic position of the starting point.
       * @name DragZoom#dragstart
       * @param {LatLng} latlng The geographic position of the starting point.
       * @event
       */
                                google.maps.event.trigger(this, "dragstart", latlng);
                            }
                        };
                        /**
   * Handle mouse down at the document level.
   * @param {Event} e The mouse event.
   */
                        DragZoom.prototype.onMouseDownDocument_ = function(e) {
                            this.mouseDown_ = !0;
                        };
                        /**
   * Handle mouse move.
   * @param {Event} e The mouse event.
   */
                        DragZoom.prototype.onMouseMove_ = function(e) {
                            this.mousePosn_ = getMousePosition(e);
                            if (this.dragging_) {
                                this.endPt_ = this.getMousePoint_(e);
                                var left = Math.min(this.startPt_.x, this.endPt_.x), top = Math.min(this.startPt_.y, this.endPt_.y), width = Math.abs(this.startPt_.x - this.endPt_.x), height = Math.abs(this.startPt_.y - this.endPt_.y), boxWidth = Math.max(0, width - (this.boxBorderWidths_.left + this.boxBorderWidths_.right)), boxHeight = Math.max(0, height - (this.boxBorderWidths_.top + this.boxBorderWidths_.bottom));
                                // Left veil rectangle:
                                this.veilDiv_[0].style.top = "0px";
                                this.veilDiv_[0].style.left = "0px";
                                this.veilDiv_[0].style.width = left + "px";
                                this.veilDiv_[0].style.height = this.mapHeight_ + "px";
                                // Right veil rectangle:
                                this.veilDiv_[1].style.top = "0px";
                                this.veilDiv_[1].style.left = left + width + "px";
                                this.veilDiv_[1].style.width = this.mapWidth_ - (left + width) + "px";
                                this.veilDiv_[1].style.height = this.mapHeight_ + "px";
                                // Top veil rectangle:
                                this.veilDiv_[2].style.top = "0px";
                                this.veilDiv_[2].style.left = left + "px";
                                this.veilDiv_[2].style.width = width + "px";
                                this.veilDiv_[2].style.height = top + "px";
                                // Bottom veil rectangle:
                                this.veilDiv_[3].style.top = top + height + "px";
                                this.veilDiv_[3].style.left = left + "px";
                                this.veilDiv_[3].style.width = width + "px";
                                this.veilDiv_[3].style.height = this.mapHeight_ - (top + height) + "px";
                                // Selection rectangle:
                                this.boxDiv_.style.top = top + "px";
                                this.boxDiv_.style.left = left + "px";
                                this.boxDiv_.style.width = boxWidth + "px";
                                this.boxDiv_.style.height = boxHeight + "px";
                                this.boxDiv_.style.display = "block";
                                /**
       * This event is fired repeatedly while the user drags a box across the area of interest.
       * The southwest and northeast point are passed as parameters of type <code>google.maps.Point</code>
       * (for performance reasons), relative to the map container. Also passed is the projection object
       * so that the event listener, if necessary, can convert the pixel positions to geographic
       * coordinates using <code>google.maps.MapCanvasProjection.fromContainerPixelToLatLng</code>.
       * @name DragZoom#drag
       * @param {Point} southwestPixel The southwest point of the selection area.
       * @param {Point} northeastPixel The northeast point of the selection area.
       * @param {MapCanvasProjection} prj The projection object.
       * @event
       */
                                google.maps.event.trigger(this, "drag", new google.maps.Point(left, top + height), new google.maps.Point(left + width, top), this.prjov_.getProjection());
                            } else if (!this.mouseDown_) {
                                this.mapPosn_ = getElementPosition(this.map_.getDiv());
                                this.setVeilVisibility_();
                            }
                        };
                        /**
   * Handle mouse up.
   * @param {Event} e The mouse event.
   */
                        DragZoom.prototype.onMouseUp_ = function(e) {
                            var z, me = this;
                            this.mouseDown_ = !1;
                            if (this.dragging_) {
                                if (this.getMousePoint_(e).x === this.startPt_.x && this.getMousePoint_(e).y === this.startPt_.y) {
                                    this.onKeyUp_(e);
                                    // Cancel event
                                    return;
                                }
                                var left = Math.min(this.startPt_.x, this.endPt_.x), top = Math.min(this.startPt_.y, this.endPt_.y), width = Math.abs(this.startPt_.x - this.endPt_.x), height = Math.abs(this.startPt_.y - this.endPt_.y);
                                left += this.borderWidths_.left;
                                top += this.borderWidths_.top;
                                var prj = this.prjov_.getProjection(), sw = prj.fromContainerPixelToLatLng(new google.maps.Point(left, top + height)), ne = prj.fromContainerPixelToLatLng(new google.maps.Point(left + width, top)), bnds = new google.maps.LatLngBounds(sw, ne);
                                if (this.noZoom_) this.boxDiv_.style.display = "none"; else {
                                    // Sometimes fitBounds causes a zoom OUT, so restore original zoom level if this happens.
                                    z = this.map_.getZoom();
                                    this.map_.fitBounds(bnds);
                                    this.map_.getZoom() < z && this.map_.setZoom(z);
                                    // Redraw box after zoom:
                                    var swPt = prj.fromLatLngToContainerPixel(sw), nePt = prj.fromLatLngToContainerPixel(ne);
                                    swPt.x -= this.borderWidths_.left;
                                    swPt.y -= this.borderWidths_.top;
                                    nePt.x -= this.borderWidths_.left;
                                    nePt.y -= this.borderWidths_.top;
                                    this.boxDiv_.style.left = swPt.x + "px";
                                    this.boxDiv_.style.top = nePt.y + "px";
                                    this.boxDiv_.style.width = Math.abs(nePt.x - swPt.x) - (this.boxBorderWidths_.left + this.boxBorderWidths_.right) + "px";
                                    this.boxDiv_.style.height = Math.abs(nePt.y - swPt.y) - (this.boxBorderWidths_.top + this.boxBorderWidths_.bottom) + "px";
                                    // Hide box asynchronously after 1 second:
                                    setTimeout(function() {
                                        me.boxDiv_.style.display = "none";
                                    }, 1e3);
                                }
                                this.dragging_ = !1;
                                this.onMouseMove_(e);
                                // Updates the veil
                                /**
       * This event is fired when the drag operation ends.
       * The parameter passed is the geographic bounds of the selected area.
       * Note that this event is <i>not</i> fired if the hot key is released before the drag operation ends.
       * @name DragZoom#dragend
       * @param {LatLngBounds} bnds The geographic bounds of the selected area.
       * @event
       */
                                google.maps.event.trigger(this, "dragend", bnds);
                                // if the hot key isn't down, the drag zoom must have been activated by turning
                                // on the visual control. In this case, finish up by simulating a key up event.
                                this.isHotKeyDown_(e) || this.onKeyUp_(e);
                            }
                        };
                        /**
   * Handle key up.
   * @param {Event} e The keyboard event.
   */
                        DragZoom.prototype.onKeyUp_ = function(e) {
                            var i, left, top, width, height, prj, sw, ne, bnds = null;
                            if (this.map_ && this.hotKeyDown_) {
                                this.hotKeyDown_ = !1;
                                if (this.dragging_) {
                                    this.boxDiv_.style.display = "none";
                                    this.dragging_ = !1;
                                    // Calculate the bounds when drag zoom was cancelled
                                    left = Math.min(this.startPt_.x, this.endPt_.x);
                                    top = Math.min(this.startPt_.y, this.endPt_.y);
                                    width = Math.abs(this.startPt_.x - this.endPt_.x);
                                    height = Math.abs(this.startPt_.y - this.endPt_.y);
                                    prj = this.prjov_.getProjection();
                                    sw = prj.fromContainerPixelToLatLng(new google.maps.Point(left, top + height));
                                    ne = prj.fromContainerPixelToLatLng(new google.maps.Point(left + width, top));
                                    bnds = new google.maps.LatLngBounds(sw, ne);
                                }
                                for (i = 0; i < this.veilDiv_.length; i++) this.veilDiv_[i].style.display = "none";
                                if (this.visualEnabled_) {
                                    this.buttonDiv_.firstChild.style.left = -2 * this.visualSize_.width + "px";
                                    this.buttonDiv_.title = this.visualTips_.off;
                                    this.buttonDiv_.style.display = "";
                                }
                                /**
       * This event is fired when the hot key is released.
       * The parameter passed is the geographic bounds of the selected area immediately
       * before the hot key was released.
       * @name DragZoom#deactivate
       * @param {LatLngBounds} bnds The geographic bounds of the selected area immediately
       *  before the hot key was released.
       * @event
       */
                                google.maps.event.trigger(this, "deactivate", bnds);
                            }
                        };
                        /**
   * @name google.maps.Map
   * @class These are new methods added to the Google Maps JavaScript API V3's
   * <a href="http://code.google.com/apis/maps/documentation/javascript/reference.html#Map">Map</a>
   * class.
   */
                        /**
   * Enables drag zoom. The user can zoom to an area of interest by holding down the hot key
   * <code>(shift | ctrl | alt )</code> while dragging a box around the area or by turning
   * on the visual control then dragging a box around the area.
   * @param {KeyDragZoomOptions} opt_zoomOpts The optional parameters.
   */
                        google.maps.Map.prototype.enableKeyDragZoom = function(opt_zoomOpts) {
                            this.dragZoom_ = new DragZoom(this, opt_zoomOpts);
                        };
                        /**
   * Disables drag zoom.
   */
                        google.maps.Map.prototype.disableKeyDragZoom = function() {
                            var i, d = this.dragZoom_;
                            if (d) {
                                for (i = 0; i < d.listeners_.length; ++i) google.maps.event.removeListener(d.listeners_[i]);
                                this.getDiv().removeChild(d.boxDiv_);
                                for (i = 0; i < d.veilDiv_.length; i++) this.getDiv().removeChild(d.veilDiv_[i]);
                                d.visualEnabled_ && // Remove the custom control:
                                this.controls[d.visualPosition_].removeAt(d.controlIndex_);
                                d.prjov_.setMap(null);
                                this.dragZoom_ = null;
                            }
                        };
                        /**
   * Returns <code>true</code> if the drag zoom feature has been enabled.
   * @return {boolean}
   */
                        google.maps.Map.prototype.keyDragZoomEnabled = function() {
                            return null !== this.dragZoom_;
                        };
                        /**
   * Returns the DragZoom object which is created when <code>google.maps.Map.enableKeyDragZoom</code> is called.
   * With this object you can use <code>google.maps.event.addListener</code> to attach event listeners
   * for the "activate", "deactivate", "dragstart", "drag", and "dragend" events.
   * @return {DragZoom}
   */
                        google.maps.Map.prototype.getDragZoomObject = function() {
                            return this.dragZoom_;
                        };
                    }();
                    inherits(MarkerLabel_, google.maps.OverlayView);
                    /**
 * Returns the DIV for the cross used when dragging a marker when the
 * raiseOnDrag parameter set to true. One cross is shared with all markers.
 * @param {string} crossURL The URL of the cross image =.
 * @private
 */
                    MarkerLabel_.getSharedCross = function(crossURL) {
                        var div;
                        if (void 0 === MarkerLabel_.getSharedCross.crossDiv) {
                            div = document.createElement("img");
                            div.style.cssText = "position: absolute; z-index: 1000002; display: none;";
                            // Hopefully Google never changes the standard "X" attributes:
                            div.style.marginLeft = "-8px";
                            div.style.marginTop = "-9px";
                            div.src = crossURL;
                            MarkerLabel_.getSharedCross.crossDiv = div;
                        }
                        return MarkerLabel_.getSharedCross.crossDiv;
                    };
                    /**
 * Adds the DIV representing the label to the DOM. This method is called
 * automatically when the marker's <code>setMap</code> method is called.
 * @private
 */
                    MarkerLabel_.prototype.onAdd = function() {
                        var cSavedZIndex, cLatOffset, cLngOffset, cIgnoreClick, cRaiseEnabled, cStartPosition, cStartCenter, me = this, cMouseIsDown = !1, cDraggingLabel = !1, cDraggingCursor = "url(" + this.handCursorURL_ + ")", cAbortEvent = function(e) {
                            e.preventDefault && e.preventDefault();
                            e.cancelBubble = !0;
                            e.stopPropagation && e.stopPropagation();
                        }, cStopBounce = function() {
                            me.marker_.setAnimation(null);
                        };
                        this.getPanes().overlayImage.appendChild(this.labelDiv_);
                        this.getPanes().overlayMouseTarget.appendChild(this.eventDiv_);
                        // One cross is shared with all markers, so only add it once:
                        if (void 0 === MarkerLabel_.getSharedCross.processed) {
                            this.getPanes().overlayImage.appendChild(this.crossDiv_);
                            MarkerLabel_.getSharedCross.processed = !0;
                        }
                        this.listeners_ = [ google.maps.event.addDomListener(this.eventDiv_, "mouseover", function(e) {
                            if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                                this.style.cursor = "pointer";
                                google.maps.event.trigger(me.marker_, "mouseover", e);
                            }
                        }), google.maps.event.addDomListener(this.eventDiv_, "mouseout", function(e) {
                            if ((me.marker_.getDraggable() || me.marker_.getClickable()) && !cDraggingLabel) {
                                this.style.cursor = me.marker_.getCursor();
                                google.maps.event.trigger(me.marker_, "mouseout", e);
                            }
                        }), google.maps.event.addDomListener(this.eventDiv_, "mousedown", function(e) {
                            cDraggingLabel = !1;
                            if (me.marker_.getDraggable()) {
                                cMouseIsDown = !0;
                                this.style.cursor = cDraggingCursor;
                            }
                            if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                                google.maps.event.trigger(me.marker_, "mousedown", e);
                                cAbortEvent(e);
                            }
                        }), google.maps.event.addDomListener(document, "mouseup", function(mEvent) {
                            var position;
                            if (cMouseIsDown) {
                                cMouseIsDown = !1;
                                me.eventDiv_.style.cursor = "pointer";
                                google.maps.event.trigger(me.marker_, "mouseup", mEvent);
                            }
                            if (cDraggingLabel) {
                                if (cRaiseEnabled) {
                                    // Lower the marker & label
                                    position = me.getProjection().fromLatLngToDivPixel(me.marker_.getPosition());
                                    position.y += 20;
                                    me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
                                    // This is not the same bouncing style as when the marker portion is dragged,
                                    // but it will have to do:
                                    try {
                                        // Will fail if running Google Maps API earlier than V3.3
                                        me.marker_.setAnimation(google.maps.Animation.BOUNCE);
                                        setTimeout(cStopBounce, 1406);
                                    } catch (e) {}
                                }
                                me.crossDiv_.style.display = "none";
                                me.marker_.setZIndex(cSavedZIndex);
                                cIgnoreClick = !0;
                                // Set flag to ignore the click event reported after a label drag
                                cDraggingLabel = !1;
                                mEvent.latLng = me.marker_.getPosition();
                                google.maps.event.trigger(me.marker_, "dragend", mEvent);
                            }
                        }), google.maps.event.addListener(me.marker_.getMap(), "mousemove", function(mEvent) {
                            var position;
                            if (cMouseIsDown) if (cDraggingLabel) {
                                // Change the reported location from the mouse position to the marker position:
                                mEvent.latLng = new google.maps.LatLng(mEvent.latLng.lat() - cLatOffset, mEvent.latLng.lng() - cLngOffset);
                                position = me.getProjection().fromLatLngToDivPixel(mEvent.latLng);
                                if (cRaiseEnabled) {
                                    me.crossDiv_.style.left = position.x + "px";
                                    me.crossDiv_.style.top = position.y + "px";
                                    me.crossDiv_.style.display = "";
                                    position.y -= 20;
                                }
                                me.marker_.setPosition(me.getProjection().fromDivPixelToLatLng(position));
                                cRaiseEnabled && (// Don't raise the veil; this hack needed to make MSIE act properly
                                me.eventDiv_.style.top = position.y + 20 + "px");
                                google.maps.event.trigger(me.marker_, "drag", mEvent);
                            } else {
                                // Calculate offsets from the click point to the marker position:
                                cLatOffset = mEvent.latLng.lat() - me.marker_.getPosition().lat();
                                cLngOffset = mEvent.latLng.lng() - me.marker_.getPosition().lng();
                                cSavedZIndex = me.marker_.getZIndex();
                                cStartPosition = me.marker_.getPosition();
                                cStartCenter = me.marker_.getMap().getCenter();
                                cRaiseEnabled = me.marker_.get("raiseOnDrag");
                                cDraggingLabel = !0;
                                me.marker_.setZIndex(1e6);
                                // Moves the marker & label to the foreground during a drag
                                mEvent.latLng = me.marker_.getPosition();
                                google.maps.event.trigger(me.marker_, "dragstart", mEvent);
                            }
                        }), google.maps.event.addDomListener(document, "keydown", function(e) {
                            if (cDraggingLabel && 27 === e.keyCode) {
                                // Esc key
                                cRaiseEnabled = !1;
                                me.marker_.setPosition(cStartPosition);
                                me.marker_.getMap().setCenter(cStartCenter);
                                google.maps.event.trigger(document, "mouseup", e);
                            }
                        }), google.maps.event.addDomListener(this.eventDiv_, "click", function(e) {
                            if (me.marker_.getDraggable() || me.marker_.getClickable()) if (cIgnoreClick) // Ignore the click reported when a label drag ends
                            cIgnoreClick = !1; else {
                                google.maps.event.trigger(me.marker_, "click", e);
                                cAbortEvent(e);
                            }
                        }), google.maps.event.addDomListener(this.eventDiv_, "dblclick", function(e) {
                            if (me.marker_.getDraggable() || me.marker_.getClickable()) {
                                google.maps.event.trigger(me.marker_, "dblclick", e);
                                cAbortEvent(e);
                            }
                        }), google.maps.event.addListener(this.marker_, "dragstart", function(mEvent) {
                            cDraggingLabel || (cRaiseEnabled = this.get("raiseOnDrag"));
                        }), google.maps.event.addListener(this.marker_, "drag", function(mEvent) {
                            if (!cDraggingLabel && cRaiseEnabled) {
                                me.setPosition(20);
                                // During a drag, the marker's z-index is temporarily set to 1000000 to
                                // ensure it appears above all other markers. Also set the label's z-index
                                // to 1000000 (plus or minus 1 depending on whether the label is supposed
                                // to be above or below the marker).
                                me.labelDiv_.style.zIndex = 1e6 + (this.get("labelInBackground") ? -1 : 1);
                            }
                        }), google.maps.event.addListener(this.marker_, "dragend", function(mEvent) {
                            cDraggingLabel || cRaiseEnabled && me.setPosition(0);
                        }), google.maps.event.addListener(this.marker_, "position_changed", function() {
                            me.setPosition();
                        }), google.maps.event.addListener(this.marker_, "zindex_changed", function() {
                            me.setZIndex();
                        }), google.maps.event.addListener(this.marker_, "visible_changed", function() {
                            me.setVisible();
                        }), google.maps.event.addListener(this.marker_, "labelvisible_changed", function() {
                            me.setVisible();
                        }), google.maps.event.addListener(this.marker_, "title_changed", function() {
                            me.setTitle();
                        }), google.maps.event.addListener(this.marker_, "labelcontent_changed", function() {
                            me.setContent();
                        }), google.maps.event.addListener(this.marker_, "labelanchor_changed", function() {
                            me.setAnchor();
                        }), google.maps.event.addListener(this.marker_, "labelclass_changed", function() {
                            me.setStyles();
                        }), google.maps.event.addListener(this.marker_, "labelstyle_changed", function() {
                            me.setStyles();
                        }) ];
                    };
                    /**
 * Removes the DIV for the label from the DOM. It also removes all event handlers.
 * This method is called automatically when the marker's <code>setMap(null)</code>
 * method is called.
 * @private
 */
                    MarkerLabel_.prototype.onRemove = function() {
                        var i;
                        this.labelDiv_.parentNode.removeChild(this.labelDiv_);
                        this.eventDiv_.parentNode.removeChild(this.eventDiv_);
                        // Remove event listeners:
                        for (i = 0; i < this.listeners_.length; i++) google.maps.event.removeListener(this.listeners_[i]);
                    };
                    /**
 * Draws the label on the map.
 * @private
 */
                    MarkerLabel_.prototype.draw = function() {
                        this.setContent();
                        this.setTitle();
                        this.setStyles();
                    };
                    /**
 * Sets the content of the label.
 * The content can be plain text or an HTML DOM node.
 * @private
 */
                    MarkerLabel_.prototype.setContent = function() {
                        var content = this.marker_.get("labelContent");
                        if (void 0 === content.nodeType) {
                            this.labelDiv_.innerHTML = content;
                            this.eventDiv_.innerHTML = this.labelDiv_.innerHTML;
                        } else {
                            this.labelDiv_.innerHTML = "";
                            // Remove current content
                            this.labelDiv_.appendChild(content);
                            content = content.cloneNode(!0);
                            this.eventDiv_.innerHTML = "";
                            // Remove current content
                            this.eventDiv_.appendChild(content);
                        }
                    };
                    /**
 * Sets the content of the tool tip for the label. It is
 * always set to be the same as for the marker itself.
 * @private
 */
                    MarkerLabel_.prototype.setTitle = function() {
                        this.eventDiv_.title = this.marker_.getTitle() || "";
                    };
                    /**
 * Sets the style of the label by setting the style sheet and applying
 * other specific styles requested.
 * @private
 */
                    MarkerLabel_.prototype.setStyles = function() {
                        var i, labelStyle;
                        // Apply style values from the style sheet defined in the labelClass parameter:
                        this.labelDiv_.className = this.marker_.get("labelClass");
                        this.eventDiv_.className = this.labelDiv_.className;
                        // Clear existing inline style values:
                        this.labelDiv_.style.cssText = "";
                        this.eventDiv_.style.cssText = "";
                        // Apply style values defined in the labelStyle parameter:
                        labelStyle = this.marker_.get("labelStyle");
                        for (i in labelStyle) if (labelStyle.hasOwnProperty(i)) {
                            this.labelDiv_.style[i] = labelStyle[i];
                            this.eventDiv_.style[i] = labelStyle[i];
                        }
                        this.setMandatoryStyles();
                    };
                    /**
 * Sets the mandatory styles to the DIV representing the label as well as to the
 * associated event DIV. This includes setting the DIV position, z-index, and visibility.
 * @private
 */
                    MarkerLabel_.prototype.setMandatoryStyles = function() {
                        this.labelDiv_.style.position = "absolute";
                        this.labelDiv_.style.overflow = "hidden";
                        // Make sure the opacity setting causes the desired effect on MSIE:
                        if (void 0 !== this.labelDiv_.style.opacity && "" !== this.labelDiv_.style.opacity) {
                            this.labelDiv_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(opacity=' + 100 * this.labelDiv_.style.opacity + ')"';
                            this.labelDiv_.style.filter = "alpha(opacity=" + 100 * this.labelDiv_.style.opacity + ")";
                        }
                        this.eventDiv_.style.position = this.labelDiv_.style.position;
                        this.eventDiv_.style.overflow = this.labelDiv_.style.overflow;
                        this.eventDiv_.style.opacity = .01;
                        // Don't use 0; DIV won't be clickable on MSIE
                        this.eventDiv_.style.MsFilter = '"progid:DXImageTransform.Microsoft.Alpha(opacity=1)"';
                        this.eventDiv_.style.filter = "alpha(opacity=1)";
                        // For MSIE
                        this.setAnchor();
                        this.setPosition();
                        // This also updates z-index, if necessary.
                        this.setVisible();
                    };
                    /**
 * Sets the anchor point of the label.
 * @private
 */
                    MarkerLabel_.prototype.setAnchor = function() {
                        var anchor = this.marker_.get("labelAnchor");
                        this.labelDiv_.style.marginLeft = -anchor.x + "px";
                        this.labelDiv_.style.marginTop = -anchor.y + "px";
                        this.eventDiv_.style.marginLeft = -anchor.x + "px";
                        this.eventDiv_.style.marginTop = -anchor.y + "px";
                    };
                    /**
 * Sets the position of the label. The z-index is also updated, if necessary.
 * @private
 */
                    MarkerLabel_.prototype.setPosition = function(yOffset) {
                        var position = this.getProjection().fromLatLngToDivPixel(this.marker_.getPosition());
                        void 0 === yOffset && (yOffset = 0);
                        this.labelDiv_.style.left = Math.round(position.x) + "px";
                        this.labelDiv_.style.top = Math.round(position.y - yOffset) + "px";
                        this.eventDiv_.style.left = this.labelDiv_.style.left;
                        this.eventDiv_.style.top = this.labelDiv_.style.top;
                        this.setZIndex();
                    };
                    /**
 * Sets the z-index of the label. If the marker's z-index property has not been defined, the z-index
 * of the label is set to the vertical coordinate of the label. This is in keeping with the default
 * stacking order for Google Maps: markers to the south are in front of markers to the north.
 * @private
 */
                    MarkerLabel_.prototype.setZIndex = function() {
                        var zAdjust = this.marker_.get("labelInBackground") ? -1 : 1;
                        if (void 0 === this.marker_.getZIndex()) {
                            this.labelDiv_.style.zIndex = parseInt(this.labelDiv_.style.top, 10) + zAdjust;
                            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
                        } else {
                            this.labelDiv_.style.zIndex = this.marker_.getZIndex() + zAdjust;
                            this.eventDiv_.style.zIndex = this.labelDiv_.style.zIndex;
                        }
                    };
                    /**
 * Sets the visibility of the label. The label is visible only if the marker itself is
 * visible (i.e., its visible property is true) and the labelVisible property is true.
 * @private
 */
                    MarkerLabel_.prototype.setVisible = function() {
                        this.marker_.get("labelVisible") ? this.labelDiv_.style.display = this.marker_.getVisible() ? "block" : "none" : this.labelDiv_.style.display = "none";
                        this.eventDiv_.style.display = this.labelDiv_.style.display;
                    };
                    inherits(MarkerWithLabel, google.maps.Marker);
                    /**
 * Overrides the standard Marker setMap function.
 * @param {Map} theMap The map to which the marker is to be added.
 * @private
 */
                    MarkerWithLabel.prototype.setMap = function(theMap) {
                        // Call the inherited function...
                        google.maps.Marker.prototype.setMap.apply(this, arguments);
                        // ... then deal with the label:
                        this.label.setMap(theMap);
                    };
                    RichMarker.prototype = new google.maps.OverlayView();
                    window.RichMarker = RichMarker;
                    /**
 * Returns the current visibility state of the marker.
 *
 * @return {boolean} The visiblity of the marker.
 */
                    RichMarker.prototype.getVisible = function() {
                        /** @type {boolean} */
                        return this.get("visible");
                    };
                    RichMarker.prototype.getVisible = RichMarker.prototype.getVisible;
                    /**
 * Sets the visiblility state of the marker.
 *
 * @param {boolean} visible The visiblilty of the marker.
 */
                    RichMarker.prototype.setVisible = function(visible) {
                        this.set("visible", visible);
                    };
                    RichMarker.prototype.setVisible = RichMarker.prototype.setVisible;
                    /**
 *  The visible changed event.
 */
                    RichMarker.prototype.visible_changed = function() {
                        if (this.ready_) {
                            this.markerWrapper_.style.display = this.getVisible() ? "" : "none";
                            this.draw();
                        }
                    };
                    RichMarker.prototype.visible_changed = RichMarker.prototype.visible_changed;
                    /**
 * Sets the marker to be flat.
 *
 * @param {boolean} flat If the marker is to be flat or not.
 */
                    RichMarker.prototype.setFlat = function(flat) {
                        this.set("flat", !!flat);
                    };
                    RichMarker.prototype.setFlat = RichMarker.prototype.setFlat;
                    /**
 * If the makrer is flat or not.
 *
 * @return {boolean} True the marker is flat.
 */
                    RichMarker.prototype.getFlat = function() {
                        /** @type {boolean} */
                        return this.get("flat");
                    };
                    RichMarker.prototype.getFlat = RichMarker.prototype.getFlat;
                    /**
 * Get the width of the marker.
 *
 * @return {Number} The width of the marker.
 */
                    RichMarker.prototype.getWidth = function() {
                        /** @type {Number} */
                        return this.get("width");
                    };
                    RichMarker.prototype.getWidth = RichMarker.prototype.getWidth;
                    /**
 * Get the height of the marker.
 *
 * @return {Number} The height of the marker.
 */
                    RichMarker.prototype.getHeight = function() {
                        /** @type {Number} */
                        return this.get("height");
                    };
                    RichMarker.prototype.getHeight = RichMarker.prototype.getHeight;
                    /**
 * Sets the marker's box shadow.
 *
 * @param {string} shadow The box shadow to set.
 */
                    RichMarker.prototype.setShadow = function(shadow) {
                        this.set("shadow", shadow);
                        this.flat_changed();
                    };
                    RichMarker.prototype.setShadow = RichMarker.prototype.setShadow;
                    /**
 * Gets the marker's box shadow.
 *
 * @return {string} The box shadow.
 */
                    RichMarker.prototype.getShadow = function() {
                        /** @type {string} */
                        return this.get("shadow");
                    };
                    RichMarker.prototype.getShadow = RichMarker.prototype.getShadow;
                    /**
 * Flat changed event.
 */
                    RichMarker.prototype.flat_changed = function() {
                        this.ready_ && (this.markerWrapper_.style.boxShadow = this.markerWrapper_.style.webkitBoxShadow = this.markerWrapper_.style.MozBoxShadow = this.getFlat() ? "" : this.getShadow());
                    };
                    RichMarker.prototype.flat_changed = RichMarker.prototype.flat_changed;
                    /**
 * Sets the zIndex of the marker.
 *
 * @param {Number} index The index to set.
 */
                    RichMarker.prototype.setZIndex = function(index) {
                        this.set("zIndex", index);
                    };
                    RichMarker.prototype.setZIndex = RichMarker.prototype.setZIndex;
                    /**
 * Gets the zIndex of the marker.
 *
 * @return {Number} The zIndex of the marker.
 */
                    RichMarker.prototype.getZIndex = function() {
                        /** @type {Number} */
                        return this.get("zIndex");
                    };
                    RichMarker.prototype.getZIndex = RichMarker.prototype.getZIndex;
                    /**
 * zIndex changed event.
 */
                    RichMarker.prototype.zIndex_changed = function() {
                        this.getZIndex() && this.ready_ && (this.markerWrapper_.style.zIndex = this.getZIndex());
                    };
                    RichMarker.prototype.zIndex_changed = RichMarker.prototype.zIndex_changed;
                    /**
 * Whether the marker is draggable or not.
 *
 * @return {boolean} True if the marker is draggable.
 */
                    RichMarker.prototype.getDraggable = function() {
                        /** @type {boolean} */
                        return this.get("draggable");
                    };
                    RichMarker.prototype.getDraggable = RichMarker.prototype.getDraggable;
                    /**
 * Sets the marker to be draggable or not.
 *
 * @param {boolean} draggable If the marker is draggable or not.
 */
                    RichMarker.prototype.setDraggable = function(draggable) {
                        this.set("draggable", !!draggable);
                    };
                    RichMarker.prototype.setDraggable = RichMarker.prototype.setDraggable;
                    /**
 * Draggable property changed callback.
 */
                    RichMarker.prototype.draggable_changed = function() {
                        this.ready_ && (this.getDraggable() ? this.addDragging_(this.markerWrapper_) : this.removeDragListeners_());
                    };
                    RichMarker.prototype.draggable_changed = RichMarker.prototype.draggable_changed;
                    /**
 * Gets the postiton of the marker.
 *
 * @return {google.maps.LatLng} The position of the marker.
 */
                    RichMarker.prototype.getPosition = function() {
                        /** @type {google.maps.LatLng} */
                        return this.get("position");
                    };
                    RichMarker.prototype.getPosition = RichMarker.prototype.getPosition;
                    /**
 * Sets the position of the marker.
 *
 * @param {google.maps.LatLng} position The position to set.
 */
                    RichMarker.prototype.setPosition = function(position) {
                        this.set("position", position);
                    };
                    RichMarker.prototype.setPosition = RichMarker.prototype.setPosition;
                    /**
 * Position changed event.
 */
                    RichMarker.prototype.position_changed = function() {
                        this.draw();
                    };
                    RichMarker.prototype.position_changed = RichMarker.prototype.position_changed;
                    /**
 * Gets the anchor.
 *
 * @return {google.maps.Size} The position of the anchor.
 */
                    RichMarker.prototype.getAnchor = function() {
                        /** @type {google.maps.Size} */
                        return this.get("anchor");
                    };
                    RichMarker.prototype.getAnchor = RichMarker.prototype.getAnchor;
                    /**
 * Sets the anchor.
 *
 * @param {RichMarkerPosition|google.maps.Size} anchor The anchor to set.
 */
                    RichMarker.prototype.setAnchor = function(anchor) {
                        this.set("anchor", anchor);
                    };
                    RichMarker.prototype.setAnchor = RichMarker.prototype.setAnchor;
                    /**
 * Anchor changed event.
 */
                    RichMarker.prototype.anchor_changed = function() {
                        this.draw();
                    };
                    RichMarker.prototype.anchor_changed = RichMarker.prototype.anchor_changed;
                    /**
 * Converts a HTML string to a document fragment.
 *
 * @param {string} htmlString The HTML string to convert.
 * @return {Node} A HTML document fragment.
 * @private
 */
                    RichMarker.prototype.htmlToDocumentFragment_ = function(htmlString) {
                        var tempDiv = document.createElement("DIV");
                        tempDiv.innerHTML = htmlString;
                        if (1 == tempDiv.childNodes.length) /** @type {!Node} */
                        return tempDiv.removeChild(tempDiv.firstChild);
                        for (var fragment = document.createDocumentFragment(); tempDiv.firstChild; ) fragment.appendChild(tempDiv.firstChild);
                        return fragment;
                    };
                    /**
 * Removes all children from the node.
 *
 * @param {Node} node The node to remove all children from.
 * @private
 */
                    RichMarker.prototype.removeChildren_ = function(node) {
                        if (node) for (var child; child = node.firstChild; ) node.removeChild(child);
                    };
                    /**
 * Sets the content of the marker.
 *
 * @param {string|Node} content The content to set.
 */
                    RichMarker.prototype.setContent = function(content) {
                        this.set("content", content);
                    };
                    RichMarker.prototype.setContent = RichMarker.prototype.setContent;
                    /**
 * Get the content of the marker.
 *
 * @return {string|Node} The marker content.
 */
                    RichMarker.prototype.getContent = function() {
                        /** @type {Node|string} */
                        return this.get("content");
                    };
                    RichMarker.prototype.getContent = RichMarker.prototype.getContent;
                    /**
 * Sets the marker content and adds loading events to images
 */
                    RichMarker.prototype.content_changed = function() {
                        if (this.markerContent_) {
                            this.removeChildren_(this.markerContent_);
                            var content = this.getContent();
                            if (content) {
                                if ("string" == typeof content) {
                                    content = content.replace(/^\s*([\S\s]*)\b\s*$/, "$1");
                                    content = this.htmlToDocumentFragment_(content);
                                }
                                this.markerContent_.appendChild(content);
                                for (var image, that = this, images = this.markerContent_.getElementsByTagName("IMG"), i = 0; image = images[i]; i++) {
                                    // By default, a browser lets a image be dragged outside of the browser,
                                    // so by calling preventDefault we stop this behaviour and allow the image
                                    // to be dragged around the map and now out of the browser and onto the
                                    // desktop.
                                    google.maps.event.addDomListener(image, "mousedown", function(e) {
                                        if (that.getDraggable()) {
                                            e.preventDefault && e.preventDefault();
                                            e.returnValue = !1;
                                        }
                                    });
                                    // Because we don't know the size of an image till it loads, add a
                                    // listener to the image load so the marker can resize and reposition
                                    // itself to be the correct height.
                                    google.maps.event.addDomListener(image, "load", function() {
                                        that.draw();
                                    });
                                }
                                google.maps.event.trigger(this, "domready");
                            }
                            this.ready_ && this.draw();
                        }
                    };
                    RichMarker.prototype.content_changed = RichMarker.prototype.content_changed;
                    /**
 * Sets the cursor.
 *
 * @param {string} whichCursor What cursor to show.
 * @private
 */
                    RichMarker.prototype.setCursor_ = function(whichCursor) {
                        if (this.ready_) {
                            var cursor = "";
                            if (-1 !== navigator.userAgent.indexOf("Gecko/")) {
                                // Moz has some nice cursors :)
                                "dragging" == whichCursor && (cursor = "-moz-grabbing");
                                "dragready" == whichCursor && (cursor = "-moz-grab");
                                "draggable" == whichCursor && (cursor = "pointer");
                            } else {
                                "dragging" != whichCursor && "dragready" != whichCursor || (cursor = "move");
                                "draggable" == whichCursor && (cursor = "pointer");
                            }
                            this.markerWrapper_.style.cursor != cursor && (this.markerWrapper_.style.cursor = cursor);
                        }
                    };
                    /**
 * Start dragging.
 *
 * @param {Event} e The event.
 */
                    RichMarker.prototype.startDrag = function(e) {
                        if (this.getDraggable() && !this.dragging_) {
                            this.dragging_ = !0;
                            var map = this.getMap();
                            this.mapDraggable_ = map.get("draggable");
                            map.set("draggable", !1);
                            // Store the current mouse position
                            this.mouseX_ = e.clientX;
                            this.mouseY_ = e.clientY;
                            this.setCursor_("dragready");
                            // Stop the text from being selectable while being dragged
                            this.markerWrapper_.style.MozUserSelect = "none";
                            this.markerWrapper_.style.KhtmlUserSelect = "none";
                            this.markerWrapper_.style.WebkitUserSelect = "none";
                            this.markerWrapper_.unselectable = "on";
                            this.markerWrapper_.onselectstart = function() {
                                return !1;
                            };
                            this.addDraggingListeners_();
                            google.maps.event.trigger(this, "dragstart");
                        }
                    };
                    /**
 * Stop dragging.
 */
                    RichMarker.prototype.stopDrag = function() {
                        if (this.getDraggable() && this.dragging_) {
                            this.dragging_ = !1;
                            this.getMap().set("draggable", this.mapDraggable_);
                            this.mouseX_ = this.mouseY_ = this.mapDraggable_ = null;
                            // Allow the text to be selectable again
                            this.markerWrapper_.style.MozUserSelect = "";
                            this.markerWrapper_.style.KhtmlUserSelect = "";
                            this.markerWrapper_.style.WebkitUserSelect = "";
                            this.markerWrapper_.unselectable = "off";
                            this.markerWrapper_.onselectstart = function() {};
                            this.removeDraggingListeners_();
                            this.setCursor_("draggable");
                            google.maps.event.trigger(this, "dragend");
                            this.draw();
                        }
                    };
                    /**
 * Handles the drag event.
 *
 * @param {Event} e The event.
 */
                    RichMarker.prototype.drag = function(e) {
                        if (this.getDraggable() && this.dragging_) {
                            var dx = this.mouseX_ - e.clientX, dy = this.mouseY_ - e.clientY;
                            this.mouseX_ = e.clientX;
                            this.mouseY_ = e.clientY;
                            var left = parseInt(this.markerWrapper_.style.left, 10) - dx, top = parseInt(this.markerWrapper_.style.top, 10) - dy;
                            this.markerWrapper_.style.left = left + "px";
                            this.markerWrapper_.style.top = top + "px";
                            var offset = this.getOffset_(), point = new google.maps.Point(left - offset.width, top - offset.height), projection = this.getProjection();
                            this.setPosition(projection.fromDivPixelToLatLng(point));
                            this.setCursor_("dragging");
                            google.maps.event.trigger(this, "drag");
                        } else // This object isn't draggable or we have stopped dragging
                        this.stopDrag();
                    };
                    /**
 * Removes the drag listeners associated with the marker.
 *
 * @private
 */
                    RichMarker.prototype.removeDragListeners_ = function() {
                        if (this.draggableListener_) {
                            google.maps.event.removeListener(this.draggableListener_);
                            delete this.draggableListener_;
                        }
                        this.setCursor_("");
                    };
                    /**
 * Add dragability events to the marker.
 *
 * @param {Node} node The node to apply dragging to.
 * @private
 */
                    RichMarker.prototype.addDragging_ = function(node) {
                        if (node) {
                            var that = this;
                            this.draggableListener_ = google.maps.event.addDomListener(node, "mousedown", function(e) {
                                that.startDrag(e);
                            });
                            this.setCursor_("draggable");
                        }
                    };
                    /**
 * Add dragging listeners.
 *
 * @private
 */
                    RichMarker.prototype.addDraggingListeners_ = function() {
                        var that = this;
                        if (this.markerWrapper_.setCapture) {
                            this.markerWrapper_.setCapture(!0);
                            this.draggingListeners_ = [ google.maps.event.addDomListener(this.markerWrapper_, "mousemove", function(e) {
                                that.drag(e);
                            }, !0), google.maps.event.addDomListener(this.markerWrapper_, "mouseup", function() {
                                that.stopDrag();
                                that.markerWrapper_.releaseCapture();
                            }, !0) ];
                        } else this.draggingListeners_ = [ google.maps.event.addDomListener(window, "mousemove", function(e) {
                            that.drag(e);
                        }, !0), google.maps.event.addDomListener(window, "mouseup", function() {
                            that.stopDrag();
                        }, !0) ];
                    };
                    /**
 * Remove dragging listeners.
 *
 * @private
 */
                    RichMarker.prototype.removeDraggingListeners_ = function() {
                        if (this.draggingListeners_) {
                            for (var listener, i = 0; listener = this.draggingListeners_[i]; i++) google.maps.event.removeListener(listener);
                            this.draggingListeners_.length = 0;
                        }
                    };
                    /**
 * Get the anchor offset.
 *
 * @return {google.maps.Size} The size offset.
 * @private
 */
                    RichMarker.prototype.getOffset_ = function() {
                        var anchor = this.getAnchor();
                        if ("object" == typeof anchor) /** @type {google.maps.Size} */
                        return anchor;
                        var offset = new google.maps.Size(0, 0);
                        if (!this.markerContent_) return offset;
                        var width = this.markerContent_.offsetWidth, height = this.markerContent_.offsetHeight;
                        switch (anchor) {
                          case RichMarkerPosition.TOP_LEFT:
                            break;

                          case RichMarkerPosition.TOP:
                            offset.width = -width / 2;
                            break;

                          case RichMarkerPosition.TOP_RIGHT:
                            offset.width = -width;
                            break;

                          case RichMarkerPosition.LEFT:
                            offset.height = -height / 2;
                            break;

                          case RichMarkerPosition.MIDDLE:
                            offset.width = -width / 2;
                            offset.height = -height / 2;
                            break;

                          case RichMarkerPosition.RIGHT:
                            offset.width = -width;
                            offset.height = -height / 2;
                            break;

                          case RichMarkerPosition.BOTTOM_LEFT:
                            offset.height = -height;
                            break;

                          case RichMarkerPosition.BOTTOM:
                            offset.width = -width / 2;
                            offset.height = -height;
                            break;

                          case RichMarkerPosition.BOTTOM_RIGHT:
                            offset.width = -width;
                            offset.height = -height;
                        }
                        return offset;
                    };
                    /**
 * Adding the marker to a map.
 * Implementing the interface.
 */
                    RichMarker.prototype.onAdd = function() {
                        if (!this.markerWrapper_) {
                            this.markerWrapper_ = document.createElement("DIV");
                            this.markerWrapper_.style.position = "absolute";
                        }
                        this.getZIndex() && (this.markerWrapper_.style.zIndex = this.getZIndex());
                        this.markerWrapper_.style.display = this.getVisible() ? "" : "none";
                        if (!this.markerContent_) {
                            this.markerContent_ = document.createElement("DIV");
                            this.markerWrapper_.appendChild(this.markerContent_);
                            var that = this;
                            google.maps.event.addDomListener(this.markerContent_, "click", function(e) {
                                google.maps.event.trigger(that, "click");
                            });
                            google.maps.event.addDomListener(this.markerContent_, "mouseover", function(e) {
                                google.maps.event.trigger(that, "mouseover");
                            });
                            google.maps.event.addDomListener(this.markerContent_, "mouseout", function(e) {
                                google.maps.event.trigger(that, "mouseout");
                            });
                        }
                        this.ready_ = !0;
                        this.content_changed();
                        this.flat_changed();
                        this.draggable_changed();
                        var panes = this.getPanes();
                        panes && panes.overlayMouseTarget.appendChild(this.markerWrapper_);
                        google.maps.event.trigger(this, "ready");
                    };
                    RichMarker.prototype.onAdd = RichMarker.prototype.onAdd;
                    /**
 * Impelementing the interface.
 */
                    RichMarker.prototype.draw = function() {
                        if (this.ready_ && !this.dragging_) {
                            var projection = this.getProjection();
                            if (projection) {
                                var latLng = /** @type {google.maps.LatLng} */ this.get("position"), pos = projection.fromLatLngToDivPixel(latLng), offset = this.getOffset_();
                                this.markerWrapper_.style.top = pos.y + offset.height + "px";
                                this.markerWrapper_.style.left = pos.x + offset.width + "px";
                                var height = this.markerContent_.offsetHeight, width = this.markerContent_.offsetWidth;
                                width != this.get("width") && this.set("width", width);
                                height != this.get("height") && this.set("height", height);
                            }
                        }
                    };
                    RichMarker.prototype.draw = RichMarker.prototype.draw;
                    /**
 * Removing a marker from the map.
 * Implementing the interface.
 */
                    RichMarker.prototype.onRemove = function() {
                        this.markerWrapper_ && this.markerWrapper_.parentNode && this.markerWrapper_.parentNode.removeChild(this.markerWrapper_);
                        this.removeDragListeners_();
                    };
                    RichMarker.prototype.onRemove = RichMarker.prototype.onRemove;
                    /**
 * RichMarker Anchor positions
 * @enum {number}
 */
                    var RichMarkerPosition = {
                        TOP_LEFT: 1,
                        TOP: 2,
                        TOP_RIGHT: 3,
                        LEFT: 4,
                        MIDDLE: 5,
                        RIGHT: 6,
                        BOTTOM_LEFT: 7,
                        BOTTOM: 8,
                        BOTTOM_RIGHT: 9
                    };
                    window.RichMarkerPosition = RichMarkerPosition;
                    //TODO: export / passthese on in the service instead of window
                    window.InfoBox = InfoBox;
                    window.Cluster = Cluster;
                    window.ClusterIcon = ClusterIcon;
                    window.MarkerClusterer = MarkerClusterer;
                    window.MarkerLabel_ = MarkerLabel_;
                    window.MarkerWithLabel = MarkerWithLabel;
                    window.RichMarker = RichMarker;
                }();
            })
        };
    });
    /******/ !function(modules) {
        /******/
        // The require function
        /******/
        function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache
            /******/
            if (installedModules[moduleId]) /******/
            return installedModules[moduleId].exports;
            /******/
            // Create a new module (and put it into the cache)
            /******/
            var module = installedModules[moduleId] = {
                /******/
                exports: {},
                /******/
                id: moduleId,
                /******/
                loaded: !1
            };
            /******/
            // Execute the module function
            /******/
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            // Flag the module as loaded
            /******/
            module.loaded = !0;
            /******/
            // Return the exports of the module
            /******/
            return module.exports;
        }
        // webpackBootstrap
        /******/
        // The module cache
        /******/
        var installedModules = {};
        /******/
        // expose the modules object (__webpack_modules__)
        /******/
        __webpack_require__.m = modules;
        /******/
        // expose the module cache
        /******/
        __webpack_require__.c = installedModules;
        /******/
        // __webpack_public_path__
        /******/
        __webpack_require__.p = "";
        /******/
        // Load entry module and return exports
        /******/
        __webpack_require__(0);
    }([ /* 0 */
    /***/
    function(module, exports, __webpack_require__) {
        /* istanbul ignore next */
        angular.module("uiGmapgoogle-maps.wrapped").service("uiGmapDataStructures", function() {
            return {
                Graph: __webpack_require__(1).Graph,
                Queue: __webpack_require__(1).Queue
            };
        });
    }, /* 1 */
    /***/
    function(module, exports, __webpack_require__) {
        (function() {
            module.exports = {
                Graph: __webpack_require__(2),
                Heap: __webpack_require__(3),
                LinkedList: __webpack_require__(4),
                Map: __webpack_require__(5),
                Queue: __webpack_require__(6),
                RedBlackTree: __webpack_require__(7),
                Trie: __webpack_require__(8)
            };
        }).call(this);
    }, /* 2 */
    /***/
    function(module, exports) {
        /*
	Graph implemented as a modified incidence list. O(1) for every typical
	operation except `removeNode()` at O(E) where E is the number of edges.

	## Overview example:

	```js
	var graph = new Graph;
	graph.addNode('A'); // => a node object. For more info, log the output or check
	                    // the documentation for addNode
	graph.addNode('B');
	graph.addNode('C');
	graph.addEdge('A', 'C'); // => an edge object
	graph.addEdge('A', 'B');
	graph.getEdge('B', 'A'); // => undefined. Directed edge!
	graph.getEdge('A', 'B'); // => the edge object previously added
	graph.getEdge('A', 'B').weight = 2 // weight is the only built-in handy property
	                                   // of an edge object. Feel free to attach
	                                   // other properties
	graph.getInEdgesOf('B'); // => array of edge objects, in this case only one;
	                         // connecting A to B
	graph.getOutEdgesOf('A'); // => array of edge objects, one to B and one to C
	graph.getAllEdgesOf('A'); // => all the in and out edges. Edge directed toward
	                          // the node itself are only counted once
	forEachNode(function(nodeObject) {
	  console.log(node);
	});
	forEachEdge(function(edgeObject) {
	  console.log(edgeObject);
	});
	graph.removeNode('C'); // => 'C'. The edge between A and C also removed
	graph.removeEdge('A', 'B'); // => the edge object removed
	```

	## Properties:

	- nodeSize: total number of nodes.
	- edgeSize: total number of edges.
	*/
        (function() {
            var Graph, __hasProp = {}.hasOwnProperty;
            Graph = function() {
                function Graph() {
                    this._nodes = {};
                    this.nodeSize = 0;
                    this.edgeSize = 0;
                }
                Graph.prototype.addNode = function(id) {
                    /*
	      The `id` is a unique identifier for the node, and should **not** change
	      after it's added. It will be used for adding, retrieving and deleting
	      related edges too.
	      
	      **Note** that, internally, the ids are kept in an object. JavaScript's
	      object hashes the id `'2'` and `2` to the same key, so please stick to a
	      simple id data type such as number or string.
	      
	      _Returns:_ the node object. Feel free to attach additional custom properties
	      on it for graph algorithms' needs. **Undefined if node id already exists**,
	      as to avoid accidental overrides.
	      */
                    if (!this._nodes[id]) {
                        this.nodeSize++;
                        return this._nodes[id] = {
                            _outEdges: {},
                            _inEdges: {}
                        };
                    }
                };
                Graph.prototype.getNode = function(id) {
                    /*
	      _Returns:_ the node object. Feel free to attach additional custom properties
	      on it for graph algorithms' needs.
	      */
                    return this._nodes[id];
                };
                Graph.prototype.removeNode = function(id) {
                    /*
	      _Returns:_ the node object removed, or undefined if it didn't exist in the
	      first place.
	      */
                    var inEdgeId, nodeToRemove, outEdgeId, _ref, _ref1;
                    nodeToRemove = this._nodes[id];
                    if (nodeToRemove) {
                        _ref = nodeToRemove._outEdges;
                        for (outEdgeId in _ref) __hasProp.call(_ref, outEdgeId) && this.removeEdge(id, outEdgeId);
                        _ref1 = nodeToRemove._inEdges;
                        for (inEdgeId in _ref1) __hasProp.call(_ref1, inEdgeId) && this.removeEdge(inEdgeId, id);
                        this.nodeSize--;
                        delete this._nodes[id];
                        return nodeToRemove;
                    }
                };
                Graph.prototype.addEdge = function(fromId, toId, weight) {
                    var edgeToAdd, fromNode, toNode;
                    null == weight && (weight = 1);
                    /*
	      `fromId` and `toId` are the node id specified when it was created using
	      `addNode()`. `weight` is optional and defaults to 1. Ignoring it effectively
	      makes this an unweighted graph. Under the hood, `weight` is just a normal
	      property of the edge object.
	      
	      _Returns:_ the edge object created. Feel free to attach additional custom
	      properties on it for graph algorithms' needs. **Or undefined** if the nodes
	      of id `fromId` or `toId` aren't found, or if an edge already exists between
	      the two nodes.
	      */
                    if (!this.getEdge(fromId, toId)) {
                        fromNode = this._nodes[fromId];
                        toNode = this._nodes[toId];
                        if (fromNode && toNode) {
                            edgeToAdd = {
                                weight: weight
                            };
                            fromNode._outEdges[toId] = edgeToAdd;
                            toNode._inEdges[fromId] = edgeToAdd;
                            this.edgeSize++;
                            return edgeToAdd;
                        }
                    }
                };
                Graph.prototype.getEdge = function(fromId, toId) {
                    /*
	      _Returns:_ the edge object, or undefined if the nodes of id `fromId` or
	      `toId` aren't found.
	      */
                    var fromNode, toNode;
                    fromNode = this._nodes[fromId];
                    toNode = this._nodes[toId];
                    if (fromNode && toNode) return fromNode._outEdges[toId];
                };
                Graph.prototype.removeEdge = function(fromId, toId) {
                    /*
	      _Returns:_ the edge object removed, or undefined of edge wasn't found.
	      */
                    var edgeToDelete, fromNode, toNode;
                    fromNode = this._nodes[fromId];
                    toNode = this._nodes[toId];
                    edgeToDelete = this.getEdge(fromId, toId);
                    if (edgeToDelete) {
                        delete fromNode._outEdges[toId];
                        delete toNode._inEdges[fromId];
                        this.edgeSize--;
                        return edgeToDelete;
                    }
                };
                Graph.prototype.getInEdgesOf = function(nodeId) {
                    /*
	      _Returns:_ an array of edge objects that are directed toward the node, or
	      empty array if no such edge or node exists.
	      */
                    var fromId, inEdges, toNode, _ref;
                    toNode = this._nodes[nodeId];
                    inEdges = [];
                    _ref = null != toNode ? toNode._inEdges : void 0;
                    for (fromId in _ref) __hasProp.call(_ref, fromId) && inEdges.push(this.getEdge(fromId, nodeId));
                    return inEdges;
                };
                Graph.prototype.getOutEdgesOf = function(nodeId) {
                    /*
	      _Returns:_ an array of edge objects that go out of the node, or empty array
	      if no such edge or node exists.
	      */
                    var fromNode, outEdges, toId, _ref;
                    fromNode = this._nodes[nodeId];
                    outEdges = [];
                    _ref = null != fromNode ? fromNode._outEdges : void 0;
                    for (toId in _ref) __hasProp.call(_ref, toId) && outEdges.push(this.getEdge(nodeId, toId));
                    return outEdges;
                };
                Graph.prototype.getAllEdgesOf = function(nodeId) {
                    /*
	      **Note:** not the same as concatenating `getInEdgesOf()` and
	      `getOutEdgesOf()`. Some nodes might have an edge pointing toward itself.
	      This method solves that duplication.
	      
	      _Returns:_ an array of edge objects linked to the node, no matter if they're
	      outgoing or coming. Duplicate edge created by self-pointing nodes are
	      removed. Only one copy stays. Empty array if node has no edge.
	      */
                    var i, inEdges, outEdges, selfEdge, _i, _ref, _ref1;
                    inEdges = this.getInEdgesOf(nodeId);
                    outEdges = this.getOutEdgesOf(nodeId);
                    if (0 === inEdges.length) return outEdges;
                    selfEdge = this.getEdge(nodeId, nodeId);
                    for (i = _i = 0, _ref = inEdges.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) if (inEdges[i] === selfEdge) {
                        _ref1 = [ inEdges[inEdges.length - 1], inEdges[i] ], inEdges[i] = _ref1[0], inEdges[inEdges.length - 1] = _ref1[1];
                        inEdges.pop();
                        break;
                    }
                    return inEdges.concat(outEdges);
                };
                Graph.prototype.forEachNode = function(operation) {
                    /*
	      Traverse through the graph in an arbitrary manner, visiting each node once.
	      Pass a function of the form `fn(nodeObject, nodeId)`.
	      
	      _Returns:_ undefined.
	      */
                    var nodeId, nodeObject, _ref;
                    _ref = this._nodes;
                    for (nodeId in _ref) if (__hasProp.call(_ref, nodeId)) {
                        nodeObject = _ref[nodeId];
                        operation(nodeObject, nodeId);
                    }
                };
                Graph.prototype.forEachEdge = function(operation) {
                    /*
	      Traverse through the graph in an arbitrary manner, visiting each edge once.
	      Pass a function of the form `fn(edgeObject)`.
	      
	      _Returns:_ undefined.
	      */
                    var edgeObject, nodeId, nodeObject, toId, _ref, _ref1;
                    _ref = this._nodes;
                    for (nodeId in _ref) if (__hasProp.call(_ref, nodeId)) {
                        nodeObject = _ref[nodeId];
                        _ref1 = nodeObject._outEdges;
                        for (toId in _ref1) if (__hasProp.call(_ref1, toId)) {
                            edgeObject = _ref1[toId];
                            operation(edgeObject);
                        }
                    }
                };
                return Graph;
            }();
            module.exports = Graph;
        }).call(this);
    }, /* 3 */
    /***/
    function(module, exports) {
        /*
	Minimum heap, i.e. smallest node at root.

	**Note:** does not accept null or undefined. This is by design. Those values
	cause comparison problems and might report false negative during extraction.

	## Overview example:

	```js
	var heap = new Heap([5, 6, 3, 4]);
	heap.add(10); // => 10
	heap.removeMin(); // => 3
	heap.peekMin(); // => 4
	```

	## Properties:

	- size: total number of items.
	*/
        (function() {
            var Heap, _leftChild, _parent, _rightChild;
            Heap = function() {
                function Heap(dataToHeapify) {
                    var i, item, _i, _j, _len, _ref;
                    null == dataToHeapify && (dataToHeapify = []);
                    /*
	      Pass an optional array to be heapified. Takes only O(n) time.
	      */
                    this._data = [ void 0 ];
                    for (_i = 0, _len = dataToHeapify.length; _i < _len; _i++) {
                        item = dataToHeapify[_i];
                        null != item && this._data.push(item);
                    }
                    if (this._data.length > 1) for (i = _j = 2, _ref = this._data.length; 2 <= _ref ? _j < _ref : _j > _ref; i = 2 <= _ref ? ++_j : --_j) this._upHeap(i);
                    this.size = this._data.length - 1;
                }
                Heap.prototype.add = function(value) {
                    /*
	      **Remember:** rejects null and undefined for mentioned reasons.
	      
	      _Returns:_ the value added.
	      */
                    if (null != value) {
                        this._data.push(value);
                        this._upHeap(this._data.length - 1);
                        this.size++;
                        return value;
                    }
                };
                Heap.prototype.removeMin = function() {
                    /*
	      _Returns:_ the smallest item (the root).
	      */
                    var min;
                    if (1 !== this._data.length) {
                        this.size--;
                        if (2 === this._data.length) return this._data.pop();
                        min = this._data[1];
                        this._data[1] = this._data.pop();
                        this._downHeap();
                        return min;
                    }
                };
                Heap.prototype.peekMin = function() {
                    /*
	      Check the smallest item without removing it.
	      
	      _Returns:_ the smallest item (the root).
	      */
                    return this._data[1];
                };
                Heap.prototype._upHeap = function(index) {
                    var _ref;
                    this._data[index];
                    for (;this._data[index] < this._data[_parent(index)] && index > 1; ) {
                        _ref = [ this._data[_parent(index)], this._data[index] ], this._data[index] = _ref[0], 
                        this._data[_parent(index)] = _ref[1];
                        index = _parent(index);
                    }
                };
                Heap.prototype._downHeap = function() {
                    var currentIndex, smallerChildIndex, _ref;
                    currentIndex = 1;
                    for (;_leftChild(currentIndex < this._data.length); ) {
                        smallerChildIndex = _leftChild(currentIndex);
                        smallerChildIndex < this._data.length - 1 && this._data[_rightChild(currentIndex)] < this._data[smallerChildIndex] && (smallerChildIndex = _rightChild(currentIndex));
                        if (!(this._data[smallerChildIndex] < this._data[currentIndex])) break;
                        _ref = [ this._data[currentIndex], this._data[smallerChildIndex] ], this._data[smallerChildIndex] = _ref[0], 
                        this._data[currentIndex] = _ref[1];
                        currentIndex = smallerChildIndex;
                    }
                };
                return Heap;
            }();
            _parent = function(index) {
                return index >> 1;
            };
            _leftChild = function(index) {
                return index << 1;
            };
            _rightChild = function(index) {
                return 1 + (index << 1);
            };
            module.exports = Heap;
        }).call(this);
    }, /* 4 */
    /***/
    function(module, exports) {
        /*
	Doubly Linked.

	## Overview example:

	```js
	var list = new LinkedList([5, 4, 9]);
	list.add(12); // => 12
	list.head.next.value; // => 4
	list.tail.value; // => 12
	list.at(-1); // => 12
	list.removeAt(2); // => 9
	list.remove(4); // => 4
	list.indexOf(5); // => 0
	list.add(5, 1); // => 5. Second 5 at position 1.
	list.indexOf(5, 1); // => 1
	```

	## Properties:

	- head: first item.
	- tail: last item.
	- size: total number of items.
	- item.value: value passed to the item when calling `add()`.
	- item.prev: previous item.
	- item.next: next item.
	*/
        (function() {
            var LinkedList;
            LinkedList = function() {
                function LinkedList(valuesToAdd) {
                    var value, _i, _len;
                    null == valuesToAdd && (valuesToAdd = []);
                    /*
	      Can pass an array of elements to link together during `new LinkedList()`
	      initiation.
	      */
                    this.head = {
                        prev: void 0,
                        value: void 0,
                        next: void 0
                    };
                    this.tail = {
                        prev: void 0,
                        value: void 0,
                        next: void 0
                    };
                    this.size = 0;
                    for (_i = 0, _len = valuesToAdd.length; _i < _len; _i++) {
                        value = valuesToAdd[_i];
                        this.add(value);
                    }
                }
                LinkedList.prototype.at = function(position) {
                    /*
	      Get the item at `position` (optional). Accepts negative index:
	      
	      ```js
	      myList.at(-1); // Returns the last element.
	      ```
	      However, passing a negative index that surpasses the boundary will return
	      undefined:
	      
	      ```js
	      myList = new LinkedList([2, 6, 8, 3])
	      myList.at(-5); // Undefined.
	      myList.at(-4); // 2.
	      ```
	      _Returns:_ item gotten, or undefined if not found.
	      */
                    var currentNode, _i, _j, _ref;
                    if (-this.size <= position && position < this.size) {
                        position = this._adjust(position);
                        if (2 * position < this.size) {
                            currentNode = this.head;
                            for (_i = 1; _i <= position; _i += 1) currentNode = currentNode.next;
                        } else {
                            currentNode = this.tail;
                            for (_j = 1, _ref = this.size - position - 1; _j <= _ref; _j += 1) currentNode = currentNode.prev;
                        }
                        return currentNode;
                    }
                };
                LinkedList.prototype.add = function(value, position) {
                    var currentNode, nodeToAdd, _ref, _ref1, _ref2;
                    null == position && (position = this.size);
                    /*
	      Add a new item at `position` (optional). Defaults to adding at the end.
	      `position`, just like in `at()`, can be negative (within the negative
	      boundary). Position specifies the place the value's going to be, and the old
	      node will be pushed higher. `add(-2)` on list of size 7 is the same as
	      `add(5)`.
	      
	      _Returns:_ item added.
	      */
                    if (-this.size <= position && position <= this.size) {
                        nodeToAdd = {
                            value: value
                        };
                        position = this._adjust(position);
                        if (0 === this.size) this.head = nodeToAdd; else if (0 === position) _ref = [ nodeToAdd, this.head, nodeToAdd ], 
                        this.head.prev = _ref[0], nodeToAdd.next = _ref[1], this.head = _ref[2]; else {
                            currentNode = this.at(position - 1);
                            _ref1 = [ currentNode.next, nodeToAdd, nodeToAdd, currentNode ], nodeToAdd.next = _ref1[0], 
                            null != (_ref2 = currentNode.next) && (_ref2.prev = _ref1[1]), currentNode.next = _ref1[2], 
                            nodeToAdd.prev = _ref1[3];
                        }
                        position === this.size && (this.tail = nodeToAdd);
                        this.size++;
                        return value;
                    }
                };
                LinkedList.prototype.removeAt = function(position) {
                    var currentNode, valueToReturn, _ref;
                    null == position && (position = this.size - 1);
                    /*
	      Remove an item at index `position` (optional). Defaults to the last item.
	      Index can be negative (within the boundary).
	      
	      _Returns:_ item removed.
	      */
                    if (-this.size <= position && position < this.size && 0 !== this.size) {
                        position = this._adjust(position);
                        if (1 === this.size) {
                            valueToReturn = this.head.value;
                            this.head.value = this.tail.value = void 0;
                        } else if (0 === position) {
                            valueToReturn = this.head.value;
                            this.head = this.head.next;
                            this.head.prev = void 0;
                        } else {
                            currentNode = this.at(position);
                            valueToReturn = currentNode.value;
                            currentNode.prev.next = currentNode.next;
                            null != (_ref = currentNode.next) && (_ref.prev = currentNode.prev);
                            position === this.size - 1 && (this.tail = currentNode.prev);
                        }
                        this.size--;
                        return valueToReturn;
                    }
                };
                LinkedList.prototype.remove = function(value) {
                    /*
	      Remove the item using its value instead of position. **Will remove the fist
	      occurrence of `value`.**
	      
	      _Returns:_ the value, or undefined if value's not found.
	      */
                    var currentNode;
                    if (null != value) {
                        currentNode = this.head;
                        for (;currentNode && currentNode.value !== value; ) currentNode = currentNode.next;
                        if (currentNode) {
                            if (1 === this.size) this.head.value = this.tail.value = void 0; else if (currentNode === this.head) {
                                this.head = this.head.next;
                                this.head.prev = void 0;
                            } else if (currentNode === this.tail) {
                                this.tail = this.tail.prev;
                                this.tail.next = void 0;
                            } else {
                                currentNode.prev.next = currentNode.next;
                                currentNode.next.prev = currentNode.prev;
                            }
                            this.size--;
                            return value;
                        }
                    }
                };
                LinkedList.prototype.indexOf = function(value, startingPosition) {
                    var currentNode, position;
                    null == startingPosition && (startingPosition = 0);
                    /*
	      Find the index of an item, similarly to `array.indexOf()`. Defaults to start
	      searching from the beginning, by can start at another position by passing
	      `startingPosition`. This parameter can also be negative; but unlike the
	      other methods of this class, `startingPosition` (optional) can be as small
	      as desired; a value of -999 for a list of size 5 will start searching
	      normally, at the beginning.
	      
	      **Note:** searches forwardly, **not** backwardly, i.e:
	      
	      ```js
	      var myList = new LinkedList([2, 3, 1, 4, 3, 5])
	      myList.indexOf(3, -3); // Returns 4, not 1
	      ```
	      _Returns:_ index of item found, or -1 if not found.
	      */
                    if (null == this.head.value && !this.head.next || startingPosition >= this.size) return -1;
                    startingPosition = Math.max(0, this._adjust(startingPosition));
                    currentNode = this.at(startingPosition);
                    position = startingPosition;
                    for (;currentNode && currentNode.value !== value; ) {
                        currentNode = currentNode.next;
                        position++;
                    }
                    return position === this.size ? -1 : position;
                };
                LinkedList.prototype._adjust = function(position) {
                    return position < 0 ? this.size + position : position;
                };
                return LinkedList;
            }();
            module.exports = LinkedList;
        }).call(this);
    }, /* 5 */
    /***/
    function(module, exports) {
        /*
	Kind of a stopgap measure for the upcoming [JavaScript
	Map](http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets)

	**Note:** due to JavaScript's limitations, hashing something other than Boolean,
	Number, String, Undefined, Null, RegExp, Function requires a hack that inserts a
	hidden unique property into the object. This means `set`, `get`, `has` and
	`delete` must employ the same object, and not a mere identical copy as in the
	case of, say, a string.

	## Overview example:

	```js
	var map = new Map({'alice': 'wonderland', 20: 'ok'});
	map.set('20', 5); // => 5
	map.get('20'); // => 5
	map.has('alice'); // => true
	map.delete(20) // => true
	var arr = [1, 2];
	map.add(arr, 'goody'); // => 'goody'
	map.has(arr); // => true
	map.has([1, 2]); // => false. Needs to compare by reference
	map.forEach(function(key, value) {
	  console.log(key, value);
	});
	```

	## Properties:

	- size: The total number of `(key, value)` pairs.
	*/
        (function() {
            var Map, SPECIAL_TYPE_KEY_PREFIX, _extractDataType, _isSpecialType, __hasProp = {}.hasOwnProperty;
            SPECIAL_TYPE_KEY_PREFIX = "_mapId_";
            Map = function() {
                function Map(objectToMap) {
                    /*
	      Pass an optional object whose (key, value) pair will be hashed. **Careful**
	      not to pass something like {5: 'hi', '5': 'hello'}, since JavaScript's
	      native object behavior will crush the first 5 property before it gets to
	      constructor.
	      */
                    var key, value;
                    this._content = {};
                    this._itemId = 0;
                    this._id = Map._newMapId();
                    this.size = 0;
                    for (key in objectToMap) if (__hasProp.call(objectToMap, key)) {
                        value = objectToMap[key];
                        this.set(key, value);
                    }
                }
                Map._mapIdTracker = 0;
                Map._newMapId = function() {
                    return this._mapIdTracker++;
                };
                Map.prototype.hash = function(key, makeHash) {
                    var propertyForMap, type;
                    null == makeHash && (makeHash = !1);
                    /*
	      The hash function for hashing keys is public. Feel free to replace it with
	      your own. The `makeHash` parameter is optional and accepts a boolean
	      (defaults to `false`) indicating whether or not to produce a new hash (for
	      the first use, naturally).
	      
	      _Returns:_ the hash.
	      */
                    type = _extractDataType(key);
                    if (_isSpecialType(key)) {
                        propertyForMap = SPECIAL_TYPE_KEY_PREFIX + this._id;
                        makeHash && !key[propertyForMap] && (key[propertyForMap] = this._itemId++);
                        return propertyForMap + "_" + key[propertyForMap];
                    }
                    return type + "_" + key;
                };
                Map.prototype.set = function(key, value) {
                    /*
	      _Returns:_ value.
	      */
                    this.has(key) || this.size++;
                    this._content[this.hash(key, !0)] = [ value, key ];
                    return value;
                };
                Map.prototype.get = function(key) {
                    /*
	      _Returns:_ value corresponding to the key, or undefined if not found.
	      */
                    var _ref;
                    return null != (_ref = this._content[this.hash(key)]) ? _ref[0] : void 0;
                };
                Map.prototype.has = function(key) {
                    /*
	      Check whether a value exists for the key.
	      
	      _Returns:_ true or false.
	      */
                    return this.hash(key) in this._content;
                };
                Map.prototype.delete = function(key) {
                    /*
	      Remove the (key, value) pair.
	      
	      _Returns:_ **true or false**. Unlike most of this library, this method
	      doesn't return the deleted value. This is so that it conforms to the future
	      JavaScript `map.delete()`'s behavior.
	      */
                    var hashedKey;
                    hashedKey = this.hash(key);
                    if (hashedKey in this._content) {
                        delete this._content[hashedKey];
                        _isSpecialType(key) && delete key[SPECIAL_TYPE_KEY_PREFIX + this._id];
                        this.size--;
                        return !0;
                    }
                    return !1;
                };
                Map.prototype.forEach = function(operation) {
                    /*
	      Traverse through the map. Pass a function of the form `fn(key, value)`.
	      
	      _Returns:_ undefined.
	      */
                    var key, value, _ref;
                    _ref = this._content;
                    for (key in _ref) if (__hasProp.call(_ref, key)) {
                        value = _ref[key];
                        operation(value[1], value[0]);
                    }
                };
                return Map;
            }();
            _isSpecialType = function(key) {
                var simpleHashableTypes, simpleType, type, _i, _len;
                simpleHashableTypes = [ "Boolean", "Number", "String", "Undefined", "Null", "RegExp", "Function" ];
                type = _extractDataType(key);
                for (_i = 0, _len = simpleHashableTypes.length; _i < _len; _i++) {
                    simpleType = simpleHashableTypes[_i];
                    if (type === simpleType) return !1;
                }
                return !0;
            };
            _extractDataType = function(type) {
                return Object.prototype.toString.apply(type).match(/\[object (.+)\]/)[1];
            };
            module.exports = Map;
        }).call(this);
    }, /* 6 */
    /***/
    function(module, exports) {
        /*
	Amortized O(1) dequeue!

	## Overview example:

	```js
	var queue = new Queue([1, 6, 4]);
	queue.enqueue(10); // => 10
	queue.dequeue(); // => 1
	queue.dequeue(); // => 6
	queue.dequeue(); // => 4
	queue.peek(); // => 10
	queue.dequeue(); // => 10
	queue.peek(); // => undefined
	```

	## Properties:

	- size: The total number of items.
	*/
        (function() {
            var Queue;
            Queue = function() {
                function Queue(initialArray) {
                    null == initialArray && (initialArray = []);
                    /*
	      Pass an optional array to be transformed into a queue. The item at index 0
	      is the first to be dequeued.
	      */
                    this._content = initialArray;
                    this._dequeueIndex = 0;
                    this.size = this._content.length;
                }
                Queue.prototype.enqueue = function(item) {
                    /*
	      _Returns:_ the item.
	      */
                    this.size++;
                    this._content.push(item);
                    return item;
                };
                Queue.prototype.dequeue = function() {
                    /*
	      _Returns:_ the dequeued item.
	      */
                    var itemToDequeue;
                    if (0 !== this.size) {
                        this.size--;
                        itemToDequeue = this._content[this._dequeueIndex];
                        this._dequeueIndex++;
                        if (2 * this._dequeueIndex > this._content.length) {
                            this._content = this._content.slice(this._dequeueIndex);
                            this._dequeueIndex = 0;
                        }
                        return itemToDequeue;
                    }
                };
                Queue.prototype.peek = function() {
                    /*
	      Check the next item to be dequeued, without removing it.
	      
	      _Returns:_ the item.
	      */
                    return this._content[this._dequeueIndex];
                };
                return Queue;
            }();
            module.exports = Queue;
        }).call(this);
    }, /* 7 */
    /***/
    function(module, exports) {
        /*
	Credit to Wikipedia's article on [Red-black
	tree](http://en.wikipedia.org/wiki/Red–black_tree)

	**Note:** doesn't handle duplicate entries, undefined and null. This is by
	design.

	## Overview example:

	```js
	var rbt = new RedBlackTree([7, 5, 1, 8]);
	rbt.add(2); // => 2
	rbt.add(10); // => 10
	rbt.has(5); // => true
	rbt.peekMin(); // => 1
	rbt.peekMax(); // => 10
	rbt.removeMin(); // => 1
	rbt.removeMax(); // => 10
	rbt.remove(8); // => 8
	```

	## Properties:

	- size: The total number of items.
	*/
        (function() {
            var BLACK, NODE_FOUND, NODE_TOO_BIG, NODE_TOO_SMALL, RED, RedBlackTree, STOP_SEARCHING, _findNode, _grandParentOf, _isLeft, _leftOrRight, _peekMaxNode, _peekMinNode, _siblingOf, _uncleOf;
            NODE_FOUND = 0;
            NODE_TOO_BIG = 1;
            NODE_TOO_SMALL = 2;
            STOP_SEARCHING = 3;
            RED = 1;
            BLACK = 2;
            RedBlackTree = function() {
                function RedBlackTree(valuesToAdd) {
                    var value, _i, _len;
                    null == valuesToAdd && (valuesToAdd = []);
                    /*
	      Pass an optional array to be turned into binary tree. **Note:** does not
	      accept duplicate, undefined and null.
	      */
                    this._root;
                    this.size = 0;
                    for (_i = 0, _len = valuesToAdd.length; _i < _len; _i++) {
                        value = valuesToAdd[_i];
                        null != value && this.add(value);
                    }
                }
                RedBlackTree.prototype.add = function(value) {
                    /*
	      Again, make sure to not pass a value already in the tree, or undefined, or
	      null.
	      
	      _Returns:_ value added.
	      */
                    var currentNode, foundNode, nodeToInsert, _ref;
                    if (null != value) {
                        this.size++;
                        nodeToInsert = {
                            value: value,
                            _color: RED
                        };
                        if (this._root) {
                            foundNode = _findNode(this._root, function(node) {
                                if (value === node.value) return NODE_FOUND;
                                if (value < node.value) {
                                    if (node._left) return NODE_TOO_BIG;
                                    nodeToInsert._parent = node;
                                    node._left = nodeToInsert;
                                    return STOP_SEARCHING;
                                }
                                if (node._right) return NODE_TOO_SMALL;
                                nodeToInsert._parent = node;
                                node._right = nodeToInsert;
                                return STOP_SEARCHING;
                            });
                            if (null != foundNode) return;
                        } else this._root = nodeToInsert;
                        currentNode = nodeToInsert;
                        for (;;) {
                            if (currentNode === this._root) {
                                currentNode._color = BLACK;
                                break;
                            }
                            if (currentNode._parent._color === BLACK) break;
                            if ((null != (_ref = _uncleOf(currentNode)) ? _ref._color : void 0) !== RED) {
                                if (!_isLeft(currentNode) && _isLeft(currentNode._parent)) {
                                    this._rotateLeft(currentNode._parent);
                                    currentNode = currentNode._left;
                                } else if (_isLeft(currentNode) && !_isLeft(currentNode._parent)) {
                                    this._rotateRight(currentNode._parent);
                                    currentNode = currentNode._right;
                                }
                                currentNode._parent._color = BLACK;
                                _grandParentOf(currentNode)._color = RED;
                                _isLeft(currentNode) ? this._rotateRight(_grandParentOf(currentNode)) : this._rotateLeft(_grandParentOf(currentNode));
                                break;
                            }
                            currentNode._parent._color = BLACK;
                            _uncleOf(currentNode)._color = BLACK;
                            _grandParentOf(currentNode)._color = RED;
                            currentNode = _grandParentOf(currentNode);
                        }
                        return value;
                    }
                };
                RedBlackTree.prototype.has = function(value) {
                    /*
	      _Returns:_ true or false.
	      */
                    var foundNode;
                    foundNode = _findNode(this._root, function(node) {
                        return value === node.value ? NODE_FOUND : value < node.value ? NODE_TOO_BIG : NODE_TOO_SMALL;
                    });
                    return !!foundNode;
                };
                RedBlackTree.prototype.peekMin = function() {
                    /*
	      Check the minimum value without removing it.
	      
	      _Returns:_ the minimum value.
	      */
                    var _ref;
                    return null != (_ref = _peekMinNode(this._root)) ? _ref.value : void 0;
                };
                RedBlackTree.prototype.peekMax = function() {
                    /*
	      Check the maximum value without removing it.
	      
	      _Returns:_ the maximum value.
	      */
                    var _ref;
                    return null != (_ref = _peekMaxNode(this._root)) ? _ref.value : void 0;
                };
                RedBlackTree.prototype.remove = function(value) {
                    /*
	      _Returns:_ the value removed, or undefined if the value's not found.
	      */
                    var foundNode;
                    foundNode = _findNode(this._root, function(node) {
                        return value === node.value ? NODE_FOUND : value < node.value ? NODE_TOO_BIG : NODE_TOO_SMALL;
                    });
                    if (foundNode) {
                        this._removeNode(this._root, foundNode);
                        this.size--;
                        return value;
                    }
                };
                RedBlackTree.prototype.removeMin = function() {
                    /*
	      _Returns:_ smallest item removed, or undefined if tree's empty.
	      */
                    var nodeToRemove, valueToReturn;
                    nodeToRemove = _peekMinNode(this._root);
                    if (nodeToRemove) {
                        valueToReturn = nodeToRemove.value;
                        this._removeNode(this._root, nodeToRemove);
                        return valueToReturn;
                    }
                };
                RedBlackTree.prototype.removeMax = function() {
                    /*
	      _Returns:_ biggest item removed, or undefined if tree's empty.
	      */
                    var nodeToRemove, valueToReturn;
                    nodeToRemove = _peekMaxNode(this._root);
                    if (nodeToRemove) {
                        valueToReturn = nodeToRemove.value;
                        this._removeNode(this._root, nodeToRemove);
                        return valueToReturn;
                    }
                };
                RedBlackTree.prototype._removeNode = function(root, node) {
                    var sibling, successor, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
                    if (node._left && node._right) {
                        successor = _peekMinNode(node._right);
                        node.value = successor.value;
                        node = successor;
                    }
                    successor = node._left || node._right;
                    successor || (successor = {
                        color: BLACK,
                        _right: void 0,
                        _left: void 0,
                        isLeaf: !0
                    });
                    successor._parent = node._parent;
                    null != (_ref = node._parent) && (_ref[_leftOrRight(node)] = successor);
                    if (node._color === BLACK) if (successor._color === RED) {
                        successor._color = BLACK;
                        successor._parent || (this._root = successor);
                    } else for (;;) {
                        if (!successor._parent) {
                            successor.isLeaf ? this._root = void 0 : this._root = successor;
                            break;
                        }
                        sibling = _siblingOf(successor);
                        if ((null != sibling ? sibling._color : void 0) === RED) {
                            successor._parent._color = RED;
                            sibling._color = BLACK;
                            _isLeft(successor) ? this._rotateLeft(successor._parent) : this._rotateRight(successor._parent);
                        }
                        sibling = _siblingOf(successor);
                        if (successor._parent._color !== BLACK || sibling && (sibling._color !== BLACK || sibling._left && sibling._left._color !== BLACK || sibling._right && sibling._right._color !== BLACK)) {
                            if (!(successor._parent._color !== RED || sibling && (sibling._color !== BLACK || sibling._left && (null != (_ref1 = sibling._left) ? _ref1._color : void 0) !== BLACK || sibling._right && (null != (_ref2 = sibling._right) ? _ref2._color : void 0) !== BLACK))) {
                                null != sibling && (sibling._color = RED);
                                successor._parent._color = BLACK;
                                break;
                            }
                            if ((null != sibling ? sibling._color : void 0) === BLACK) {
                                if (!_isLeft(successor) || sibling._right && sibling._right._color !== BLACK || (null != (_ref3 = sibling._left) ? _ref3._color : void 0) !== RED) {
                                    if (!(_isLeft(successor) || sibling._left && sibling._left._color !== BLACK || (null != (_ref5 = sibling._right) ? _ref5._color : void 0) !== RED)) {
                                        sibling._color = RED;
                                        null != (_ref6 = sibling._right) && (_ref6._color = BLACK);
                                        this._rotateLeft(sibling);
                                    }
                                } else {
                                    sibling._color = RED;
                                    null != (_ref4 = sibling._left) && (_ref4._color = BLACK);
                                    this._rotateRight(sibling);
                                }
                                break;
                            }
                            sibling = _siblingOf(successor);
                            sibling._color = successor._parent._color;
                            if (_isLeft(successor)) {
                                sibling._right._color = BLACK;
                                this._rotateRight(successor._parent);
                            } else {
                                sibling._left._color = BLACK;
                                this._rotateLeft(successor._parent);
                            }
                        } else {
                            null != sibling && (sibling._color = RED);
                            successor.isLeaf && (successor._parent[_leftOrRight(successor)] = void 0);
                            successor = successor._parent;
                        }
                    }
                    if (successor.isLeaf) return null != (_ref7 = successor._parent) ? _ref7[_leftOrRight(successor)] = void 0 : void 0;
                };
                RedBlackTree.prototype._rotateLeft = function(node) {
                    var _ref, _ref1;
                    null != (_ref = node._parent) && (_ref[_leftOrRight(node)] = node._right);
                    node._right._parent = node._parent;
                    node._parent = node._right;
                    node._right = node._right._left;
                    node._parent._left = node;
                    null != (_ref1 = node._right) && (_ref1._parent = node);
                    if (null == node._parent._parent) return this._root = node._parent;
                };
                RedBlackTree.prototype._rotateRight = function(node) {
                    var _ref, _ref1;
                    null != (_ref = node._parent) && (_ref[_leftOrRight(node)] = node._left);
                    node._left._parent = node._parent;
                    node._parent = node._left;
                    node._left = node._left._right;
                    node._parent._right = node;
                    null != (_ref1 = node._left) && (_ref1._parent = node);
                    if (null == node._parent._parent) return this._root = node._parent;
                };
                return RedBlackTree;
            }();
            _isLeft = function(node) {
                return node === node._parent._left;
            };
            _leftOrRight = function(node) {
                return _isLeft(node) ? "_left" : "_right";
            };
            _findNode = function(startingNode, comparator) {
                var comparisonResult, currentNode, foundNode;
                currentNode = startingNode;
                foundNode = void 0;
                for (;currentNode; ) {
                    comparisonResult = comparator(currentNode);
                    if (comparisonResult === NODE_FOUND) {
                        foundNode = currentNode;
                        break;
                    }
                    if (comparisonResult === NODE_TOO_BIG) currentNode = currentNode._left; else if (comparisonResult === NODE_TOO_SMALL) currentNode = currentNode._right; else if (comparisonResult === STOP_SEARCHING) break;
                }
                return foundNode;
            };
            _peekMinNode = function(startingNode) {
                return _findNode(startingNode, function(node) {
                    return node._left ? NODE_TOO_BIG : NODE_FOUND;
                });
            };
            _peekMaxNode = function(startingNode) {
                return _findNode(startingNode, function(node) {
                    return node._right ? NODE_TOO_SMALL : NODE_FOUND;
                });
            };
            _grandParentOf = function(node) {
                var _ref;
                return null != (_ref = node._parent) ? _ref._parent : void 0;
            };
            _uncleOf = function(node) {
                if (_grandParentOf(node)) return _isLeft(node._parent) ? _grandParentOf(node)._right : _grandParentOf(node)._left;
            };
            _siblingOf = function(node) {
                return _isLeft(node) ? node._parent._right : node._parent._left;
            };
            module.exports = RedBlackTree;
        }).call(this);
    }, /* 8 */
    /***/
    function(module, exports, __webpack_require__) {
        /*
	Good for fast insertion/removal/lookup of strings.

	## Overview example:

	```js
	var trie = new Trie(['bear', 'beer']);
	trie.add('hello'); // => 'hello'
	trie.add('helloha!'); // => 'helloha!'
	trie.has('bears'); // => false
	trie.longestPrefixOf('beatrice'); // => 'bea'
	trie.wordsWithPrefix('hel'); // => ['hello', 'helloha!']
	trie.remove('beers'); // => undefined. 'beer' still exists
	trie.remove('Beer') // => undefined. Case-sensitive
	trie.remove('beer') // => 'beer'. Removed
	```

	## Properties:

	- size: The total number of words.
	*/
        (function() {
            var Queue, Trie, WORD_END, _hasAtLeastNChildren, __hasProp = {}.hasOwnProperty;
            Queue = __webpack_require__(6);
            WORD_END = "end";
            Trie = function() {
                function Trie(words) {
                    var word, _i, _len;
                    null == words && (words = []);
                    /*
	      Pass an optional array of strings to be inserted initially.
	      */
                    this._root = {};
                    this.size = 0;
                    for (_i = 0, _len = words.length; _i < _len; _i++) {
                        word = words[_i];
                        this.add(word);
                    }
                }
                Trie.prototype.add = function(word) {
                    /*
	      Add a whole string to the trie.
	      
	      _Returns:_ the word added. Will return undefined (without adding the value)
	      if the word passed is null or undefined.
	      */
                    var currentNode, letter, _i, _len;
                    if (null != word) {
                        this.size++;
                        currentNode = this._root;
                        for (_i = 0, _len = word.length; _i < _len; _i++) {
                            letter = word[_i];
                            null == currentNode[letter] && (currentNode[letter] = {});
                            currentNode = currentNode[letter];
                        }
                        currentNode[WORD_END] = !0;
                        return word;
                    }
                };
                Trie.prototype.has = function(word) {
                    /*
	      __Returns:_ true or false.
	      */
                    var currentNode, letter, _i, _len;
                    if (null == word) return !1;
                    currentNode = this._root;
                    for (_i = 0, _len = word.length; _i < _len; _i++) {
                        letter = word[_i];
                        if (null == currentNode[letter]) return !1;
                        currentNode = currentNode[letter];
                    }
                    return !!currentNode[WORD_END];
                };
                Trie.prototype.longestPrefixOf = function(word) {
                    /*
	      Find all words containing the prefix. The word itself counts as a prefix.
	      
	      ```js
	      var trie = new Trie;
	      trie.add('hello');
	      trie.longestPrefixOf('he'); // 'he'
	      trie.longestPrefixOf('hello'); // 'hello'
	      trie.longestPrefixOf('helloha!'); // 'hello'
	      ```
	      
	      _Returns:_ the prefix string, or empty string if no prefix found.
	      */
                    var currentNode, letter, prefix, _i, _len;
                    if (null == word) return "";
                    currentNode = this._root;
                    prefix = "";
                    for (_i = 0, _len = word.length; _i < _len; _i++) {
                        letter = word[_i];
                        if (null == currentNode[letter]) break;
                        prefix += letter;
                        currentNode = currentNode[letter];
                    }
                    return prefix;
                };
                Trie.prototype.wordsWithPrefix = function(prefix) {
                    /*
	      Find all words containing the prefix. The word itself counts as a prefix.
	      **Watch out for edge cases.**
	      
	      ```js
	      var trie = new Trie;
	      trie.wordsWithPrefix(''); // []. Check later case below.
	      trie.add('');
	      trie.wordsWithPrefix(''); // ['']
	      trie.add('he');
	      trie.add('hello');
	      trie.add('hell');
	      trie.add('bear');
	      trie.add('z');
	      trie.add('zebra');
	      trie.wordsWithPrefix('hel'); // ['hell', 'hello']
	      ```
	      
	      _Returns:_ an array of strings, or empty array if no word found.
	      */
                    var accumulatedLetters, currentNode, letter, node, queue, subNode, words, _i, _len, _ref;
                    if (null == prefix) return [];
                    null != prefix || (prefix = "");
                    words = [];
                    currentNode = this._root;
                    for (_i = 0, _len = prefix.length; _i < _len; _i++) {
                        letter = prefix[_i];
                        currentNode = currentNode[letter];
                        if (null == currentNode) return [];
                    }
                    queue = new Queue();
                    queue.enqueue([ currentNode, "" ]);
                    for (;0 !== queue.size; ) {
                        _ref = queue.dequeue(), node = _ref[0], accumulatedLetters = _ref[1];
                        node[WORD_END] && words.push(prefix + accumulatedLetters);
                        for (letter in node) if (__hasProp.call(node, letter)) {
                            subNode = node[letter];
                            queue.enqueue([ subNode, accumulatedLetters + letter ]);
                        }
                    }
                    return words;
                };
                Trie.prototype.remove = function(word) {
                    /*
	      _Returns:_ the string removed, or undefined if the word in its whole doesn't
	      exist. **Note:** this means removing `beers` when only `beer` exists will
	      return undefined and conserve `beer`.
	      */
                    var currentNode, i, letter, prefix, _i, _j, _len, _ref;
                    if (null != word) {
                        currentNode = this._root;
                        prefix = [];
                        for (_i = 0, _len = word.length; _i < _len; _i++) {
                            letter = word[_i];
                            if (null == currentNode[letter]) return;
                            currentNode = currentNode[letter];
                            prefix.push([ letter, currentNode ]);
                        }
                        if (currentNode[WORD_END]) {
                            this.size--;
                            delete currentNode[WORD_END];
                            if (_hasAtLeastNChildren(currentNode, 1)) return word;
                            for (i = _j = _ref = prefix.length - 1; (_ref <= 1 ? _j <= 1 : _j >= 1) && !_hasAtLeastNChildren(prefix[i][1], 1); i = _ref <= 1 ? ++_j : --_j) delete prefix[i - 1][1][prefix[i][0]];
                            _hasAtLeastNChildren(this._root[prefix[0][0]], 1) || delete this._root[prefix[0][0]];
                            return word;
                        }
                    }
                };
                return Trie;
            }();
            _hasAtLeastNChildren = function(node, n) {
                var child, childCount;
                if (0 === n) return !0;
                childCount = 0;
                for (child in node) if (__hasProp.call(node, child)) {
                    childCount++;
                    if (childCount >= n) return !0;
                }
                return !1;
            };
            module.exports = Trie;
        }).call(this);
    } ]);
    angular.module("uiGmapgoogle-maps.wrapped").service("uiGmapMarkerSpiderfier", [ "uiGmapGoogleMapApi", function(GoogleMapApi) {
        var self = this;
        /* istanbul ignore next */
        (function() {
            /** @preserve OverlappingMarkerSpiderfier
https://github.com/jawj/OverlappingMarkerSpiderfier
Copyright (c) 2011 - 2013 George MacKerron
Released under the MIT licence: http://opensource.org/licenses/mit-license
Note: The Google Maps API v3 must be included *before* this code
 */
            var hasProp = {}.hasOwnProperty, slice = [].slice;
            this.OverlappingMarkerSpiderfier = function() {
                function _Class(map1, opts) {
                    var e, k, l, len1, ref1, v;
                    this.map = map1;
                    null == opts && (opts = {});
                    for (k in opts) if (hasProp.call(opts, k)) {
                        v = opts[k];
                        this[k] = v;
                    }
                    this.projHelper = new this.constructor.ProjHelper(this.map);
                    this.initMarkerArrays();
                    this.listeners = {};
                    ref1 = [ "click", "zoom_changed", "maptypeid_changed" ];
                    for (l = 0, len1 = ref1.length; l < len1; l++) {
                        e = ref1[l];
                        ge.addListener(this.map, e, function(_this) {
                            return function() {
                                return _this.unspiderfy();
                            };
                        }(this));
                    }
                }
                var ge, gm, j, lcH, lcU, len, mt, p, ref, twoPi, x;
                p = _Class.prototype;
                ref = [ _Class, p ];
                for (j = 0, len = ref.length; j < len; j++) {
                    x = ref[j];
                    x.VERSION = "0.3.3";
                }
                gm = void 0;
                ge = void 0;
                mt = void 0;
                twoPi = 2 * Math.PI;
                p.keepSpiderfied = !1;
                p.markersWontHide = !1;
                p.markersWontMove = !1;
                p.nearbyDistance = 20;
                p.circleSpiralSwitchover = 9;
                p.circleFootSeparation = 23;
                p.circleStartAngle = twoPi / 12;
                p.spiralFootSeparation = 26;
                p.spiralLengthStart = 11;
                p.spiralLengthFactor = 4;
                p.spiderfiedZIndex = 1e3;
                p.usualLegZIndex = 10;
                p.highlightedLegZIndex = 20;
                p.event = "click";
                p.minZoomLevel = !1;
                p.legWeight = 1.5;
                p.legColors = {
                    usual: {},
                    highlighted: {}
                };
                lcU = p.legColors.usual;
                lcH = p.legColors.highlighted;
                _Class.initializeGoogleMaps = function(google) {
                    gm = google.maps;
                    ge = gm.event;
                    mt = gm.MapTypeId;
                    lcU[mt.HYBRID] = lcU[mt.SATELLITE] = "#fff";
                    lcH[mt.HYBRID] = lcH[mt.SATELLITE] = "#f00";
                    lcU[mt.TERRAIN] = lcU[mt.ROADMAP] = "#444";
                    lcH[mt.TERRAIN] = lcH[mt.ROADMAP] = "#f00";
                    this.ProjHelper = function(map) {
                        return this.setMap(map);
                    };
                    this.ProjHelper.prototype = new gm.OverlayView();
                    return this.ProjHelper.prototype.draw = function() {};
                };
                p.initMarkerArrays = function() {
                    this.markers = [];
                    return this.markerListenerRefs = [];
                };
                p.addMarker = function(marker) {
                    var listenerRefs;
                    if (null != marker._oms) return this;
                    marker._oms = !0;
                    listenerRefs = [ ge.addListener(marker, this.event, function(_this) {
                        return function(event) {
                            return _this.spiderListener(marker, event);
                        };
                    }(this)) ];
                    this.markersWontHide || listenerRefs.push(ge.addListener(marker, "visible_changed", function(_this) {
                        return function() {
                            return _this.markerChangeListener(marker, !1);
                        };
                    }(this)));
                    this.markersWontMove || listenerRefs.push(ge.addListener(marker, "position_changed", function(_this) {
                        return function() {
                            return _this.markerChangeListener(marker, !0);
                        };
                    }(this)));
                    this.markerListenerRefs.push(listenerRefs);
                    this.markers.push(marker);
                    return this;
                };
                p.markerChangeListener = function(marker, positionChanged) {
                    if (null != marker._omsData && (positionChanged || !marker.getVisible()) && null == this.spiderfying && null == this.unspiderfying) return this.unspiderfy(positionChanged ? marker : null);
                };
                p.getMarkers = function() {
                    return this.markers.slice(0);
                };
                p.removeMarker = function(marker) {
                    var i, l, len1, listenerRef, listenerRefs;
                    null != marker._omsData && this.unspiderfy();
                    i = this.arrIndexOf(this.markers, marker);
                    if (i < 0) return this;
                    listenerRefs = this.markerListenerRefs.splice(i, 1)[0];
                    for (l = 0, len1 = listenerRefs.length; l < len1; l++) {
                        listenerRef = listenerRefs[l];
                        ge.removeListener(listenerRef);
                    }
                    delete marker._oms;
                    this.markers.splice(i, 1);
                    return this;
                };
                p.clearMarkers = function() {
                    var i, l, len1, len2, listenerRef, listenerRefs, marker, n, ref1;
                    this.unspiderfy();
                    ref1 = this.markers;
                    for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
                        marker = ref1[i];
                        listenerRefs = this.markerListenerRefs[i];
                        for (n = 0, len2 = listenerRefs.length; n < len2; n++) {
                            listenerRef = listenerRefs[n];
                            ge.removeListener(listenerRef);
                        }
                        delete marker._oms;
                    }
                    this.initMarkerArrays();
                    return this;
                };
                p.addListener = function(event, func) {
                    var base;
                    (null != (base = this.listeners)[event] ? base[event] : base[event] = []).push(func);
                    return this;
                };
                p.removeListener = function(event, func) {
                    var i;
                    i = this.arrIndexOf(this.listeners[event], func);
                    i < 0 || this.listeners[event].splice(i, 1);
                    return this;
                };
                p.clearListeners = function(event) {
                    this.listeners[event] = [];
                    return this;
                };
                p.trigger = function() {
                    var args, event, func, l, len1, ref1, ref2, results;
                    event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
                    ref2 = null != (ref1 = this.listeners[event]) ? ref1 : [];
                    results = [];
                    for (l = 0, len1 = ref2.length; l < len1; l++) {
                        func = ref2[l];
                        results.push(func.apply(null, args));
                    }
                    return results;
                };
                p.generatePtsCircle = function(count, centerPt) {
                    var angle, angleStep, circumference, i, l, legLength, ref1, results;
                    circumference = this.circleFootSeparation * (2 + count);
                    legLength = circumference / twoPi;
                    angleStep = twoPi / count;
                    results = [];
                    for (i = l = 0, ref1 = count; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                        angle = this.circleStartAngle + i * angleStep;
                        results.push(new gm.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle)));
                    }
                    return results;
                };
                p.generatePtsSpiral = function(count, centerPt) {
                    var angle, i, l, legLength, pt, ref1, results;
                    legLength = this.spiralLengthStart;
                    angle = 0;
                    results = [];
                    for (i = l = 0, ref1 = count; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                        angle += this.spiralFootSeparation / legLength + 5e-4 * i;
                        pt = new gm.Point(centerPt.x + legLength * Math.cos(angle), centerPt.y + legLength * Math.sin(angle));
                        legLength += twoPi * this.spiralLengthFactor / angle;
                        results.push(pt);
                    }
                    return results;
                };
                p.spiderListener = function(marker, event) {
                    var $this, clear, l, len1, m, mPt, markerPt, markerSpiderfied, nDist, nearbyMarkerData, nonNearbyMarkers, pxSq, ref1;
                    markerSpiderfied = null != marker._omsData;
                    if (!markerSpiderfied || !this.keepSpiderfied) if ("mouseover" === this.event) {
                        $this = this;
                        clear = function() {
                            return $this.unspiderfy();
                        };
                        window.clearTimeout(p.timeout);
                        p.timeout = setTimeout(clear, 3e3);
                    } else this.unspiderfy();
                    if (markerSpiderfied || this.map.getStreetView().getVisible() || "GoogleEarthAPI" === this.map.getMapTypeId()) return this.trigger("click", marker, event);
                    nearbyMarkerData = [];
                    nonNearbyMarkers = [];
                    nDist = this.nearbyDistance;
                    pxSq = nDist * nDist;
                    markerPt = this.llToPt(marker.position);
                    ref1 = this.markers;
                    for (l = 0, len1 = ref1.length; l < len1; l++) {
                        m = ref1[l];
                        if (null != m.map && m.getVisible()) {
                            mPt = this.llToPt(m.position);
                            this.ptDistanceSq(mPt, markerPt) < pxSq ? nearbyMarkerData.push({
                                marker: m,
                                markerPt: mPt
                            }) : nonNearbyMarkers.push(m);
                        }
                    }
                    return 1 === nearbyMarkerData.length ? this.trigger("click", marker, event) : this.spiderfy(nearbyMarkerData, nonNearbyMarkers);
                };
                p.markersNearMarker = function(marker, firstOnly) {
                    var l, len1, m, mPt, markerPt, markers, nDist, pxSq, ref1, ref2, ref3;
                    null == firstOnly && (firstOnly = !1);
                    if (null == this.projHelper.getProjection()) throw "Must wait for 'idle' event on map before calling markersNearMarker";
                    nDist = this.nearbyDistance;
                    pxSq = nDist * nDist;
                    markerPt = this.llToPt(marker.position);
                    markers = [];
                    ref1 = this.markers;
                    for (l = 0, len1 = ref1.length; l < len1; l++) {
                        m = ref1[l];
                        if (m !== marker && null != m.map && m.getVisible()) {
                            mPt = this.llToPt(null != (ref2 = null != (ref3 = m._omsData) ? ref3.usualPosition : void 0) ? ref2 : m.position);
                            if (this.ptDistanceSq(mPt, markerPt) < pxSq) {
                                markers.push(m);
                                if (firstOnly) break;
                            }
                        }
                    }
                    return markers;
                };
                p.markersNearAnyOtherMarker = function() {
                    var i, i1, i2, l, len1, len2, len3, m, m1, m1Data, m2, m2Data, mData, n, nDist, pxSq, q, ref1, ref2, ref3, results;
                    if (null == this.projHelper.getProjection()) throw "Must wait for 'idle' event on map before calling markersNearAnyOtherMarker";
                    nDist = this.nearbyDistance;
                    pxSq = nDist * nDist;
                    mData = function() {
                        var l, len1, ref1, ref2, ref3, results;
                        ref1 = this.markers;
                        results = [];
                        for (l = 0, len1 = ref1.length; l < len1; l++) {
                            m = ref1[l];
                            results.push({
                                pt: this.llToPt(null != (ref2 = null != (ref3 = m._omsData) ? ref3.usualPosition : void 0) ? ref2 : m.position),
                                willSpiderfy: !1
                            });
                        }
                        return results;
                    }.call(this);
                    ref1 = this.markers;
                    for (i1 = l = 0, len1 = ref1.length; l < len1; i1 = ++l) {
                        m1 = ref1[i1];
                        if (null != m1.map && m1.getVisible()) {
                            m1Data = mData[i1];
                            if (!m1Data.willSpiderfy) {
                                ref2 = this.markers;
                                for (i2 = n = 0, len2 = ref2.length; n < len2; i2 = ++n) {
                                    m2 = ref2[i2];
                                    if (i2 !== i1 && (null != m2.map && m2.getVisible())) {
                                        m2Data = mData[i2];
                                        if ((!(i2 < i1) || m2Data.willSpiderfy) && this.ptDistanceSq(m1Data.pt, m2Data.pt) < pxSq) {
                                            m1Data.willSpiderfy = m2Data.willSpiderfy = !0;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ref3 = this.markers;
                    results = [];
                    for (i = q = 0, len3 = ref3.length; q < len3; i = ++q) {
                        m = ref3[i];
                        mData[i].willSpiderfy && results.push(m);
                    }
                    return results;
                };
                p.makeHighlightListenerFuncs = function(marker) {
                    return {
                        highlight: function(_this) {
                            return function() {
                                return marker._omsData.leg.setOptions({
                                    strokeColor: _this.legColors.highlighted[_this.map.mapTypeId],
                                    zIndex: _this.highlightedLegZIndex
                                });
                            };
                        }(this),
                        unhighlight: function(_this) {
                            return function() {
                                return marker._omsData.leg.setOptions({
                                    strokeColor: _this.legColors.usual[_this.map.mapTypeId],
                                    zIndex: _this.usualLegZIndex
                                });
                            };
                        }(this)
                    };
                };
                p.spiderfy = function(markerData, nonNearbyMarkers) {
                    var bodyPt, footLl, footPt, footPts, highlightListenerFuncs, leg, marker, md, nearestMarkerDatum, numFeet, spiderfiedMarkers;
                    if (this.minZoomLevel && this.map.getZoom() < this.minZoomLevel) return !1;
                    this.spiderfying = !0;
                    numFeet = markerData.length;
                    bodyPt = this.ptAverage(function() {
                        var l, len1, results;
                        results = [];
                        for (l = 0, len1 = markerData.length; l < len1; l++) {
                            md = markerData[l];
                            results.push(md.markerPt);
                        }
                        return results;
                    }());
                    footPts = numFeet >= this.circleSpiralSwitchover ? this.generatePtsSpiral(numFeet, bodyPt).reverse() : this.generatePtsCircle(numFeet, bodyPt);
                    spiderfiedMarkers = function() {
                        var l, len1, results;
                        results = [];
                        for (l = 0, len1 = footPts.length; l < len1; l++) {
                            footPt = footPts[l];
                            footLl = this.ptToLl(footPt);
                            nearestMarkerDatum = this.minExtract(markerData, function(_this) {
                                return function(md) {
                                    return _this.ptDistanceSq(md.markerPt, footPt);
                                };
                            }(this));
                            marker = nearestMarkerDatum.marker;
                            leg = new gm.Polyline({
                                map: this.map,
                                path: [ marker.position, footLl ],
                                strokeColor: this.legColors.usual[this.map.mapTypeId],
                                strokeWeight: this.legWeight,
                                zIndex: this.usualLegZIndex
                            });
                            marker._omsData = {
                                usualPosition: marker.position,
                                leg: leg
                            };
                            if (this.legColors.highlighted[this.map.mapTypeId] !== this.legColors.usual[this.map.mapTypeId]) {
                                highlightListenerFuncs = this.makeHighlightListenerFuncs(marker);
                                marker._omsData.hightlightListeners = {
                                    highlight: ge.addListener(marker, "mouseover", highlightListenerFuncs.highlight),
                                    unhighlight: ge.addListener(marker, "mouseout", highlightListenerFuncs.unhighlight)
                                };
                            }
                            marker.setPosition(footLl);
                            marker.setZIndex(Math.round(this.spiderfiedZIndex + footPt.y));
                            results.push(marker);
                        }
                        return results;
                    }.call(this);
                    delete this.spiderfying;
                    this.spiderfied = !0;
                    return this.trigger("spiderfy", spiderfiedMarkers, nonNearbyMarkers);
                };
                p.unspiderfy = function(markerNotToMove) {
                    var l, len1, listeners, marker, nonNearbyMarkers, ref1, unspiderfiedMarkers;
                    null == markerNotToMove && (markerNotToMove = null);
                    if (null == this.spiderfied) return this;
                    this.unspiderfying = !0;
                    unspiderfiedMarkers = [];
                    nonNearbyMarkers = [];
                    ref1 = this.markers;
                    for (l = 0, len1 = ref1.length; l < len1; l++) {
                        marker = ref1[l];
                        if (null != marker._omsData) {
                            marker._omsData.leg.setMap(null);
                            marker !== markerNotToMove && marker.setPosition(marker._omsData.usualPosition);
                            marker.setZIndex(null);
                            listeners = marker._omsData.hightlightListeners;
                            if (null != listeners) {
                                ge.removeListener(listeners.highlight);
                                ge.removeListener(listeners.unhighlight);
                            }
                            delete marker._omsData;
                            unspiderfiedMarkers.push(marker);
                        } else nonNearbyMarkers.push(marker);
                    }
                    delete this.unspiderfying;
                    delete this.spiderfied;
                    this.trigger("unspiderfy", unspiderfiedMarkers, nonNearbyMarkers);
                    return this;
                };
                p.ptDistanceSq = function(pt1, pt2) {
                    var dx, dy;
                    dx = pt1.x - pt2.x;
                    dy = pt1.y - pt2.y;
                    return dx * dx + dy * dy;
                };
                p.ptAverage = function(pts) {
                    var l, len1, numPts, pt, sumX, sumY;
                    sumX = sumY = 0;
                    for (l = 0, len1 = pts.length; l < len1; l++) {
                        pt = pts[l];
                        sumX += pt.x;
                        sumY += pt.y;
                    }
                    numPts = pts.length;
                    return new gm.Point(sumX / numPts, sumY / numPts);
                };
                p.llToPt = function(ll) {
                    return this.projHelper.getProjection().fromLatLngToDivPixel(ll);
                };
                p.ptToLl = function(pt) {
                    return this.projHelper.getProjection().fromDivPixelToLatLng(pt);
                };
                p.minExtract = function(set, func) {
                    var bestIndex, bestVal, index, item, l, len1, val;
                    for (index = l = 0, len1 = set.length; l < len1; index = ++l) {
                        item = set[index];
                        val = func(item);
                        if (void 0 === bestIndex || null === bestIndex || val < bestVal) {
                            bestVal = val;
                            bestIndex = index;
                        }
                    }
                    return set.splice(bestIndex, 1)[0];
                };
                p.arrIndexOf = function(arr, obj) {
                    var i, l, len1, o;
                    if (null != arr.indexOf) return arr.indexOf(obj);
                    for (i = l = 0, len1 = arr.length; l < len1; i = ++l) {
                        o = arr[i];
                        if (o === obj) return i;
                    }
                    return -1;
                };
                return _Class;
            }();
        }).apply(self);
        GoogleMapApi.then(function() {
            self.OverlappingMarkerSpiderfier.initializeGoogleMaps(window.google);
        });
        return this.OverlappingMarkerSpiderfier;
    } ]);
    /**
 * Performance overrides on MarkerClusterer custom to Angular Google Maps
 *
 * Created by Petr Bruna ccg1415 and Nick McCready on 7/13/14.
 */
    angular.module("uiGmapgoogle-maps.extensions").service("uiGmapExtendMarkerClusterer", [ "uiGmapLodash", "uiGmapPropMap", function(uiGmapLodash, PropMap) {
        return {
            init: _.once(function() {
                (function() {
                    var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
                        function ctor() {
                            this.constructor = child;
                        }
                        for (var key in parent) __hasProp.call(parent, key) && (child[key] = parent[key]);
                        ctor.prototype = parent.prototype;
                        child.prototype = new ctor();
                        child.__super__ = parent.prototype;
                        return child;
                    };
                    window.NgMapCluster = function(_super) {
                        function NgMapCluster(opts) {
                            NgMapCluster.__super__.constructor.call(this, opts);
                            this.markers_ = new PropMap();
                        }
                        __extends(NgMapCluster, _super);
                        /**
           * Adds a marker to the cluster.
           *
           * @param {google.maps.Marker} marker The marker to be added.
           * @return {boolean} True if the marker was added.
           * @ignore
           */
                        NgMapCluster.prototype.addMarker = function(marker) {
                            var mCount, mz;
                            if (this.isMarkerAlreadyAdded_(marker)) {
                                var oldMarker = this.markers_.get(marker.key);
                                if (oldMarker.getPosition().lat() == marker.getPosition().lat() && oldMarker.getPosition().lon() == marker.getPosition().lon()) //if nothing has changed
                                return !1;
                            }
                            if (this.center_) {
                                if (this.averageCenter_) {
                                    var l = this.markers_.length + 1, lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l, lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;
                                    this.center_ = new google.maps.LatLng(lat, lng);
                                    this.calculateBounds_();
                                }
                            } else {
                                this.center_ = marker.getPosition();
                                this.calculateBounds_();
                            }
                            marker.isAdded = !0;
                            this.markers_.push(marker);
                            mCount = this.markers_.length;
                            mz = this.markerClusterer_.getMaxZoom();
                            null !== mz && this.map_.getZoom() > mz ? // Zoomed in past max zoom, so show the marker.
                            marker.getMap() !== this.map_ && marker.setMap(this.map_) : mCount < this.minClusterSize_ ? // Min cluster size not reached so show the marker.
                            marker.getMap() !== this.map_ && marker.setMap(this.map_) : mCount === this.minClusterSize_ ? // Hide the markers that were showing.
                            this.markers_.each(function(m) {
                                m.setMap(null);
                            }) : marker.setMap(null);
                            //this.updateIcon_();
                            return !0;
                        };
                        /**
           * Determines if a marker has already been added to the cluster.
           *
           * @param {google.maps.Marker} marker The marker to check.
           * @return {boolean} True if the marker has already been added.
           */
                        NgMapCluster.prototype.isMarkerAlreadyAdded_ = function(marker) {
                            return uiGmapLodash.isNullOrUndefined(this.markers_.get(marker.key));
                        };
                        /**
           * Returns the bounds of the cluster.
           *
           * @return {google.maps.LatLngBounds} the cluster bounds.
           * @ignore
           */
                        NgMapCluster.prototype.getBounds = function() {
                            var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
                            this.getMarkers().each(function(m) {
                                bounds.extend(m.getPosition());
                            });
                            return bounds;
                        };
                        /**
           * Removes the cluster from the map.
           *
           * @ignore
           */
                        NgMapCluster.prototype.remove = function() {
                            this.clusterIcon_.setMap(null);
                            this.markers_ = new PropMap();
                            delete this.markers_;
                        };
                        return NgMapCluster;
                    }(Cluster);
                    window.NgMapMarkerClusterer = function(_super) {
                        function NgMapMarkerClusterer(map, opt_markers, opt_options) {
                            NgMapMarkerClusterer.__super__.constructor.call(this, map, opt_markers, opt_options);
                            this.markers_ = new PropMap();
                        }
                        __extends(NgMapMarkerClusterer, _super);
                        /**
           * Removes all clusters and markers from the map and also removes all markers
           *  managed by the clusterer.
           */
                        NgMapMarkerClusterer.prototype.clearMarkers = function() {
                            this.resetViewport_(!0);
                            this.markers_ = new PropMap();
                        };
                        /**
           * Removes a marker and returns true if removed, false if not.
           *
           * @param {google.maps.Marker} marker The marker to remove
           * @return {boolean} Whether the marker was removed or not
           */
                        NgMapMarkerClusterer.prototype.removeMarker_ = function(marker) {
                            if (!this.markers_.get(marker.key)) return !1;
                            marker.setMap(null);
                            this.markers_.remove(marker.key);
                            // Remove the marker from the list of managed markers
                            return !0;
                        };
                        /**
           * Creates the clusters. This is done in batches to avoid timeout errors
           *  in some browsers when there is a huge number of markers.
           *
           * @param {number} iFirst The index of the first marker in the batch of
           *  markers to be added to clusters.
           */
                        NgMapMarkerClusterer.prototype.createClusters_ = function(iFirst) {
                            var i, marker, mapBounds, cMarkerClusterer = this;
                            if (this.ready_) {
                                // Cancel previous batch processing if we're working on the first batch:
                                if (0 === iFirst) {
                                    /**
               * This event is fired when the <code>MarkerClusterer</code> begins
               *  clustering markers.
               * @name MarkerClusterer#clusteringbegin
               * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
               * @event
               */
                                    google.maps.event.trigger(this, "clusteringbegin", this);
                                    if (void 0 !== this.timerRefStatic) {
                                        clearTimeout(this.timerRefStatic);
                                        delete this.timerRefStatic;
                                    }
                                }
                                // Get our current map view bounds.
                                // Create a new bounds object so we don't affect the map.
                                //
                                // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:
                                mapBounds = this.getMap().getZoom() > 3 ? new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast()) : new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));
                                var bounds = this.getExtendedBounds(mapBounds), iLast = Math.min(iFirst + this.batchSize_, this.markers_.length), _ms = this.markers_.values();
                                for (i = iFirst; i < iLast; i++) {
                                    marker = _ms[i];
                                    !marker.isAdded && this.isMarkerInBounds_(marker, bounds) && (!this.ignoreHidden_ || this.ignoreHidden_ && marker.getVisible()) && this.addToClosestCluster_(marker);
                                }
                                if (iLast < this.markers_.length) this.timerRefStatic = setTimeout(function() {
                                    cMarkerClusterer.createClusters_(iLast);
                                }, 0); else {
                                    // custom addition by ui-gmap
                                    // update icon for all clusters
                                    for (i = 0; i < this.clusters_.length; i++) this.clusters_[i].updateIcon_();
                                    delete this.timerRefStatic;
                                    /**
               * This event is fired when the <code>MarkerClusterer</code> stops
               *  clustering markers.
               * @name MarkerClusterer#clusteringend
               * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.
               * @event
               */
                                    google.maps.event.trigger(this, "clusteringend", this);
                                }
                            }
                        };
                        /**
           * Adds a marker to a cluster, or creates a new cluster.
           *
           * @param {google.maps.Marker} marker The marker to add.
           */
                        NgMapMarkerClusterer.prototype.addToClosestCluster_ = function(marker) {
                            var i, d, cluster, center, distance = 4e4, clusterToAddTo = null;
                            for (i = 0; i < this.clusters_.length; i++) {
                                cluster = this.clusters_[i];
                                center = cluster.getCenter();
                                if (center) {
                                    d = this.distanceBetweenPoints_(center, marker.getPosition());
                                    if (d < distance) {
                                        distance = d;
                                        clusterToAddTo = cluster;
                                    }
                                }
                            }
                            if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) clusterToAddTo.addMarker(marker); else {
                                cluster = new NgMapCluster(this);
                                cluster.addMarker(marker);
                                this.clusters_.push(cluster);
                            }
                        };
                        /**
           * Redraws all the clusters.
           */
                        NgMapMarkerClusterer.prototype.redraw_ = function() {
                            this.createClusters_(0);
                        };
                        /**
           * Removes all clusters from the map. The markers are also removed from the map
           *  if <code>opt_hide</code> is set to <code>true</code>.
           *
           * @param {boolean} [opt_hide] Set to <code>true</code> to also remove the markers
           *  from the map.
           */
                        NgMapMarkerClusterer.prototype.resetViewport_ = function(opt_hide) {
                            var i;
                            // Remove all the clusters
                            for (i = 0; i < this.clusters_.length; i++) this.clusters_[i].remove();
                            this.clusters_ = [];
                            // Reset the markers to not be added and to be removed from the map.
                            this.markers_.each(function(marker) {
                                marker.isAdded = !1;
                                opt_hide && marker.setMap(null);
                            });
                        };
                        /**
           * Extends an object's prototype by another's.
           *
           * @param {Object} obj1 The object to be extended.
           * @param {Object} obj2 The object to extend with.
           * @return {Object} The new extended object.
           * @ignore
           */
                        NgMapMarkerClusterer.prototype.extend = function(obj1, obj2) {
                            return function(object) {
                                var property;
                                for (property in object.prototype) "constructor" !== property && (this.prototype[property] = object.prototype[property]);
                                return this;
                            }.apply(obj1, [ obj2 ]);
                        };
                        ////////////////////////////////////////////////////////////////////////////////
                        /*
          Other overrides relevant to MarkerClusterPlus
          */
                        ////////////////////////////////////////////////////////////////////////////////
                        /**
          * Positions and shows the icon.
          */
                        ClusterIcon.prototype.show = function() {
                            if (this.div_) {
                                var img = "", bp = this.backgroundPosition_.split(" "), spriteH = parseInt(bp[0].trim(), 10), spriteV = parseInt(bp[1].trim(), 10), pos = this.getPosFromLatLng_(this.center_);
                                this.div_.style.cssText = this.createCss(pos);
                                img = "<img src='" + this.url_ + "' style='position: absolute; top: " + spriteV + "px; left: " + spriteH + "px; ";
                                this.cluster_.getMarkerClusterer().enableRetinaIcons_ ? img += "width: " + this.width_ + "px;height: " + this.height_ + "px;" : img += "clip: rect(" + -1 * spriteV + "px, " + (-1 * spriteH + this.width_) + "px, " + (-1 * spriteV + this.height_) + "px, " + -1 * spriteH + "px);";
                                // END ADD
                                img += "'>";
                                this.div_.innerHTML = img + "<div style='position: absolute;top: " + this.anchorText_[0] + "px;left: " + this.anchorText_[1] + "px;color: " + this.textColor_ + ";font-size: " + this.textSize_ + "px;font-family: " + this.fontFamily_ + ";font-weight: " + this.fontWeight_ + ";font-style: " + this.fontStyle_ + ";text-decoration: " + this.textDecoration_ + ";text-align: center;width: " + this.width_ + "px;line-height:" + this.height_ + "px;'>" + this.sums_.text + "</div>";
                                void 0 === this.sums_.title || "" === this.sums_.title ? this.div_.title = this.cluster_.getMarkerClusterer().getTitle() : this.div_.title = this.sums_.title;
                                this.div_.style.display = "";
                            }
                            this.visible_ = !0;
                        };
                        //END OTHER OVERRIDES
                        ////////////////////////////////////////////////////////////////////////////////
                        return NgMapMarkerClusterer;
                    }(MarkerClusterer);
                }).call(this);
            })
        };
    } ]);
}(window, angular, _);

/**
  * x is a value between 0 and 1, indicating where in the animation you are.
  */
var duScrollDefaultEasing = function(x) {
    "use strict";
    return x < .5 ? Math.pow(2 * x, 2) / 2 : 1 - Math.pow(2 * (1 - x), 2) / 2;
};

angular.module("duScroll", [ "duScroll.scrollspy", "duScroll.smoothScroll", "duScroll.scrollContainer", "duScroll.spyContext", "duScroll.scrollHelpers" ]).value("duScrollDuration", 350).value("duScrollSpyWait", 100).value("duScrollGreedy", !1).value("duScrollOffset", 0).value("duScrollEasing", duScrollDefaultEasing);

angular.module("duScroll.scrollHelpers", [ "duScroll.requestAnimation" ]).run([ "$window", "$q", "cancelAnimation", "requestAnimation", "duScrollEasing", "duScrollDuration", "duScrollOffset", function($window, $q, cancelAnimation, requestAnimation, duScrollEasing, duScrollDuration, duScrollOffset) {
    "use strict";
    var proto = {}, isDocument = function(el) {
        return "undefined" != typeof HTMLDocument && el instanceof HTMLDocument || el.nodeType && el.nodeType === el.DOCUMENT_NODE;
    }, isElement = function(el) {
        return "undefined" != typeof HTMLElement && el instanceof HTMLElement || el.nodeType && el.nodeType === el.ELEMENT_NODE;
    }, unwrap = function(el) {
        return isElement(el) || isDocument(el) ? el : el[0];
    };
    proto.duScrollTo = function(left, top, duration, easing) {
        var aliasFn;
        angular.isElement(left) ? aliasFn = this.duScrollToElement : angular.isDefined(duration) && (aliasFn = this.duScrollToAnimated);
        if (aliasFn) return aliasFn.apply(this, arguments);
        var el = unwrap(this);
        if (isDocument(el)) return $window.scrollTo(left, top);
        el.scrollLeft = left;
        el.scrollTop = top;
    };
    var scrollAnimation, deferred;
    proto.duScrollToAnimated = function(left, top, duration, easing) {
        duration && !easing && (easing = duScrollEasing);
        var startLeft = this.duScrollLeft(), startTop = this.duScrollTop(), deltaLeft = Math.round(left - startLeft), deltaTop = Math.round(top - startTop), startTime = null, progress = 0, el = this, cancelOnEvents = "scroll mousedown mousewheel touchmove keydown", cancelScrollAnimation = function($event) {
            if (!$event || progress && $event.which > 0) {
                el.unbind(cancelOnEvents, cancelScrollAnimation);
                cancelAnimation(scrollAnimation);
                deferred.reject();
                scrollAnimation = null;
            }
        };
        scrollAnimation && cancelScrollAnimation();
        deferred = $q.defer();
        if (0 === duration || !deltaLeft && !deltaTop) {
            0 === duration && el.duScrollTo(left, top);
            deferred.resolve();
            return deferred.promise;
        }
        var animationStep = function(timestamp) {
            null === startTime && (startTime = timestamp);
            progress = timestamp - startTime;
            var percent = progress >= duration ? 1 : easing(progress / duration);
            el.scrollTo(startLeft + Math.ceil(deltaLeft * percent), startTop + Math.ceil(deltaTop * percent));
            if (percent < 1) scrollAnimation = requestAnimation(animationStep); else {
                el.unbind(cancelOnEvents, cancelScrollAnimation);
                scrollAnimation = null;
                deferred.resolve();
            }
        };
        //Fix random mobile safari bug when scrolling to top by hitting status bar
        el.duScrollTo(startLeft, startTop);
        el.bind(cancelOnEvents, cancelScrollAnimation);
        scrollAnimation = requestAnimation(animationStep);
        return deferred.promise;
    };
    proto.duScrollToElement = function(target, offset, duration, easing) {
        var el = unwrap(this);
        angular.isNumber(offset) && !isNaN(offset) || (offset = duScrollOffset);
        var top = this.duScrollTop() + unwrap(target).getBoundingClientRect().top - offset;
        isElement(el) && (top -= el.getBoundingClientRect().top);
        return this.duScrollTo(0, top, duration, easing);
    };
    proto.duScrollLeft = function(value, duration, easing) {
        if (angular.isNumber(value)) return this.duScrollTo(value, this.duScrollTop(), duration, easing);
        var el = unwrap(this);
        return isDocument(el) ? $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft : el.scrollLeft;
    };
    proto.duScrollTop = function(value, duration, easing) {
        if (angular.isNumber(value)) return this.duScrollTo(this.duScrollLeft(), value, duration, easing);
        var el = unwrap(this);
        return isDocument(el) ? $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop : el.scrollTop;
    };
    proto.duScrollToElementAnimated = function(target, offset, duration, easing) {
        return this.duScrollToElement(target, offset, duration || duScrollDuration, easing);
    };
    proto.duScrollTopAnimated = function(top, duration, easing) {
        return this.duScrollTop(top, duration || duScrollDuration, easing);
    };
    proto.duScrollLeftAnimated = function(left, duration, easing) {
        return this.duScrollLeft(left, duration || duScrollDuration, easing);
    };
    angular.forEach(proto, function(fn, key) {
        angular.element.prototype[key] = fn;
        //Remove prefix if not already claimed by jQuery / ui.utils
        var unprefixed = key.replace(/^duScroll/, "scroll");
        angular.isUndefined(angular.element.prototype[unprefixed]) && (angular.element.prototype[unprefixed] = fn);
    });
} ]);

//Adapted from https://gist.github.com/paulirish/1579671
angular.module("duScroll.polyfill", []).factory("polyfill", [ "$window", function($window) {
    "use strict";
    var vendors = [ "webkit", "moz", "o", "ms" ];
    return function(fnName, fallback) {
        if ($window[fnName]) return $window[fnName];
        for (var key, suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1), i = 0; i < vendors.length; i++) {
            key = vendors[i] + suffix;
            if ($window[key]) return $window[key];
        }
        return fallback;
    };
} ]);

angular.module("duScroll.requestAnimation", [ "duScroll.polyfill" ]).factory("requestAnimation", [ "polyfill", "$timeout", function(polyfill, $timeout) {
    "use strict";
    var lastTime = 0;
    return polyfill("requestAnimationFrame", function(callback, element) {
        var currTime = new Date().getTime(), timeToCall = Math.max(0, 16 - (currTime - lastTime)), id = $timeout(function() {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    });
} ]).factory("cancelAnimation", [ "polyfill", "$timeout", function(polyfill, $timeout) {
    "use strict";
    return polyfill("cancelAnimationFrame", function(promise) {
        $timeout.cancel(promise);
    });
} ]);

angular.module("duScroll.spyAPI", [ "duScroll.scrollContainerAPI" ]).factory("spyAPI", [ "$rootScope", "$timeout", "$window", "$document", "scrollContainerAPI", "duScrollGreedy", "duScrollSpyWait", function($rootScope, $timeout, $window, $document, scrollContainerAPI, duScrollGreedy, duScrollSpyWait) {
    "use strict";
    var createScrollHandler = function(context) {
        var timer = !1, queued = !1, handler = function() {
            queued = !1;
            var bottomReached, container = context.container, containerEl = container[0], containerOffset = 0;
            if ("undefined" != typeof HTMLElement && containerEl instanceof HTMLElement || containerEl.nodeType && containerEl.nodeType === containerEl.ELEMENT_NODE) {
                containerOffset = containerEl.getBoundingClientRect().top;
                bottomReached = Math.round(containerEl.scrollTop + containerEl.clientHeight) >= containerEl.scrollHeight;
            } else bottomReached = Math.round($window.pageYOffset + $window.innerHeight) >= $document[0].body.scrollHeight;
            var i, currentlyActive, toBeActive, spies, spy, pos, compareProperty = bottomReached ? "bottom" : "top";
            spies = context.spies;
            currentlyActive = context.currentlyActive;
            toBeActive = void 0;
            for (i = 0; i < spies.length; i++) {
                spy = spies[i];
                pos = spy.getTargetPosition();
                if (pos && ((bottomReached || pos.top + spy.offset - containerOffset < 20 && (duScrollGreedy || -1 * pos.top + containerOffset) < pos.height) && (!toBeActive || toBeActive[compareProperty] < pos[compareProperty]))) {
                    toBeActive = {
                        spy: spy
                    };
                    toBeActive[compareProperty] = pos[compareProperty];
                }
            }
            toBeActive && (toBeActive = toBeActive.spy);
            if (currentlyActive !== toBeActive && (!duScrollGreedy || toBeActive)) {
                if (currentlyActive) {
                    currentlyActive.$element.removeClass("active");
                    $rootScope.$broadcast("duScrollspy:becameInactive", currentlyActive.$element);
                }
                if (toBeActive) {
                    toBeActive.$element.addClass("active");
                    $rootScope.$broadcast("duScrollspy:becameActive", toBeActive.$element);
                }
                context.currentlyActive = toBeActive;
            }
        };
        return duScrollSpyWait ? function() {
            if (timer) queued = !0; else {
                handler();
                timer = $timeout(function() {
                    timer = !1;
                    queued && handler();
                }, duScrollSpyWait, !1);
            }
        } : handler;
    }, contexts = {}, createContext = function($scope) {
        var id = $scope.$id, context = {
            spies: []
        };
        context.handler = createScrollHandler(context);
        contexts[id] = context;
        $scope.$on("$destroy", function() {
            destroyContext($scope);
        });
        return id;
    }, destroyContext = function($scope) {
        var id = $scope.$id, context = contexts[id], container = context.container;
        container && container.off("scroll", context.handler);
        delete contexts[id];
    }, defaultContextId = createContext($rootScope), getContextForScope = function(scope) {
        return contexts[scope.$id] ? contexts[scope.$id] : scope.$parent ? getContextForScope(scope.$parent) : contexts[defaultContextId];
    }, getContextForSpy = function(spy) {
        var context, contextId, scope = spy.$scope;
        if (scope) return getContextForScope(scope);
        //No scope, most likely destroyed
        for (contextId in contexts) {
            context = contexts[contextId];
            if (-1 !== context.spies.indexOf(spy)) return context;
        }
    }, isElementInDocument = function(element) {
        for (;element.parentNode; ) {
            element = element.parentNode;
            if (element === document) return !0;
        }
        return !1;
    };
    return {
        addSpy: function(spy) {
            var context = getContextForSpy(spy);
            if (context) {
                context.spies.push(spy);
                if (!context.container || !isElementInDocument(context.container)) {
                    context.container && context.container.off("scroll", context.handler);
                    context.container = scrollContainerAPI.getContainer(spy.$scope);
                    context.container.on("scroll", context.handler).triggerHandler("scroll");
                }
            }
        },
        removeSpy: function(spy) {
            var context = getContextForSpy(spy);
            spy === context.currentlyActive && (context.currentlyActive = null);
            var i = context.spies.indexOf(spy);
            -1 !== i && context.spies.splice(i, 1);
            spy.$element = null;
        },
        createContext: createContext,
        destroyContext: destroyContext,
        getContextForScope: getContextForScope
    };
} ]);

angular.module("duScroll.scrollContainerAPI", []).factory("scrollContainerAPI", [ "$document", function($document) {
    "use strict";
    var containers = {}, setContainer = function(scope, element) {
        var id = scope.$id;
        containers[id] = element;
        return id;
    }, getContainerId = function(scope) {
        return containers[scope.$id] ? scope.$id : scope.$parent ? getContainerId(scope.$parent) : void 0;
    };
    return {
        getContainerId: getContainerId,
        getContainer: function(scope) {
            var id = getContainerId(scope);
            return id ? containers[id] : $document;
        },
        setContainer: setContainer,
        removeContainer: function(scope) {
            var id = getContainerId(scope);
            id && delete containers[id];
        }
    };
} ]);

angular.module("duScroll.smoothScroll", [ "duScroll.scrollHelpers", "duScroll.scrollContainerAPI" ]).directive("duSmoothScroll", [ "duScrollDuration", "duScrollOffset", "scrollContainerAPI", function(duScrollDuration, duScrollOffset, scrollContainerAPI) {
    "use strict";
    return {
        link: function($scope, $element, $attr) {
            $element.on("click", function(e) {
                if ($attr.href && -1 !== $attr.href.indexOf("#")) {
                    var target = document.getElementById($attr.href.replace(/.*(?=#[^\s]+$)/, "").substring(1));
                    if (target && target.getBoundingClientRect) {
                        e.stopPropagation && e.stopPropagation();
                        e.preventDefault && e.preventDefault();
                        var offset = $attr.offset ? parseInt($attr.offset, 10) : duScrollOffset, duration = $attr.duration ? parseInt($attr.duration, 10) : duScrollDuration;
                        scrollContainerAPI.getContainer($scope).duScrollToElement(angular.element(target), isNaN(offset) ? 0 : offset, isNaN(duration) ? 0 : duration);
                    }
                }
            });
        }
    };
} ]);

angular.module("duScroll.spyContext", [ "duScroll.spyAPI" ]).directive("duSpyContext", [ "spyAPI", function(spyAPI) {
    "use strict";
    return {
        restrict: "A",
        scope: !0,
        compile: function(tElement, tAttrs, transclude) {
            return {
                pre: function($scope, iElement, iAttrs, controller) {
                    spyAPI.createContext($scope);
                }
            };
        }
    };
} ]);

angular.module("duScroll.scrollContainer", [ "duScroll.scrollContainerAPI" ]).directive("duScrollContainer", [ "scrollContainerAPI", function(scrollContainerAPI) {
    "use strict";
    return {
        restrict: "A",
        scope: !0,
        compile: function(tElement, tAttrs, transclude) {
            return {
                pre: function($scope, iElement, iAttrs, controller) {
                    iAttrs.$observe("duScrollContainer", function(element) {
                        angular.isString(element) && (element = document.getElementById(element));
                        element = angular.isElement(element) ? angular.element(element) : iElement;
                        scrollContainerAPI.setContainer($scope, element);
                        $scope.$on("$destroy", function() {
                            scrollContainerAPI.removeContainer($scope);
                        });
                    });
                }
            };
        }
    };
} ]);

angular.module("duScroll.scrollspy", [ "duScroll.spyAPI" ]).directive("duScrollspy", [ "spyAPI", "duScrollOffset", "$timeout", "$rootScope", function(spyAPI, duScrollOffset, $timeout, $rootScope) {
    "use strict";
    var Spy = function(targetElementOrId, $scope, $element, offset) {
        angular.isElement(targetElementOrId) ? this.target = targetElementOrId : angular.isString(targetElementOrId) && (this.targetId = targetElementOrId);
        this.$scope = $scope;
        this.$element = $element;
        this.offset = offset;
    };
    Spy.prototype.getTargetElement = function() {
        !this.target && this.targetId && (this.target = document.getElementById(this.targetId));
        return this.target;
    };
    Spy.prototype.getTargetPosition = function() {
        var target = this.getTargetElement();
        if (target) return target.getBoundingClientRect();
    };
    Spy.prototype.flushTargetCache = function() {
        this.targetId && (this.target = void 0);
    };
    return {
        link: function($scope, $element, $attr) {
            var targetId, href = $attr.ngHref || $attr.href;
            href && -1 !== href.indexOf("#") ? targetId = href.replace(/.*(?=#[^\s]+$)/, "").substring(1) : $attr.duScrollspy && (targetId = $attr.duScrollspy);
            targetId && // Run this in the next execution loop so that the scroll context has a chance
            // to initialize
            $timeout(function() {
                var spy = new Spy(targetId, $scope, $element, -($attr.offset ? parseInt($attr.offset, 10) : duScrollOffset));
                spyAPI.addSpy(spy);
                $scope.$on("$destroy", function() {
                    spyAPI.removeSpy(spy);
                });
                $scope.$on("$locationChangeSuccess", spy.flushTargetCache.bind(spy));
                $rootScope.$on("$stateChangeSuccess", spy.flushTargetCache.bind(spy));
            }, 0, !1);
        }
    };
} ]);

/*!
 * angular-ui-mask
 * https://github.com/angular-ui/ui-mask
 * Version: 1.8.7 - 2016-07-26T16:01:23.393Z
 * License: MIT
 */
!function() {
    "use strict";
    /*
 Attaches input mask onto input element
 */
    angular.module("ui.mask", []).value("uiMaskConfig", {
        maskDefinitions: {
            "9": /\d/,
            A: /[a-zA-Z]/,
            "*": /[a-zA-Z0-9]/
        },
        clearOnBlur: !0,
        clearOnBlurPlaceholder: !1,
        escChar: "\\",
        eventsToHandle: [ "input", "keyup", "click", "focus" ],
        addDefaultPlaceholder: !0,
        allowInvalidValue: !1
    }).provider("uiMask.Config", function() {
        var options = {};
        this.maskDefinitions = function(maskDefinitions) {
            return options.maskDefinitions = maskDefinitions;
        };
        this.clearOnBlur = function(clearOnBlur) {
            return options.clearOnBlur = clearOnBlur;
        };
        this.clearOnBlurPlaceholder = function(clearOnBlurPlaceholder) {
            return options.clearOnBlurPlaceholder = clearOnBlurPlaceholder;
        };
        this.eventsToHandle = function(eventsToHandle) {
            return options.eventsToHandle = eventsToHandle;
        };
        this.addDefaultPlaceholder = function(addDefaultPlaceholder) {
            return options.addDefaultPlaceholder = addDefaultPlaceholder;
        };
        this.allowInvalidValue = function(allowInvalidValue) {
            return options.allowInvalidValue = allowInvalidValue;
        };
        this.$get = [ "uiMaskConfig", function(uiMaskConfig) {
            var tempOptions = uiMaskConfig;
            for (var prop in options) angular.isObject(options[prop]) && !angular.isArray(options[prop]) ? angular.extend(tempOptions[prop], options[prop]) : tempOptions[prop] = options[prop];
            return tempOptions;
        } ];
    }).directive("uiMask", [ "uiMask.Config", function(maskConfig) {
        function isFocused(elem) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        }
        return {
            priority: 100,
            require: "ngModel",
            restrict: "A",
            compile: function() {
                var options = angular.copy(maskConfig);
                return function(scope, iElement, iAttrs, controller) {
                    function initialize(maskAttr) {
                        if (!angular.isDefined(maskAttr)) return uninitialize();
                        processRawMask(maskAttr);
                        if (!maskProcessed) return uninitialize();
                        initializeElement();
                        bindEventListeners();
                        return !0;
                    }
                    function initPlaceholder(placeholderAttr) {
                        if (placeholderAttr) {
                            maskPlaceholder = placeholderAttr;
                            // If the mask is processed, then we need to update the value
                            // but don't set the value if there is nothing entered into the element
                            // and there is a placeholder attribute on the element because that
                            // will only set the value as the blank maskPlaceholder
                            // and override the placeholder on the element
                            !maskProcessed || 0 === iElement.val().length && angular.isDefined(iAttrs.placeholder) || iElement.val(maskValue(unmaskValue(iElement.val())));
                        }
                    }
                    function initPlaceholderChar() {
                        return initialize(iAttrs.uiMask);
                    }
                    function formatter(fromModelValue) {
                        if (!maskProcessed) return fromModelValue;
                        value = unmaskValue(fromModelValue || "");
                        isValid = validateValue(value);
                        controller.$setValidity("mask", isValid);
                        return value.length && (isValid || linkOptions.allowInvalidValue) ? maskValue(value) : void 0;
                    }
                    function parser(fromViewValue) {
                        if (!maskProcessed) return fromViewValue;
                        value = unmaskValue(fromViewValue || "");
                        isValid = validateValue(value);
                        // We have to set viewValue manually as the reformatting of the input
                        // value performed by eventHandler() doesn't happen until after
                        // this parser is called, which causes what the user sees in the input
                        // to be out-of-sync with what the controller's $viewValue is set to.
                        controller.$viewValue = value.length ? maskValue(value) : "";
                        controller.$setValidity("mask", isValid);
                        return isValid || linkOptions.allowInvalidValue ? modelViewValue ? controller.$viewValue : value : void 0;
                    }
                    function uninitialize() {
                        maskProcessed = !1;
                        unbindEventListeners();
                        angular.isDefined(originalPlaceholder) ? iElement.attr("placeholder", originalPlaceholder) : iElement.removeAttr("placeholder");
                        angular.isDefined(originalMaxlength) ? iElement.attr("maxlength", originalMaxlength) : iElement.removeAttr("maxlength");
                        iElement.val(controller.$modelValue);
                        controller.$viewValue = controller.$modelValue;
                        return !1;
                    }
                    function initializeElement() {
                        value = oldValueUnmasked = unmaskValue(controller.$modelValue || "");
                        valueMasked = oldValue = maskValue(value);
                        isValid = validateValue(value);
                        iAttrs.maxlength && // Double maxlength to allow pasting new val at end of mask
                        iElement.attr("maxlength", 2 * maskCaretMap[maskCaretMap.length - 1]);
                        !originalPlaceholder && linkOptions.addDefaultPlaceholder && iElement.attr("placeholder", maskPlaceholder);
                        for (var viewValue = controller.$modelValue, idx = controller.$formatters.length; idx--; ) viewValue = controller.$formatters[idx](viewValue);
                        controller.$viewValue = viewValue || "";
                        controller.$render();
                    }
                    function bindEventListeners() {
                        if (!eventsBound) {
                            iElement.bind("blur", blurHandler);
                            iElement.bind("mousedown mouseup", mouseDownUpHandler);
                            iElement.bind("keydown", keydownHandler);
                            iElement.bind(linkOptions.eventsToHandle.join(" "), eventHandler);
                            eventsBound = !0;
                        }
                    }
                    function unbindEventListeners() {
                        if (eventsBound) {
                            iElement.unbind("blur", blurHandler);
                            iElement.unbind("mousedown", mouseDownUpHandler);
                            iElement.unbind("mouseup", mouseDownUpHandler);
                            iElement.unbind("keydown", keydownHandler);
                            iElement.unbind("input", eventHandler);
                            iElement.unbind("keyup", eventHandler);
                            iElement.unbind("click", eventHandler);
                            iElement.unbind("focus", eventHandler);
                            eventsBound = !1;
                        }
                    }
                    function validateValue(value) {
                        // Zero-length value validity is ngRequired's determination
                        return !value.length || value.length >= minRequiredLength;
                    }
                    function unmaskValue(value) {
                        var valueOffset, valueDelta, valueUnmasked = "", input = iElement[0], maskPatternsCopy = maskPatterns.slice(), selectionStart = oldCaretPosition, selectionEnd = selectionStart + getSelectionLength(input), tempValue = "";
                        // Preprocess by stripping mask components from value
                        value = value.toString();
                        valueOffset = 0;
                        valueDelta = value.length - maskPlaceholder.length;
                        angular.forEach(maskComponents, function(component) {
                            var position = component.position;
                            //Only try and replace the component if the component position is not within the selected range
                            //If component was in selected range then it was removed with the user input so no need to try and remove that component
                            if (!(position >= selectionStart && position < selectionEnd)) {
                                position >= selectionStart && (position += valueDelta);
                                if (value.substring(position, position + component.value.length) === component.value) {
                                    tempValue += value.slice(valueOffset, position);
                                    // + value.slice(position + component.value.length);
                                    valueOffset = position + component.value.length;
                                }
                            }
                        });
                        value = tempValue + value.slice(valueOffset);
                        angular.forEach(value.split(""), function(chr) {
                            if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {
                                valueUnmasked += chr;
                                maskPatternsCopy.shift();
                            }
                        });
                        return valueUnmasked;
                    }
                    function maskValue(unmaskedValue) {
                        var valueMasked = "", maskCaretMapCopy = maskCaretMap.slice();
                        angular.forEach(maskPlaceholder.split(""), function(chr, i) {
                            if (unmaskedValue.length && i === maskCaretMapCopy[0]) {
                                valueMasked += unmaskedValue.charAt(0) || "_";
                                unmaskedValue = unmaskedValue.substr(1);
                                maskCaretMapCopy.shift();
                            } else valueMasked += chr;
                        });
                        return valueMasked;
                    }
                    function getPlaceholderChar(i) {
                        var defaultPlaceholderChar, placeholder = angular.isDefined(iAttrs.uiMaskPlaceholder) ? iAttrs.uiMaskPlaceholder : iAttrs.placeholder;
                        if (angular.isDefined(placeholder) && placeholder[i]) return placeholder[i];
                        defaultPlaceholderChar = angular.isDefined(iAttrs.uiMaskPlaceholderChar) && iAttrs.uiMaskPlaceholderChar ? iAttrs.uiMaskPlaceholderChar : "_";
                        return "space" === defaultPlaceholderChar.toLowerCase() ? " " : defaultPlaceholderChar[0];
                    }
                    // Generate array of mask components that will be stripped from a masked value
                    // before processing to prevent mask components from being added to the unmasked value.
                    // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.
                    function getMaskComponents() {
                        var maskPlaceholderCopy, components, maskPlaceholderChars = maskPlaceholder.split("");
                        //maskCaretMap can have bad values if the input has the ui-mask attribute implemented as an obversable property, e.g. the demo page
                        maskCaretMap && !isNaN(maskCaretMap[0]) && //Instead of trying to manipulate the RegEx based on the placeholder characters
                        //we can simply replace the placeholder characters based on the already built
                        //maskCaretMap to underscores and leave the original working RegEx to get the proper
                        //mask components
                        angular.forEach(maskCaretMap, function(value) {
                            maskPlaceholderChars[value] = "_";
                        });
                        maskPlaceholderCopy = maskPlaceholderChars.join("");
                        components = maskPlaceholderCopy.replace(/[_]+/g, "_").split("_");
                        components = components.filter(function(s) {
                            return "" !== s;
                        });
                        // need a string search offset in cases where the mask contains multiple identical components
                        // E.g., a mask of 99.99.99-999.99
                        var offset = 0;
                        return components.map(function(c) {
                            var componentPosition = maskPlaceholderCopy.indexOf(c, offset);
                            offset = componentPosition + 1;
                            return {
                                value: c,
                                position: componentPosition
                            };
                        });
                    }
                    function processRawMask(mask) {
                        var characterCount = 0;
                        maskCaretMap = [];
                        maskPatterns = [];
                        maskPlaceholder = "";
                        if (angular.isString(mask)) {
                            minRequiredLength = 0;
                            var isOptional = !1, numberOfOptionalCharacters = 0, splitMask = mask.split(""), inEscape = !1;
                            angular.forEach(splitMask, function(chr, i) {
                                if (inEscape) {
                                    inEscape = !1;
                                    maskPlaceholder += chr;
                                    characterCount++;
                                } else if (linkOptions.escChar === chr) inEscape = !0; else if (linkOptions.maskDefinitions[chr]) {
                                    maskCaretMap.push(characterCount);
                                    maskPlaceholder += getPlaceholderChar(i - numberOfOptionalCharacters);
                                    maskPatterns.push(linkOptions.maskDefinitions[chr]);
                                    characterCount++;
                                    isOptional || minRequiredLength++;
                                    isOptional = !1;
                                } else if ("?" === chr) {
                                    isOptional = !0;
                                    numberOfOptionalCharacters++;
                                } else {
                                    maskPlaceholder += chr;
                                    characterCount++;
                                }
                            });
                        }
                        // Caret position immediately following last position is valid.
                        maskCaretMap.push(maskCaretMap.slice().pop() + 1);
                        maskComponents = getMaskComponents();
                        maskProcessed = maskCaretMap.length > 1;
                    }
                    function blurHandler() {
                        if (linkOptions.clearOnBlur || linkOptions.clearOnBlurPlaceholder && 0 === value.length && iAttrs.placeholder) {
                            oldCaretPosition = 0;
                            oldSelectionLength = 0;
                            if (!isValid || 0 === value.length) {
                                valueMasked = "";
                                iElement.val("");
                                scope.$apply(function() {
                                    //only $setViewValue when not $pristine to avoid changing $pristine state.
                                    controller.$pristine || controller.$setViewValue("");
                                });
                            }
                        }
                        //Check for different value and trigger change.
                        //Check for different value and trigger change.
                        if (value !== prevValue) {
                            // #157 Fix the bug from the trigger when backspacing exactly on the first letter (emptying the field)
                            // and then blurring out.
                            // Angular uses html element and calls setViewValue(element.value.trim()), setting it to the trimmed mask
                            // when it should be empty
                            var currentVal = iElement.val(), isTemporarilyEmpty = "" === value && currentVal && angular.isDefined(iAttrs.uiMaskPlaceholderChar) && "space" === iAttrs.uiMaskPlaceholderChar;
                            isTemporarilyEmpty && iElement.val("");
                            triggerChangeEvent(iElement[0]);
                            isTemporarilyEmpty && iElement.val(currentVal);
                        }
                        prevValue = value;
                    }
                    function triggerChangeEvent(element) {
                        var change;
                        if (angular.isFunction(window.Event) && !element.fireEvent) {
                            // modern browsers and Edge
                            change = new Event("change", {
                                view: window,
                                bubbles: !0,
                                cancelable: !1
                            });
                            element.dispatchEvent(change);
                        } else if ("createEvent" in document) {
                            // older browsers
                            change = document.createEvent("HTMLEvents");
                            change.initEvent("change", !1, !0);
                            element.dispatchEvent(change);
                        } else element.fireEvent && // IE <= 11
                        element.fireEvent("onchange");
                    }
                    function mouseDownUpHandler(e) {
                        "mousedown" === e.type ? iElement.bind("mouseout", mouseoutHandler) : iElement.unbind("mouseout", mouseoutHandler);
                    }
                    function mouseoutHandler() {
                        /*jshint validthis: true */
                        oldSelectionLength = getSelectionLength(this);
                        iElement.unbind("mouseout", mouseoutHandler);
                    }
                    function keydownHandler(e) {
                        /*jshint validthis: true */
                        var isKeyBackspace = 8 === e.which, caretPos = getCaretPosition(this) - 1 || 0, //value in keydown is pre change so bump caret position back to simulate post change
                        isCtrlZ = 90 === e.which && e.ctrlKey;
                        //ctrl+z pressed
                        if (isKeyBackspace) {
                            for (;caretPos >= 0; ) {
                                if (isValidCaretPosition(caretPos)) {
                                    //re-adjust the caret position.
                                    //Increment to account for the initial decrement to simulate post change caret position
                                    setCaretPosition(this, caretPos + 1);
                                    break;
                                }
                                caretPos--;
                            }
                            preventBackspace = -1 === caretPos;
                        }
                        if (isCtrlZ) {
                            // prevent IE bug - value should be returned to initial state
                            iElement.val("");
                            e.preventDefault();
                        }
                    }
                    function eventHandler(e) {
                        /*jshint validthis: true */
                        e = e || {};
                        // Allows more efficient minification
                        var eventWhich = e.which, eventType = e.type;
                        // Prevent shift and ctrl from mucking with old values
                        if (16 !== eventWhich && 91 !== eventWhich) {
                            var valMasked, val = iElement.val(), valOld = oldValue, valAltered = !1, valUnmasked = unmaskValue(val), valUnmaskedOld = oldValueUnmasked, caretPos = getCaretPosition(this) || 0, caretPosOld = oldCaretPosition || 0, caretPosDelta = caretPos - caretPosOld, caretPosMin = maskCaretMap[0], caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(), selectionLenOld = oldSelectionLength || 0, isSelected = getSelectionLength(this) > 0, wasSelected = selectionLenOld > 0, // Case: Typing a character to overwrite a selection
                            isAddition = val.length > valOld.length || selectionLenOld && val.length > valOld.length - selectionLenOld, // Case: Delete and backspace behave identically on a selection
                            isDeletion = val.length < valOld.length || selectionLenOld && val.length === valOld.length - selectionLenOld, isSelection = eventWhich >= 37 && eventWhich <= 40 && e.shiftKey, // Arrow key codes
                            isKeyLeftArrow = 37 === eventWhich, // Necessary due to "input" event not providing a key code
                            isKeyBackspace = 8 === eventWhich || "keyup" !== eventType && isDeletion && -1 === caretPosDelta, isKeyDelete = 46 === eventWhich || "keyup" !== eventType && isDeletion && 0 === caretPosDelta && !wasSelected, // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below
                            // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of
                            // non-mask character. Also applied to click since users are (arguably) more likely to backspace
                            // a character when clicking within a filled input.
                            caretBumpBack = (isKeyLeftArrow || isKeyBackspace || "click" === eventType) && caretPos > caretPosMin;
                            oldSelectionLength = getSelectionLength(this);
                            // These events don't require any action
                            if (!isSelection && (!isSelected || "click" !== eventType && "keyup" !== eventType && "focus" !== eventType)) if (isKeyBackspace && preventBackspace) {
                                iElement.val(maskPlaceholder);
                                // This shouldn't be needed but for some reason after aggressive backspacing the controller $viewValue is incorrect.
                                // This keeps the $viewValue updated and correct.
                                scope.$apply(function() {
                                    controller.$setViewValue("");
                                });
                                setCaretPosition(this, caretPosOld);
                            } else {
                                // Value Handling
                                // ==============
                                // User attempted to delete but raw value was unaffected--correct this grievous offense
                                if ("input" === eventType && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {
                                    for (;isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos); ) caretPos--;
                                    for (;isKeyDelete && caretPos < caretPosMax && -1 === maskCaretMap.indexOf(caretPos); ) caretPos++;
                                    var charIndex = maskCaretMap.indexOf(caretPos);
                                    // Strip out non-mask character that user would have deleted if mask hadn't been in the way.
                                    valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);
                                    // If value has not changed, don't want to call $setViewValue, may be caused by IE raising input event due to placeholder
                                    valUnmasked !== valUnmaskedOld && (valAltered = !0);
                                }
                                // Update values
                                valMasked = maskValue(valUnmasked);
                                oldValue = valMasked;
                                oldValueUnmasked = valUnmasked;
                                //additional check to fix the problem where the viewValue is out of sync with the value of the element.
                                //better fix for commit 2a83b5fb8312e71d220a497545f999fc82503bd9 (I think)
                                !valAltered && val.length > valMasked.length && (valAltered = !0);
                                iElement.val(valMasked);
                                //we need this check.  What could happen if you don't have it is that you'll set the model value without the user
                                //actually doing anything.  Meaning, things like pristine and touched will be set.
                                valAltered && scope.$apply(function() {
                                    controller.$setViewValue(valMasked);
                                });
                                // Caret Repositioning
                                // ===================
                                // Ensure that typing always places caret ahead of typed character in cases where the first char of
                                // the input is a mask char and the caret is placed at the 0 position.
                                isAddition && caretPos <= caretPosMin && (caretPos = caretPosMin + 1);
                                caretBumpBack && caretPos--;
                                // Make sure caret is within min and max position limits
                                caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;
                                // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits
                                for (;!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax; ) caretPos += caretBumpBack ? -1 : 1;
                                (caretBumpBack && caretPos < caretPosMax || isAddition && !isValidCaretPosition(caretPosOld)) && caretPos++;
                                oldCaretPosition = caretPos;
                                setCaretPosition(this, caretPos);
                            }
                        }
                    }
                    function isValidCaretPosition(pos) {
                        return maskCaretMap.indexOf(pos) > -1;
                    }
                    function getCaretPosition(input) {
                        if (!input) return 0;
                        if (void 0 !== input.selectionStart) return input.selectionStart;
                        if (document.selection && isFocused(iElement[0])) {
                            // Curse you IE
                            input.focus();
                            var selection = document.selection.createRange();
                            selection.moveStart("character", input.value ? -input.value.length : 0);
                            return selection.text.length;
                        }
                        return 0;
                    }
                    function setCaretPosition(input, pos) {
                        if (!input) return 0;
                        if (0 !== input.offsetWidth && 0 !== input.offsetHeight) if (input.setSelectionRange) {
                            if (isFocused(iElement[0])) {
                                input.focus();
                                input.setSelectionRange(pos, pos);
                            }
                        } else if (input.createTextRange) {
                            // Curse you IE
                            var range = input.createTextRange();
                            range.collapse(!0);
                            range.moveEnd("character", pos);
                            range.moveStart("character", pos);
                            range.select();
                        }
                    }
                    function getSelectionLength(input) {
                        return input ? void 0 !== input.selectionStart ? input.selectionEnd - input.selectionStart : window.getSelection ? window.getSelection().toString().length : document.selection ? document.selection.createRange().text.length : 0 : 0;
                    }
                    var maskCaretMap, maskPatterns, maskPlaceholder, maskComponents, // Minimum required length of the value to be considered valid
                    minRequiredLength, value, valueMasked, isValid, // Vars used exclusively in eventHandler()
                    oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength, // Used for communicating if a backspace operation should be allowed between
                    // keydownHandler and eventHandler
                    preventBackspace, maskProcessed = !1, eventsBound = !1, // Vars for initializing/uninitializing
                    originalPlaceholder = iAttrs.placeholder, originalMaxlength = iAttrs.maxlength, originalIsEmpty = controller.$isEmpty;
                    controller.$isEmpty = function(value) {
                        return originalIsEmpty(maskProcessed ? unmaskValue(value || "") : value);
                    };
                    var modelViewValue = !1;
                    iAttrs.$observe("modelViewValue", function(val) {
                        "true" === val && (modelViewValue = !0);
                    });
                    iAttrs.$observe("allowInvalidValue", function(val) {
                        linkOptions.allowInvalidValue = "" === val || !!val;
                        formatter(controller.$modelValue);
                    });
                    var linkOptions = {};
                    if (iAttrs.uiOptions) {
                        linkOptions = scope.$eval("[" + iAttrs.uiOptions + "]");
                        // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge
                        linkOptions = angular.isObject(linkOptions[0]) ? function(original, current) {
                            for (var i in original) Object.prototype.hasOwnProperty.call(original, i) && (void 0 === current[i] ? current[i] = angular.copy(original[i]) : angular.isObject(current[i]) && !angular.isArray(current[i]) && (current[i] = angular.extend({}, original[i], current[i])));
                            return current;
                        }(options, linkOptions[0]) : options;
                    } else linkOptions = options;
                    iAttrs.$observe("uiMask", initialize);
                    angular.isDefined(iAttrs.uiMaskPlaceholder) ? iAttrs.$observe("uiMaskPlaceholder", initPlaceholder) : iAttrs.$observe("placeholder", initPlaceholder);
                    angular.isDefined(iAttrs.uiMaskPlaceholderChar) && iAttrs.$observe("uiMaskPlaceholderChar", initPlaceholderChar);
                    controller.$formatters.unshift(formatter);
                    controller.$parsers.unshift(parser);
                    var prevValue = iElement.val();
                    iElement.bind("mousedown mouseup", mouseDownUpHandler);
                    // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
                    Array.prototype.indexOf || (Array.prototype.indexOf = function(searchElement) {
                        if (null === this) throw new TypeError();
                        var t = Object(this), len = t.length >>> 0;
                        if (0 === len) return -1;
                        var n = 0;
                        if (arguments.length > 1) {
                            n = Number(arguments[1]);
                            n !== n ? // shortcut for verifying if it's NaN
                            n = 0 : 0 !== n && n !== 1 / 0 && n !== -1 / 0 && (n = (n > 0 || -1) * Math.floor(Math.abs(n)));
                        }
                        if (n >= len) return -1;
                        for (var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) if (k in t && t[k] === searchElement) return k;
                        return -1;
                    });
                };
            }
        };
    } ]);
}();

/**
 * State-based routing for AngularJS
 * @version v0.2.18
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
/* commonjs package manager support (eg componentjs) */
"undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "ui.router");

!function(window, angular, undefined) {
    /*jshint globalstrict:true*/
    /*global angular:false*/
    "use strict";
    function inherit(parent, extra) {
        return extend(new (extend(function() {}, {
            prototype: parent
        }))(), extra);
    }
    function merge(dst) {
        forEach(arguments, function(obj) {
            obj !== dst && forEach(obj, function(value, key) {
                dst.hasOwnProperty(key) || (dst[key] = value);
            });
        });
        return dst;
    }
    /**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
    function ancestors(first, second) {
        var path = [];
        for (var n in first.path) {
            if (first.path[n] !== second.path[n]) break;
            path.push(first.path[n]);
        }
        return path;
    }
    /**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
    function objectKeys(object) {
        if (Object.keys) return Object.keys(object);
        var result = [];
        forEach(object, function(val, key) {
            result.push(key);
        });
        return result;
    }
    /**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
    function indexOf(array, value) {
        if (Array.prototype.indexOf) return array.indexOf(value, Number(arguments[2]) || 0);
        var len = array.length >>> 0, from = Number(arguments[2]) || 0;
        from = from < 0 ? Math.ceil(from) : Math.floor(from);
        from < 0 && (from += len);
        for (;from < len; from++) if (from in array && array[from] === value) return from;
        return -1;
    }
    /**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
    function inheritParams(currentParams, newParams, $current, $to) {
        var parentParams, parents = ancestors($current, $to), inherited = {}, inheritList = [];
        for (var i in parents) if (parents[i] && parents[i].params) {
            parentParams = objectKeys(parents[i].params);
            if (parentParams.length) for (var j in parentParams) if (!(indexOf(inheritList, parentParams[j]) >= 0)) {
                inheritList.push(parentParams[j]);
                inherited[parentParams[j]] = currentParams[parentParams[j]];
            }
        }
        return extend({}, inherited, newParams);
    }
    /**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
    function equalForKeys(a, b, keys) {
        if (!keys) {
            keys = [];
            for (var n in a) keys.push(n);
        }
        for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            if (a[k] != b[k]) return !1;
        }
        return !0;
    }
    /**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
    function filterByKeys(keys, values) {
        var filtered = {};
        forEach(keys, function(name) {
            filtered[name] = values[name];
        });
        return filtered;
    }
    // extracted from underscore.js
    // Return a copy of the object only containing the whitelisted properties.
    function pick(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        forEach(keys, function(key) {
            key in obj && (copy[key] = obj[key]);
        });
        return copy;
    }
    // extracted from underscore.js
    // Return a copy of the object omitting the blacklisted properties.
    function omit(obj) {
        var copy = {}, keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var key in obj) -1 == indexOf(keys, key) && (copy[key] = obj[key]);
        return copy;
    }
    function filter(collection, callback) {
        var array = isArray(collection), result = array ? [] : {};
        forEach(collection, function(val, i) {
            callback(val, i) && (result[array ? result.length : i] = val);
        });
        return result;
    }
    function map(collection, callback) {
        var result = isArray(collection) ? [] : {};
        forEach(collection, function(val, i) {
            result[i] = callback(val, i);
        });
        return result;
    }
    function $Resolve($q, $injector) {
        var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
            $$promises: NOTHING,
            $$values: NOTHING
        });
        /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
        this.study = function(invocables) {
            function visit(value, key) {
                if (visited[key] !== VISIT_DONE) {
                    cycle.push(key);
                    if (visited[key] === VISIT_IN_PROGRESS) {
                        cycle.splice(0, indexOf(cycle, key));
                        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
                    }
                    visited[key] = VISIT_IN_PROGRESS;
                    if (isString(value)) plan.push(key, [ function() {
                        return $injector.get(value);
                    } ], NO_DEPENDENCIES); else {
                        var params = $injector.annotate(value);
                        forEach(params, function(param) {
                            param !== key && invocables.hasOwnProperty(param) && visit(invocables[param], param);
                        });
                        plan.push(key, value, params);
                    }
                    cycle.pop();
                    visited[key] = VISIT_DONE;
                }
            }
            // plan is all that's required
            function isResolve(value) {
                return isObject(value) && value.then && value.$$promises;
            }
            if (!isObject(invocables)) throw new Error("'invocables' must be an object");
            var invocableKeys = objectKeys(invocables || {}), plan = [], cycle = [], visited = {};
            forEach(invocables, visit);
            invocables = cycle = visited = null;
            return function(locals, parent, self) {
                function done() {
                    // Merge parent values we haven't got yet and publish our own $$values
                    if (!--wait) {
                        merged || merge(values, parent.$$values);
                        result.$$values = values;
                        result.$$promises = result.$$promises || !0;
                        // keep for isResolve()
                        delete result.$$inheritedValues;
                        resolution.resolve(values);
                    }
                }
                function fail(reason) {
                    result.$$failure = reason;
                    resolution.reject(reason);
                }
                if (isResolve(locals) && self === undefined) {
                    self = parent;
                    parent = locals;
                    locals = null;
                }
                if (locals) {
                    if (!isObject(locals)) throw new Error("'locals' must be an object");
                } else locals = NO_LOCALS;
                if (parent) {
                    if (!isResolve(parent)) throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                } else parent = NO_PARENT;
                // To complete the overall resolution, we have to wait for the parent
                // promise and for the promise for each invokable in our plan.
                var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = !1;
                // Short-circuit if parent has already failed
                if (isDefined(parent.$$failure)) {
                    fail(parent.$$failure);
                    return result;
                }
                parent.$$inheritedValues && merge(values, omit(parent.$$inheritedValues, invocableKeys));
                // Merge parent values if the parent has already resolved, or merge
                // parent promises and wait if the parent resolve is still in progress.
                extend(promises, parent.$$promises);
                if (parent.$$values) {
                    merged = merge(values, omit(parent.$$values, invocableKeys));
                    result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                    done();
                } else {
                    parent.$$inheritedValues && (result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys));
                    parent.then(done, fail);
                }
                // Process each invocable in the plan, but ignore any where a local of the same name exists.
                for (var i = 0, ii = plan.length; i < ii; i += 3) locals.hasOwnProperty(plan[i]) ? done() : function(key, invocable, params) {
                    function onfailure(reason) {
                        invocation.reject(reason);
                        fail(reason);
                    }
                    function proceed() {
                        if (!isDefined(result.$$failure)) try {
                            invocation.resolve($injector.invoke(invocable, self, values));
                            invocation.promise.then(function(result) {
                                values[key] = result;
                                done();
                            }, onfailure);
                        } catch (e) {
                            onfailure(e);
                        }
                    }
                    // Create a deferred for this invocation. Failures will propagate to the resolution as well.
                    var invocation = $q.defer(), waitParams = 0;
                    // Wait for any parameter that we have a promise for (either from parent or from this
                    // resolve; in that case study() will have made sure it's ordered before us in the plan).
                    forEach(params, function(dep) {
                        if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                            waitParams++;
                            promises[dep].then(function(result) {
                                values[dep] = result;
                                --waitParams || proceed();
                            }, onfailure);
                        }
                    });
                    waitParams || proceed();
                    // Publish promise synchronously; invocations further down in the plan may depend on it.
                    promises[key] = invocation.promise;
                }(plan[i], plan[i + 1], plan[i + 2]);
                return result;
            };
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
        this.resolve = function(invocables, locals, parent, self) {
            return this.study(invocables)(locals, parent, self);
        };
    }
    function $TemplateFactory($http, $templateCache, $injector) {
        /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
        this.fromConfig = function(config, params, locals) {
            return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
        this.fromString = function(template, params) {
            return isFunction(template) ? template(params) : template;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
        this.fromUrl = function(url, params) {
            isFunction(url) && (url = url(params));
            return null == url ? null : $http.get(url, {
                cache: $templateCache,
                headers: {
                    Accept: "text/html"
                }
            }).then(function(response) {
                return response.data;
            });
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
        this.fromProvider = function(provider, params, locals) {
            return $injector.invoke(provider, null, locals || {
                params: params
            });
        };
    }
    // reference to $UrlMatcherFactoryProvider
    /**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
    function UrlMatcher(pattern, config, parentMatcher) {
        function addParameter(id, type, config, location) {
            paramNames.push(id);
            if (parentParams[id]) return parentParams[id];
            if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
            params[id] = new $$UMFP.Param(id, type, config, location);
            return params[id];
        }
        function quoteRegExp(string, pattern, squash, optional) {
            var surroundPattern = [ "", "" ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!pattern) return result;
            switch (squash) {
              case !1:
                surroundPattern = [ "(", ")" + (optional ? "?" : "") ];
                break;

              case !0:
                result = result.replace(/\/$/, "");
                surroundPattern = [ "(?:/(", ")|/)?" ];
                break;

              default:
                surroundPattern = [ "(" + squash + "|", ")?" ];
            }
            return result + surroundPattern[0] + pattern + surroundPattern[1];
        }
        // Split into static segments separated by path parameter placeholders.
        // The number of segments is always 1 more than the number of parameters.
        function matchDetails(m, isSearch) {
            var id, regexp, segment, type, cfg;
            id = m[2] || m[3];
            // IE[78] returns '' for unmatched groups instead of null
            cfg = config.params[id];
            segment = pattern.substring(last, m.index);
            regexp = isSearch ? m[4] : m[4] || ("*" == m[1] ? ".*" : null);
            regexp && (type = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), {
                pattern: new RegExp(regexp, config.caseInsensitive ? "i" : undefined)
            }));
            return {
                id: id,
                regexp: regexp,
                segment: segment,
                type: type,
                cfg: cfg
            };
        }
        config = extend({
            params: {}
        }, isObject(config) ? config : {});
        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
        //   '*' name
        //   ':' name
        //   '{' name '}'
        //   '{' name ':' regexp '}'
        // The regular expression is somewhat complicated due to the need to allow curly braces
        // inside the regular expression. The placeholder regexp breaks down as follows:
        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
        //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
        //    [^{}\\]+                       - anything other than curly braces or backslash
        //    \\.                            - a backslash escape
        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
        var m, placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = "^", last = 0, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
        this.source = pattern;
        for (var p, param, segment; m = placeholder.exec(pattern); ) {
            p = matchDetails(m, !1);
            if (p.segment.indexOf("?") >= 0) break;
            // we're into the search part
            param = addParameter(p.id, p.type, p.cfg, "path");
            compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
            segments.push(p.segment);
            last = placeholder.lastIndex;
        }
        segment = pattern.substring(last);
        // Find any search parameter names and remove them from the last segment
        var i = segment.indexOf("?");
        if (i >= 0) {
            var search = this.sourceSearch = segment.substring(i);
            segment = segment.substring(0, i);
            this.sourcePath = pattern.substring(0, last + i);
            if (search.length > 0) {
                last = 0;
                for (;m = searchPlaceholder.exec(search); ) {
                    p = matchDetails(m, !0);
                    param = addParameter(p.id, p.type, p.cfg, "search");
                    last = placeholder.lastIndex;
                }
            }
        } else {
            this.sourcePath = pattern;
            this.sourceSearch = "";
        }
        compiled += quoteRegExp(segment) + (!1 === config.strict ? "/?" : "") + "$";
        segments.push(segment);
        this.regexp = new RegExp(compiled, config.caseInsensitive ? "i" : undefined);
        this.prefix = segments[0];
        this.$$paramNames = paramNames;
    }
    /**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
    function Type(config) {
        extend(this, config);
    }
    /**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
    function $UrlMatcherFactory() {
        // Use tildes to pre-encode slashes.
        // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
        // and bidirectional encoding/decoding fails.
        // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
        function valToString(val) {
            return null != val ? val.toString().replace(/~/g, "~~").replace(/\//g, "~2F") : val;
        }
        function valFromString(val) {
            return null != val ? val.toString().replace(/~2F/g, "/").replace(/~~/g, "~") : val;
        }
        function getDefaultConfig() {
            return {
                strict: isStrictMode,
                caseInsensitive: isCaseInsensitive
            };
        }
        function isInjectable(value) {
            return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
        }
        // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
        function flushTypeQueue() {
            for (;typeQueue.length; ) {
                var type = typeQueue.shift();
                if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                angular.extend($types[type.name], injector.invoke(type.def));
            }
        }
        function ParamSet(params) {
            extend(this, params || {});
        }
        $$UMFP = this;
        var injector, isCaseInsensitive = !1, isStrictMode = !0, defaultSquashPolicy = !1, $types = {}, enqueue = !0, typeQueue = [], defaultTypes = {
            string: {
                encode: valToString,
                decode: valFromString,
                // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
                // In 0.2.x, string params are optional by default for backwards compat
                is: function(val) {
                    return null == val || !isDefined(val) || "string" == typeof val;
                },
                pattern: /[^\/]*/
            },
            int: {
                encode: valToString,
                decode: function(val) {
                    return parseInt(val, 10);
                },
                is: function(val) {
                    return isDefined(val) && this.decode(val.toString()) === val;
                },
                pattern: /\d+/
            },
            bool: {
                encode: function(val) {
                    return val ? 1 : 0;
                },
                decode: function(val) {
                    return 0 !== parseInt(val, 10);
                },
                is: function(val) {
                    return !0 === val || !1 === val;
                },
                pattern: /0|1/
            },
            date: {
                encode: function(val) {
                    return this.is(val) ? [ val.getFullYear(), ("0" + (val.getMonth() + 1)).slice(-2), ("0" + val.getDate()).slice(-2) ].join("-") : undefined;
                },
                decode: function(val) {
                    if (this.is(val)) return val;
                    var match = this.capture.exec(val);
                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                },
                is: function(val) {
                    return val instanceof Date && !isNaN(val.valueOf());
                },
                equals: function(a, b) {
                    return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                },
                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
            },
            json: {
                encode: angular.toJson,
                decode: angular.fromJson,
                is: angular.isObject,
                equals: angular.equals,
                pattern: /[^\/]*/
            },
            any: {
                // does not encode/decode
                encode: angular.identity,
                decode: angular.identity,
                equals: angular.equals,
                pattern: /.*/
            }
        };
        /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
        $UrlMatcherFactory.$$getDefaultValue = function(config) {
            if (!isInjectable(config.value)) return config.value;
            if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
            return injector.invoke(config.value);
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
        this.caseInsensitive = function(value) {
            isDefined(value) && (isCaseInsensitive = value);
            return isCaseInsensitive;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
        this.strictMode = function(value) {
            isDefined(value) && (isStrictMode = value);
            return isStrictMode;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
        this.defaultSquashPolicy = function(value) {
            if (!isDefined(value)) return defaultSquashPolicy;
            if (!0 !== value && !1 !== value && !isString(value)) throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
            defaultSquashPolicy = value;
            return value;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
        this.compile = function(pattern, config) {
            return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
        this.isMatcher = function(o) {
            if (!isObject(o)) return !1;
            var result = !0;
            forEach(UrlMatcher.prototype, function(val, name) {
                isFunction(val) && (result = result && isDefined(o[name]) && isFunction(o[name]));
            });
            return result;
        };
        /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
        this.type = function(name, definition, definitionFn) {
            if (!isDefined(definition)) return $types[name];
            if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");
            $types[name] = new Type(extend({
                name: name
            }, definition));
            if (definitionFn) {
                typeQueue.push({
                    name: name,
                    def: definitionFn
                });
                enqueue || flushTypeQueue();
            }
            return this;
        };
        // Register default types. Store them in the prototype of $types.
        forEach(defaultTypes, function(type, name) {
            $types[name] = new Type(extend({
                name: name
            }, type));
        });
        $types = inherit($types, {});
        /* No need to document $get, since it returns this */
        this.$get = [ "$injector", function($injector) {
            injector = $injector;
            enqueue = !1;
            flushTypeQueue();
            forEach(defaultTypes, function(type, name) {
                $types[name] || ($types[name] = new Type(type));
            });
            return this;
        } ];
        this.Param = function(id, type, config, location) {
            /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
            function $$getDefaultValue() {
                if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
                var defaultValue = injector.invoke(config.$$fn);
                if (null !== defaultValue && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
                return defaultValue;
            }
            /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
            function $value(value) {
                function hasReplaceVal(val) {
                    return function(obj) {
                        return obj.from === val;
                    };
                }
                value = function(value) {
                    var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) {
                        return obj.to;
                    });
                    return replacement.length ? replacement[0] : value;
                }(value);
                return isDefined(value) ? self.type.$normalize(value) : $$getDefaultValue();
            }
            function toString() {
                return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
            }
            var self = this;
            config = function(config) {
                var keys = isObject(config) ? objectKeys(config) : [];
                -1 === indexOf(keys, "value") && -1 === indexOf(keys, "type") && -1 === indexOf(keys, "squash") && -1 === indexOf(keys, "array") && (config = {
                    value: config
                });
                config.$$fn = isInjectable(config.value) ? config.value : function() {
                    return config.value;
                };
                return config;
            }(config);
            type = function(config, urlType, location) {
                if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
                return urlType || (config.type ? angular.isString(config.type) ? $types[config.type] : config.type instanceof Type ? config.type : new Type(config.type) : "config" === location ? $types.any : $types.string);
            }(config, type, location);
            var arrayMode = // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
            function() {
                var arrayDefaults = {
                    array: "search" === location && "auto"
                }, arrayParamNomenclature = id.match(/\[\]$/) ? {
                    array: !0
                } : {};
                return extend(arrayDefaults, arrayParamNomenclature, config).array;
            }();
            type = arrayMode ? type.$asArray(arrayMode, "search" === location) : type;
            "string" !== type.name || arrayMode || "path" !== location || config.value !== undefined || (config.value = "");
            // for 0.2.x; in 0.3.0+ do not automatically default to ""
            var isOptional = config.value !== undefined, squash = /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
            function(config, isOptional) {
                var squash = config.squash;
                if (!isOptional || !1 === squash) return !1;
                if (!isDefined(squash) || null == squash) return defaultSquashPolicy;
                if (!0 === squash || isString(squash)) return squash;
                throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
            }(config, isOptional), replace = function(config, arrayMode, isOptional, squash) {
                var replace, configuredKeys, defaultPolicy = [ {
                    from: "",
                    to: isOptional || arrayMode ? undefined : ""
                }, {
                    from: null,
                    to: isOptional || arrayMode ? undefined : ""
                } ];
                replace = isArray(config.replace) ? config.replace : [];
                isString(squash) && replace.push({
                    from: squash,
                    to: undefined
                });
                configuredKeys = map(replace, function(item) {
                    return item.from;
                });
                return filter(defaultPolicy, function(item) {
                    return -1 === indexOf(configuredKeys, item.from);
                }).concat(replace);
            }(config, arrayMode, isOptional, squash);
            extend(this, {
                id: id,
                type: type,
                location: location,
                array: arrayMode,
                squash: squash,
                replace: replace,
                isOptional: isOptional,
                value: $value,
                dynamic: undefined,
                config: config,
                toString: toString
            });
        };
        ParamSet.prototype = {
            $$new: function() {
                return inherit(this, extend(new ParamSet(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                for (var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype); parent; ) {
                    chain.push(parent);
                    parent = parent.$$parent;
                }
                chain.reverse();
                forEach(chain, function(paramset) {
                    forEach(objectKeys(paramset), function(key) {
                        -1 === indexOf(keys, key) && -1 === indexOf(ignore, key) && keys.push(key);
                    });
                });
                return keys;
            },
            $$values: function(paramValues) {
                var values = {}, self = this;
                forEach(self.$$keys(), function(key) {
                    values[key] = self[key].value(paramValues && paramValues[key]);
                });
                return values;
            },
            $$equals: function(paramValues1, paramValues2) {
                var equal = !0, self = this;
                forEach(self.$$keys(), function(key) {
                    var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
                    self[key].type.equals(left, right) || (equal = !1);
                });
                return equal;
            },
            $$validates: function(paramValues) {
                var i, param, rawVal, normalized, encoded, keys = this.$$keys();
                for (i = 0; i < keys.length; i++) {
                    param = this[keys[i]];
                    rawVal = paramValues[keys[i]];
                    if ((rawVal === undefined || null === rawVal) && param.isOptional) break;
                    // There was no parameter value, but the param is optional
                    normalized = param.type.$normalize(rawVal);
                    if (!param.type.is(normalized)) return !1;
                    // The value was not of the correct Type, and could not be decoded to the correct Type
                    encoded = param.type.encode(normalized);
                    if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return !1;
                }
                return !0;
            },
            $$parent: undefined
        };
        this.ParamSet = ParamSet;
    }
    function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
        // Returns a string that is a prefix of all strings matching the RegExp
        function regExpPrefix(re) {
            var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
            return null != prefix ? prefix[1].replace(/\\(.)/g, "$1") : "";
        }
        // Interpolates matched values into a String.replace()-style pattern
        function interpolate(pattern, match) {
            return pattern.replace(/\$(\$|\d{1,2})/, function(m, what) {
                return match["$" === what ? 0 : Number(what)];
            });
        }
        function handleIfMatch($injector, handler, match) {
            if (!match) return !1;
            var result = $injector.invoke(handler, handler, {
                $match: match
            });
            return !isDefined(result) || result;
        }
        function $get($location, $rootScope, $injector, $browser, $sniffer) {
            function appendBasePath(url, isHtml5, absolute) {
                return "/" === baseHref ? url : isHtml5 ? baseHref.slice(0, -1) + url : absolute ? baseHref.slice(1) + url : url;
            }
            // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
            function update(evt) {
                // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
                //if (ignoreUpdate) return true;
                function check(rule) {
                    var handled = rule($injector, $location);
                    if (!handled) return !1;
                    isString(handled) && $location.replace().url(handled);
                    return !0;
                }
                if (!evt || !evt.defaultPrevented) {
                    lastPushedUrl && $location.url();
                    lastPushedUrl = undefined;
                    var i, n = rules.length;
                    for (i = 0; i < n; i++) if (check(rules[i])) return;
                    // always check otherwise last to allow dynamic updates to the set of rules
                    otherwise && check(otherwise);
                }
            }
            function listen() {
                listener = listener || $rootScope.$on("$locationChangeSuccess", update);
                return listener;
            }
            var lastPushedUrl, baseHref = $browser.baseHref(), location = $location.url();
            interceptDeferred || listen();
            return {
                /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
                sync: function() {
                    update();
                },
                listen: function() {
                    return listen();
                },
                update: function(read) {
                    if (read) location = $location.url(); else if ($location.url() !== location) {
                        $location.url(location);
                        $location.replace();
                    }
                },
                push: function(urlMatcher, params, options) {
                    var url = urlMatcher.format(params || {});
                    // Handle the special hash param, if needed
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    $location.url(url);
                    lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                    options && options.replace && $location.replace();
                },
                /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
                href: function(urlMatcher, params, options) {
                    if (!urlMatcher.validates(params)) return null;
                    var isHtml5 = $locationProvider.html5Mode();
                    angular.isObject(isHtml5) && (isHtml5 = isHtml5.enabled);
                    isHtml5 = isHtml5 && $sniffer.history;
                    var url = urlMatcher.format(params);
                    options = options || {};
                    isHtml5 || null === url || (url = "#" + $locationProvider.hashPrefix() + url);
                    // Handle special hash param, if needed
                    null !== url && params && params["#"] && (url += "#" + params["#"]);
                    url = appendBasePath(url, isHtml5, options.absolute);
                    if (!options.absolute || !url) return url;
                    var slash = !isHtml5 && url ? "/" : "", port = $location.port();
                    port = 80 === port || 443 === port ? "" : ":" + port;
                    return [ $location.protocol(), "://", $location.host(), port, slash, url ].join("");
                }
            };
        }
        var listener, rules = [], otherwise = null, interceptDeferred = !1;
        /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {function} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
        this.rule = function(rule) {
            if (!isFunction(rule)) throw new Error("'rule' must be a function");
            rules.push(rule);
            return this;
        };
        /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|function} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
        this.otherwise = function(rule) {
            if (isString(rule)) {
                var redirect = rule;
                rule = function() {
                    return redirect;
                };
            } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
            otherwise = rule;
            return this;
        };
        /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. 
   * 
   * If the handler is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|function} handler The path you want to redirect your user to.
   */
        this.when = function(what, handler) {
            var redirect, handlerIsString = isString(handler);
            isString(what) && (what = $urlMatcherFactory.compile(what));
            if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error("invalid 'handler' in when()");
            var strategies = {
                matcher: function(what, handler) {
                    if (handlerIsString) {
                        redirect = $urlMatcherFactory.compile(handler);
                        handler = [ "$match", function($match) {
                            return redirect.format($match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                    }, {
                        prefix: isString(what.prefix) ? what.prefix : ""
                    });
                },
                regex: function(what, handler) {
                    if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");
                    if (handlerIsString) {
                        redirect = handler;
                        handler = [ "$match", function($match) {
                            return interpolate(redirect, $match);
                        } ];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path()));
                    }, {
                        prefix: regExpPrefix(what)
                    });
                }
            }, check = {
                matcher: $urlMatcherFactory.isMatcher(what),
                regex: what instanceof RegExp
            };
            for (var n in check) if (check[n]) return this.rule(strategies[n](what, handler));
            throw new Error("invalid 'what' in when()");
        };
        /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
        this.deferIntercept = function(defer) {
            defer === undefined && (defer = !0);
            interceptDeferred = defer;
        };
        /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
        this.$get = $get;
        $get.$inject = [ "$location", "$rootScope", "$injector", "$browser", "$sniffer" ];
    }
    function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
        function isRelative(stateName) {
            return 0 === stateName.indexOf(".") || 0 === stateName.indexOf("^");
        }
        function findState(stateOrName, base) {
            if (!stateOrName) return undefined;
            var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name;
            if (isRelative(name)) {
                if (!base) throw new Error("No reference point given for path '" + name + "'");
                base = findState(base);
                for (var rel = name.split("."), i = 0, pathLength = rel.length, current = base; i < pathLength; i++) if ("" !== rel[i] || 0 !== i) {
                    if ("^" !== rel[i]) break;
                    if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
                    current = current.parent;
                } else current = base;
                rel = rel.slice(i).join(".");
                name = current.name + (current.name && rel ? "." : "") + rel;
            }
            var state = states[name];
            return !state || !isStr && (isStr || state !== stateOrName && state.self !== stateOrName) ? undefined : state;
        }
        function queueState(parentName, state) {
            queue[parentName] || (queue[parentName] = []);
            queue[parentName].push(state);
        }
        function flushQueuedChildren(parentName) {
            for (var queued = queue[parentName] || []; queued.length; ) registerState(queued.shift());
        }
        function registerState(state) {
            // Wrap a new object around the state so we can store our private details easily.
            state = inherit(state, {
                self: state,
                resolve: state.resolve || {},
                toString: function() {
                    return this.name;
                }
            });
            var name = state.name;
            if (!isString(name) || name.indexOf("@") >= 0) throw new Error("State must have a valid name");
            if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");
            // Get parent name
            var parentName = -1 !== name.indexOf(".") ? name.substring(0, name.lastIndexOf(".")) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : "";
            // If parent is not registered yet, add state to queue and register later
            if (parentName && !states[parentName]) return queueState(parentName, state.self);
            for (var key in stateBuilder) isFunction(stateBuilder[key]) && (state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]));
            states[name] = state;
            // Register the state in the global state list and with $urlRouter if necessary.
            !state[abstractKey] && state.url && $urlRouterProvider.when(state.url, [ "$match", "$stateParams", function($match, $stateParams) {
                $state.$current.navigable == state && equalForKeys($match, $stateParams) || $state.transitionTo(state, $match, {
                    inherit: !0,
                    location: !1
                });
            } ]);
            // Register any queued children
            flushQueuedChildren(name);
            return state;
        }
        // Checks text to see if it looks like a glob.
        function isGlob(text) {
            return text.indexOf("*") > -1;
        }
        // Returns true if glob matches current $state name.
        function doesStateMatchGlob(glob) {
            //match single stars
            for (var globSegments = glob.split("."), segments = $state.$current.name.split("."), i = 0, l = globSegments.length; i < l; i++) "*" === globSegments[i] && (segments[i] = "*");
            //match greedy starts
            if ("**" === globSegments[0]) {
                segments = segments.slice(indexOf(segments, globSegments[1]));
                segments.unshift("**");
            }
            //match greedy ends
            if ("**" === globSegments[globSegments.length - 1]) {
                segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                segments.push("**");
            }
            return globSegments.length == segments.length && segments.join("") === globSegments.join("");
        }
        function decorator(name, func) {
            /*jshint validthis: true */
            if (isString(name) && !isDefined(func)) return stateBuilder[name];
            if (!isFunction(func) || !isString(name)) return this;
            stateBuilder[name] && !stateBuilder.$delegates[name] && (stateBuilder.$delegates[name] = stateBuilder[name]);
            stateBuilder[name] = func;
            return this;
        }
        function state(name, definition) {
            /*jshint validthis: true */
            isObject(name) ? definition = name : definition.name = name;
            registerState(definition);
            return this;
        }
        function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
            // Handles the case where a state which is the target of a transition is not found, and the user
            // can optionally retry or defer the transition
            function handleRedirect(redirect, state, params, options) {
                /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
                var evt = $rootScope.$broadcast("$stateNotFound", redirect, state, params);
                if (evt.defaultPrevented) {
                    $urlRouter.update();
                    return TransitionAborted;
                }
                if (!evt.retry) return null;
                // Allow the handler to return a promise to defer state lookup retry
                if (options.$retry) {
                    $urlRouter.update();
                    return TransitionFailed;
                }
                var retryTransition = $state.transition = $q.when(evt.retry);
                retryTransition.then(function() {
                    if (retryTransition !== $state.transition) return TransitionSuperseded;
                    redirect.options.$retry = !0;
                    return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                }, function() {
                    return TransitionAborted;
                });
                $urlRouter.update();
                return retryTransition;
            }
            function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                function resolveViews() {
                    var viewsPromises = [];
                    // Resolve template and dependencies for all views.
                    forEach(state.views, function(view, name) {
                        var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
                        injectables.$template = [ function() {
                            return $view.load(name, {
                                view: view,
                                locals: dst.globals,
                                params: $stateParams,
                                notify: options.notify
                            }) || "";
                        } ];
                        viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function(result) {
                            // References to the controller (only instantiated at link time)
                            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                var injectLocals = angular.extend({}, injectables, dst.globals);
                                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                            } else result.$$controller = view.controller;
                            // Provide access to the state itself for internal use
                            result.$$state = state;
                            result.$$controllerAs = view.controllerAs;
                            dst[name] = result;
                        }));
                    });
                    return $q.all(viewsPromises).then(function() {
                        return dst.globals;
                    });
                }
                // Make a restricted $stateParams with only the parameters that apply to this state if
                // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
                // we also need $stateParams to be available for any $injector calls we make during the
                // dependency resolution process.
                var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params), locals = {
                    $stateParams: $stateParams
                };
                // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
                // We're also including $stateParams in this; that way the parameters are restricted
                // to the set that should be visible to the state, and are independent of when we update
                // the global $state and $stateParams values.
                dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                var promises = [ dst.resolve.then(function(globals) {
                    dst.globals = globals;
                }) ];
                inherited && promises.push(inherited);
                // Wait for all the promises and then return the activation object
                return $q.all(promises).then(resolveViews).then(function(values) {
                    return dst;
                });
            }
            var TransitionSuperseded = $q.reject(new Error("transition superseded")), TransitionPrevented = $q.reject(new Error("transition prevented")), TransitionAborted = $q.reject(new Error("transition aborted")), TransitionFailed = $q.reject(new Error("transition failed"));
            root.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            };
            $state = {
                params: {},
                current: root.self,
                $current: root,
                transition: null
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
            $state.reload = function(state) {
                return $state.transitionTo($state.current, $stateParams, {
                    reload: state || !0,
                    inherit: !1,
                    notify: !0
                });
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. Only parameters specified in the state definition can be overridden, new 
     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
     *    have changed.  It will reload the resolves and views of the current state and parent states.
     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
     *    the transition reloads the resolves and views for that matched state, and all its children states.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
            $state.go = function(to, params, options) {
                return $state.transitionTo(to, params, extend({
                    inherit: !0,
                    relative: $state.$current
                }, options));
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
            $state.transitionTo = function(to, toParams, options) {
                toParams = toParams || {};
                options = extend({
                    location: !0,
                    inherit: !1,
                    relative: null,
                    notify: !0,
                    reload: !1,
                    $retry: !1
                }, options || {});
                var evt, from = $state.$current, fromParams = $state.params, fromPath = from.path, toState = findState(to, options.relative), hash = toParams["#"];
                if (!isDefined(toState)) {
                    var redirect = {
                        to: to,
                        toParams: toParams,
                        options: options
                    }, redirectResult = handleRedirect(redirect, from.self, fromParams, options);
                    if (redirectResult) return redirectResult;
                    // Always retry once if the $stateNotFound was not prevented
                    // (handles either redirect changed or state lazy-definition)
                    to = redirect.to;
                    toParams = redirect.toParams;
                    options = redirect.options;
                    toState = findState(to, options.relative);
                    if (!isDefined(toState)) {
                        if (!options.relative) throw new Error("No such state '" + to + "'");
                        throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
                    }
                }
                if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
                options.inherit && (toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState));
                if (!toState.params.$$validates(toParams)) return TransitionFailed;
                toParams = toState.params.$$values(toParams);
                to = toState;
                var toPath = to.path, keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
                if (options.reload) {
                    if (isString(options.reload) || isObject(options.reload)) {
                        if (isObject(options.reload) && !options.reload.name) throw new Error("Invalid reload state object");
                        var reloadState = !0 === options.reload ? fromPath[0] : findState(options.reload);
                        if (options.reload && !reloadState) throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
                        for (;state && state === fromPath[keep] && state !== reloadState; ) {
                            locals = toLocals[keep] = state.locals;
                            keep++;
                            state = toPath[keep];
                        }
                    }
                } else for (;state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams); ) {
                    locals = toLocals[keep] = state.locals;
                    keep++;
                    state = toPath[keep];
                }
                // If we're going to the same state and all locals are kept, we've got nothing to do.
                // But clear 'transition', as we still want to cancel any other pending transitions.
                // TODO: We may not want to bump 'transition' if we're called from a location change
                // that we've initiated ourselves, because we might accidentally abort a legitimate
                // transition initiated from code?
                if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
                    hash && (toParams["#"] = hash);
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
                    if (options.location && to.navigable && to.navigable.url) {
                        $urlRouter.push(to.navigable.url, toParams, {
                            $$avoidResync: !0,
                            replace: "replace" === options.location
                        });
                        $urlRouter.update(!0);
                    }
                    $state.transition = null;
                    return $q.when($state.current);
                }
                // Filter parameters before we pass them to event handlers etc.
                toParams = filterByKeys(to.params.$$keys(), toParams || {});
                // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
                hash && (toParams["#"] = hash);
                // Broadcast start event and cancel the transition if requested
                if (options.notify && $rootScope.$broadcast("$stateChangeStart", to.self, toParams, from.self, fromParams, options).defaultPrevented) {
                    $rootScope.$broadcast("$stateChangeCancel", to.self, toParams, from.self, fromParams);
                    //Don't update and resync url if there's been a new transition started. see issue #2238, #600
                    null == $state.transition && $urlRouter.update();
                    return TransitionPrevented;
                }
                for (var resolved = $q.when(locals), l = keep; l < toPath.length; l++, state = toPath[l]) {
                    locals = toLocals[l] = inherit(locals);
                    resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                }
                // Once everything is resolved, we are ready to perform the actual transition
                // and return a promise for the new state. We also keep track of what the
                // current promise is, so that we can detect overlapping transitions and
                // keep only the outcome of the last transition.
                var transition = $state.transition = resolved.then(function() {
                    var l, entering, exiting;
                    if ($state.transition !== transition) return TransitionSuperseded;
                    // Exit 'from' states not kept
                    for (l = fromPath.length - 1; l >= keep; l--) {
                        exiting = fromPath[l];
                        exiting.self.onExit && $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                        exiting.locals = null;
                    }
                    // Enter 'to' states not kept
                    for (l = keep; l < toPath.length; l++) {
                        entering = toPath[l];
                        entering.locals = toLocals[l];
                        entering.self.onEnter && $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                    }
                    // Run it again, to catch any transitions in callbacks
                    if ($state.transition !== transition) return TransitionSuperseded;
                    // Update globals in $state
                    $state.$current = to;
                    $state.current = to.self;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    $state.transition = null;
                    options.location && to.navigable && $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                        $$avoidResync: !0,
                        replace: "replace" === options.location
                    });
                    options.notify && /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
                    $rootScope.$broadcast("$stateChangeSuccess", to.self, toParams, from.self, fromParams);
                    $urlRouter.update(!0);
                    return $state.current;
                }, function(error) {
                    if ($state.transition !== transition) return TransitionSuperseded;
                    $state.transition = null;
                    /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
                    evt = $rootScope.$broadcast("$stateChangeError", to.self, toParams, from.self, fromParams, error);
                    evt.defaultPrevented || $urlRouter.update();
                    return $q.reject(error);
                });
                return transition;
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
            $state.is = function(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                return isDefined(state) ? $state.$current === state && (!params || equalForKeys(state.params.$$values(params), $stateParams)) : undefined;
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
            $state.includes = function(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                if (isString(stateOrName) && isGlob(stateOrName)) {
                    if (!doesStateMatchGlob(stateOrName)) return !1;
                    stateOrName = $state.$current.name;
                }
                var state = findState(stateOrName, options.relative);
                return isDefined(state) ? !!isDefined($state.$current.includes[state.name]) && (!params || equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params))) : undefined;
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
            $state.href = function(stateOrName, params, options) {
                options = extend({
                    lossy: !0,
                    inherit: !0,
                    absolute: !1,
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) return null;
                options.inherit && (params = inheritParams($stateParams, params || {}, $state.$current, state));
                var nav = state && options.lossy ? state.navigable : state;
                return nav && nav.url !== undefined && null !== nav.url ? $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat("#"), params || {}), {
                    absolute: options.absolute
                }) : null;
            };
            /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
            $state.get = function(stateOrName, context) {
                if (0 === arguments.length) return map(objectKeys(states), function(name) {
                    return states[name].self;
                });
                var state = findState(stateOrName, context || $state.$current);
                return state && state.self ? state.self : null;
            };
            return $state;
        }
        function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
            // If reload was not explicitly requested
            // and we're transitioning to the same state we're already in
            // and    the locals didn't change
            //     or they changed in a way that doesn't merit reloading
            //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
            // Then return true.
            if (!options.reload && to === from && (locals === from.locals || !1 === to.self.reloadOnSearch && // Return true if there are no differences in non-search (path/object) params, false if there are differences
            function(fromAndToState, fromParams, toParams) {
                // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
                function notSearchParam(key) {
                    return "search" != fromAndToState.params[key].location;
                }
                var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam), nonQueryParams = pick.apply({}, [ fromAndToState.params ].concat(nonQueryParamKeys));
                return new $$UMFP.ParamSet(nonQueryParams).$$equals(fromParams, toParams);
            }(from, fromParams, toParams))) return !0;
        }
        var root, $state, states = {}, queue = {}, abstractKey = "abstract", stateBuilder = {
            // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
            // state.children = [];
            // if (parent) parent.children.push(state);
            parent: function(state) {
                if (isDefined(state.parent) && state.parent) return findState(state.parent);
                // regex matches any valid composite state name
                // would match "contact.list" but not "contacts"
                var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                return compositeName ? findState(compositeName[1]) : root;
            },
            // inherit 'data' from parent and override by own values (if any)
            data: function(state) {
                state.parent && state.parent.data && (state.data = state.self.data = inherit(state.parent.data, state.data));
                return state.data;
            },
            // Build a URLMatcher if necessary, either via a relative or absolute URL
            url: function(state) {
                var url = state.url, config = {
                    params: state.params || {}
                };
                if (isString(url)) return "^" == url.charAt(0) ? $urlMatcherFactory.compile(url.substring(1), config) : (state.parent.navigable || root).url.concat(url, config);
                if (!url || $urlMatcherFactory.isMatcher(url)) return url;
                throw new Error("Invalid url '" + url + "' in state '" + state + "'");
            },
            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
            navigable: function(state) {
                return state.url ? state : state.parent ? state.parent.navigable : null;
            },
            // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
            ownParams: function(state) {
                var params = state.url && state.url.params || new $$UMFP.ParamSet();
                forEach(state.params || {}, function(config, id) {
                    params[id] || (params[id] = new $$UMFP.Param(id, null, config, "config"));
                });
                return params;
            },
            // Derive parameters for this state and ensure they're a super-set of parent's parameters
            params: function(state) {
                var ownParams = pick(state.ownParams, state.ownParams.$$keys());
                return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
            },
            // If there is no explicit multi-view configuration, make one up so we don't have
            // to handle both cases in the view directive later. Note that having an explicit
            // 'views' property will mean the default unnamed view properties are ignored. This
            // is also a good time to resolve view names to absolute names, so everything is a
            // straight lookup at link time.
            views: function(state) {
                var views = {};
                forEach(isDefined(state.views) ? state.views : {
                    "": state
                }, function(view, name) {
                    name.indexOf("@") < 0 && (name += "@" + state.parent.name);
                    views[name] = view;
                });
                return views;
            },
            // Keep a full path from the root down to this state as this is needed for state activation.
            path: function(state) {
                return state.parent ? state.parent.path.concat(state) : [];
            },
            // Speed up $state.contains() as it's used a lot
            includes: function(state) {
                var includes = state.parent ? extend({}, state.parent.includes) : {};
                includes[state.name] = !0;
                return includes;
            },
            $delegates: {}
        };
        // Implicit root state that is always active
        root = registerState({
            name: "",
            url: "^",
            views: null,
            abstract: !0
        });
        root.navigable = null;
        /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
        this.decorator = decorator;
        /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
        this.state = state;
        /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
        this.$get = $get;
        $get.$inject = [ "$rootScope", "$q", "$view", "$injector", "$resolve", "$stateParams", "$urlRouter", "$location", "$urlMatcherFactory" ];
    }
    function $ViewProvider() {
        function $get($rootScope, $templateFactory) {
            return {
                // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
                /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
                load: function(name, options) {
                    var result;
                    options = extend({
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: !0,
                        async: !0,
                        params: {}
                    }, options);
                    options.view && (result = $templateFactory.fromConfig(options.view, options.params, options.locals));
                    return result;
                }
            };
        }
        this.$get = $get;
        /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
        $get.$inject = [ "$rootScope", "$templateFactory" ];
    }
    /**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
    function $ViewScrollProvider() {
        var useAnchorScroll = !1;
        /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
        this.useAnchorScroll = function() {
            useAnchorScroll = !0;
        };
        /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
        this.$get = [ "$anchorScroll", "$timeout", function($anchorScroll, $timeout) {
            return useAnchorScroll ? $anchorScroll : function($element) {
                return $timeout(function() {
                    $element[0].scrollIntoView();
                }, 0, !1);
            };
        } ];
    }
    function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
        // Returns a set of DOM manipulation functions based on which Angular version
        // it should use
        function getRenderer(attrs, scope) {
            function animEnabled(element) {
                return 1 === ngMajorVer && ngMinorVer >= 4 ? !!$animate.enabled(element) : 1 === ngMajorVer && ngMinorVer >= 2 ? !!$animate.enabled() : !!$animator;
            }
            var statics = {
                enter: function(element, target, cb) {
                    target.after(element);
                    cb();
                },
                leave: function(element, cb) {
                    element.remove();
                    cb();
                }
            };
            if (attrs.noanimation) return statics;
            // ng 1.2+
            if ($animate) return {
                enter: function(element, target, cb) {
                    animEnabled(element) ? angular.version.minor > 2 ? $animate.enter(element, null, target).then(cb) : $animate.enter(element, null, target, cb) : statics.enter(element, target, cb);
                },
                leave: function(element, cb) {
                    animEnabled(element) ? angular.version.minor > 2 ? $animate.leave(element).then(cb) : $animate.leave(element, cb) : statics.leave(element, cb);
                }
            };
            // ng 1.1.5
            if ($animator) {
                var animate = $animator && $animator(scope, attrs);
                return {
                    enter: function(element, target, cb) {
                        animate.enter(element, null, target);
                        cb();
                    },
                    leave: function(element, cb) {
                        animate.leave(element);
                        cb();
                    }
                };
            }
            return statics;
        }
        var service = function() {
            return $injector.has ? function(service) {
                return $injector.has(service) ? $injector.get(service) : null;
            } : function(service) {
                try {
                    return $injector.get(service);
                } catch (e) {
                    return null;
                }
            };
        }(), $animator = service("$animator"), $animate = service("$animate");
        return {
            restrict: "ECA",
            terminal: !0,
            priority: 400,
            transclude: "element",
            compile: function(tElement, tAttrs, $transclude) {
                return function(scope, $element, attrs) {
                    function cleanupLastView() {
                        function cleanOld() {
                            _previousEl && _previousEl.remove();
                            _currentScope && _currentScope.$destroy();
                        }
                        var _previousEl = previousEl, _currentScope = currentScope;
                        _currentScope && (_currentScope._willBeDestroyed = !0);
                        if (currentEl) {
                            renderer.leave(currentEl, function() {
                                cleanOld();
                                previousEl = null;
                            });
                            previousEl = currentEl;
                        } else {
                            cleanOld();
                            previousEl = null;
                        }
                        currentEl = null;
                        currentScope = null;
                    }
                    function updateView(firstTime) {
                        var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
                        if ((firstTime || previousLocals !== latestLocals) && !scope._willBeDestroyed) {
                            // nothing to do
                            newScope = scope.$new();
                            latestLocals = $state.$current.locals[name];
                            /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoading
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           *
           * Fired once the view **begins loading**, *before* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
                            newScope.$emit("$viewContentLoading", name);
                            var clone = $transclude(newScope, function(clone) {
                                renderer.enter(clone, $element, function() {
                                    currentScope && currentScope.$emit("$viewContentAnimationEnded");
                                    (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) && $uiViewScroll(clone);
                                });
                                cleanupLastView();
                            });
                            currentEl = clone;
                            currentScope = newScope;
                            /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
                            currentScope.$emit("$viewContentLoaded", name);
                            currentScope.$eval(onloadExp);
                        }
                    }
                    var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || "", autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
                    scope.$on("$stateChangeSuccess", function() {
                        updateView(!1);
                    });
                    updateView(!0);
                };
            }
        };
    }
    function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
        return {
            restrict: "ECA",
            priority: -400,
            compile: function(tElement) {
                var initial = tElement.html();
                return function(scope, $element, attrs) {
                    var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
                    if (locals) {
                        $element.data("$uiView", {
                            name: name,
                            state: locals.$$state
                        });
                        $element.html(locals.$template ? locals.$template : initial);
                        var link = $compile($element.contents());
                        if (locals.$$controller) {
                            locals.$scope = scope;
                            locals.$element = $element;
                            var controller = $controller(locals.$$controller, locals);
                            locals.$$controllerAs && (scope[locals.$$controllerAs] = controller);
                            $element.data("$ngControllerController", controller);
                            $element.children().data("$ngControllerController", controller);
                        }
                        link(scope);
                    }
                };
            }
        };
    }
    /**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
    function getUiViewName(scope, attrs, element, $interpolate) {
        var name = $interpolate(attrs.uiView || attrs.name || "")(scope), inherited = element.inheritedData("$uiView");
        return name.indexOf("@") >= 0 ? name : name + "@" + (inherited ? inherited.state.name : "");
    }
    function parseStateRef(ref, current) {
        var parsed, preparsed = ref.match(/^\s*({[^}]*})\s*$/);
        preparsed && (ref = current + "(" + preparsed[1] + ")");
        parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
        if (!parsed || 4 !== parsed.length) throw new Error("Invalid state ref '" + ref + "'");
        return {
            state: parsed[1],
            paramExpr: parsed[3] || null
        };
    }
    function stateContext(el) {
        var stateData = el.parent().inheritedData("$uiView");
        if (stateData && stateData.state && stateData.state.name) return stateData.state;
    }
    function getTypeInfo(el) {
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var isSvg = "[object SVGAnimatedString]" === Object.prototype.toString.call(el.prop("href")), isForm = "FORM" === el[0].nodeName;
        return {
            attr: isForm ? "action" : isSvg ? "xlink:href" : "href",
            isAnchor: "A" === el.prop("tagName").toUpperCase(),
            clickable: !isForm
        };
    }
    function clickHook(el, $state, $timeout, type, current) {
        return function(e) {
            var button = e.which || e.button, target = current();
            if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr("target"))) {
                // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
                var transition = $timeout(function() {
                    $state.go(target.state, target.params, target.options);
                });
                e.preventDefault();
                // if the state has no URL, ignore one preventDefault from the <a> directive.
                var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
                e.preventDefault = function() {
                    ignorePreventDefaultCount-- <= 0 && $timeout.cancel(transition);
                };
            }
        };
    }
    function defaultOpts(el, $state) {
        return {
            relative: stateContext(el) || $state.$current,
            inherit: !0
        };
    }
    function $StateRefDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                var ref = parseStateRef(attrs.uiSref, $state.current.name), def = {
                    state: ref.state,
                    href: null,
                    params: null
                }, type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0];
                def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
                var update = function(val) {
                    val && (def.params = angular.copy(val));
                    def.href = $state.href(ref.state, def.params, def.options);
                    active && active.$$addStateInfo(ref.state, def.params);
                    null !== def.href && attrs.$set(type.attr, def.href);
                };
                if (ref.paramExpr) {
                    scope.$watch(ref.paramExpr, function(val) {
                        val !== def.params && update(val);
                    }, !0);
                    def.params = angular.copy(scope.$eval(ref.paramExpr));
                }
                update();
                type.clickable && element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    function $StateRefDynamicDirective($state, $timeout) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(scope, element, attrs, uiSrefActive) {
                function runStateRefLink(group) {
                    def.state = group[0];
                    def.params = group[1];
                    def.options = group[2];
                    def.href = $state.href(def.state, def.params, def.options);
                    active && active.$$addStateInfo(def.state, def.params);
                    def.href && attrs.$set(type.attr, def.href);
                }
                var type = getTypeInfo(element), active = uiSrefActive[1] || uiSrefActive[0], group = [ attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null ], watch = "[" + group.map(function(val) {
                    return val || "null";
                }).join(", ") + "]", def = {
                    state: null,
                    params: null,
                    options: null,
                    href: null
                };
                scope.$watch(watch, runStateRefLink, !0);
                runStateRefLink(scope.$eval(watch));
                type.clickable && element.bind("click", clickHook(element, $state, $timeout, type, function() {
                    return def;
                }));
            }
        };
    }
    function $StateRefActiveDirective($state, $stateParams, $interpolate) {
        return {
            restrict: "A",
            controller: [ "$scope", "$element", "$attrs", "$timeout", function($scope, $element, $attrs, $timeout) {
                function addState(stateName, stateParams, activeClass) {
                    var state = $state.get(stateName, stateContext($element)), stateHash = createStateHash(stateName, stateParams);
                    states.push({
                        state: state || {
                            name: stateName
                        },
                        params: stateParams,
                        hash: stateHash
                    });
                    activeClasses[stateHash] = activeClass;
                }
                /**
       * @param {string} state
       * @param {Object|string} [params]
       * @return {string}
       */
                function createStateHash(state, params) {
                    if (!isString(state)) throw new Error("state should be a string");
                    if (isObject(params)) return state + toJson(params);
                    params = $scope.$eval(params);
                    return isObject(params) ? state + toJson(params) : state;
                }
                // Update route state
                function update() {
                    for (var i = 0; i < states.length; i++) {
                        anyMatch(states[i].state, states[i].params) ? addClass($element, activeClasses[states[i].hash]) : removeClass($element, activeClasses[states[i].hash]);
                        exactMatch(states[i].state, states[i].params) ? addClass($element, activeEqClass) : removeClass($element, activeEqClass);
                    }
                }
                function addClass(el, className) {
                    $timeout(function() {
                        el.addClass(className);
                    });
                }
                function removeClass(el, className) {
                    el.removeClass(className);
                }
                function anyMatch(state, params) {
                    return $state.includes(state.name, params);
                }
                function exactMatch(state, params) {
                    return $state.is(state.name, params);
                }
                var activeEqClass, uiSrefActive, states = [], activeClasses = {};
                // There probably isn't much point in $observing this
                // uiSrefActive and uiSrefActiveEq share the same directive object with some
                // slight difference in logic routing
                activeEqClass = $interpolate($attrs.uiSrefActiveEq || "", !1)($scope);
                try {
                    uiSrefActive = $scope.$eval($attrs.uiSrefActive);
                } catch (e) {}
                uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || "", !1)($scope);
                isObject(uiSrefActive) && forEach(uiSrefActive, function(stateOrName, activeClass) {
                    if (isString(stateOrName)) {
                        var ref = parseStateRef(stateOrName, $state.current.name);
                        addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
                    }
                });
                // Allow uiSref to communicate with uiSrefActive[Equals]
                this.$$addStateInfo = function(newState, newParams) {
                    // we already got an explicit state provided by ui-sref-active, so we
                    // shadow the one that comes from ui-sref
                    if (!(isObject(uiSrefActive) && states.length > 0)) {
                        addState(newState, newParams, uiSrefActive);
                        update();
                    }
                };
                $scope.$on("$stateChangeSuccess", update);
                update();
            } ]
        };
    }
    function $IsStateFilter($state) {
        var isFilter = function(state, params) {
            return $state.is(state, params);
        };
        isFilter.$stateful = !0;
        return isFilter;
    }
    function $IncludedByStateFilter($state) {
        var includesFilter = function(state, params, options) {
            return $state.includes(state, params, options);
        };
        includesFilter.$stateful = !0;
        return includesFilter;
    }
    var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, toJson = angular.toJson;
    /**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
    angular.module("ui.router.util", [ "ng" ]);
    /**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
    angular.module("ui.router.router", [ "ui.router.util" ]);
    /**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
    angular.module("ui.router.state", [ "ui.router.router", "ui.router.util" ]);
    /**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
    angular.module("ui.router", [ "ui.router.state" ]);
    angular.module("ui.router.compat", [ "ui.router" ]);
    /**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
    $Resolve.$inject = [ "$q", "$injector" ];
    angular.module("ui.router.util").service("$resolve", $Resolve);
    /**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
    $TemplateFactory.$inject = [ "$http", "$templateCache", "$injector" ];
    angular.module("ui.router.util").service("$templateFactory", $TemplateFactory);
    var $$UMFP;
    /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
    UrlMatcher.prototype.concat = function(pattern, config) {
        // Because order of search parameters is irrelevant, we can add our own search
        // parameters to the end of the new pattern. Parse the new pattern by itself
        // and then join the bits together, but it's much easier to do this on a string level.
        var defaultConfig = {
            caseInsensitive: $$UMFP.caseInsensitive(),
            strict: $$UMFP.strictMode(),
            squash: $$UMFP.defaultSquashPolicy()
        };
        return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
    };
    UrlMatcher.prototype.toString = function() {
        return this.source;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
    UrlMatcher.prototype.exec = function(path, searchParams) {
        var m = this.regexp.exec(path);
        if (!m) return null;
        searchParams = searchParams || {};
        var i, j, paramName, paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {};
        if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
        var param, paramVal;
        for (i = 0; i < nPath; i++) {
            paramName = paramNames[i];
            param = this.params[paramName];
            paramVal = m[i + 1];
            // if the param value matches a pre-replace pair, replace the value before decoding.
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            paramVal && !0 === param.array && (paramVal = function(string) {
                function reverseString(str) {
                    return str.split("").reverse().join("");
                }
                function unquoteDashes(str) {
                    return str.replace(/\\-/g, "-");
                }
                return map(map(reverseString(string).split(/-(?!\\)/), reverseString), unquoteDashes).reverse();
            }(paramVal));
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        for (;i < nTotal; i++) {
            paramName = paramNames[i];
            values[paramName] = this.params[paramName].value(searchParams[paramName]);
            param = this.params[paramName];
            paramVal = searchParams[paramName];
            for (j = 0; j < param.replace.length; j++) param.replace[j].from === paramVal && (paramVal = param.replace[j].to);
            isDefined(paramVal) && (paramVal = param.type.decode(paramVal));
            values[paramName] = param.value(paramVal);
        }
        return values;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
    UrlMatcher.prototype.parameters = function(param) {
        return isDefined(param) ? this.params[param] || null : this.$$paramNames;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validates
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
    UrlMatcher.prototype.validates = function(params) {
        return this.params.$$validates(params);
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
    UrlMatcher.prototype.format = function(values) {
        function encodeDashes(str) {
            // Replace dashes with encoded "\-"
            return encodeURIComponent(str).replace(/-/g, function(c) {
                return "%5C%" + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        values = values || {};
        var segments = this.segments, params = this.parameters(), paramset = this.params;
        if (!this.validates(values)) return null;
        var i, search = !1, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
        for (i = 0; i < nTotal; i++) {
            var isPathParam = i < nPath, name = params[i], param = paramset[name], value = param.value(values[name]), isDefaultValue = param.isOptional && param.type.equals(param.value(), value), squash = !!isDefaultValue && param.squash, encoded = param.type.encode(value);
            if (isPathParam) {
                var nextSegment = segments[i + 1], isFinalPathParam = i + 1 === nPath;
                if (!1 === squash) {
                    null != encoded && (isArray(encoded) ? result += map(encoded, encodeDashes).join("-") : result += encodeURIComponent(encoded));
                    result += nextSegment;
                } else if (!0 === squash) {
                    var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    result += nextSegment.match(capture)[1];
                } else isString(squash) && (result += squash + nextSegment);
                isFinalPathParam && !0 === param.squash && "/" === result.slice(-1) && (result = result.slice(0, -1));
            } else {
                if (null == encoded || isDefaultValue && !1 !== squash) continue;
                isArray(encoded) || (encoded = [ encoded ]);
                if (0 === encoded.length) continue;
                encoded = map(encoded, encodeURIComponent).join("&" + name + "=");
                result += (search ? "&" : "?") + name + "=" + encoded;
                search = !0;
            }
        }
        return result;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
    Type.prototype.is = function(val, key) {
        return !0;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
    Type.prototype.encode = function(val, key) {
        return val;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
    Type.prototype.decode = function(val, key) {
        return val;
    };
    /**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
    Type.prototype.equals = function(a, b) {
        return a == b;
    };
    Type.prototype.$subPattern = function() {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };
    Type.prototype.pattern = /.*/;
    Type.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    };
    /** Given an encoded string, or a decoded object, returns a decoded object */
    Type.prototype.$normalize = function(val) {
        return this.is(val) ? val : this.decode(val);
    };
    /*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
    Type.prototype.$asArray = function(mode, isSearch) {
        function ArrayType(type, mode) {
            function bindTo(type, callbackName) {
                return function() {
                    return type[callbackName].apply(type, arguments);
                };
            }
            // Wrap non-array value as array
            function arrayWrap(val) {
                return isArray(val) ? val : isDefined(val) ? [ val ] : [];
            }
            // Unwrap array value for "auto" mode. Return undefined for empty array.
            function arrayUnwrap(val) {
                switch (val.length) {
                  case 0:
                    return undefined;

                  case 1:
                    return "auto" === mode ? val[0] : val;

                  default:
                    return val;
                }
            }
            function falsey(val) {
                return !val;
            }
            // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
            function arrayHandler(callback, allTruthyMode) {
                return function(val) {
                    if (isArray(val) && 0 === val.length) return val;
                    val = arrayWrap(val);
                    var result = map(val, callback);
                    return !0 === allTruthyMode ? 0 === filter(result, falsey).length : arrayUnwrap(result);
                };
            }
            this.encode = arrayHandler(bindTo(type, "encode"));
            this.decode = arrayHandler(bindTo(type, "decode"));
            this.is = arrayHandler(bindTo(type, "is"), !0);
            this.equals = // Wraps type (.equals) functions to operate on each value of an array
            function(callback) {
                return function(val1, val2) {
                    var left = arrayWrap(val1), right = arrayWrap(val2);
                    if (left.length !== right.length) return !1;
                    for (var i = 0; i < left.length; i++) if (!callback(left[i], right[i])) return !1;
                    return !0;
                };
            }(bindTo(type, "equals"));
            this.pattern = type.pattern;
            this.$normalize = arrayHandler(bindTo(type, "$normalize"));
            this.name = type.name;
            this.$arrayMode = mode;
        }
        if (!mode) return this;
        if ("auto" === mode && !isSearch) throw new Error("'auto' array mode is for query parameters only");
        return new ArrayType(this, mode);
    };
    // Register as a provider so it's available to other providers
    angular.module("ui.router.util").provider("$urlMatcherFactory", $UrlMatcherFactory);
    angular.module("ui.router.util").run([ "$urlMatcherFactory", function($urlMatcherFactory) {} ]);
    /**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
    $UrlRouterProvider.$inject = [ "$locationProvider", "$urlMatcherFactoryProvider" ];
    angular.module("ui.router.router").provider("$urlRouter", $UrlRouterProvider);
    /**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
    $StateProvider.$inject = [ "$urlRouterProvider", "$urlMatcherFactoryProvider" ];
    angular.module("ui.router.state").factory("$stateParams", function() {
        return {};
    }).provider("$state", $StateProvider);
    $ViewProvider.$inject = [];
    angular.module("ui.router.state").provider("$view", $ViewProvider);
    angular.module("ui.router.state").provider("$uiViewScroll", $ViewScrollProvider);
    var ngMajorVer = angular.version.major, ngMinorVer = angular.version.minor;
    /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * @param {string=} noanimation If truthy, the non-animated renderer will be selected (no animations
 * will be applied to the ui-view)
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
    $ViewDirective.$inject = [ "$state", "$injector", "$uiViewScroll", "$interpolate" ];
    $ViewDirectiveFill.$inject = [ "$compile", "$controller", "$state", "$interpolate" ];
    angular.module("ui.router.state").directive("uiView", $ViewDirective);
    angular.module("ui.router.state").directive("uiView", $ViewDirectiveFill);
    /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
 * URL, the directive will automatically generate & update the `href` attribute via
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
 * the link will trigger a state transition with optional parameters.
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 *
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
    $StateRefDirective.$inject = [ "$state", "$timeout" ];
    /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-state
 *
 * @requires ui.router.state.uiSref
 *
 * @restrict A
 *
 * @description
 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
 * params and override options.
 *
 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#href $state.href()}
 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
    $StateRefDynamicDirective.$inject = [ "$state", "$timeout" ];
    /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * It is also possible to pass ui-sref-active an expression that evaluates
 * to an object hash, whose keys represent active class names and whose
 * values represent the respective state names/globs.
 * ui-sref-active will match if the current active state **includes** any of
 * the specified state names/globs, even the abstract ones.
 *
 * @Example
 * Given the following template, with "admin" being an abstract state:
 * <pre>
 * <div ui-sref-active="{'active': 'admin.*'}">
 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
 * </div>
 * </pre>
 *
 * When the current state is "admin.roles" the "active" class will be applied
 * to both the <div> and <a> elements. It is important to note that the state
 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
 */
    /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
    $StateRefActiveDirective.$inject = [ "$state", "$stateParams", "$interpolate" ];
    angular.module("ui.router.state").directive("uiSref", $StateRefDirective).directive("uiSrefActive", $StateRefActiveDirective).directive("uiSrefActiveEq", $StateRefActiveDirective).directive("uiState", $StateRefDynamicDirective);
    /**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
    $IsStateFilter.$inject = [ "$state" ];
    /**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
    $IncludedByStateFilter.$inject = [ "$state" ];
    angular.module("ui.router.state").filter("isState", $IsStateFilter).filter("includedByState", $IncludedByStateFilter);
}(window, window.angular);

/*
 * angular-elastic v2.5.1
 * (c) 2014 Monospaced http://monospaced.com
 * License: MIT
 */
"undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "monospaced.elastic");

angular.module("monospaced.elastic", []).constant("msdElasticConfig", {
    append: ""
}).directive("msdElastic", [ "$timeout", "$window", "msdElasticConfig", function($timeout, $window, config) {
    "use strict";
    return {
        require: "ngModel",
        restrict: "A, C",
        link: function(scope, element, attrs, ngModel) {
            /*
           * methods
           */
            function initMirror() {
                var mirrorStyle = mirrorInitStyle;
                mirrored = ta;
                // copy the essential styles from the textarea to the mirror
                taStyle = getComputedStyle(ta);
                angular.forEach(copyStyle, function(val) {
                    mirrorStyle += val + ":" + taStyle.getPropertyValue(val) + ";";
                });
                mirror.setAttribute("style", mirrorStyle);
            }
            function adjust() {
                var taHeight, taComputedStyleWidth, mirrorHeight, width, overflow;
                mirrored !== ta && initMirror();
                // active flag prevents actions in function from calling adjust again
                if (!active) {
                    active = !0;
                    mirror.value = ta.value + append;
                    // optional whitespace to improve animation
                    mirror.style.overflowY = ta.style.overflowY;
                    taHeight = "" === ta.style.height ? "auto" : parseInt(ta.style.height, 10);
                    taComputedStyleWidth = getComputedStyle(ta).getPropertyValue("width");
                    // ensure getComputedStyle has returned a readable 'used value' pixel width
                    if ("px" === taComputedStyleWidth.substr(taComputedStyleWidth.length - 2, 2)) {
                        // update mirror width in case the textarea width has changed
                        width = parseInt(taComputedStyleWidth, 10) - boxOuter.width;
                        mirror.style.width = width + "px";
                    }
                    mirrorHeight = mirror.scrollHeight;
                    if (mirrorHeight > maxHeight) {
                        mirrorHeight = maxHeight;
                        overflow = "scroll";
                    } else mirrorHeight < minHeight && (mirrorHeight = minHeight);
                    mirrorHeight += boxOuter.height;
                    ta.style.overflowY = overflow || "hidden";
                    if (taHeight !== mirrorHeight) {
                        scope.$emit("elastic:resize", $ta, taHeight, mirrorHeight);
                        ta.style.height = mirrorHeight + "px";
                    }
                    // small delay to prevent an infinite loop
                    $timeout(function() {
                        active = !1;
                    }, 1, !1);
                }
            }
            function forceAdjust() {
                active = !1;
                adjust();
            }
            // cache a reference to the DOM element
            var ta = element[0], $ta = element;
            // ensure the element is a textarea, and browser is capable
            if ("TEXTAREA" === ta.nodeName && $window.getComputedStyle) {
                // set these properties before measuring dimensions
                $ta.css({
                    overflow: "hidden",
                    "overflow-y": "hidden",
                    "word-wrap": "break-word"
                });
                // force text reflow
                var text = ta.value;
                ta.value = "";
                ta.value = text;
                var mirrored, active, append = attrs.msdElastic ? attrs.msdElastic.replace(/\\n/g, "\n") : config.append, $win = angular.element($window), mirrorInitStyle = "position: absolute; top: -999px; right: auto; bottom: auto;left: 0; overflow: hidden; -webkit-box-sizing: content-box;-moz-box-sizing: content-box; box-sizing: content-box;min-height: 0 !important; height: 0 !important; padding: 0;word-wrap: break-word; border: 0;", $mirror = angular.element('<textarea aria-hidden="true" tabindex="-1" style="' + mirrorInitStyle + '"/>').data("elastic", !0), mirror = $mirror[0], taStyle = getComputedStyle(ta), resize = taStyle.getPropertyValue("resize"), borderBox = "border-box" === taStyle.getPropertyValue("box-sizing") || "border-box" === taStyle.getPropertyValue("-moz-box-sizing") || "border-box" === taStyle.getPropertyValue("-webkit-box-sizing"), boxOuter = borderBox ? {
                    width: parseInt(taStyle.getPropertyValue("border-right-width"), 10) + parseInt(taStyle.getPropertyValue("padding-right"), 10) + parseInt(taStyle.getPropertyValue("padding-left"), 10) + parseInt(taStyle.getPropertyValue("border-left-width"), 10),
                    height: parseInt(taStyle.getPropertyValue("border-top-width"), 10) + parseInt(taStyle.getPropertyValue("padding-top"), 10) + parseInt(taStyle.getPropertyValue("padding-bottom"), 10) + parseInt(taStyle.getPropertyValue("border-bottom-width"), 10)
                } : {
                    width: 0,
                    height: 0
                }, minHeightValue = parseInt(taStyle.getPropertyValue("min-height"), 10), heightValue = parseInt(taStyle.getPropertyValue("height"), 10), minHeight = Math.max(minHeightValue, heightValue) - boxOuter.height, maxHeight = parseInt(taStyle.getPropertyValue("max-height"), 10), copyStyle = [ "font-family", "font-size", "font-weight", "font-style", "letter-spacing", "line-height", "text-transform", "word-spacing", "text-indent" ];
                // exit if elastic already applied (or is the mirror element)
                if (!$ta.data("elastic")) {
                    // Opera returns max-height of -1 if not set
                    maxHeight = maxHeight && maxHeight > 0 ? maxHeight : 9e4;
                    // append mirror to the DOM
                    mirror.parentNode !== document.body && angular.element(document.body).append(mirror);
                    // set resize and apply elastic
                    $ta.css({
                        resize: "none" === resize || "vertical" === resize ? "none" : "horizontal"
                    }).data("elastic", !0);
                    /*
           * initialise
           */
                    // listen
                    // IE9
                    ta.oninput = "onpropertychange" in ta && "oninput" in ta ? ta.onkeyup = adjust : adjust;
                    $win.bind("resize", forceAdjust);
                    scope.$watch(function() {
                        return ngModel.$modelValue;
                    }, function(newValue) {
                        forceAdjust();
                    });
                    scope.$on("elastic:adjust", function() {
                        initMirror();
                        forceAdjust();
                    });
                    $timeout(adjust, 0, !1);
                    /*
           * destroy
           */
                    scope.$on("$destroy", function() {
                        $mirror.remove();
                        $win.unbind("resize", forceAdjust);
                    });
                }
            }
        }
    };
} ]);

/*! angular-base64-upload - v0.1.23
* https://github.com/adonespitogo/angular-base64-upload
* Copyright (c) Adones Pitogo <pitogo.adones@gmail.com> [Sat Aug 05 2017]
* Licensed MIT */
!function(window, undefined) {
    "use strict";
    /* istanbul ignore next */
    //http://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string
    window._arrayBufferToBase64 = function(buffer) {
        for (var binary = "", bytes = new Uint8Array(buffer), len = bytes.byteLength, i = 0; i < len; i += 1) binary += String.fromCharCode(bytes[i]);
        return window.btoa(binary);
    };
    window.angular.module("naif.base64", []).directive("baseSixtyFourInput", [ "$window", "$q", function($window, $q) {
        var isolateScope = {
            onChange: "&",
            onAfterValidate: "&",
            parser: "&"
        }, FILE_READER_EVENTS = [ "onabort", "onerror", "onloadstart", "onloadend", "onprogress", "onload" ];
        FILE_READER_EVENTS.forEach(function(e) {
            isolateScope[e] = "&";
        });
        return {
            restrict: "A",
            require: "ngModel",
            scope: isolateScope,
            link: function(scope, elem, attrs, ngModel) {
                // VALIDATIONS =========================================================
                function _maxnum(val) {
                    if (attrs.maxnum && attrs.multiple && val) {
                        var valid = val.length <= parseInt(attrs.maxnum);
                        ngModel.$setValidity("maxnum", valid);
                    }
                    return val;
                }
                function _minnum(val) {
                    if (attrs.minnum && attrs.multiple && val) {
                        var valid = val.length >= parseInt(attrs.minnum);
                        ngModel.$setValidity("minnum", valid);
                    }
                    return val;
                }
                function _maxsize(val) {
                    var valid = !0;
                    if (attrs.maxsize && val) {
                        var max = 1e3 * parseFloat(attrs.maxsize);
                        if (attrs.multiple) for (var i = 0; i < val.length; i++) {
                            var file = val[i];
                            if (file.filesize > max) {
                                valid = !1;
                                break;
                            }
                        } else valid = val.filesize <= max;
                        ngModel.$setValidity("maxsize", valid);
                    }
                    return val;
                }
                function _minsize(val) {
                    var valid = !0, min = 1e3 * parseFloat(attrs.minsize);
                    if (attrs.minsize && val) {
                        if (attrs.multiple) for (var i = 0; i < val.length; i++) {
                            var file = val[i];
                            if (file.filesize < min) {
                                valid = !1;
                                break;
                            }
                        } else valid = val.filesize >= min;
                        ngModel.$setValidity("minsize", valid);
                    }
                    return val;
                }
                function _accept(val) {
                    var regExp, exp, fileExt, valid = !0;
                    if (attrs.accept) {
                        exp = attrs.accept.trim().replace(/[,\s]+/gi, "|").replace(/\./g, "\\.").replace(/\/\*/g, "/.*");
                        regExp = new RegExp(exp);
                    }
                    if (attrs.accept && val) {
                        if (attrs.multiple) for (var i = 0; i < val.length; i++) {
                            var file = val[i];
                            fileExt = "." + file.filename.split(".").pop();
                            valid = regExp.test(file.filetype) || regExp.test(fileExt);
                            if (!valid) break;
                        } else {
                            fileExt = "." + val.filename.split(".").pop();
                            valid = regExp.test(val.filetype) || regExp.test(fileExt);
                        }
                        ngModel.$setValidity("accept", valid);
                    }
                    return val;
                }
                //end validations ===============
                function _setViewValue() {
                    var newVal = attrs.multiple ? fileObjects : fileObjects[0];
                    ngModel.$setViewValue(newVal);
                    _maxsize(newVal);
                    _minsize(newVal);
                    _maxnum(newVal);
                    _minnum(newVal);
                    _accept(newVal);
                }
                function _attachHandlerForEvent(eventName, handler, fReader, file, fileObject) {
                    fReader[eventName] = function(e) {
                        handler()(e, fReader, file, rawFiles, fileObjects, fileObject);
                    };
                }
                function _readerOnLoad(fReader, file, fileObject) {
                    return function(e) {
                        var promise, buffer = e.target.result, exceedsMaxSize = attrs.maxsize && file.size > 1024 * attrs.maxsize;
                        attrs.doNotParseIfOversize !== undefined && exceedsMaxSize ? fileObject.base64 = null : fileObject.base64 = $window._arrayBufferToBase64(buffer);
                        promise = attrs.parser ? $q.when(scope.parser()(file, fileObject)) : $q.when(fileObject);
                        promise.then(function(fileObj) {
                            fileObjects.push(fileObj);
                            // fulfill the promise here.
                            file.deferredObj.resolve();
                        });
                        attrs.onload && (scope.onload && "function" == typeof scope.onload() ? scope.onload()(e, fReader, file, rawFiles, fileObjects, fileObject) : scope.onload(e, rawFiles));
                    };
                }
                function _attachEventHandlers(fReader, file, fileObject) {
                    for (var i = FILE_READER_EVENTS.length - 1; i >= 0; i--) {
                        var e = FILE_READER_EVENTS[i];
                        attrs[e] && "onload" !== e && // don't attach handler to onload yet
                        _attachHandlerForEvent(e, scope[e], fReader, file, fileObject);
                    }
                    fReader.onload = _readerOnLoad(fReader, file, fileObject);
                }
                function _readFiles() {
                    var i, promises = [];
                    for (i = rawFiles.length - 1; i >= 0; i--) {
                        // append file a new promise, that waits until resolved
                        rawFiles[i].deferredObj = $q.defer();
                        promises.push(rawFiles[i].deferredObj.promise);
                    }
                    // set view value once all files are read
                    $q.all(promises).then(_setViewValue);
                    for (i = rawFiles.length - 1; i >= 0; i--) {
                        var reader = new $window.FileReader(), file = rawFiles[i], fileObject = {};
                        fileObject.filetype = file.type;
                        fileObject.filename = file.name;
                        fileObject.filesize = file.size;
                        _attachEventHandlers(reader, file, fileObject);
                        reader.readAsArrayBuffer(file);
                    }
                }
                function _onChange(e) {
                    attrs.onChange && (scope.onChange && "function" == typeof scope.onChange() ? scope.onChange()(e, rawFiles) : scope.onChange(e, rawFiles));
                }
                function _onAfterValidate(e) {
                    if (attrs.onAfterValidate) {
                        for (var promises = [], i = rawFiles.length - 1; i >= 0; i--) promises.push(rawFiles[i].deferredObj.promise);
                        $q.all(promises).then(function() {
                            scope.onAfterValidate && "function" == typeof scope.onAfterValidate() ? scope.onAfterValidate()(e, fileObjects, rawFiles) : scope.onAfterValidate(e, fileObjects, rawFiles);
                        });
                    }
                }
                var rawFiles = [], fileObjects = [];
                /* istanbul ignore if */
                if (ngModel) {
                    ngModel.$isEmpty = function(val) {
                        return !val || (angular.isArray(val) ? 0 === val.length : !val.base64);
                    };
                    // http://stackoverflow.com/questions/1703228/how-can-i-clear-an-html-file-input-with-javascript
                    scope._clearInput = function() {
                        elem[0].value = "";
                    };
                    scope.$watch(function() {
                        return ngModel.$viewValue;
                    }, function(val) {
                        if (ngModel.$isEmpty(val) && ngModel.$dirty) {
                            scope._clearInput();
                            // Remove validation errors
                            ngModel.$setValidity("maxnum", !0);
                            ngModel.$setValidity("minnum", !0);
                            ngModel.$setValidity("maxsize", !0);
                            ngModel.$setValidity("minsize", !0);
                            ngModel.$setValidity("accept", !0);
                        }
                    });
                    elem.on("change", function(e) {
                        fileObjects = [];
                        fileObjects = angular.copy(fileObjects);
                        if (0 === e.target.files.length) {
                            rawFiles = [];
                            _setViewValue();
                        } else {
                            rawFiles = e.target.files;
                            // use event target so we can mock the files from test
                            _readFiles();
                            _onChange(e);
                            _onAfterValidate(e);
                        }
                        attrs.allowSameFile && scope._clearInput();
                    });
                }
            }
        };
    } ]);
}(window);

!function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = "function" == typeof require && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n || e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    for (var i = "function" == typeof require && require, o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    1: [ function(require, module, exports) {
        /* Blob.js
 * A Blob implementation.
 * 2014-07-24
 *
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/dsamarin
 * License: X11/MIT
 *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md
 */
        /*global self, unescape */
        /*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */
        /*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */
        !function(view) {
            "use strict";
            view.URL = view.URL || view.webkitURL;
            if (view.Blob && view.URL) try {
                new Blob();
                return;
            } catch (e) {}
            // Internally we use a BlobBuilder implementation to base Blob off of
            // in order to support older browsers that only have BlobBuilder
            var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || function(view) {
                var get_class = function(object) {
                    return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
                }, FakeBlobBuilder = function() {
                    this.data = [];
                }, FakeBlob = function(data, type, encoding) {
                    this.data = data;
                    this.size = data.length;
                    this.type = type;
                    this.encoding = encoding;
                }, FBB_proto = FakeBlobBuilder.prototype, FB_proto = FakeBlob.prototype, FileReaderSync = view.FileReaderSync, FileException = function(type) {
                    this.code = this[this.name = type];
                }, file_ex_codes = "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "), file_ex_code = file_ex_codes.length, real_URL = view.URL || view.webkitURL || view, real_create_object_URL = real_URL.createObjectURL, real_revoke_object_URL = real_URL.revokeObjectURL, URL = real_URL, btoa = view.btoa, atob = view.atob, ArrayBuffer = view.ArrayBuffer, Uint8Array = view.Uint8Array, origin = /^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;
                FakeBlob.fake = FB_proto.fake = !0;
                for (;file_ex_code--; ) FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
                // Polyfill URL
                real_URL.createObjectURL || (URL = view.URL = function(uri) {
                    var uri_origin, uri_info = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
                    uri_info.href = uri;
                    if (!("origin" in uri_info)) if ("data:" === uri_info.protocol.toLowerCase()) uri_info.origin = null; else {
                        uri_origin = uri.match(origin);
                        uri_info.origin = uri_origin && uri_origin[1];
                    }
                    return uri_info;
                });
                URL.createObjectURL = function(blob) {
                    var data_URI_header, type = blob.type;
                    null === type && (type = "application/octet-stream");
                    if (blob instanceof FakeBlob) {
                        data_URI_header = "data:" + type;
                        return "base64" === blob.encoding ? data_URI_header + ";base64," + blob.data : "URI" === blob.encoding ? data_URI_header + "," + decodeURIComponent(blob.data) : btoa ? data_URI_header + ";base64," + btoa(blob.data) : data_URI_header + "," + encodeURIComponent(blob.data);
                    }
                    if (real_create_object_URL) return real_create_object_URL.call(real_URL, blob);
                };
                URL.revokeObjectURL = function(object_URL) {
                    "data:" !== object_URL.substring(0, 5) && real_revoke_object_URL && real_revoke_object_URL.call(real_URL, object_URL);
                };
                FBB_proto.append = function(data) {
                    var bb = this.data;
                    // decode data to a binary string
                    if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                        for (var str = "", buf = new Uint8Array(data), i = 0, buf_len = buf.length; i < buf_len; i++) str += String.fromCharCode(buf[i]);
                        bb.push(str);
                    } else if ("Blob" === get_class(data) || "File" === get_class(data)) {
                        if (!FileReaderSync) // async FileReader won't work as BlobBuilder is sync
                        throw new FileException("NOT_READABLE_ERR");
                        var fr = new FileReaderSync();
                        bb.push(fr.readAsBinaryString(data));
                    } else if (data instanceof FakeBlob) "base64" === data.encoding && atob ? bb.push(atob(data.data)) : "URI" === data.encoding ? bb.push(decodeURIComponent(data.data)) : "raw" === data.encoding && bb.push(data.data); else {
                        "string" != typeof data && (data += "");
                        // decode UTF-16 to binary string
                        bb.push(unescape(encodeURIComponent(data)));
                    }
                };
                FBB_proto.getBlob = function(type) {
                    arguments.length || (type = null);
                    return new FakeBlob(this.data.join(""), type, "raw");
                };
                FBB_proto.toString = function() {
                    return "[object BlobBuilder]";
                };
                FB_proto.slice = function(start, end, type) {
                    var args = arguments.length;
                    args < 3 && (type = null);
                    return new FakeBlob(this.data.slice(start, args > 1 ? end : this.data.length), type, this.encoding);
                };
                FB_proto.toString = function() {
                    return "[object Blob]";
                };
                FB_proto.close = function() {
                    this.size = 0;
                    delete this.data;
                };
                return FakeBlobBuilder;
            }(view);
            view.Blob = function(blobParts, options) {
                var type = options ? options.type || "" : "", builder = new BlobBuilder();
                if (blobParts) for (var i = 0, len = blobParts.length; i < len; i++) Uint8Array && blobParts[i] instanceof Uint8Array ? builder.append(blobParts[i].buffer) : builder.append(blobParts[i]);
                var blob = builder.getBlob(type);
                !blob.slice && blob.webkitSlice && (blob.slice = blob.webkitSlice);
                return blob;
            };
            var getPrototypeOf = Object.getPrototypeOf || function(object) {
                return object.__proto__;
            };
            view.Blob.prototype = getPrototypeOf(new view.Blob());
        }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content || this);
    }, {} ],
    2: [ function(require, module, exports) {
        /* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.1.20151003
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */
        /*global self */
        /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */
        /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
        var saveAs = saveAs || function(view) {
            "use strict";
            // IE <10 is explicitly unsupported
            if ("undefined" == typeof navigator || !/MSIE [1-9]\./.test(navigator.userAgent)) {
                var doc = view.document, get_URL = function() {
                    return view.URL || view.webkitURL || view;
                }, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"), can_use_save_link = "download" in save_link, click = function(node) {
                    var event = new MouseEvent("click");
                    node.dispatchEvent(event);
                }, is_safari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent), webkit_req_fs = view.webkitRequestFileSystem, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem, throw_outside = function(ex) {
                    (view.setImmediate || view.setTimeout)(function() {
                        throw ex;
                    }, 0);
                }, fs_min_size = 0, revoke = function(file) {
                    var revoker = function() {
                        "string" == typeof file ? // file is an object URL
                        get_URL().revokeObjectURL(file) : // file is a File
                        file.remove();
                    };
                    view.chrome ? revoker() : setTimeout(revoker, 500);
                }, dispatch = function(filesaver, event_types, event) {
                    event_types = [].concat(event_types);
                    for (var i = event_types.length; i--; ) {
                        var listener = filesaver["on" + event_types[i]];
                        if ("function" == typeof listener) try {
                            listener.call(filesaver, event || filesaver);
                        } catch (ex) {
                            throw_outside(ex);
                        }
                    }
                }, auto_bom = function(blob) {
                    // prepend BOM for UTF-8 XML and text/* types (including HTML)
                    // prepend BOM for UTF-8 XML and text/* types (including HTML)
                    return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type) ? new Blob([ "\ufeff", blob ], {
                        type: blob.type
                    }) : blob;
                }, FileSaver = function(blob, name, no_auto_bom) {
                    no_auto_bom || (blob = auto_bom(blob));
                    // First try a.download, then web filesystem, then object URLs
                    var object_url, target_view, slice, filesaver = this, type = blob.type, blob_changed = !1, dispatch_all = function() {
                        dispatch(filesaver, "writestart progress write writeend".split(" "));
                    }, fs_error = function() {
                        if (target_view && is_safari && "undefined" != typeof FileReader) {
                            // Safari doesn't allow downloading of blob urls
                            var reader = new FileReader();
                            reader.onloadend = function() {
                                var base64Data = reader.result;
                                target_view.location.href = "data:attachment/file" + base64Data.slice(base64Data.search(/[,;]/));
                                filesaver.readyState = filesaver.DONE;
                                dispatch_all();
                            };
                            reader.readAsDataURL(blob);
                            filesaver.readyState = filesaver.INIT;
                        } else {
                            // don't create more object URLs than needed
                            !blob_changed && object_url || (object_url = get_URL().createObjectURL(blob));
                            if (target_view) target_view.location.href = object_url; else {
                                void 0 == view.open(object_url, "_blank") && is_safari && (//Apple do not allow window.open, see http://bit.ly/1kZffRI
                                view.location.href = object_url);
                            }
                            filesaver.readyState = filesaver.DONE;
                            dispatch_all();
                            revoke(object_url);
                        }
                    }, abortable = function(func) {
                        return function() {
                            if (filesaver.readyState !== filesaver.DONE) return func.apply(this, arguments);
                        };
                    }, create_if_not_found = {
                        create: !0,
                        exclusive: !1
                    };
                    filesaver.readyState = filesaver.INIT;
                    name || (name = "download");
                    if (can_use_save_link) {
                        object_url = get_URL().createObjectURL(blob);
                        setTimeout(function() {
                            save_link.href = object_url;
                            save_link.download = name;
                            click(save_link);
                            dispatch_all();
                            revoke(object_url);
                            filesaver.readyState = filesaver.DONE;
                        });
                    } else {
                        // Object and web filesystem URLs have a problem saving in Google Chrome when
                        // viewed in a tab, so I force save with application/octet-stream
                        // http://code.google.com/p/chromium/issues/detail?id=91158
                        // Update: Google errantly closed 91158, I submitted it again:
                        // https://code.google.com/p/chromium/issues/detail?id=389642
                        if (view.chrome && type && "application/octet-stream" !== type) {
                            slice = blob.slice || blob.webkitSlice;
                            blob = slice.call(blob, 0, blob.size, "application/octet-stream");
                            blob_changed = !0;
                        }
                        // Since I can't be sure that the guessed media type will trigger a download
                        // in WebKit, I append .download to the filename.
                        // https://bugs.webkit.org/show_bug.cgi?id=65440
                        webkit_req_fs && "download" !== name && (name += ".download");
                        ("application/octet-stream" === type || webkit_req_fs) && (target_view = view);
                        if (req_fs) {
                            fs_min_size += blob.size;
                            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                                    var save = function() {
                                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                                            file.createWriter(abortable(function(writer) {
                                                writer.onwriteend = function(event) {
                                                    target_view.location.href = file.toURL();
                                                    filesaver.readyState = filesaver.DONE;
                                                    dispatch(filesaver, "writeend", event);
                                                    revoke(file);
                                                };
                                                writer.onerror = function() {
                                                    var error = writer.error;
                                                    error.code !== error.ABORT_ERR && fs_error();
                                                };
                                                "writestart progress write abort".split(" ").forEach(function(event) {
                                                    writer["on" + event] = filesaver["on" + event];
                                                });
                                                writer.write(blob);
                                                filesaver.abort = function() {
                                                    writer.abort();
                                                    filesaver.readyState = filesaver.DONE;
                                                };
                                                filesaver.readyState = filesaver.WRITING;
                                            }), fs_error);
                                        }), fs_error);
                                    };
                                    dir.getFile(name, {
                                        create: !1
                                    }, abortable(function(file) {
                                        // delete file if it already exists
                                        file.remove();
                                        save();
                                    }), abortable(function(ex) {
                                        ex.code === ex.NOT_FOUND_ERR ? save() : fs_error();
                                    }));
                                }), fs_error);
                            }), fs_error);
                        } else fs_error();
                    }
                }, FS_proto = FileSaver.prototype, saveAs = function(blob, name, no_auto_bom) {
                    return new FileSaver(blob, name, no_auto_bom);
                };
                // IE 10+ (native saveAs)
                if ("undefined" != typeof navigator && navigator.msSaveOrOpenBlob) return function(blob, name, no_auto_bom) {
                    no_auto_bom || (blob = auto_bom(blob));
                    return navigator.msSaveOrOpenBlob(blob, name || "download");
                };
                FS_proto.abort = function() {
                    var filesaver = this;
                    filesaver.readyState = filesaver.DONE;
                    dispatch(filesaver, "abort");
                };
                FS_proto.readyState = FS_proto.INIT = 0;
                FS_proto.WRITING = 1;
                FS_proto.DONE = 2;
                FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;
                return saveAs;
            }
        }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content);
        // `self` is undefined in Firefox for Android content script context
        // while `this` is nsIContentFrameMessageManager
        // with an attribute `content` that corresponds to the window
        void 0 !== module && module.exports ? module.exports.saveAs = saveAs : "undefined" != typeof define && null !== define && null != define.amd && define([], function() {
            return saveAs;
        });
    }, {} ],
    3: [ function(require, module, exports) {
        "use strict";
        module.exports = "ngFileSaver";
        /*
*
* A AngularJS module that implements the HTML5 W3C saveAs() in browsers that
* do not natively support it
*
* (c) 2015 Philipp Alferov
* License: MIT
*
*/
        angular.module("ngFileSaver", []).factory("FileSaver", [ "Blob", "SaveAs", "FileSaverUtils", require("./angular-file-saver.service") ]).factory("FileSaverUtils", [ require("./utils/utils.service.js") ]).factory("Blob", [ "$window", require("./dependencies/blob-bundle.service.js") ]).factory("SaveAs", [ require("./dependencies/file-saver-bundle.service.js") ]);
    }, {
        "./angular-file-saver.service": 4,
        "./dependencies/blob-bundle.service.js": 5,
        "./dependencies/file-saver-bundle.service.js": 6,
        "./utils/utils.service.js": 7
    } ],
    4: [ function(require, module, exports) {
        "use strict";
        module.exports = function(Blob, SaveAs, FileSaverUtils) {
            function save(blob, filename, disableAutoBOM) {
                try {
                    SaveAs(blob, filename, disableAutoBOM);
                } catch (err) {
                    FileSaverUtils.handleErrors(err.message);
                }
            }
            return {
                /**
    * saveAs
    * Immediately starts saving a file, returns undefined.
    *
    * @name saveAs
    * @function
    * @param {Blob} data A Blob instance
    * @param {Object} filename Custom filename (extension is optional)
    * @param {Boolean} disableAutoBOM Disable automatically provided Unicode
    * text encoding hints
    *
    * @return {Undefined}
    */
                saveAs: function(data, filename, disableAutoBOM) {
                    FileSaverUtils.isBlobInstance(data) || FileSaverUtils.handleErrors("Data argument should be a blob instance");
                    FileSaverUtils.isString(filename) || FileSaverUtils.handleErrors("Filename argument should be a string");
                    return save(data, filename, disableAutoBOM);
                }
            };
        };
    }, {} ],
    5: [ function(require, module, exports) {
        "use strict";
        require("Blob.js");
        module.exports = function($window) {
            return $window.Blob;
        };
    }, {
        "Blob.js": 1
    } ],
    6: [ function(require, module, exports) {
        "use strict";
        module.exports = function() {
            return require("FileSaver.js").saveAs || function() {};
        };
    }, {
        "FileSaver.js": 2
    } ],
    7: [ function(require, module, exports) {
        "use strict";
        module.exports = function() {
            return {
                handleErrors: function(msg) {
                    throw new Error(msg);
                },
                isString: function(obj) {
                    return "string" == typeof obj || obj instanceof String;
                },
                isUndefined: function(obj) {
                    return void 0 === obj;
                },
                isBlobInstance: function(obj) {
                    return obj instanceof Blob;
                }
            };
        };
    }, {} ]
}, {}, [ 3 ]);

/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.0.9
 */
!function(window, angular, undefined) {
    "use strict";
    !function() {
        angular.module("ngMaterial", [ "ng", "ngAnimate", "ngAria", "material.core", "material.core.gestures", "material.core.layout", "material.core.theming.palette", "material.core.theming", "material.core.animate", "material.components.autocomplete", "material.components.backdrop", "material.components.bottomSheet", "material.components.button", "material.components.card", "material.components.checkbox", "material.components.chips", "material.components.content", "material.components.datepicker", "material.components.dialog", "material.components.divider", "material.components.fabActions", "material.components.fabShared", "material.components.fabSpeedDial", "material.components.fabToolbar", "material.components.fabTrigger", "material.components.gridList", "material.components.icon", "material.components.input", "material.components.list", "material.components.menu", "material.components.menuBar", "material.components.panel", "material.components.progressCircular", "material.components.progressLinear", "material.components.radioButton", "material.components.select", "material.components.showHide", "material.components.sidenav", "material.components.slider", "material.components.sticky", "material.components.subheader", "material.components.swipe", "material.components.switch", "material.components.toast", "material.components.tabs", "material.components.toolbar", "material.components.tooltip", "material.components.virtualRepeat", "material.components.whiteframe" ]);
    }();
    !function() {
        /**
 * Detect if the ng-Touch module is also being used.
 * Warn if detected.
 * @ngInject
 */
        function DetectNgTouch($log, $injector) {
            if ($injector.has("$swipe")) {
                $log.warn("You are using the ngTouch module. \nAngular Material already has mobile click, tap, and swipe support... \nngTouch is not supported with Angular Material!");
            }
        }
        /**
 * @ngInject
 */
        function MdCoreConfigure($provide, $mdThemingProvider) {
            $provide.decorator("$$rAF", [ "$delegate", rAFDecorator ]);
            $mdThemingProvider.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("deep-orange").backgroundPalette("grey");
        }
        /**
 * @ngInject
 */
        function rAFDecorator($delegate) {
            /**
   * Use this to throttle events that come in often.
   * The throttled function will always use the *last* invocation before the
   * coming frame.
   *
   * For example, window resize events that fire many times a second:
   * If we set to use an raf-throttled callback on window resize, then
   * our callback will only be fired once per frame, with the last resize
   * event that happened before that frame.
   *
   * @param {function} callback function to debounce
   */
            $delegate.throttle = function(cb) {
                var queuedArgs, alreadyQueued, queueCb, context;
                return function() {
                    queuedArgs = arguments;
                    context = this;
                    queueCb = cb;
                    if (!alreadyQueued) {
                        alreadyQueued = !0;
                        $delegate(function() {
                            queueCb.apply(context, Array.prototype.slice.call(queuedArgs));
                            alreadyQueued = !1;
                        });
                    }
                };
            };
            return $delegate;
        }
        /**
 * Initialization function that validates environment
 * requirements.
 */
        angular.module("material.core", [ "ngAnimate", "material.core.animate", "material.core.layout", "material.core.gestures", "material.core.theming" ]).config(MdCoreConfigure).run(DetectNgTouch);
        DetectNgTouch.$inject = [ "$log", "$injector" ];
        MdCoreConfigure.$inject = [ "$provide", "$mdThemingProvider" ];
        rAFDecorator.$inject = [ "$delegate" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdAutofocus
 * @module material.core.util
 *
 * @description
 *
 * `[md-autofocus]` provides an optional way to identify the focused element when a `$mdDialog`,
 * `$mdBottomSheet`, or `$mdSidenav` opens or upon page load for input-like elements.
 *
 * When one of these opens, it will find the first nested element with the `[md-autofocus]`
 * attribute directive and optional expression. An expression may be specified as the directive
 * value to enable conditional activation of the autofocus.
 *
 * @usage
 *
 * ### Dialog
 * <hljs lang="html">
 * <md-dialog>
 *   <form>
 *     <md-input-container>
 *       <label for="testInput">Label</label>
 *       <input id="testInput" type="text" md-autofocus>
 *     </md-input-container>
 *   </form>
 * </md-dialog>
 * </hljs>
 *
 * ### Bottomsheet
 * <hljs lang="html">
 * <md-bottom-sheet class="md-list md-has-header">
 *  <md-subheader>Comment Actions</md-subheader>
 *  <md-list>
 *    <md-list-item ng-repeat="item in items">
 *
 *      <md-button md-autofocus="$index == 2">
 *        <md-icon md-svg-src="{{item.icon}}"></md-icon>
 *        <span class="md-inline-list-icon-label">{{ item.name }}</span>
 *      </md-button>
 *
 *    </md-list-item>
 *  </md-list>
 * </md-bottom-sheet>
 * </hljs>
 *
 * ### Autocomplete
 * <hljs lang="html">
 *   <md-autocomplete
 *       md-autofocus
 *       md-selected-item="selectedItem"
 *       md-search-text="searchText"
 *       md-items="item in getMatches(searchText)"
 *       md-item-text="item.display">
 *     <span md-highlight-text="searchText">{{item.display}}</span>
 *   </md-autocomplete>
 * </hljs>
 *
 * ### Sidenav
 * <hljs lang="html">
 * <div layout="row" ng-controller="MyController">
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">
 *     Left Nav!
 *   </md-sidenav>
 *
 *   <md-content>
 *     Center Content
 *     <md-button ng-click="openLeftMenu()">
 *       Open Left Menu
 *     </md-button>
 *   </md-content>
 *
 *   <md-sidenav md-component-id="right"
 *     md-is-locked-open="$mdMedia('min-width: 333px')"
 *     class="md-sidenav-right">
 *     <form>
 *       <md-input-container>
 *         <label for="testInput">Test input</label>
 *         <input id="testInput" type="text"
 *                ng-model="data" md-autofocus>
 *       </md-input-container>
 *     </form>
 *   </md-sidenav>
 * </div>
 * </hljs>
 **/
        function MdAutofocusDirective() {
            return {
                restrict: "A",
                link: postLink
            };
        }
        function postLink(scope, element, attrs) {
            var attr = attrs.mdAutoFocus || attrs.mdAutofocus || attrs.mdSidenavFocus;
            // Setup a watcher on the proper attribute to update a class we can check for in $mdUtil
            scope.$watch(attr, function(canAutofocus) {
                element.toggleClass("md-autofocus", canAutofocus);
            });
        }
        angular.module("material.core").directive("mdAutofocus", MdAutofocusDirective).directive("mdAutoFocus", MdAutofocusDirective).directive("mdSidenavFocus", MdAutofocusDirective);
    }();
    !function() {
        /**
 * Factory function that creates the grab-bag $mdConstant service.
 * @ngInject
 */
        function MdConstantFactory($sniffer) {
            function vendorProperty(name) {
                return webkit ? "webkit" + name.charAt(0).toUpperCase() + name.substring(1) : name;
            }
            var webkit = /webkit/i.test($sniffer.vendorPrefix);
            return {
                KEY_CODE: {
                    COMMA: 188,
                    SEMICOLON: 186,
                    ENTER: 13,
                    ESCAPE: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT_ARROW: 37,
                    UP_ARROW: 38,
                    RIGHT_ARROW: 39,
                    DOWN_ARROW: 40,
                    TAB: 9,
                    BACKSPACE: 8,
                    DELETE: 46
                },
                CSS: {
                    /* Constants */
                    TRANSITIONEND: "transitionend" + (webkit ? " webkitTransitionEnd" : ""),
                    ANIMATIONEND: "animationend" + (webkit ? " webkitAnimationEnd" : ""),
                    TRANSFORM: vendorProperty("transform"),
                    TRANSFORM_ORIGIN: vendorProperty("transformOrigin"),
                    TRANSITION: vendorProperty("transition"),
                    TRANSITION_DURATION: vendorProperty("transitionDuration"),
                    ANIMATION_PLAY_STATE: vendorProperty("animationPlayState"),
                    ANIMATION_DURATION: vendorProperty("animationDuration"),
                    ANIMATION_NAME: vendorProperty("animationName"),
                    ANIMATION_TIMING: vendorProperty("animationTimingFunction"),
                    ANIMATION_DIRECTION: vendorProperty("animationDirection")
                },
                /**
     * As defined in core/style/variables.scss
     *
     * $layout-breakpoint-xs:     600px !default;
     * $layout-breakpoint-sm:     960px !default;
     * $layout-breakpoint-md:     1280px !default;
     * $layout-breakpoint-lg:     1920px !default;
     *
     */
                MEDIA: {
                    xs: "(max-width: 599px)",
                    "gt-xs": "(min-width: 600px)",
                    sm: "(min-width: 600px) and (max-width: 959px)",
                    "gt-sm": "(min-width: 960px)",
                    md: "(min-width: 960px) and (max-width: 1279px)",
                    "gt-md": "(min-width: 1280px)",
                    lg: "(min-width: 1280px) and (max-width: 1919px)",
                    "gt-lg": "(min-width: 1920px)",
                    xl: "(min-width: 1920px)",
                    print: "print"
                },
                MEDIA_PRIORITY: [ "xl", "gt-lg", "lg", "gt-md", "md", "gt-sm", "sm", "gt-xs", "xs", "print" ]
            };
        }
        angular.module("material.core").factory("$mdConstant", MdConstantFactory);
        MdConstantFactory.$inject = [ "$sniffer" ];
    }();
    !function() {
        /**
   * iterator is a list facade to easily support iteration and accessors
   *
   * @param items Array list which this iterator will enumerate
   * @param reloop Boolean enables iterator to consider the list as an endless reloop
   */
        function MdIterator(items, reloop) {
            /**
     * Publish copy of the enumerable set
     * @returns {Array|*}
     */
            function getItems() {
                return [].concat(_items);
            }
            /**
     * Determine length of the list
     * @returns {Array.length|*|number}
     */
            function count() {
                return _items.length;
            }
            /**
     * Is the index specified valid
     * @param index
     * @returns {Array.length|*|number|boolean}
     */
            function inRange(index) {
                return _items.length && index > -1 && index < _items.length;
            }
            /**
     * Can the iterator proceed to the next item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
            function hasNext(item) {
                return !!item && inRange(indexOf(item) + 1);
            }
            /**
     * Can the iterator proceed to the previous item in the list; relative to
     * the specified item.
     *
     * @param item
     * @returns {Array.length|*|number|boolean}
     */
            function hasPrevious(item) {
                return !!item && inRange(indexOf(item) - 1);
            }
            /**
     * Get item at specified index/position
     * @param index
     * @returns {*}
     */
            function itemAt(index) {
                return inRange(index) ? _items[index] : null;
            }
            /**
     * Find all elements matching the key/value pair
     * otherwise return null
     *
     * @param val
     * @param key
     *
     * @return array
     */
            function findBy(key, val) {
                return _items.filter(function(item) {
                    return item[key] === val;
                });
            }
            /**
     * Add item to list
     * @param item
     * @param index
     * @returns {*}
     */
            function add(item, index) {
                if (!item) return -1;
                angular.isNumber(index) || (index = _items.length);
                _items.splice(index, 0, item);
                return indexOf(item);
            }
            /**
     * Remove item from list...
     * @param item
     */
            function remove(item) {
                contains(item) && _items.splice(indexOf(item), 1);
            }
            /**
     * Get the zero-based index of the target item
     * @param item
     * @returns {*}
     */
            function indexOf(item) {
                return _items.indexOf(item);
            }
            /**
     * Boolean existence check
     * @param item
     * @returns {boolean}
     */
            function contains(item) {
                return item && indexOf(item) > -1;
            }
            /**
     * Return first item in the list
     * @returns {*}
     */
            function first() {
                return _items.length ? _items[0] : null;
            }
            /**
     * Return last item in the list...
     * @returns {*}
     */
            function last() {
                return _items.length ? _items[_items.length - 1] : null;
            }
            /**
     * Find the next item. If reloop is true and at the end of the list, it will go back to the
     * first item. If given, the `validate` callback will be used to determine whether the next item
     * is valid. If not valid, it will try to find the next item again.
     *
     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)
     * @param {*} item The item whose subsequent item we are looking for
     * @param {Function=} validate The `validate` function
     * @param {integer=} limit The recursion limit
     *
     * @returns {*} The subsequent item or null
     */
            function findSubsequentItem(backwards, item, validate, limit) {
                validate = validate || trueFn;
                for (var curIndex = indexOf(item); ;) {
                    if (!inRange(curIndex)) return null;
                    var nextIndex = curIndex + (backwards ? -1 : 1), foundItem = null;
                    if (inRange(nextIndex)) foundItem = _items[nextIndex]; else if (reloop) {
                        foundItem = backwards ? last() : first();
                        nextIndex = indexOf(foundItem);
                    }
                    if (null === foundItem || nextIndex === limit) return null;
                    if (validate(foundItem)) return foundItem;
                    angular.isUndefined(limit) && (limit = nextIndex);
                    curIndex = nextIndex;
                }
            }
            var trueFn = function() {
                return !0;
            };
            items && !angular.isArray(items) && (items = Array.prototype.slice.call(items));
            reloop = !!reloop;
            var _items = items || [];
            // Published API
            return {
                items: getItems,
                count: count,
                inRange: inRange,
                contains: contains,
                indexOf: indexOf,
                itemAt: itemAt,
                findBy: findBy,
                add: add,
                remove: remove,
                first: first,
                last: last,
                next: angular.bind(null, findSubsequentItem, !1),
                previous: angular.bind(null, findSubsequentItem, !0),
                hasPrevious: hasPrevious,
                hasNext: hasNext
            };
        }
        angular.module("material.core").config([ "$provide", function($provide) {
            $provide.decorator("$mdUtil", [ "$delegate", function($delegate) {
                /**
            * Inject the iterator facade to easily support iteration and accessors
            * @see iterator below
            */
                $delegate.iterator = MdIterator;
                return $delegate;
            } ]);
        } ]);
    }();
    !function() {
        /**
 * @ngdoc service
 * @name $mdMedia
 * @module material.core
 *
 * @description
 * `$mdMedia` is used to evaluate whether a given media query is true or false given the
 * current device's screen / window size. The media query will be re-evaluated on resize, allowing
 * you to register a watch.
 *
 * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints:
 *
 *  <table class="md-api-table">
 *    <thead>
 *    <tr>
 *      <th>Breakpoint</th>
 *      <th>mediaQuery</th>
 *    </tr>
 *    </thead>
 *    <tbody>
 *    <tr>
 *      <td>xs</td>
 *      <td>(max-width: 599px)</td>
 *    </tr>
 *    <tr>
 *      <td>gt-xs</td>
 *      <td>(min-width: 600px)</td>
 *    </tr>
 *    <tr>
 *      <td>sm</td>
 *      <td>(min-width: 600px) and (max-width: 959px)</td>
 *    </tr>
 *    <tr>
 *      <td>gt-sm</td>
 *      <td>(min-width: 960px)</td>
 *    </tr>
 *    <tr>
 *      <td>md</td>
 *      <td>(min-width: 960px) and (max-width: 1279px)</td>
 *    </tr>
 *    <tr>
 *      <td>gt-md</td>
 *      <td>(min-width: 1280px)</td>
 *    </tr>
 *    <tr>
 *      <td>lg</td>
 *      <td>(min-width: 1280px) and (max-width: 1919px)</td>
 *    </tr>
 *    <tr>
 *      <td>gt-lg</td>
 *      <td>(min-width: 1920px)</td>
 *    </tr>
 *    <tr>
 *      <td>xl</td>
 *      <td>(min-width: 1920px)</td>
 *    </tr>
 *    <tr>
 *      <td>print</td>
 *      <td>print</td>
 *    </tr>
 *    </tbody>
 *  </table>
 *
 *  See Material Design's <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">Layout - Adaptive UI</a> for more details.
 *
 *  <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">
 *  <img src="https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B8olV15J7abPSGFxemFiQVRtb1k/layout_adaptive_breakpoints_01.png" width="100%" height="100%"></img>
 *  </a>
 *
 * @returns {boolean} a boolean representing whether or not the given media query is true or false.
 *
 * @usage
 * <hljs lang="js">
 * app.controller('MyController', function($mdMedia, $scope) {
 *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {
 *     $scope.bigScreen = big;
 *   });
 *
 *   $scope.screenIsSmall = $mdMedia('sm');
 *   $scope.customQuery = $mdMedia('(min-width: 1234px)');
 *   $scope.anotherCustom = $mdMedia('max-width: 300px');
 * });
 * </hljs>
 * @ngInject
 */
        function mdMediaFactory($mdConstant, $rootScope, $window) {
            function $mdMedia(query) {
                var validated = queries[query];
                angular.isUndefined(validated) && (validated = queries[query] = validate(query));
                var result = results[validated];
                angular.isUndefined(result) && (result = add(validated));
                return result;
            }
            function validate(query) {
                return $mdConstant.MEDIA[query] || ("(" !== query.charAt(0) ? "(" + query + ")" : query);
            }
            function add(query) {
                var result = mqls[query];
                result || (result = mqls[query] = $window.matchMedia(query));
                result.addListener(onQueryChange);
                return results[result.media] = !!result.matches;
            }
            function onQueryChange(query) {
                $rootScope.$evalAsync(function() {
                    results[query.media] = !!query.matches;
                });
            }
            function getQuery(name) {
                return mqls[name];
            }
            function getResponsiveAttribute(attrs, attrName) {
                for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
                    var mediaName = $mdConstant.MEDIA_PRIORITY[i];
                    if (mqls[queries[mediaName]].matches) {
                        var normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        if (attrs[normalizedName]) return attrs[normalizedName];
                    }
                }
                // fallback on unprefixed
                return attrs[getNormalizedName(attrs, attrName)];
            }
            function watchResponsiveAttributes(attrNames, attrs, watchFn) {
                var unwatchFns = [];
                attrNames.forEach(function(attrName) {
                    var normalizedName = getNormalizedName(attrs, attrName);
                    angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
                    for (var mediaName in $mdConstant.MEDIA) {
                        normalizedName = getNormalizedName(attrs, attrName + "-" + mediaName);
                        angular.isDefined(attrs[normalizedName]) && unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
                    }
                });
                return function() {
                    unwatchFns.forEach(function(fn) {
                        fn();
                    });
                };
            }
            // Improves performance dramatically
            function getNormalizedName(attrs, attrName) {
                return normalizeCache[attrName] || (normalizeCache[attrName] = attrs.$normalize(attrName));
            }
            var queries = {}, mqls = {}, results = {}, normalizeCache = {};
            $mdMedia.getResponsiveAttribute = getResponsiveAttribute;
            $mdMedia.getQuery = getQuery;
            $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;
            return $mdMedia;
        }
        angular.module("material.core").factory("$mdMedia", mdMediaFactory);
        mdMediaFactory.$inject = [ "$mdConstant", "$rootScope", "$window" ];
    }();
    !function() {
        /**
 * @ngInject
 */
        function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log, $rootElement, $window) {
            function getNode(el) {
                return el[0] || el;
            }
            // Setup some core variables for the processTemplate method
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), usesStandardSymbols = "{{" === startSymbol && "}}" === endSymbol, hasComputedStyle = function(target, key, expectedVal) {
                var hasValue = !1;
                if (target && target.length) {
                    var computedStyles = $window.getComputedStyle(target[0]);
                    hasValue = angular.isDefined(computedStyles[key]) && (!expectedVal || computedStyles[key] == expectedVal);
                }
                return hasValue;
            }, $mdUtil = {
                dom: {},
                now: window.performance ? angular.bind(window.performance, window.performance.now) : Date.now || function() {
                    return new Date().getTime();
                },
                clientRect: function(element, offsetParent, isOffsetRect) {
                    var node = getNode(element);
                    offsetParent = getNode(offsetParent || node.offsetParent || document.body);
                    var nodeRect = node.getBoundingClientRect(), offsetRect = isOffsetRect ? offsetParent.getBoundingClientRect() : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                    return {
                        left: nodeRect.left - offsetRect.left,
                        top: nodeRect.top - offsetRect.top,
                        width: nodeRect.width,
                        height: nodeRect.height
                    };
                },
                offsetRect: function(element, offsetParent) {
                    return $mdUtil.clientRect(element, offsetParent, !0);
                },
                // Annoying method to copy nodes to an array, thanks to IE
                nodesToArray: function(nodes) {
                    nodes = nodes || [];
                    for (var results = [], i = 0; i < nodes.length; ++i) results.push(nodes.item(i));
                    return results;
                },
                /**
     * Calculate the positive scroll offset
     * TODO: Check with pinch-zoom in IE/Chrome;
     *       https://code.google.com/p/chromium/issues/detail?id=496285
     */
                scrollTop: function(element) {
                    element = angular.element(element || $document[0].body);
                    var body = element[0] == $document[0].body ? $document[0].body : undefined;
                    // Calculate the positive scroll offset
                    return (body ? body.scrollTop + body.parentElement.scrollTop : 0) || Math.abs(element[0].getBoundingClientRect().top);
                },
                /**
     * Finds the proper focus target by searching the DOM.
     *
     * @param containerEl
     * @param attributeVal
     * @returns {*}
     */
                findFocusTarget: function(containerEl, attributeVal) {
                    /**
       * Can target and nested children for specified Selector (attribute)
       * whose value may be an expression that evaluates to True/False.
       */
                    function scanForFocusable(target, selector) {
                        var elFound, items = target[0].querySelectorAll(selector);
                        // Find the last child element with the focus attribute
                        items && items.length && items.length && angular.forEach(items, function(it) {
                            it = angular.element(it);
                            it.hasClass("md-autofocus") && (elFound = it);
                        });
                        return elFound;
                    }
                    var elToFocus;
                    elToFocus = scanForFocusable(containerEl, attributeVal || "[md-autofocus]");
                    if (!elToFocus && "[md-autofocus]" != attributeVal) {
                        // Scan for deprecated attribute
                        elToFocus = scanForFocusable(containerEl, "[md-auto-focus]");
                        elToFocus || (// Scan for fallback to 'universal' API
                        elToFocus = scanForFocusable(containerEl, "[md-autofocus]"));
                    }
                    return elToFocus;
                },
                /**
     * Disables scroll around the passed parent element.
     * @param element Unused
     * @param {!Element|!angular.JQLite} parent Element to disable scrolling within.
     *   Defaults to body if none supplied.
     */
                disableScrollAround: function(element, parent) {
                    function applyStyles(el, styles) {
                        for (var key in styles) el.style[key] = styles[key];
                    }
                    $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;
                    ++$mdUtil.disableScrollAround._count;
                    if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;
                    var body = $document[0].body, restoreBody = // Converts the body to a position fixed block and translate it to the proper scroll
                    // position
                    function() {
                        var htmlNode = body.parentNode, restoreHtmlStyle = htmlNode.style.cssText || "", restoreBodyStyle = body.style.cssText || "", scrollOffset = $mdUtil.scrollTop(body), clientWidth = body.clientWidth;
                        if (body.scrollHeight > body.clientHeight + 1) {
                            applyStyles(body, {
                                position: "fixed",
                                width: "100%",
                                top: -scrollOffset + "px"
                            });
                            applyStyles(htmlNode, {
                                overflowY: "scroll"
                            });
                        }
                        body.clientWidth < clientWidth && applyStyles(body, {
                            overflow: "hidden"
                        });
                        return function() {
                            body.style.cssText = restoreBodyStyle;
                            htmlNode.style.cssText = restoreHtmlStyle;
                            body.scrollTop = scrollOffset;
                            htmlNode.scrollTop = scrollOffset;
                        };
                    }(), restoreElement = // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events
                    function(element) {
                        function preventDefault(e) {
                            e.preventDefault();
                        }
                        element = angular.element(element || body)[0];
                        var scrollMask = angular.element('<div class="md-scroll-mask">  <div class="md-scroll-mask-bar"></div></div>').css("z-index", 50);
                        element.appendChild(scrollMask[0]);
                        scrollMask.on("wheel", preventDefault);
                        scrollMask.on("touchmove", preventDefault);
                        return function() {
                            scrollMask.off("wheel");
                            scrollMask.off("touchmove");
                            scrollMask[0].parentNode.removeChild(scrollMask[0]);
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        };
                    }(parent);
                    return $mdUtil.disableScrollAround._enableScrolling = function() {
                        if (!--$mdUtil.disableScrollAround._count) {
                            restoreBody();
                            restoreElement();
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        }
                    };
                },
                enableScrolling: function() {
                    var method = this.disableScrollAround._enableScrolling;
                    method && method();
                },
                floatingScrollbars: function() {
                    if (this.floatingScrollbars.cached === undefined) {
                        var tempNode = angular.element("<div><div></div></div>").css({
                            width: "100%",
                            "z-index": -1,
                            position: "absolute",
                            height: "35px",
                            "overflow-y": "scroll"
                        });
                        tempNode.children().css("height", "60px");
                        $document[0].body.appendChild(tempNode[0]);
                        this.floatingScrollbars.cached = tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth;
                        tempNode.remove();
                    }
                    return this.floatingScrollbars.cached;
                },
                // Mobile safari only allows you to set focus in click event listeners...
                forceFocus: function(element) {
                    var node = element[0] || element;
                    document.addEventListener("click", function focusOnClick(ev) {
                        if (ev.target === node && ev.$focus) {
                            node.focus();
                            ev.stopImmediatePropagation();
                            ev.preventDefault();
                            node.removeEventListener("click", focusOnClick);
                        }
                    }, !0);
                    var newEvent = document.createEvent("MouseEvents");
                    newEvent.initMouseEvent("click", !1, !0, window, {}, 0, 0, 0, 0, !1, !1, !1, !1, 0, null);
                    newEvent.$material = !0;
                    newEvent.$focus = !0;
                    node.dispatchEvent(newEvent);
                },
                /**
     * facade to build md-backdrop element with desired styles
     * NOTE: Use $compile to trigger backdrop postLink function
     */
                createBackdrop: function(scope, addClass) {
                    return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [ addClass ]))(scope);
                },
                /**
     * supplant() method from Crockford's `Remedial Javascript`
     * Equivalent to use of $interpolate; without dependency on
     * interpolation symbols and scope. Note: the '{<token>}' can
     * be property names, property chains, or array indices.
     */
                supplant: function(template, values, pattern) {
                    pattern = pattern || /\{([^\{\}]*)\}/g;
                    return template.replace(pattern, function(a, b) {
                        var p = b.split("."), r = values;
                        try {
                            for (var s in p) p.hasOwnProperty(s) && (r = r[p[s]]);
                        } catch (e) {
                            r = a;
                        }
                        return "string" == typeof r || "number" == typeof r ? r : a;
                    });
                },
                fakeNgModel: function() {
                    return {
                        $fake: !0,
                        $setTouched: angular.noop,
                        $setViewValue: function(value) {
                            this.$viewValue = value;
                            this.$render(value);
                            this.$viewChangeListeners.forEach(function(cb) {
                                cb();
                            });
                        },
                        $isEmpty: function(value) {
                            return 0 === ("" + value).length;
                        },
                        $parsers: [],
                        $formatters: [],
                        $viewChangeListeners: [],
                        $render: angular.noop
                    };
                },
                // Returns a function, that, as long as it continues to be invoked, will not
                // be triggered. The function will be called after it stops being called for
                // N milliseconds.
                // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs
                // @param invokeApply should the $timeout trigger $digest() dirty checking
                debounce: function(func, wait, scope, invokeApply) {
                    var timer;
                    return function() {
                        var context = scope, args = Array.prototype.slice.call(arguments);
                        $timeout.cancel(timer);
                        timer = $timeout(function() {
                            timer = undefined;
                            func.apply(context, args);
                        }, wait || 10, invokeApply);
                    };
                },
                // Returns a function that can only be triggered every `delay` milliseconds.
                // In other words, the function will not be called unless it has been more
                // than `delay` milliseconds since the last call.
                throttle: function(func, delay) {
                    var recent;
                    return function() {
                        var context = this, args = arguments, now = $mdUtil.now();
                        if (!recent || now - recent > delay) {
                            func.apply(context, args);
                            recent = now;
                        }
                    };
                },
                /**
     * Measures the number of milliseconds taken to run the provided callback
     * function. Uses a high-precision timer if available.
     */
                time: function(cb) {
                    var start = $mdUtil.now();
                    cb();
                    return $mdUtil.now() - start;
                },
                /**
     * Create an implicit getter that caches its `getter()`
     * lookup value
     */
                valueOnUse: function(scope, key, getter) {
                    var value = null, args = Array.prototype.slice.call(arguments), params = args.length > 3 ? args.slice(3) : [];
                    Object.defineProperty(scope, key, {
                        get: function() {
                            null === value && (value = getter.apply(scope, params));
                            return value;
                        }
                    });
                },
                /**
     * Get a unique ID.
     *
     * @returns {string} an unique numeric string
     */
                nextUid: function() {
                    return "" + nextUniqueId++;
                },
                // Stop watchers and events from firing on a scope without destroying it,
                // by disconnecting it from its parent and its siblings' linked lists.
                disconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && !scope.$$destroyed) {
                        var parent = scope.$parent;
                        scope.$$disconnected = !0;
                        // See Scope.$destroy
                        parent.$$childHead === scope && (parent.$$childHead = scope.$$nextSibling);
                        parent.$$childTail === scope && (parent.$$childTail = scope.$$prevSibling);
                        scope.$$prevSibling && (scope.$$prevSibling.$$nextSibling = scope.$$nextSibling);
                        scope.$$nextSibling && (scope.$$nextSibling.$$prevSibling = scope.$$prevSibling);
                        scope.$$nextSibling = scope.$$prevSibling = null;
                    }
                },
                // Undo the effects of disconnectScope above.
                reconnectScope: function(scope) {
                    if (scope && scope.$root !== scope && scope.$$disconnected) {
                        var child = scope, parent = child.$parent;
                        child.$$disconnected = !1;
                        // See Scope.$new for this logic...
                        child.$$prevSibling = parent.$$childTail;
                        if (parent.$$childHead) {
                            parent.$$childTail.$$nextSibling = child;
                            parent.$$childTail = child;
                        } else parent.$$childHead = parent.$$childTail = child;
                    }
                },
                /*
     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName
     *
     * @param el Element to start walking the DOM from
     * @param tagName Tag name to find closest to el, such as 'form'
     * @param onlyParent Only start checking from the parent element, not `el`.
     */
                getClosest: function(el, tagName, onlyParent) {
                    el instanceof angular.element && (el = el[0]);
                    tagName = tagName.toUpperCase();
                    onlyParent && (el = el.parentNode);
                    if (!el) return null;
                    do {
                        if (el.nodeName === tagName) return el;
                    } while (el = el.parentNode);
                    return null;
                },
                /**
     * Build polyfill for the Node.contains feature (if needed)
     */
                elementContains: function(node, child) {
                    return (window.Node && window.Node.prototype && Node.prototype.contains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {
                        // compares the positions of two nodes and returns a bitmask
                        return node === child || !!(16 & this.compareDocumentPosition(arg));
                    }))(child);
                },
                /**
     * Functional equivalent for $element.filter(‘md-bottom-sheet’)
     * useful with interimElements where the element and its container are important...
     *
     * @param {[]} elements to scan
     * @param {string} name of node to find (e.g. 'md-dialog')
     * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.
     * @param {boolean=} optional flag to enable log warnings; defaults to false
     */
                extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {
                    /**
       * Breadth-First tree scan for element with matching `nodeName`
       */
                    function scanTree(element) {
                        return scanLevel(element) || (scanDeep ? scanChildren(element) : null);
                    }
                    /**
       * Case-insensitive scan of current elements only (do not descend).
       */
                    function scanLevel(element) {
                        if (element) for (var i = 0, len = element.length; i < len; i++) if (element[i].nodeName.toLowerCase() === nodeName) return element[i];
                        return null;
                    }
                    /**
       * Scan children of specified node
       */
                    function scanChildren(element) {
                        var found;
                        if (element) for (var i = 0, len = element.length; i < len; i++) {
                            var target = element[i];
                            if (!found) for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) found = found || scanTree([ target.childNodes[j] ]);
                        }
                        return found;
                    }
                    var found = scanTree(element);
                    !found && warnNotFound && $log.warn($mdUtil.supplant("Unable to find node '{0}' in element '{1}'.", [ nodeName, element[0].outerHTML ]));
                    return angular.element(found || element);
                },
                /**
     * Give optional properties with no value a boolean true if attr provided or false otherwise
     */
                initOptionalProperties: function(scope, attr, defaults) {
                    defaults = defaults || {};
                    angular.forEach(scope.$$isolateBindings, function(binding, key) {
                        if (binding.optional && angular.isUndefined(scope[key])) {
                            var attrIsDefined = angular.isDefined(attr[binding.attrName]);
                            scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;
                        }
                    });
                },
                /**
     * Alternative to $timeout calls with 0 delay.
     * nextTick() coalesces all calls within a single frame
     * to minimize $digest thrashing
     *
     * @param callback
     * @param digest
     * @returns {*}
     */
                nextTick: function(callback, digest, scope) {
                    /**
       * Grab a copy of the current queue
       * Clear the queue for future use
       * Process the existing queue
       * Trigger digest if necessary
       */
                    function processQueue() {
                        var skip = scope && scope.$$destroyed, queue = skip ? [] : nextTick.queue, digest = skip ? null : nextTick.digest;
                        nextTick.queue = [];
                        nextTick.timeout = null;
                        nextTick.digest = !1;
                        queue.forEach(function(callback) {
                            callback();
                        });
                        digest && $rootScope.$digest();
                    }
                    //-- grab function reference for storing state details
                    var nextTick = $mdUtil.nextTick, timeout = nextTick.timeout, queue = nextTick.queue || [];
                    //-- add callback to the queue
                    queue.push(callback);
                    //-- set default value for digest
                    null == digest && (digest = !0);
                    //-- store updated digest/queue values
                    nextTick.digest = nextTick.digest || digest;
                    nextTick.queue = queue;
                    //-- either return existing timeout or create a new one
                    return timeout || (nextTick.timeout = $timeout(processQueue, 0, !1));
                },
                /**
     * Processes a template and replaces the start/end symbols if the application has
     * overriden them.
     *
     * @param template The template to process whose start/end tags may be replaced.
     * @returns {*}
     */
                processTemplate: function(template) {
                    return usesStandardSymbols ? template : template && angular.isString(template) ? template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol) : template;
                },
                /**
     * Scan up dom hierarchy for enabled parent;
     */
                getParentWithPointerEvents: function(element) {
                    // jqLite might return a non-null, but still empty, parent; so check for parent and length
                    for (var parent = element.parent(); hasComputedStyle(parent, "pointer-events", "none"); ) parent = parent.parent();
                    return parent;
                },
                getNearestContentElement: function(element) {
                    // Look for the nearest parent md-content, stopping at the rootElement.
                    for (var current = element.parent()[0]; current && current !== $rootElement[0] && current !== document.body && "MD-CONTENT" !== current.nodeName.toUpperCase(); ) current = current.parentNode;
                    return current;
                },
                /**
       * Parses an attribute value, mostly a string.
       * By default checks for negated values and returns `false´ if present.
       * Negated values are: (native falsy) and negative strings like:
       * `false` or `0`.
       * @param value Attribute value which should be parsed.
       * @param negatedCheck When set to false, won't check for negated values.
       * @returns {boolean}
       */
                parseAttributeBoolean: function(value, negatedCheck) {
                    return "" === value || !!value && (!1 === negatedCheck || "false" !== value && "0" !== value);
                },
                hasComputedStyle: hasComputedStyle
            };
            // Instantiate other namespace utility methods
            $mdUtil.dom.animator = $$mdAnimate($mdUtil);
            return $mdUtil;
        }
        /*
 * This var has to be outside the angular factory, otherwise when
 * there are multiple material apps on the same page, each app
 * will create its own instance of this array and the app's IDs
 * will not be unique.
 */
        var nextUniqueId = 0;
        /**
 * @ngdoc module
 * @name material.core.util
 * @description
 * Util
 */
        angular.module("material.core").factory("$mdUtil", UtilFactory);
        UtilFactory.$inject = [ "$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log", "$rootElement", "$window" ];
        /*
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.
 */
        angular.element.prototype.focus = angular.element.prototype.focus || function() {
            this.length && this[0].focus();
            return this;
        };
        angular.element.prototype.blur = angular.element.prototype.blur || function() {
            this.length && this[0].blur();
            return this;
        };
    }();
    !function() {
        function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
            /* jshint validthis: true */
            /*
   * @ngdoc service
   * @name $mdCompiler
   * @module material.core
   * @description
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer
   * to easily compile an element with a templateUrl, controller, and locals.
   *
   * @usage
   * <hljs lang="js">
   * $mdCompiler.compile({
   *   templateUrl: 'modal.html',
   *   controller: 'ModalCtrl',
   *   locals: {
   *     modal: myModalInstance;
   *   }
   * }).then(function(compileData) {
   *   compileData.element; // modal.html's template in an element
   *   compileData.link(myScope); //attach controller & scope to element
   * });
   * </hljs>
   */
            /*
    * @ngdoc method
    * @name $mdCompiler#compile
    * @description A helper to compile an HTML template/templateUrl with a given controller,
    * locals, and scope.
    * @param {object} options An options object, with the following properties:
    *
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with
    *      newly created scope or the name of a registered controller if passed as a string.
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be
    *      published to scope under the `controllerAs` name.
    *    - `template` - `{string=}` An html template as a string.
    *    - `templateUrl` - `{string=}` A path to an html template.
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after
    *      it is loaded. It will be given the template string as a parameter, and should
    *      return a a new string representing the transformed template.
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
    *      be injected into the controller. If any of these dependencies are promises, the compiler
    *      will wait for them all to be resolved, or if one is rejected before the controller is
    *      instantiated `compile()` will fail..
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.
    *        Otherwise if function, then it is injected and the return value is treated as the
    *        dependency. If the result is a promise, it is resolved before its value is
    *        injected into the controller.
    *
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.
    * `compileData` has the following properties:
    *
    *   - `element` - `{element}`: an uncompiled element matching the provided template.
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile
    *     the element and instantiate the provided controller (if given).
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
    */
            this.compile = function(options) {
                var templateUrl = options.templateUrl, template = options.template || "", controller = options.controller, controllerAs = options.controllerAs, resolve = angular.extend({}, options.resolve || {}), locals = angular.extend({}, options.locals || {}), transformTemplate = options.transformTemplate || angular.identity, bindToController = options.bindToController;
                // Take resolve values and invoke them.
                // Resolves can either be a string (value: 'MyRegisteredAngularConst'),
                // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})
                angular.forEach(resolve, function(value, key) {
                    angular.isString(value) ? resolve[key] = $injector.get(value) : resolve[key] = $injector.invoke(value);
                });
                //Add the locals, which are just straight values to inject
                //eg locals: { three: 3 }, will inject three into the controller
                angular.extend(resolve, locals);
                resolve.$template = templateUrl ? $http.get(templateUrl, {
                    cache: $templateCache
                }).then(function(response) {
                    return response.data;
                }) : $q.when(template);
                // Wait for all the resolves to finish if they are promises
                return $q.all(resolve).then(function(locals) {
                    var compiledData, template = transformTemplate(locals.$template, options), element = options.element || angular.element("<div>").html(template.trim()).contents(), linkFn = $compile(element);
                    // Return a linking function that can be used later when the element is ready
                    return compiledData = {
                        locals: locals,
                        element: element,
                        link: function(scope) {
                            locals.$scope = scope;
                            //Instantiate controller if it exists, because we have scope
                            if (controller) {
                                var invokeCtrl = $controller(controller, locals, !0);
                                bindToController && angular.extend(invokeCtrl.instance, locals);
                                var ctrl = invokeCtrl();
                                //See angular-route source for this logic
                                element.data("$ngControllerController", ctrl);
                                element.children().data("$ngControllerController", ctrl);
                                controllerAs && (scope[controllerAs] = ctrl);
                                // Publish reference to this controller
                                compiledData.controller = ctrl;
                            }
                            return linkFn(scope);
                        }
                    };
                });
            };
        }
        angular.module("material.core").service("$mdCompiler", mdCompilerService);
        mdCompilerService.$inject = [ "$q", "$http", "$injector", "$compile", "$controller", "$templateCache" ];
    }();
    !function() {
        /*
 * @ngInject
 */
        function AriaService($$rAF, $log, $window, $interpolate) {
            /**
   * Check if expected attribute has been specified on the target element or child
   * @param element
   * @param attrName
   * @param {optional} defaultValue What to set the attr to if no value is found
   */
            function expect(element, attrName, defaultValue) {
                var node = angular.element(element)[0] || element;
                // if node exists and neither it nor its children have the attribute
                if (node && (!node.hasAttribute(attrName) || 0 === node.getAttribute(attrName).length) && !childHasAttribute(node, attrName)) {
                    defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : "";
                    defaultValue.length ? element.attr(attrName, defaultValue) : $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);
                }
            }
            function expectAsync(element, attrName, defaultValueGetter) {
                // Problem: when retrieving the element's contents synchronously to find the label,
                // the text may not be defined yet in the case of a binding.
                // There is a higher chance that a binding will be defined if we wait one frame.
                $$rAF(function() {
                    expect(element, attrName, defaultValueGetter());
                });
            }
            function expectWithText(element, attrName) {
                var content = getText(element) || "";
                content.indexOf($interpolate.startSymbol()) > -1 ? expectAsync(element, attrName, function() {
                    return getText(element);
                }) : expect(element, attrName, content);
            }
            function getText(element) {
                return (element.text() || "").trim();
            }
            function childHasAttribute(node, attrName) {
                var hasChildren = node.hasChildNodes(), hasAttr = !1;
                if (hasChildren) for (var children = node.childNodes, i = 0; i < children.length; i++) {
                    var child = children[i];
                    1 === child.nodeType && child.hasAttribute(attrName) && (function(el) {
                        return "none" === (el.currentStyle ? el.currentStyle : $window.getComputedStyle(el)).display;
                    }(child) || (hasAttr = !0));
                }
                return hasAttr;
            }
            return {
                expect: expect,
                expectAsync: expectAsync,
                expectWithText: expectWithText
            };
        }
        angular.module("material.core").service("$mdAria", AriaService);
        AriaService.$inject = [ "$$rAF", "$log", "$window", "$interpolate" ];
    }();
    !function() {
        /**
   * @ngdoc service
   * @name $mdGestureProvider
   * @module material.core.gestures
   *
   * @description
   * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.
   * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile
   * devices.
   *
   * <hljs lang="js">
   *   app.config(function($mdGestureProvider) {
   *
   *     // For mobile devices without jQuery loaded, do not
   *     // intercept click events during the capture phase.
   *     $mdGestureProvider.skipClickHijack();
   *
   *   });
   * </hljs>
   *
   */
        function MdGestureProvider() {}
        /**
 * MdGesture factory construction function
 * @ngInject
 */
        function MdGesture($$MdGestureHandler, $$rAF, $timeout) {
            function checkDistanceAndEmit(eventName) {
                return function(ev, pointer) {
                    pointer.distance < this.state.options.maxDistance && this.dispatchEvent(ev, eventName, pointer);
                };
            }
            /*
   * Register an element to listen for a handler.
   * This allows an element to override the default options for a handler.
   * Additionally, some handlers like drag and hold only dispatch events if
   * the domEvent happens inside an element that's registered to listen for these events.
   *
   * @see GestureHandler for how overriding of default options works.
   * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })
   */
            function register(element, handlerName, options) {
                var handler = HANDLERS[handlerName.replace(/^\$md./, "")];
                if (!handler) throw new Error("Failed to register element with handler " + handlerName + ". Available handlers: " + Object.keys(HANDLERS).join(", "));
                return handler.registerElement(element, options);
            }
            /*
   * add a handler to $mdGesture. see below.
   */
            function addHandler(name, definition) {
                var handler = new $$MdGestureHandler(name);
                angular.extend(handler, definition);
                HANDLERS[name] = handler;
                return self;
            }
            var userAgent = navigator.userAgent || navigator.vendor || window.opera, isIos = userAgent.match(/ipad|iphone|ipod/i), isAndroid = userAgent.match(/android/i), hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery, self = {
                handler: addHandler,
                register: register,
                // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?
                isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack
            };
            if (self.isHijackingClicks) {
                self.handler("click", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("click")
                });
                self.handler("focus", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: function(ev, pointer) {
                        if (pointer.distance < this.state.options.maxDistance && function(element) {
                            var focusableElements = [ "INPUT", "SELECT", "BUTTON", "TEXTAREA", "VIDEO", "AUDIO" ];
                            return "-1" != element.getAttribute("tabindex") && !element.hasAttribute("DISABLED") && (element.hasAttribute("tabindex") || element.hasAttribute("href") || -1 != focusableElements.indexOf(element.nodeName));
                        }(ev.target)) {
                            this.dispatchEvent(ev, "focus", pointer);
                            ev.target.focus();
                        }
                    }
                });
                self.handler("mouseup", {
                    options: {
                        maxDistance: 6
                    },
                    onEnd: checkDistanceAndEmit("mouseup")
                });
                self.handler("mousedown", {
                    onStart: function(ev) {
                        this.dispatchEvent(ev, "mousedown");
                    }
                });
            }
            /*
   * Register handlers. These listen to touch/start/move events, interpret them,
   * and dispatch gesture events depending on options & conditions. These are all
   * instances of GestureHandler.
   * @see GestureHandler 
   */
            return self.handler("press", {
                onStart: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressdown");
                },
                onEnd: function(ev, pointer) {
                    this.dispatchEvent(ev, "$md.pressup");
                }
            }).handler("hold", {
                options: {
                    maxDistance: 6,
                    delay: 500
                },
                onCancel: function() {
                    $timeout.cancel(this.state.timeout);
                },
                onStart: function(ev, pointer) {
                    // For hold, require a parent to be registered with $mdGesture.register()
                    // Because we prevent scroll events, this is necessary.
                    if (!this.state.registeredParent) return this.cancel();
                    this.state.pos = {
                        x: pointer.x,
                        y: pointer.y
                    };
                    this.state.timeout = $timeout(angular.bind(this, function() {
                        this.dispatchEvent(ev, "$md.hold");
                        this.cancel();
                    }), this.state.options.delay, !1);
                },
                onMove: function(ev, pointer) {
                    // Don't scroll while waiting for hold.
                    // If we don't preventDefault touchmove events here, Android will assume we don't
                    // want to listen to anymore touch events. It will start scrolling and stop sending
                    // touchmove events.
                    ev.preventDefault();
                    // If the user moves greater than <maxDistance> pixels, stop the hold timer
                    // set in onStart
                    var dx = this.state.pos.x - pointer.x, dy = this.state.pos.y - pointer.y;
                    Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance && this.cancel();
                },
                onEnd: function() {
                    this.onCancel();
                }
            }).handler("drag", {
                options: {
                    minDistance: 6,
                    horizontal: !0,
                    cancelMultiplier: 1.5
                },
                onStart: function(ev) {
                    // For drag, require a parent to be registered with $mdGesture.register()
                    this.state.registeredParent || this.cancel();
                },
                onMove: function(ev, pointer) {
                    var shouldStartDrag, shouldCancel;
                    // Don't scroll while deciding if this touchmove qualifies as a drag event.
                    // If we don't preventDefault touchmove events here, Android will assume we don't
                    // want to listen to anymore touch events. It will start scrolling and stop sending
                    // touchmove events.
                    ev.preventDefault();
                    if (this.state.dragPointer) this.dispatchDragMove(ev); else {
                        if (this.state.options.horizontal) {
                            shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        } else {
                            shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        }
                        if (shouldStartDrag) {
                            // Create a new pointer representing this drag, starting at this point where the drag started.
                            this.state.dragPointer = makeStartPointer(ev);
                            updatePointerState(ev, this.state.dragPointer);
                            this.dispatchEvent(ev, "$md.dragstart", this.state.dragPointer);
                        } else shouldCancel && this.cancel();
                    }
                },
                // Only dispatch dragmove events every frame; any more is unnecessray
                dispatchDragMove: $$rAF.throttle(function(ev) {
                    // Make sure the drag didn't stop while waiting for the next frame
                    if (this.state.isRunning) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.drag", this.state.dragPointer);
                    }
                }),
                onEnd: function(ev, pointer) {
                    if (this.state.dragPointer) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, "$md.dragend", this.state.dragPointer);
                    }
                }
            }).handler("swipe", {
                options: {
                    minVelocity: .65,
                    minDistance: 10
                },
                onEnd: function(ev, pointer) {
                    var eventType;
                    if (Math.abs(pointer.velocityX) > this.state.options.minVelocity && Math.abs(pointer.distanceX) > this.state.options.minDistance) {
                        eventType = "left" == pointer.directionX ? "$md.swipeleft" : "$md.swiperight";
                        this.dispatchEvent(ev, eventType);
                    } else if (Math.abs(pointer.velocityY) > this.state.options.minVelocity && Math.abs(pointer.distanceY) > this.state.options.minDistance) {
                        eventType = "up" == pointer.directionY ? "$md.swipeup" : "$md.swipedown";
                        this.dispatchEvent(ev, eventType);
                    }
                }
            });
        }
        /**
 * MdGestureHandler
 * A GestureHandler is an object which is able to dispatch custom dom events
 * based on native dom {touch,pointer,mouse}{start,move,end} events.
 *
 * A gesture will manage its lifecycle through the start,move,end, and cancel
 * functions, which are called by native dom events.
 *
 * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be
 * overridden by elements registering through $mdGesture.register()
 */
        function GestureHandler(name) {
            this.name = name;
            this.state = {};
        }
        function MdGestureHandler() {
            /*
   * Dispatch an event with jQuery
   * TODO: Make sure this sends bubbling events
   *
   * @param srcEvent the original DOM touch event that started this.
   * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
   * @param eventPointer the pointer object that matches this event.
   */
            function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj = new angular.element.Event(eventType);
                eventObj.$material = !0;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;
                angular.extend(eventObj, {
                    clientX: eventPointer.x,
                    clientY: eventPointer.y,
                    screenX: eventPointer.x,
                    screenY: eventPointer.y,
                    pageX: eventPointer.x,
                    pageY: eventPointer.y,
                    ctrlKey: srcEvent.ctrlKey,
                    altKey: srcEvent.altKey,
                    shiftKey: srcEvent.shiftKey,
                    metaKey: srcEvent.metaKey
                });
                angular.element(eventPointer.target).trigger(eventObj);
            }
            /*
   * NOTE: nativeDispatchEvent is very performance sensitive.
   * @param srcEvent the original DOM touch event that started this.
   * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
   * @param eventPointer the pointer object that matches this event.
   */
            function nativeDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj;
                if ("click" === eventType || "mouseup" == eventType || "mousedown" == eventType) {
                    eventObj = document.createEvent("MouseEvents");
                    eventObj.initMouseEvent(eventType, !0, !0, window, srcEvent.detail, eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y, srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey, srcEvent.button, srcEvent.relatedTarget || null);
                } else {
                    eventObj = document.createEvent("CustomEvent");
                    eventObj.initCustomEvent(eventType, !0, !0, {});
                }
                eventObj.$material = !0;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;
                eventPointer.target.dispatchEvent(eventObj);
            }
            var hasJQuery = void 0 !== window.jQuery && angular.element === window.jQuery;
            GestureHandler.prototype = {
                options: {},
                // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events
                // differently when jQuery is loaded
                dispatchEvent: hasJQuery ? jQueryDispatchEvent : nativeDispatchEvent,
                // These are overridden by the registered handler
                onStart: angular.noop,
                onMove: angular.noop,
                onEnd: angular.noop,
                onCancel: angular.noop,
                // onStart sets up a new state for the handler, which includes options from the
                // nearest registered parent element of ev.target.
                start: function(ev, pointer) {
                    if (!this.state.isRunning) {
                        var parentTarget = this.getNearestParent(ev.target), parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};
                        this.state = {
                            isRunning: !0,
                            // Override the default options with the nearest registered parent's options
                            options: angular.extend({}, this.options, parentTargetOptions),
                            // Pass in the registered parent node to the state so the onStart listener can use
                            registeredParent: parentTarget
                        };
                        this.onStart(ev, pointer);
                    }
                },
                move: function(ev, pointer) {
                    this.state.isRunning && this.onMove(ev, pointer);
                },
                end: function(ev, pointer) {
                    if (this.state.isRunning) {
                        this.onEnd(ev, pointer);
                        this.state.isRunning = !1;
                    }
                },
                cancel: function(ev, pointer) {
                    this.onCancel(ev, pointer);
                    this.state = {};
                },
                // Find and return the nearest parent element that has been registered to
                // listen for this handler via $mdGesture.register(element, 'handlerName').
                getNearestParent: function(node) {
                    for (var current = node; current; ) {
                        if ((current.$mdGesture || {})[this.name]) return current;
                        current = current.parentNode;
                    }
                    return null;
                },
                // Called from $mdGesture.register when an element reigsters itself with a handler.
                // Store the options the user gave on the DOMElement itself. These options will
                // be retrieved with getNearestParent when the handler starts.
                registerElement: function(element, options) {
                    function onDestroy() {
                        delete element[0].$mdGesture[self.name];
                        element.off("$destroy", onDestroy);
                    }
                    var self = this;
                    element[0].$mdGesture = element[0].$mdGesture || {};
                    element[0].$mdGesture[this.name] = options || {};
                    element.on("$destroy", onDestroy);
                    return onDestroy;
                }
            };
            return GestureHandler;
        }
        /**
 * Attach Gestures: hook document and check shouldHijack clicks
 * @ngInject
 */
        function attachToDocument($mdGesture, $$MdGestureHandler) {
            function mouseInputHijacker(ev) {
                if (!(!ev.clientX && !ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev))) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }
            function clickHijacker(ev) {
                if (0 === ev.clientX && 0 === ev.clientY || ev.$material || ev.isIonicTap || isInputEventFromLabelClick(ev)) {
                    lastLabelClickPos = null;
                    "label" == ev.target.tagName.toLowerCase() && (lastLabelClickPos = {
                        x: ev.x,
                        y: ev.y
                    });
                } else {
                    ev.preventDefault();
                    ev.stopPropagation();
                    lastLabelClickPos = null;
                }
            }
            /*
   * When a DOM event happens, run all registered gesture handlers' lifecycle
   * methods which match the DOM event.
   * Eg when a 'touchstart' event happens, runHandlers('start') will call and
   * run `handler.cancel()` and `handler.start()` on all registered handlers.
   */
            function runHandlers(handlerEvent, event) {
                var handler;
                for (var name in HANDLERS) {
                    handler = HANDLERS[name];
                    if (handler instanceof $$MdGestureHandler) {
                        "start" === handlerEvent && // Run cancel to reset any handlers' state
                        handler.cancel();
                        handler[handlerEvent](event, pointer);
                    }
                }
            }
            /*
   * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)
   * If it is legitimate, we initiate the pointer state and mark the current pointer's type
   * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events
   * won't effect it.
   */
            function gestureStart(ev) {
                // If we're already touched down, abort
                if (!pointer) {
                    var now = +Date.now();
                    // iOS & old android bug: after a touch event, a click event is sent 350 ms later.
                    // If <400ms have passed, don't allow an event of a different type than the previous event
                    if (!(lastPointer && !typesMatch(ev, lastPointer) && now - lastPointer.endTime < 1500)) {
                        pointer = makeStartPointer(ev);
                        runHandlers("start", ev);
                    }
                }
            }
            /*
   * If a move event happens of the right type, update the pointer and run all the move handlers.
   * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.
   */
            function gestureMove(ev) {
                if (pointer && typesMatch(ev, pointer)) {
                    updatePointerState(ev, pointer);
                    runHandlers("move", ev);
                }
            }
            /*
   * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
   */
            function gestureEnd(ev) {
                if (pointer && typesMatch(ev, pointer)) {
                    updatePointerState(ev, pointer);
                    pointer.endTime = +Date.now();
                    runHandlers("end", ev);
                    lastPointer = pointer;
                    pointer = null;
                }
            }
            // Polyfill document.contains for IE11.
            // TODO: move to util
            document.contains || (document.contains = function(node) {
                return document.body.contains(node);
            });
            if (!isInitialized && $mdGesture.isHijackingClicks) {
                /*
     * If hijack clicks is true, we preventDefault any click that wasn't
     * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',
     * click event will be sent ~400ms after a touchend event happens.
     * The only way to know if this click is real is to prevent any normal
     * click events, and add a flag to events sent by material so we know not to prevent those.
     * 
     * Two exceptions to click events that should be prevented are:
     *  - click events sent by the keyboard (eg form submit)
     *  - events that originate from an Ionic app
     */
                document.addEventListener("click", clickHijacker, !0);
                document.addEventListener("mouseup", mouseInputHijacker, !0);
                document.addEventListener("mousedown", mouseInputHijacker, !0);
                document.addEventListener("focus", mouseInputHijacker, !0);
                isInitialized = !0;
            }
            angular.element(document).on("mousedown touchstart pointerdown", gestureStart).on("mousemove touchmove pointermove", gestureMove).on("mouseup mouseleave touchend touchcancel pointerup pointercancel", gestureEnd).on("$$mdGestureReset", function() {
                lastPointer = pointer = null;
            });
        }
        // ********************
        // Module Functions
        // ********************
        /*
 * Initiate the pointer. x, y, and the pointer's type.
 */
        function makeStartPointer(ev) {
            var point = getEventPoint(ev), startPointer = {
                startTime: +Date.now(),
                target: ev.target,
                // 'p' for pointer events, 'm' for mouse, 't' for touch
                type: ev.type.charAt(0)
            };
            startPointer.startX = startPointer.x = point.pageX;
            startPointer.startY = startPointer.y = point.pageY;
            return startPointer;
        }
        /*
 * return whether the pointer's type matches the event's type.
 * Eg if a touch event happens but the pointer has a mouse type, return false.
 */
        function typesMatch(ev, pointer) {
            return ev && pointer && ev.type.charAt(0) === pointer.type;
        }
        /**
 * Gets whether the given event is an input event that was caused by clicking on an
 * associated label element.
 *
 * This is necessary because the browser will, upon clicking on a label element, fire an
 * *extra* click event on its associated input (if any). mdGesture is able to flag the label
 * click as with `$material` correctly, but not the second input click.
 *
 * In order to determine whether an input event is from a label click, we compare the (x, y) for
 * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label
 * click occurs). Unfortunately, there are no event properties that tie the input and the label
 * together (such as relatedTarget).
 *
 * @param {MouseEvent} event
 * @returns {boolean}
 */
        function isInputEventFromLabelClick(event) {
            return lastLabelClickPos && lastLabelClickPos.x == event.x && lastLabelClickPos.y == event.y;
        }
        /*
 * Update the given pointer based upon the given DOMEvent.
 * Distance, velocity, direction, duration, etc
 */
        function updatePointerState(ev, pointer) {
            var point = getEventPoint(ev), x = pointer.x = point.pageX, y = pointer.y = point.pageY;
            pointer.distanceX = x - pointer.startX;
            pointer.distanceY = y - pointer.startY;
            pointer.distance = Math.sqrt(pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY);
            pointer.directionX = pointer.distanceX > 0 ? "right" : pointer.distanceX < 0 ? "left" : "";
            pointer.directionY = pointer.distanceY > 0 ? "down" : pointer.distanceY < 0 ? "up" : "";
            pointer.duration = +Date.now() - pointer.startTime;
            pointer.velocityX = pointer.distanceX / pointer.duration;
            pointer.velocityY = pointer.distanceY / pointer.duration;
        }
        /*
 * Normalize the point where the DOM event happened whether it's touch or mouse.
 * @returns point event obj with pageX and pageY on it.
 */
        function getEventPoint(ev) {
            ev = ev.originalEvent || ev;
            // support jQuery events
            return ev.touches && ev.touches[0] || ev.changedTouches && ev.changedTouches[0] || ev;
        }
        var pointer, lastPointer, HANDLERS = {}, forceSkipClickHijack = !1, lastLabelClickPos = null, isInitialized = !1;
        angular.module("material.core.gestures", []).provider("$mdGesture", MdGestureProvider).factory("$$MdGestureHandler", MdGestureHandler).run(attachToDocument);
        MdGestureProvider.prototype = {
            // Publish access to setter to configure a variable  BEFORE the
            // $mdGesture service is instantiated...
            skipClickHijack: function() {
                return forceSkipClickHijack = !0;
            },
            /**
   * $get is used to build an instance of $mdGesture
   * @ngInject
   */
            $get: [ "$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {
                return new MdGesture($$MdGestureHandler, $$rAF, $timeout);
            } ]
        };
        MdGesture.$inject = [ "$$MdGestureHandler", "$$rAF", "$timeout" ];
        attachToDocument.$inject = [ "$mdGesture", "$$MdGestureHandler" ];
    }();
    !function() {
        /*
 * @ngdoc service
 * @name $$interimElement
 * @module material.core
 *
 * @description
 *
 * Factory that contructs `$$interimElement.$service` services.
 * Used internally in material design for elements that appear on screen temporarily.
 * The service provides a promise-like API for interacting with the temporary
 * elements.
 *
 * ```js
 * app.service('$mdToast', function($$interimElement) {
 *   var $mdToast = $$interimElement(toastDefaultOptions);
 *   return $mdToast;
 * });
 * ```
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.
 *
 * @returns {$$interimElement.$service}
 *
 */
        function InterimElementProvider() {
            /**
   * Returns a new provider which allows configuration of a new interimElement
   * service. Allows configuration of default options & methods for options,
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)
   */
            function createInterimElementProvider(interimFactoryName) {
                /**
     * Save the configured defaults to be used when the factory is instantiated
     */
                function setDefaults(definition) {
                    providerConfig.optionsFactory = definition.options;
                    providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
                    return provider;
                }
                /**
     * Add a method to the factory that isn't specific to any interim element operations
     */
                function addMethod(name, fn) {
                    customMethods[name] = fn;
                    return provider;
                }
                /**
     * Save the configured preset to be used when the factory is instantiated
     */
                function addPreset(name, definition) {
                    definition = definition || {};
                    definition.methods = definition.methods || [];
                    definition.options = definition.options || function() {
                        return {};
                    };
                    if (/^cancel|hide|show$/.test(name)) throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");
                    if (definition.methods.indexOf("_options") > -1) throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");
                    providerConfig.presets[name] = {
                        methods: definition.methods.concat(EXPOSED_METHODS),
                        optionsFactory: definition.options,
                        argOption: definition.argOption
                    };
                    return provider;
                }
                /**
     * Create a factory that has the given methods & defaults implementing interimElement
     */
                /* @ngInject */
                function factory($$interimElement, $injector) {
                    /**
       *
       */
                    function showInterimElement(opts) {
                        // opts is either a preset which stores its options on an _options field,
                        // or just an object made up of options
                        opts = opts || {};
                        opts._options && (opts = opts._options);
                        return interimElementService.show(angular.extend({}, defaultOptions, opts));
                    }
                    /**
       *  Special method to hide and destroy an interimElement WITHOUT
       *  any 'leave` or hide animations ( an immediate force hide/remove )
       *
       *  NOTE: This calls the onRemove() subclass method for each component...
       *  which must have code to respond to `options.$destroy == true`
       */
                    function destroyInterimElement(opts) {
                        return interimElementService.destroy(opts);
                    }
                    /**
       * Helper to call $injector.invoke with a local of the factory name for
       * this provider.
       * If an $mdDialog is providing options for a dialog and tries to inject
       * $mdDialog, a circular dependency error will happen.
       * We get around that by manually injecting $mdDialog as a local.
       */
                    function invokeFactory(factory, defaultVal) {
                        var locals = {};
                        locals[interimFactoryName] = publicService;
                        return $injector.invoke(factory || function() {
                            return defaultVal;
                        }, {}, locals);
                    }
                    var defaultMethods, defaultOptions, interimElementService = $$interimElement(), publicService = {
                        hide: interimElementService.hide,
                        cancel: interimElementService.cancel,
                        show: showInterimElement,
                        // Special internal method to destroy an interim element without animations
                        // used when navigation changes causes a $scope.$destroy() action
                        destroy: destroyInterimElement
                    };
                    defaultMethods = providerConfig.methods || [];
                    // This must be invoked after the publicService is initialized
                    defaultOptions = invokeFactory(providerConfig.optionsFactory, {});
                    // Copy over the simple custom methods
                    angular.forEach(customMethods, function(fn, name) {
                        publicService[name] = fn;
                    });
                    angular.forEach(providerConfig.presets, function(definition, name) {
                        // This creates a preset class which has setter methods for every
                        // method given in the `.addPreset()` function, as well as every
                        // method given in the `.setDefaults()` function.
                        //
                        // @example
                        // .setDefaults({
                        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],
                        //   options: dialogDefaultOptions
                        // })
                        // .addPreset('alert', {
                        //   methods: ['title', 'ok'],
                        //   options: alertDialogOptions
                        // })
                        //
                        // Set values will be passed to the options when interimElement.show() is called.
                        function Preset(opts) {
                            this._options = angular.extend({}, presetDefaults, opts);
                        }
                        var presetDefaults = invokeFactory(definition.optionsFactory, {}), presetMethods = (definition.methods || []).concat(defaultMethods);
                        // Every interimElement built with a preset has a field called `$type`,
                        // which matches the name of the preset.
                        // Eg in preset 'confirm', options.$type === 'confirm'
                        angular.extend(presetDefaults, {
                            $type: name
                        });
                        angular.forEach(presetMethods, function(name) {
                            Preset.prototype[name] = function(value) {
                                this._options[name] = value;
                                return this;
                            };
                        });
                        // Create shortcut method for one-linear methods
                        if (definition.argOption) {
                            var methodName = "show" + name.charAt(0).toUpperCase() + name.slice(1);
                            publicService[methodName] = function(arg) {
                                var config = publicService[name](arg);
                                return publicService.show(config);
                            };
                        }
                        // eg $mdDialog.alert() will return a new alert preset
                        publicService[name] = function(arg) {
                            // If argOption is supplied, eg `argOption: 'content'`, then we assume
                            // if the argument is not an options object then it is the `argOption` option.
                            //
                            // @example `$mdToast.simple('hello')` // sets options.content to hello
                            //                                     // because argOption === 'content'
                            // If argOption is supplied, eg `argOption: 'content'`, then we assume
                            // if the argument is not an options object then it is the `argOption` option.
                            //
                            // @example `$mdToast.simple('hello')` // sets options.content to hello
                            //                                     // because argOption === 'content'
                            return arguments.length && definition.argOption && !angular.isObject(arg) && !angular.isArray(arg) ? new Preset()[definition.argOption](arg) : new Preset(arg);
                        };
                    });
                    return publicService;
                }
                var EXPOSED_METHODS = [ "onHide", "onShow", "onRemove" ], customMethods = {}, providerConfig = {
                    presets: {}
                }, provider = {
                    setDefaults: setDefaults,
                    addPreset: addPreset,
                    addMethod: addMethod,
                    $get: factory
                };
                /**
     * all interim elements will come with the 'build' preset
     */
                provider.addPreset("build", {
                    methods: [ "controller", "controllerAs", "resolve", "template", "templateUrl", "themable", "transformTemplate", "parent" ]
                });
                factory.$inject = [ "$$interimElement", "$injector" ];
                return provider;
            }
            /* @ngInject */
            function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate, $mdUtil, $mdCompiler, $mdTheming, $injector) {
                return function() {
                    /*
       * @ngdoc method
       * @name $$interimElement.$service#show
       * @kind function
       *
       * @description
       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected
       * with hide or cancel, respectively. To external cancel/hide, developers should use the
       *
       * @param {*} options is hashMap of settings
       * @returns a Promise
       *
       */
                    function show(options) {
                        options = options || {};
                        var interimElement = new InterimElement(options || {});
                        // This hide()s only the current interim element before showing the next, new one
                        // NOTE: this is not reversible (e.g. interim elements are not stackable)
                        (!options.skipHide && stack.length ? service.hide() : $q.when(!0)).finally(function() {
                            stack.push(interimElement);
                            interimElement.show().catch(function(reason) {
                                //$log.error("InterimElement.show() error: " + reason );
                                return reason;
                            });
                        });
                        // Return a promise that will be resolved when the interim
                        // element is hidden or cancelled...
                        return interimElement.deferred.promise;
                    }
                    /*
       * @ngdoc method
       * @name $$interimElement.$service#hide
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`
       *
       * @param {*} resolveParam Data to resolve the promise with
       * @returns a Promise that will be resolved after the element has been removed.
       *
       */
                    function hide(reason, options) {
                        function closeElement(interim) {
                            interim.remove(reason, !1, options || {}).catch(function(reason) {
                                //$log.error("InterimElement.hide() error: " + reason );
                                return reason;
                            });
                            return interim.deferred.promise;
                        }
                        if (!stack.length) return $q.when(reason);
                        options = options || {};
                        if (options.closeAll) {
                            var promise = $q.all(stack.reverse().map(closeElement));
                            stack = [];
                            return promise;
                        }
                        return options.closeTo !== undefined ? $q.all(stack.splice(options.closeTo).map(closeElement)) : closeElement(stack.pop());
                    }
                    /*
       * @ngdoc method
       * @name $$interimElement.$service#cancel
       * @kind function
       *
       * @description
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`
       *
       * @param {*} reason Data to reject the promise with
       * @returns Promise that will be resolved after the element has been removed.
       *
       */
                    function cancel(reason, options) {
                        var interim = stack.pop();
                        if (!interim) return $q.when(reason);
                        interim.remove(reason, !0, options || {}).catch(function(reason) {
                            //$log.error("InterimElement.cancel() error: " + reason );
                            return reason;
                        });
                        return interim.deferred.promise;
                    }
                    /*
       * Special method to quick-remove the interim element without animations
       * Note: interim elements are in "interim containers"
       */
                    function destroy(target) {
                        var interim = target ? null : stack.shift(), cntr = angular.element(target).length ? angular.element(target)[0].parentNode : null;
                        if (cntr) {
                            // Try to find the interim element in the stack which corresponds to the supplied DOM element.
                            var filtered = stack.filter(function(entry) {
                                return entry.options.element[0] === cntr;
                            });
                            // Note: this function might be called when the element already has been removed, in which
                            //       case we won't find any matches. That's ok.
                            if (filtered.length > 0) {
                                interim = filtered[0];
                                stack.splice(stack.indexOf(interim), 1);
                            }
                        }
                        return interim ? interim.remove(SHOW_CANCELLED, !1, {
                            $destroy: !0
                        }) : $q.when(SHOW_CANCELLED);
                    }
                    /*
       * Internal Interim Element Object
       * Used internally to manage the DOM element and related data
       */
                    function InterimElement(options) {
                        /**
         * Compile, link, and show this interim element
         * Use optional autoHided and transition-in effects
         */
                        function createAndTransitionIn() {
                            return $q(function(resolve, reject) {
                                function rejectAll(fault) {
                                    // Force the '$md<xxx>.show()' promise to reject
                                    self.deferred.reject(fault);
                                    // Continue rejection propagation
                                    reject(fault);
                                }
                                compileElement(options).then(function(compiledData) {
                                    element = linkElement(compiledData, options);
                                    showAction = showElement(element, options, compiledData.controller).then(resolve, rejectAll);
                                }, rejectAll);
                            });
                        }
                        /**
         * After the show process has finished/rejected:
         * - announce 'removing',
         * - perform the transition-out, and
         * - perform optional clean up scope.
         */
                        function transitionOutAndRemove(response, isCancelled, opts) {
                            /**
           * The `show()` returns a promise that will be resolved when the interim
           * element is hidden or cancelled...
           */
                            function resolveAll(response) {
                                self.deferred.resolve(response);
                            }
                            /**
           * Force the '$md<xxx>.show()' promise to reject
           */
                            function rejectAll(fault) {
                                self.deferred.reject(fault);
                            }
                            // abort if the show() and compile failed
                            if (!element) return $q.when(!1);
                            options = angular.extend(options || {}, opts || {});
                            options.cancelAutoHide && options.cancelAutoHide();
                            options.element.triggerHandler("$mdInterimElementRemove");
                            if (!0 === options.$destroy) return hideElement(options.element, options).then(function() {
                                isCancelled && rejectAll(response) || resolveAll(response);
                            });
                            $q.when(showAction).finally(function() {
                                hideElement(options.element, options).then(function() {
                                    isCancelled && rejectAll(response) || resolveAll(response);
                                }, rejectAll);
                            });
                            return self.deferred.promise;
                        }
                        /**
         * Compile an element with a templateUrl, controller, and locals
         */
                        function compileElement(options) {
                            return (options.skipCompile ? null : $mdCompiler.compile(options)) || $q(function(resolve) {
                                resolve({
                                    locals: {},
                                    link: function() {
                                        return options.element;
                                    }
                                });
                            });
                        }
                        /**
         *  Link an element with compiled configuration
         */
                        function linkElement(compileData, options) {
                            angular.extend(compileData.locals, options);
                            var element = compileData.link(options.scope);
                            // Search for parent at insertion time, if not specified
                            options.element = element;
                            options.parent = findParent(element, options);
                            options.themable && $mdTheming(element);
                            return element;
                        }
                        /**
         * Search for parent at insertion time, if not specified
         */
                        function findParent(element, options) {
                            var parent = options.parent;
                            // Search for parent at insertion time, if not specified
                            parent = angular.isFunction(parent) ? parent(options.scope, element, options) : angular.isString(parent) ? angular.element($document[0].querySelector(parent)) : angular.element(parent);
                            // If parent querySelector/getter function fails, or it's just null,
                            // find a default.
                            if (!(parent || {}).length) {
                                var el;
                                $rootElement[0] && $rootElement[0].querySelector && (el = $rootElement[0].querySelector(":not(svg) > body"));
                                el || (el = $rootElement[0]);
                                "#comment" == el.nodeName && (el = $document[0].body);
                                return angular.element(el);
                            }
                            return parent;
                        }
                        /**
         * If auto-hide is enabled, start timer and prepare cancel function
         */
                        function startAutoHide() {
                            var autoHideTimer, cancelAutoHide = angular.noop;
                            if (options.hideDelay) {
                                autoHideTimer = $timeout(service.hide, options.hideDelay);
                                cancelAutoHide = function() {
                                    $timeout.cancel(autoHideTimer);
                                };
                            }
                            // Cache for subsequent use
                            options.cancelAutoHide = function() {
                                cancelAutoHide();
                                options.cancelAutoHide = undefined;
                            };
                        }
                        /**
         * Show the element ( with transitions), notify complete and start
         * optional auto-Hide
         */
                        function showElement(element, options, controller) {
                            // Trigger onShowing callback before the `show()` starts
                            var notifyShowing = options.onShowing || angular.noop, notifyComplete = options.onComplete || angular.noop;
                            notifyShowing(options.scope, element, options, controller);
                            return $q(function(resolve, reject) {
                                try {
                                    // Start transitionIn
                                    $q.when(options.onShow(options.scope, element, options, controller)).then(function() {
                                        notifyComplete(options.scope, element, options);
                                        startAutoHide();
                                        resolve(element);
                                    }, reject);
                                } catch (e) {
                                    reject(e.message);
                                }
                            });
                        }
                        function hideElement(element, options) {
                            var announceRemoving = options.onRemoving || angular.noop;
                            return $$q(function(resolve, reject) {
                                try {
                                    // Start transitionIn
                                    var action = $$q.when(options.onRemove(options.scope, element, options) || !0);
                                    // Trigger callback *before* the remove operation starts
                                    announceRemoving(element, action);
                                    1 == options.$destroy ? // For $destroy, onRemove should be synchronous
                                    resolve(element) : // Wait until transition-out is done
                                    action.then(function() {
                                        !options.preserveScope && options.scope && options.scope.$destroy();
                                        resolve(element);
                                    }, reject);
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        }
                        var self, element, showAction = $q.when(!0);
                        options = /**
         * Prepare optional isolated scope and prepare $animate with default enter and leave
         * transitions for the new element instance.
         */
                        function(options) {
                            options = options || {};
                            options.template && (options.template = $mdUtil.processTemplate(options.template));
                            return angular.extend({
                                preserveScope: !1,
                                cancelAutoHide: angular.noop,
                                scope: options.scope || $rootScope.$new(options.isolateScope),
                                /**
             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'
             */
                                onShow: function(scope, element, options) {
                                    return $animate.enter(element, options.parent);
                                },
                                /**
             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'
             */
                                onRemove: function(scope, element) {
                                    // Element could be undefined if a new element is shown before
                                    // the old one finishes compiling.
                                    return element && $animate.leave(element) || $q.when();
                                }
                            }, options);
                        }(options);
                        return self = {
                            options: options,
                            deferred: $q.defer(),
                            show: createAndTransitionIn,
                            remove: transitionOutAndRemove
                        };
                    }
                    var service, SHOW_CANCELLED = !1, stack = [];
                    // Publish instance $$interimElement service;
                    // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect
                    return service = {
                        show: show,
                        hide: hide,
                        cancel: cancel,
                        destroy: destroy,
                        $injector_: $injector
                    };
                };
            }
            createInterimElementProvider.$get = InterimElementFactory;
            InterimElementFactory.$inject = [ "$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$injector" ];
            return createInterimElementProvider;
        }
        angular.module("material.core").provider("$$interimElement", InterimElementProvider);
    }();
    !function() {
        !function() {
            /**
   * Special directive that will disable ALL Layout conversions of layout
   * attribute(s) to classname(s).
   *
   * <link rel="stylesheet" href="angular-material.min.css">
   * <link rel="stylesheet" href="angular-material.layout.css">
   *
   * <body md-layout-css>
   *  ...
   * </body>
   *
   * Note: Using md-layout-css directive requires the developer to load the Material
   * Layout Attribute stylesheet (which only uses attribute selectors):
   *
   *       `angular-material.layout.css`
   *
   * Another option is to use the LayoutProvider to configure and disable the attribute
   * conversions; this would obviate the use of the `md-layout-css` directive
   *
   */
            function disableLayoutDirective() {
                return {
                    restrict: "A",
                    priority: "900",
                    compile: function(element, attr) {
                        config.enabled = !1;
                        return angular.noop;
                    }
                };
            }
            /**
   * Tail-hook ngCloak to delay the uncloaking while Layout transformers
   * finish processing. Eliminates flicker with Material.Layoouts
   */
            function buildCloakInterceptor(className) {
                return [ "$timeout", function($timeout) {
                    return {
                        restrict: "A",
                        priority: -10,
                        // run after normal ng-cloak
                        compile: function(element) {
                            if (!config.enabled) return angular.noop;
                            // Re-add the cloak
                            element.addClass(className);
                            return function(scope, element) {
                                // Wait while layout injectors configure, then uncloak
                                // NOTE: $rAF does not delay enough... and this is a 1x-only event,
                                //       $timeout is acceptable.
                                $timeout(function() {
                                    element.removeClass(className);
                                }, 10, !1);
                            };
                        }
                    };
                } ];
            }
            // *********************************************************************************
            //
            // These functions create registration functions for ngMaterial Layout attribute directives
            // This provides easy translation to switch ngMaterial attribute selectors to
            // CLASS selectors and directives; which has huge performance implications
            // for IE Browsers
            //
            // *********************************************************************************
            /**
   * Creates a directive registration function where a possible dynamic attribute
   * value will be observed/watched.
   * @param {string} className attribute name; eg `layout-gt-md` with value ="row"
   */
            function attributeWithObserve(className) {
                /**
     * Add as transformed class selector(s), then
     * remove the deprecated attribute selector
     */
                function translateWithValueToCssClass(scope, element, attrs) {
                    var updateFn = updateClassWithValue(element, className), unwatch = attrs.$observe(attrs.$normalize(className), updateFn);
                    updateFn(getNormalizedAttrValue(className, attrs, ""));
                    scope.$on("$destroy", function() {
                        unwatch();
                    });
                }
                return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;
                    return {
                        restrict: "A",
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                // immediately replace static (non-interpolated) invalid values...
                                validateAttributeUsage(className, attr, element, $log);
                                validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(element, className, attr));
                                linkFn = translateWithValueToCssClass;
                            }
                            // Use for postLink to account for transforms after ng-transclude.
                            return linkFn || angular.noop;
                        }
                    };
                } ];
            }
            /**
   * Creates a registration function for ngMaterial Layout attribute directive.
   * This is a `simple` transpose of attribute usage to class usage; where we ignore
   * any attribute value
   */
            function attributeWithoutValue(className) {
                /**
     * Add as transformed class selector, then
     * remove the deprecated attribute selector
     */
                function translateToCssClass(scope, element) {
                    element.addClass(className);
                }
                return [ "$mdUtil", "$interpolate", "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;
                    return {
                        restrict: "A",
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                // immediately replace static (non-interpolated) invalid values...
                                validateAttributeValue(className, getNormalizedAttrValue(className, attr, ""), buildUpdateFn(element, className, attr));
                                translateToCssClass(null, element);
                                // Use for postLink to account for transforms after ng-transclude.
                                linkFn = translateToCssClass;
                            }
                            return linkFn || angular.noop;
                        }
                    };
                } ];
            }
            /**
   * After link-phase, do NOT remove deprecated layout attribute selector.
   * Instead watch the attribute so interpolated data-bindings to layout
   * selectors will continue to be supported.
   *
   * $observe() the className and update with new class (after removing the last one)
   *
   * e.g. `layout="{{layoutDemo.direction}}"` will update...
   *
   * NOTE: The value must match one of the specified styles in the CSS.
   * For example `flex-gt-md="{{size}}`  where `scope.size == 47` will NOT work since
   * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.
   *
   */
            function updateClassWithValue(element, className) {
                var lastClass;
                return function(newValue) {
                    var value = validateAttributeValue(className, newValue || "");
                    if (angular.isDefined(value)) {
                        lastClass && element.removeClass(lastClass);
                        lastClass = value ? className + "-" + value.replace(WHITESPACE, "-") : className;
                        element.addClass(lastClass);
                    }
                };
            }
            /**
   * Provide console warning that this layout attribute has been deprecated
   *
   */
            function warnAttrNotSupported(className) {
                var parts = className.split("-");
                return [ "$log", function($log) {
                    $log.warn(className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");
                    return angular.noop;
                } ];
            }
            /**
   * Centralize warnings for known flexbox issues (especially IE-related issues)
   */
            function validateAttributeUsage(className, attr, element, $log) {
                var message, usage, url, nodeName = element[0].nodeName.toLowerCase();
                switch (className.replace(SUFFIXES, "")) {
                  case "flex":
                    if ("md-button" == nodeName || "fieldset" == nodeName) {
                        // @see https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers
                        // Use <div flex> wrapper inside (preferred) or outside
                        usage = "<" + nodeName + " " + className + "></" + nodeName + ">";
                        url = "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers";
                        message = "Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.";
                        $log.warn($mdUtil.supplant(message, [ usage, url ]));
                    }
                }
            }
            /**
   * For the Layout attribute value, validate or replace with default
   * fallback value
   */
            function validateAttributeValue(className, value, updateFn) {
                var origValue = value;
                if (!needsInterpolation(value)) {
                    switch (className.replace(SUFFIXES, "")) {
                      case "layout":
                        findIn(value, LAYOUT_OPTIONS) || (value = LAYOUT_OPTIONS[0]);
                        break;

                      case "flex":
                        findIn(value, FLEX_OPTIONS) || isNaN(value) && (value = "");
                        break;

                      case "flex-offset":
                      case "flex-order":
                        value && !isNaN(+value) || (value = "0");
                        break;

                      case "layout-align":
                        var axis = extractAlignAxis(value);
                        value = $mdUtil.supplant("{main}-{cross}", axis);
                        break;

                      case "layout-padding":
                      case "layout-margin":
                      case "layout-fill":
                      case "layout-wrap":
                      case "layout-nowrap":
                      case "layout-nowrap":
                        value = "";
                    }
                    value != origValue && (updateFn || angular.noop)(value);
                }
                return value;
            }
            /**
   * Replace current attribute value with fallback value
   */
            function buildUpdateFn(element, className, attrs) {
                return function(fallback) {
                    needsInterpolation(fallback) || (// Do not modify the element's attribute value; so
                    // uses '<ui-layout layout="/api/sidebar.html" />' will not
                    // be affected. Just update the attrs value.
                    attrs[attrs.$normalize(className)] = fallback);
                };
            }
            /**
   * See if the original value has interpolation symbols:
   * e.g.  flex-gt-md="{{triggerPoint}}"
   */
            function needsInterpolation(value) {
                return (value || "").indexOf($interpolate.startSymbol()) > -1;
            }
            function getNormalizedAttrValue(className, attrs, defaultVal) {
                var normalizedAttr = attrs.$normalize(className);
                return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;
            }
            function findIn(item, list, replaceWith) {
                item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;
                var found = !1;
                item && list.forEach(function(it) {
                    it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                    found = found || it === item;
                });
                return found;
            }
            function extractAlignAxis(attrValue) {
                var values, axis = {
                    main: "start",
                    cross: "stretch"
                };
                attrValue = attrValue || "";
                0 != attrValue.indexOf("-") && 0 != attrValue.indexOf(" ") || (// For missing main-axis values
                attrValue = "none" + attrValue);
                values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-");
                values.length && "space" === values[0] && (// for main-axis values of "space-around" or "space-between"
                values = [ values[0] + "-" + values[1], values[2] ]);
                values.length > 0 && (axis.main = values[0] || axis.main);
                values.length > 1 && (axis.cross = values[1] || axis.cross);
                ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0 && (axis.main = "start");
                ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0 && (axis.cross = "stretch");
                return axis;
            }
            var $mdUtil, $interpolate, $log, SUFFIXES = /(-gt)?-(sm|md|lg|print)/g, WHITESPACE = /\s+/g, FLEX_OPTIONS = [ "grow", "initial", "auto", "none", "noshrink", "nogrow" ], LAYOUT_OPTIONS = [ "row", "column" ], ALIGNMENT_MAIN_AXIS = [ "", "start", "center", "end", "stretch", "space-around", "space-between" ], ALIGNMENT_CROSS_AXIS = [ "", "start", "center", "end", "stretch" ], config = {
                /**
     * Enable directive attribute-to-class conversions
     * Developers can use `<body md-layout-css />` to quickly
     * disable the Layout directives and prohibit the injection of Layout classNames
     */
                enabled: !0,
                /**
     * List of mediaQuery breakpoints and associated suffixes
     *
     *   [
     *    { suffix: "sm", mediaQuery: "screen and (max-width: 599px)" },
     *    { suffix: "md", mediaQuery: "screen and (min-width: 600px) and (max-width: 959px)" }
     *   ]
     */
                breakpoints: []
            };
            !/**
   *   registerLayoutAPI()
   *
   *   The original ngMaterial Layout solution used attribute selectors and CSS.
   *
   *  ```html
   *  <div layout="column"> My Content </div>
   *  ```
   *
   *  ```css
   *  [layout] {
   *    box-sizing: border-box;
   *    display:flex;
   *  }
   *  [layout=column] {
   *    flex-direction : column
   *  }
   *  ```
   *
   *  Use of attribute selectors creates significant performance impacts in some
   *  browsers... mainly IE.
   *
   *  This module registers directives that allow the same layout attributes to be
   *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that
   *  contains a Layout directive.
   *
   * ```html
   *   <div layout="column" class="layout layout-column"> My Content </div>
   *```
   *
   *  ```css
   *  .layout {
   *    box-sizing: border-box;
   *    display:flex;
   *  }
   *  .layout-column {
   *    flex-direction : column
   *  }
   *  ```
   */
            function(module) {
                /**
     * Converts snake_case to camelCase.
     * Also there is special case for Moz prefix starting with upper case letter.
     * @param name Name to normalize
     */
                function directiveNormalize(name) {
                    return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
                        return offset ? letter.toUpperCase() : letter;
                    });
                }
                var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i, SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g, BREAKPOINTS = [ "", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl", "print" ], API_WITH_VALUES = [ "layout", "flex", "flex-order", "flex-offset", "layout-align" ], API_NO_VALUES = [ "show", "hide", "layout-padding", "layout-margin" ];
                // Build directive registration functions for the standard Layout API... for all breakpoints.
                angular.forEach(BREAKPOINTS, function(mqb) {
                    // Attribute directives with expected, observable value(s)
                    angular.forEach(API_WITH_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithObserve(fullName));
                    });
                    // Attribute directives with no expected value(s)
                    angular.forEach(API_NO_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithoutValue(fullName));
                    });
                });
                // Register other, special directive functions for the Layout features:
                module.directive("mdLayoutCss", disableLayoutDirective).directive("ngCloak", buildCloakInterceptor("ng-cloak")).directive("layoutWrap", attributeWithoutValue("layout-wrap")).directive("layoutNowrap", attributeWithoutValue("layout-nowrap")).directive("layoutNoWrap", attributeWithoutValue("layout-no-wrap")).directive("layoutFill", attributeWithoutValue("layout-fill")).directive("layoutLtMd", warnAttrNotSupported("layout-lt-md")).directive("layoutLtLg", warnAttrNotSupported("layout-lt-lg")).directive("flexLtMd", warnAttrNotSupported("flex-lt-md")).directive("flexLtLg", warnAttrNotSupported("flex-lt-lg")).directive("layoutAlignLtMd", warnAttrNotSupported("layout-align-lt-md")).directive("layoutAlignLtLg", warnAttrNotSupported("layout-align-lt-lg")).directive("flexOrderLtMd", warnAttrNotSupported("flex-order-lt-md")).directive("flexOrderLtLg", warnAttrNotSupported("flex-order-lt-lg")).directive("offsetLtMd", warnAttrNotSupported("flex-offset-lt-md")).directive("offsetLtLg", warnAttrNotSupported("flex-offset-lt-lg")).directive("hideLtMd", warnAttrNotSupported("hide-lt-md")).directive("hideLtLg", warnAttrNotSupported("hide-lt-lg")).directive("showLtMd", warnAttrNotSupported("show-lt-md")).directive("showLtLg", warnAttrNotSupported("show-lt-lg"));
            }(angular.module("material.core.layout", [ "ng" ]));
        }();
    }();
    !function() {
        /*
   * @private
   * @ngdoc factory
   * @name ComponentRegistry
   * @module material.core.componentRegistry
   *
   */
        function ComponentRegistry($log, $q) {
            function isValidID(handle) {
                return handle && "" !== handle;
            }
            var self, instances = [], pendings = {};
            return self = {
                /**
       * Used to print an error when an instance for a handle isn't found.
       */
                notFoundError: function(handle) {
                    $log.error("No instance found for handle", handle);
                },
                /**
       * Return all registered instances as an array.
       */
                getInstances: function() {
                    return instances;
                },
                /**
       * Get a registered instance.
       * @param handle the String handle to look up for a registered instance.
       */
                get: function(handle) {
                    if (!isValidID(handle)) return null;
                    var i, j, instance;
                    for (i = 0, j = instances.length; i < j; i++) {
                        instance = instances[i];
                        if (instance.$$mdHandle === handle) return instance;
                    }
                    return null;
                },
                /**
       * Register an instance.
       * @param instance the instance to register
       * @param handle the handle to identify the instance under.
       */
                register: function(instance, handle) {
                    /**
         * Remove registration for an instance
         */
                    function deregister() {
                        var index = instances.indexOf(instance);
                        -1 !== index && instances.splice(index, 1);
                    }
                    if (!handle) return angular.noop;
                    instance.$$mdHandle = handle;
                    instances.push(instance);
                    !/**
         * Resolve any pending promises for this instance
         */
                    function() {
                        var dfd = pendings[handle];
                        if (dfd) {
                            dfd.resolve(instance);
                            delete pendings[handle];
                        }
                    }();
                    return deregister;
                },
                /**
       * Async accessor to registered component instance
       * If not available then a promise is created to notify
       * all listeners when the instance is registered.
       */
                when: function(handle) {
                    if (isValidID(handle)) {
                        var deferred = $q.defer(), instance = self.get(handle);
                        instance ? deferred.resolve(instance) : pendings[handle] = deferred;
                        return deferred.promise;
                    }
                    return $q.reject("Invalid `md-component-id` value.");
                }
            };
        }
        /**
   * @ngdoc module
   * @name material.core.componentRegistry
   *
   * @description
   * A component instance registration service.
   * Note: currently this as a private service in the SideNav component.
   */
        angular.module("material.core").factory("$mdComponentRegistry", ComponentRegistry);
        ComponentRegistry.$inject = [ "$log", "$q" ];
    }();
    !function() {
        !function() {
            function MdButtonInkRipple($mdInkRipple) {
                function optionsForElement(element) {
                    return element.hasClass("md-icon-button") ? {
                        isMenuItem: element.hasClass("md-menu-item"),
                        fitRipple: !0,
                        center: !0
                    } : {
                        isMenuItem: element.hasClass("md-menu-item"),
                        dimBackground: !0
                    };
                }
                return {
                    attach: function(scope, element, options) {
                        options = angular.extend(optionsForElement(element), options);
                        return $mdInkRipple.attach(scope, element, options);
                    }
                };
            }
            /**
   * @ngdoc service
   * @name $mdButtonInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the default ripple configuration
   */
            angular.module("material.core").factory("$mdButtonInkRipple", MdButtonInkRipple);
            MdButtonInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        !function() {
            function MdCheckboxInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !0,
                        dimBackground: !1,
                        fitRipple: !0
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            /**
   * @ngdoc service
   * @name $mdCheckboxInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */
            angular.module("material.core").factory("$mdCheckboxInkRipple", MdCheckboxInkRipple);
            MdCheckboxInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        !function() {
            function MdListInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            /**
   * @ngdoc service
   * @name $mdListInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */
            angular.module("material.core").factory("$mdListInkRipple", MdListInkRipple);
            MdListInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdInkRipple
 * @module material.core.ripple
 *
 * @description
 * The `md-ink-ripple` directive allows you to specify the ripple color or id a ripple is allowed.
 *
 * @param {string|boolean} md-ink-ripple A color string `#FF0000` or boolean (`false` or `0`) for preventing ripple
 *
 * @usage
 * ### String values
 * <hljs lang="html">
 *   <ANY md-ink-ripple="#FF0000">
 *     Ripples in red
 *   </ANY>
 *
 *   <ANY md-ink-ripple="false">
 *     Not rippling
 *   </ANY>
 * </hljs>
 *
 * ### Interpolated values
 * <hljs lang="html">
 *   <ANY md-ink-ripple="{{ randomColor() }}">
 *     Ripples with the return value of 'randomColor' function
 *   </ANY>
 *
 *   <ANY md-ink-ripple="{{ canRipple() }}">
 *     Ripples if 'canRipple' function return value is not 'false' or '0'
 *   </ANY>
 * </hljs>
 */
        function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {
            return {
                controller: angular.noop,
                link: function(scope, element, attr) {
                    attr.hasOwnProperty("mdInkRippleCheckbox") ? $mdCheckboxInkRipple.attach(scope, element) : $mdButtonInkRipple.attach(scope, element);
                }
            };
        }
        /**
 * @ngdoc service
 * @name $mdInkRipple
 * @module material.core.ripple
 *
 * @description
 * `$mdInkRipple` is a service for adding ripples to any element
 *
 * @usage
 * <hljs lang="js">
 * app.factory('$myElementInkRipple', function($mdInkRipple) {
 *   return {
 *     attach: function (scope, element, options) {
 *       return $mdInkRipple.attach(scope, element, angular.extend({
 *         center: false,
 *         dimBackground: true
 *       }, options));
 *     }
 *   };
 * });
 *
 * app.controller('myController', function ($scope, $element, $myElementInkRipple) {
 *   $scope.onClick = function (ev) {
 *     $myElementInkRipple.attach($scope, angular.element(ev.target), { center: true });
 *   }
 * });
 * </hljs>
 */
        /**
 * @ngdoc method
 * @name $mdInkRipple#attach
 *
 * @description
 * Attaching given scope, element and options to inkRipple controller
 *
 * @param {object=} scope Scope within the current context
 * @param {object=} element The element the ripple effect should be applied to
 * @param {object=} options (Optional) Configuration options to override the defaultRipple configuration
 * * `center` -  Whether the ripple should start from the center of the container element
 * * `dimBackground` - Whether the background should be dimmed with the ripple color
 * * `colorElement` - The element the ripple should take its color from, defined by css property `color`
 * * `fitRipple` - Whether the ripple should fill the element
 */
        function InkRippleService($injector) {
            function attach(scope, element, options) {
                return element.controller("mdNoInk") ? angular.noop : $injector.instantiate(InkRippleCtrl, {
                    $scope: scope,
                    $element: element,
                    rippleOptions: options
                });
            }
            return {
                attach: attach
            };
        }
        /**
 * Controller used by the ripple service in order to apply ripples
 * @ngInject
 */
        function InkRippleCtrl($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {
            this.$window = $window;
            this.$timeout = $timeout;
            this.$mdUtil = $mdUtil;
            this.$scope = $scope;
            this.$element = $element;
            this.options = rippleOptions;
            this.mousedown = !1;
            this.ripples = [];
            this.timeout = null;
            // Stores a reference to the most-recent ripple timeout
            this.lastRipple = null;
            $mdUtil.valueOnUse(this, "container", this.createContainer);
            this.$element.addClass("md-ink-ripple");
            // attach method for unit tests
            ($element.controller("mdInkRipple") || {}).createRipple = angular.bind(this, this.createRipple);
            ($element.controller("mdInkRipple") || {}).setColor = angular.bind(this, this.color);
            this.bindEvents();
        }
        /**
 * Either remove or unlock any remaining ripples when the user mouses off of the element (either by
 * mouseup or mouseleave event)
 */
        function autoCleanup(self, cleanupFn) {
            if (self.mousedown || self.lastRipple) {
                self.mousedown = !1;
                self.$mdUtil.nextTick(angular.bind(self, cleanupFn), !1);
            }
        }
        /**
 * Used to create an empty directive.  This is used to track flag-directives whose children may have
 * functionality based on them.
 *
 * Example: `md-no-ink` will potentially be used by all child directives.
 */
        function attrNoDirective() {
            return {
                controller: angular.noop
            };
        }
        /**
 * @ngdoc module
 * @name material.core.ripple
 * @description
 * Ripple
 */
        angular.module("material.core").factory("$mdInkRipple", InkRippleService).directive("mdInkRipple", InkRippleDirective).directive("mdNoInk", attrNoDirective).directive("mdNoBar", attrNoDirective).directive("mdNoStretch", attrNoDirective);
        InkRippleDirective.$inject = [ "$mdButtonInkRipple", "$mdCheckboxInkRipple" ];
        InkRippleService.$inject = [ "$injector" ];
        InkRippleCtrl.$inject = [ "$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil" ];
        /**
 * Returns the color that the ripple should be (either based on CSS or hard-coded)
 * @returns {string}
 */
        InkRippleCtrl.prototype.color = function(value) {
            var self = this;
            // If assigning a color value, apply it to background and the ripple color
            angular.isDefined(value) && (self._color = self._parseColor(value));
            // If color lookup, use assigned, defined, or inherited
            /**
   * Finds the color element and returns its text color for use as default ripple color
   * @returns {string}
   */
            return self._color || self._parseColor(self.inkRipple()) || self._parseColor(function() {
                var items = self.options && self.options.colorElement ? self.options.colorElement : [], elem = items.length ? items[0] : self.$element[0];
                return elem ? self.$window.getComputedStyle(elem).color : "rgb(0,0,0)";
            }());
        };
        /**
 * Updating the ripple colors based on the current inkRipple value
 * or the element's computed style color
 */
        InkRippleCtrl.prototype.calculateColor = function() {
            return this.color();
        };
        /**
 * Takes a string color and converts it to RGBA format
 * @param color {string}
 * @param [multiplier] {int}
 * @returns {string}
 */
        InkRippleCtrl.prototype._parseColor = function(color, multiplier) {
            multiplier = multiplier || 1;
            if (color) /**
   * Converts an RGB color to RGBA
   * @param color {string}
   * @returns {string}
   */
            /**
   * Converts hex value to RGBA string
   * @param color {string}
   * @returns {string}
   */
            return 0 === color.indexOf("rgba") ? color.replace(/\d?\.?\d*\s*\)\s*$/, (.1 * multiplier).toString() + ")") : 0 === color.indexOf("rgb") ? function(color) {
                return color.replace(")", ", 0.1)").replace("(", "a(");
            }(color) : 0 === color.indexOf("#") ? function(color) {
                var hex = "#" === color[0] ? color.substr(1) : color, dig = hex.length / 3, red = hex.substr(0, dig), green = hex.substr(dig, dig), blue = hex.substr(2 * dig);
                if (1 === dig) {
                    red += red;
                    green += green;
                    blue += blue;
                }
                return "rgba(" + parseInt(red, 16) + "," + parseInt(green, 16) + "," + parseInt(blue, 16) + ",0.1)";
            }(color) : void 0;
        };
        /**
 * Binds events to the root element for
 */
        InkRippleCtrl.prototype.bindEvents = function() {
            this.$element.on("mousedown", angular.bind(this, this.handleMousedown));
            this.$element.on("mouseup touchend", angular.bind(this, this.handleMouseup));
            this.$element.on("mouseleave", angular.bind(this, this.handleMouseup));
            this.$element.on("touchmove", angular.bind(this, this.handleTouchmove));
        };
        /**
 * Create a new ripple on every mousedown event from the root element
 * @param event {MouseEvent}
 */
        InkRippleCtrl.prototype.handleMousedown = function(event) {
            if (!this.mousedown) {
                // When jQuery is loaded, we have to get the original event
                event.hasOwnProperty("originalEvent") && (event = event.originalEvent);
                this.mousedown = !0;
                if (this.options.center) this.createRipple(this.container.prop("clientWidth") / 2, this.container.prop("clientWidth") / 2); else // We need to calculate the relative coordinates if the target is a sublayer of the ripple element
                if (event.srcElement !== this.$element[0]) {
                    var layerRect = this.$element[0].getBoundingClientRect(), layerX = event.clientX - layerRect.left, layerY = event.clientY - layerRect.top;
                    this.createRipple(layerX, layerY);
                } else this.createRipple(event.offsetX, event.offsetY);
            }
        };
        /**
 * Either remove or unlock any remaining ripples when the user mouses off of the element (either by
 * mouseup, touchend or mouseleave event)
 */
        InkRippleCtrl.prototype.handleMouseup = function() {
            autoCleanup(this, this.clearRipples);
        };
        /**
 * Either remove or unlock any remaining ripples when the user mouses off of the element (by
 * touchmove)
 */
        InkRippleCtrl.prototype.handleTouchmove = function() {
            autoCleanup(this, this.deleteRipples);
        };
        /**
 * Cycles through all ripples and attempts to remove them.
 */
        InkRippleCtrl.prototype.deleteRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.ripples[i].remove();
        };
        /**
 * Cycles through all ripples and attempts to remove them with fade.
 * Depending on logic within `fadeInComplete`, some removals will be postponed.
 */
        InkRippleCtrl.prototype.clearRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) this.fadeInComplete(this.ripples[i]);
        };
        /**
 * Creates the ripple container element
 * @returns {*}
 */
        InkRippleCtrl.prototype.createContainer = function() {
            var container = angular.element('<div class="md-ripple-container"></div>');
            this.$element.append(container);
            return container;
        };
        InkRippleCtrl.prototype.clearTimeout = function() {
            if (this.timeout) {
                this.$timeout.cancel(this.timeout);
                this.timeout = null;
            }
        };
        InkRippleCtrl.prototype.isRippleAllowed = function() {
            var element = this.$element[0];
            do {
                if (!element.tagName || "BODY" === element.tagName) break;
                if (element && angular.isFunction(element.hasAttribute)) {
                    if (element.hasAttribute("disabled")) return !1;
                    if ("false" === this.inkRipple() || "0" === this.inkRipple()) return !1;
                }
            } while (element = element.parentNode);
            return !0;
        };
        /**
 * The attribute `md-ink-ripple` may be a static or interpolated
 * color value OR a boolean indicator (used to disable ripples)
 */
        InkRippleCtrl.prototype.inkRipple = function() {
            return this.$element.attr("md-ink-ripple");
        };
        /**
 * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.
 * @param left
 * @param top
 */
        InkRippleCtrl.prototype.createRipple = function(left, top) {
            function rgbaToRGB(color) {
                return color ? color.replace("rgba", "rgb").replace(/,[^\),]+\)/, ")") : "rgb(0,0,0)";
            }
            if (this.isRippleAllowed()) {
                var ctrl = this, ripple = angular.element('<div class="md-ripple"></div>'), width = this.$element.prop("clientWidth"), height = this.$element.prop("clientHeight"), x = 2 * Math.max(Math.abs(width - left), left), y = 2 * Math.max(Math.abs(height - top), top), size = function(fit, x, y) {
                    return fit ? Math.max(x, y) : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                }(this.options.fitRipple, x, y), color = this.calculateColor();
                ripple.css({
                    left: left + "px",
                    top: top + "px",
                    background: "black",
                    width: size + "px",
                    height: size + "px",
                    backgroundColor: rgbaToRGB(color),
                    borderColor: rgbaToRGB(color)
                });
                this.lastRipple = ripple;
                // we only want one timeout to be running at a time
                this.clearTimeout();
                this.timeout = this.$timeout(function() {
                    ctrl.clearTimeout();
                    ctrl.mousedown || ctrl.fadeInComplete(ripple);
                }, 157.5, !1);
                this.options.dimBackground && this.container.css({
                    backgroundColor: color
                });
                this.container.append(ripple);
                this.ripples.push(ripple);
                ripple.addClass("md-ripple-placed");
                this.$mdUtil.nextTick(function() {
                    ripple.addClass("md-ripple-scaled md-ripple-active");
                    ctrl.$timeout(function() {
                        ctrl.clearRipples();
                    }, 450, !1);
                }, !1);
            }
        };
        /**
 * After fadeIn finishes, either kicks off the fade-out animation or queues the element for removal on mouseup
 * @param ripple
 */
        InkRippleCtrl.prototype.fadeInComplete = function(ripple) {
            this.lastRipple === ripple ? this.timeout || this.mousedown || this.removeRipple(ripple) : this.removeRipple(ripple);
        };
        /**
 * Kicks off the animation for removing a ripple
 * @param ripple {Element}
 */
        InkRippleCtrl.prototype.removeRipple = function(ripple) {
            var ctrl = this;
            if (!(this.ripples.indexOf(ripple) < 0)) {
                this.ripples.splice(this.ripples.indexOf(ripple), 1);
                ripple.removeClass("md-ripple-active");
                0 === this.ripples.length && this.container.css({
                    backgroundColor: ""
                });
                // use a 2-second timeout in order to allow for the animation to finish
                // we don't actually care how long the animation takes
                this.$timeout(function() {
                    ctrl.fadeOutComplete(ripple);
                }, 450, !1);
            }
        };
        /**
 * Removes the provided ripple from the DOM
 * @param ripple
 */
        InkRippleCtrl.prototype.fadeOutComplete = function(ripple) {
            ripple.remove();
            this.lastRipple = null;
        };
    }();
    !function() {
        !function() {
            function MdTabInkRipple($mdInkRipple) {
                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: !1,
                        dimBackground: !0,
                        outline: !1,
                        rippleSize: "full"
                    }, options));
                }
                return {
                    attach: attach
                };
            }
            /**
   * @ngdoc service
   * @name $mdTabInkRipple
   * @module material.core
   *
   * @description
   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.
   *
   * @param {object=} scope Scope within the current context
   * @param {object=} element The element the ripple effect should be applied to
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
   */
            angular.module("material.core").factory("$mdTabInkRipple", MdTabInkRipple);
            MdTabInkRipple.$inject = [ "$mdInkRipple" ];
        }();
    }();
    !function() {
        angular.module("material.core.theming.palette", []).constant("$mdColorPalette", {
            red: {
                "50": "#ffebee",
                "100": "#ffcdd2",
                "200": "#ef9a9a",
                "300": "#e57373",
                "400": "#ef5350",
                "500": "#f44336",
                "600": "#e53935",
                "700": "#d32f2f",
                "800": "#c62828",
                "900": "#b71c1c",
                A100: "#ff8a80",
                A200: "#ff5252",
                A400: "#ff1744",
                A700: "#d50000",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 A100",
                contrastStrongLightColors: "400 500 600 700 A200 A400 A700"
            },
            pink: {
                "50": "#fce4ec",
                "100": "#f8bbd0",
                "200": "#f48fb1",
                "300": "#f06292",
                "400": "#ec407a",
                "500": "#e91e63",
                "600": "#d81b60",
                "700": "#c2185b",
                "800": "#ad1457",
                "900": "#880e4f",
                A100: "#ff80ab",
                A200: "#ff4081",
                A400: "#f50057",
                A700: "#c51162",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "500 600 A200 A400 A700"
            },
            purple: {
                "50": "#f3e5f5",
                "100": "#e1bee7",
                "200": "#ce93d8",
                "300": "#ba68c8",
                "400": "#ab47bc",
                "500": "#9c27b0",
                "600": "#8e24aa",
                "700": "#7b1fa2",
                "800": "#6a1b9a",
                "900": "#4a148c",
                A100: "#ea80fc",
                A200: "#e040fb",
                A400: "#d500f9",
                A700: "#aa00ff",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200 A400 A700"
            },
            "deep-purple": {
                "50": "#ede7f6",
                "100": "#d1c4e9",
                "200": "#b39ddb",
                "300": "#9575cd",
                "400": "#7e57c2",
                "500": "#673ab7",
                "600": "#5e35b1",
                "700": "#512da8",
                "800": "#4527a0",
                "900": "#311b92",
                A100: "#b388ff",
                A200: "#7c4dff",
                A400: "#651fff",
                A700: "#6200ea",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200"
            },
            indigo: {
                "50": "#e8eaf6",
                "100": "#c5cae9",
                "200": "#9fa8da",
                "300": "#7986cb",
                "400": "#5c6bc0",
                "500": "#3f51b5",
                "600": "#3949ab",
                "700": "#303f9f",
                "800": "#283593",
                "900": "#1a237e",
                A100: "#8c9eff",
                A200: "#536dfe",
                A400: "#3d5afe",
                A700: "#304ffe",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 A100",
                contrastStrongLightColors: "300 400 A200 A400"
            },
            blue: {
                "50": "#e3f2fd",
                "100": "#bbdefb",
                "200": "#90caf9",
                "300": "#64b5f6",
                "400": "#42a5f5",
                "500": "#2196f3",
                "600": "#1e88e5",
                "700": "#1976d2",
                "800": "#1565c0",
                "900": "#0d47a1",
                A100: "#82b1ff",
                A200: "#448aff",
                A400: "#2979ff",
                A700: "#2962ff",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 400 A100",
                contrastStrongLightColors: "500 600 700 A200 A400 A700"
            },
            "light-blue": {
                "50": "#e1f5fe",
                "100": "#b3e5fc",
                "200": "#81d4fa",
                "300": "#4fc3f7",
                "400": "#29b6f6",
                "500": "#03a9f4",
                "600": "#039be5",
                "700": "#0288d1",
                "800": "#0277bd",
                "900": "#01579b",
                A100: "#80d8ff",
                A200: "#40c4ff",
                A400: "#00b0ff",
                A700: "#0091ea",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900 A700",
                contrastStrongLightColors: "600 700 800 A700"
            },
            cyan: {
                "50": "#e0f7fa",
                "100": "#b2ebf2",
                "200": "#80deea",
                "300": "#4dd0e1",
                "400": "#26c6da",
                "500": "#00bcd4",
                "600": "#00acc1",
                "700": "#0097a7",
                "800": "#00838f",
                "900": "#006064",
                A100: "#84ffff",
                A200: "#18ffff",
                A400: "#00e5ff",
                A700: "#00b8d4",
                contrastDefaultColor: "dark",
                contrastLightColors: "700 800 900",
                contrastStrongLightColors: "700 800 900"
            },
            teal: {
                "50": "#e0f2f1",
                "100": "#b2dfdb",
                "200": "#80cbc4",
                "300": "#4db6ac",
                "400": "#26a69a",
                "500": "#009688",
                "600": "#00897b",
                "700": "#00796b",
                "800": "#00695c",
                "900": "#004d40",
                A100: "#a7ffeb",
                A200: "#64ffda",
                A400: "#1de9b6",
                A700: "#00bfa5",
                contrastDefaultColor: "dark",
                contrastLightColors: "500 600 700 800 900",
                contrastStrongLightColors: "500 600 700"
            },
            green: {
                "50": "#e8f5e9",
                "100": "#c8e6c9",
                "200": "#a5d6a7",
                "300": "#81c784",
                "400": "#66bb6a",
                "500": "#4caf50",
                "600": "#43a047",
                "700": "#388e3c",
                "800": "#2e7d32",
                "900": "#1b5e20",
                A100: "#b9f6ca",
                A200: "#69f0ae",
                A400: "#00e676",
                A700: "#00c853",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900",
                contrastStrongLightColors: "600 700"
            },
            "light-green": {
                "50": "#f1f8e9",
                "100": "#dcedc8",
                "200": "#c5e1a5",
                "300": "#aed581",
                "400": "#9ccc65",
                "500": "#8bc34a",
                "600": "#7cb342",
                "700": "#689f38",
                "800": "#558b2f",
                "900": "#33691e",
                A100: "#ccff90",
                A200: "#b2ff59",
                A400: "#76ff03",
                A700: "#64dd17",
                contrastDefaultColor: "dark",
                contrastLightColors: "700 800 900",
                contrastStrongLightColors: "700 800 900"
            },
            lime: {
                "50": "#f9fbe7",
                "100": "#f0f4c3",
                "200": "#e6ee9c",
                "300": "#dce775",
                "400": "#d4e157",
                "500": "#cddc39",
                "600": "#c0ca33",
                "700": "#afb42b",
                "800": "#9e9d24",
                "900": "#827717",
                A100: "#f4ff81",
                A200: "#eeff41",
                A400: "#c6ff00",
                A700: "#aeea00",
                contrastDefaultColor: "dark",
                contrastLightColors: "900",
                contrastStrongLightColors: "900"
            },
            yellow: {
                "50": "#fffde7",
                "100": "#fff9c4",
                "200": "#fff59d",
                "300": "#fff176",
                "400": "#ffee58",
                "500": "#ffeb3b",
                "600": "#fdd835",
                "700": "#fbc02d",
                "800": "#f9a825",
                "900": "#f57f17",
                A100: "#ffff8d",
                A200: "#ffff00",
                A400: "#ffea00",
                A700: "#ffd600",
                contrastDefaultColor: "dark"
            },
            amber: {
                "50": "#fff8e1",
                "100": "#ffecb3",
                "200": "#ffe082",
                "300": "#ffd54f",
                "400": "#ffca28",
                "500": "#ffc107",
                "600": "#ffb300",
                "700": "#ffa000",
                "800": "#ff8f00",
                "900": "#ff6f00",
                A100: "#ffe57f",
                A200: "#ffd740",
                A400: "#ffc400",
                A700: "#ffab00",
                contrastDefaultColor: "dark"
            },
            orange: {
                "50": "#fff3e0",
                "100": "#ffe0b2",
                "200": "#ffcc80",
                "300": "#ffb74d",
                "400": "#ffa726",
                "500": "#ff9800",
                "600": "#fb8c00",
                "700": "#f57c00",
                "800": "#ef6c00",
                "900": "#e65100",
                A100: "#ffd180",
                A200: "#ffab40",
                A400: "#ff9100",
                A700: "#ff6d00",
                contrastDefaultColor: "dark",
                contrastLightColors: "800 900",
                contrastStrongLightColors: "800 900"
            },
            "deep-orange": {
                "50": "#fbe9e7",
                "100": "#ffccbc",
                "200": "#ffab91",
                "300": "#ff8a65",
                "400": "#ff7043",
                "500": "#ff5722",
                "600": "#f4511e",
                "700": "#e64a19",
                "800": "#d84315",
                "900": "#bf360c",
                A100: "#ff9e80",
                A200: "#ff6e40",
                A400: "#ff3d00",
                A700: "#dd2c00",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300 400 A100 A200",
                contrastStrongLightColors: "500 600 700 800 900 A400 A700"
            },
            brown: {
                "50": "#efebe9",
                "100": "#d7ccc8",
                "200": "#bcaaa4",
                "300": "#a1887f",
                "400": "#8d6e63",
                "500": "#795548",
                "600": "#6d4c41",
                "700": "#5d4037",
                "800": "#4e342e",
                "900": "#3e2723",
                A100: "#d7ccc8",
                A200: "#bcaaa4",
                A400: "#8d6e63",
                A700: "#5d4037",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200",
                contrastStrongLightColors: "300 400"
            },
            grey: {
                "50": "#fafafa",
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "1000": "#000000",
                A100: "#ffffff",
                A200: "#eeeeee",
                A400: "#bdbdbd",
                A700: "#616161",
                contrastDefaultColor: "dark",
                contrastLightColors: "600 700 800 900"
            },
            "blue-grey": {
                "50": "#eceff1",
                "100": "#cfd8dc",
                "200": "#b0bec5",
                "300": "#90a4ae",
                "400": "#78909c",
                "500": "#607d8b",
                "600": "#546e7a",
                "700": "#455a64",
                "800": "#37474f",
                "900": "#263238",
                A100: "#cfd8dc",
                A200: "#b0bec5",
                A400: "#78909c",
                A700: "#455a64",
                contrastDefaultColor: "light",
                contrastDarkColors: "50 100 200 300",
                contrastStrongLightColors: "400 500"
            }
        });
    }();
    !function() {
        function ThemingProvider($mdColorPalette) {
            // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });
            function definePalette(name, map) {
                map = map || {};
                PALETTES[name] = checkPaletteValid(name, map);
                return themingProvider;
            }
            // Returns an new object which is a copy of a given palette `name` with variables from
            // `map` overwritten
            // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });
            function extendPalette(name, map) {
                return checkPaletteValid(name, angular.extend({}, PALETTES[name] || {}, map));
            }
            // Make sure that palette has all required hues
            function checkPaletteValid(name, map) {
                var missingColors = VALID_HUE_VALUES.filter(function(field) {
                    return !map[field];
                });
                if (missingColors.length) throw new Error("Missing colors %1 in palette %2!".replace("%1", missingColors.join(", ")).replace("%2", name));
                return map;
            }
            // Register a theme (which is a collection of color palettes to use with various states
            // ie. warn, accent, primary )
            // Optionally inherit from an existing theme
            // $mdThemingProvider.theme('custom-theme').primaryPalette('red');
            function registerTheme(name, inheritFrom) {
                if (THEMES[name]) return THEMES[name];
                inheritFrom = inheritFrom || "default";
                var parentTheme = "string" == typeof inheritFrom ? THEMES[inheritFrom] : inheritFrom, theme = new Theme(name);
                parentTheme && angular.forEach(parentTheme.colors, function(color, colorType) {
                    theme.colors[colorType] = {
                        name: color.name,
                        // Make sure a COPY of the hues is given to the child color,
                        // not the same reference.
                        hues: angular.extend({}, color.hues)
                    };
                });
                THEMES[name] = theme;
                return theme;
            }
            function Theme(name) {
                function setDark(isDark) {
                    isDark = 0 === arguments.length || !!isDark;
                    // If no change, abort
                    if (isDark !== self.isDark) {
                        self.isDark = isDark;
                        self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
                        self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;
                        // Light and dark themes have different default hues.
                        // Go through each existing color type for this theme, and for every
                        // hue value that is still the default hue value from the previous light/dark setting,
                        // set it to the default hue value from the new light/dark setting.
                        var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES, oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
                        angular.forEach(newDefaultHues, function(newDefaults, colorType) {
                            var color = self.colors[colorType], oldDefaults = oldDefaultHues[colorType];
                            if (color) for (var hueName in color.hues) color.hues[hueName] === oldDefaults[hueName] && (color.hues[hueName] = newDefaults[hueName]);
                        });
                        return self;
                    }
                }
                var self = this;
                self.name = name;
                self.colors = {};
                self.dark = setDark;
                setDark(!1);
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
                    self[colorType + "Palette"] = function(paletteName, hues) {
                        var color = self.colors[colorType] = {
                            name: paletteName,
                            hues: angular.extend({}, defaultHues, hues)
                        };
                        Object.keys(color.hues).forEach(function(name) {
                            if (!defaultHues[name]) throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1", name).replace("%2", self.name).replace("%3", paletteName).replace("%4", Object.keys(defaultHues).join(", ")));
                        });
                        Object.keys(color.hues).map(function(key) {
                            return color.hues[key];
                        }).forEach(function(hueValue) {
                            if (-1 == VALID_HUE_VALUES.indexOf(hueValue)) throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1", hueValue).replace("%2", self.name).replace("%3", colorType).replace("%4", paletteName).replace("%5", VALID_HUE_VALUES.join(", ")));
                        });
                        return self;
                    };
                    self[colorType + "Color"] = function() {
                        var args = Array.prototype.slice.call(arguments);
                        console.warn("$mdThemingProviderTheme." + colorType + "Color() has been deprecated. Use $mdThemingProviderTheme." + colorType + "Palette() instead.");
                        return self[colorType + "Palette"].apply(self, args);
                    };
                });
            }
            /**
   * @ngdoc service
   * @name $mdTheming
   *
   * @description
   *
   * Service that makes an element apply theming related classes to itself.
   *
   * ```js
   * app.directive('myFancyDirective', function($mdTheming) {
   *   return {
   *     restrict: 'e',
   *     link: function(scope, el, attrs) {
   *       $mdTheming(el);
   *     }
   *   };
   * });
   * ```
   * @param {el=} element to apply theming to
   */
            /* @ngInject */
            function ThemingService($rootScope, $log) {
                /**
     * Determine is specified theme name is a valid, registered theme
     */
                function registered(themeName) {
                    return themeName === undefined || "" === themeName || applyTheme.THEMES[themeName] !== undefined;
                }
                /**
     * Get theme name for the element, then update with Theme CSS class
     */
                function inheritTheme(el, parent) {
                    /**
       * Find the theme name from the parent controller or element data
       */
                    function lookupThemeName() {
                        // As a few components (dialog) add their controllers later, we should also watch for a controller init.
                        ctrl = parent.controller("mdTheme") || el.data("$mdThemeController");
                        return ctrl && ctrl.$mdTheme || ("default" == defaultTheme ? "" : defaultTheme);
                    }
                    /**
       * Remove old theme class and apply a new one
       * NOTE: if not a valid theme name, then the current name is not changed
       */
                    function updateThemeClass(theme) {
                        if (theme) {
                            registered(theme) || $log.warn("Attempted to use unregistered theme '" + theme + "'. Register it with $mdThemingProvider.theme().");
                            var oldTheme = el.data("$mdThemeName");
                            oldTheme && el.removeClass("md-" + oldTheme + "-theme");
                            el.addClass("md-" + theme + "-theme");
                            el.data("$mdThemeName", theme);
                            ctrl && el.data("$mdThemeController", ctrl);
                        }
                    }
                    var ctrl = parent.controller("mdTheme"), attrThemeValue = el.attr("md-theme-watch"), watchTheme = (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && "false" != attrThemeValue;
                    updateThemeClass(lookupThemeName());
                    el.on("$destroy", watchTheme ? $rootScope.$watch(lookupThemeName, updateThemeClass) : angular.noop);
                }
                // Allow us to be invoked via a linking function signature.
                var applyTheme = function(scope, el) {
                    if (el === undefined) {
                        el = scope;
                        scope = undefined;
                    }
                    scope === undefined && (scope = $rootScope);
                    applyTheme.inherit(el, el);
                };
                applyTheme.THEMES = angular.extend({}, THEMES);
                applyTheme.inherit = inheritTheme;
                applyTheme.registered = registered;
                applyTheme.defaultTheme = function() {
                    return defaultTheme;
                };
                applyTheme.generateTheme = function(name) {
                    generateTheme(name, nonce);
                };
                return applyTheme;
            }
            PALETTES = {};
            THEMES = {};
            var themingProvider, defaultTheme = "default", alwaysWatchTheme = !1;
            // Load JS Defined Palettes
            angular.extend(PALETTES, $mdColorPalette);
            // Default theme defined in core.js
            ThemingService.$inject = [ "$rootScope", "$log" ];
            return themingProvider = {
                definePalette: definePalette,
                extendPalette: extendPalette,
                theme: registerTheme,
                setNonce: function(nonceValue) {
                    nonce = nonceValue;
                },
                setDefaultTheme: function(theme) {
                    defaultTheme = theme;
                },
                alwaysWatchTheme: function(alwaysWatch) {
                    alwaysWatchTheme = alwaysWatch;
                },
                generateThemesOnDemand: function(onDemand) {
                    generateOnDemand = onDemand;
                },
                $get: ThemingService,
                _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
                _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
                _PALETTES: PALETTES,
                _THEMES: THEMES,
                _parseRules: parseRules,
                _rgba: rgba
            };
        }
        function ThemingDirective($mdTheming, $interpolate, $log) {
            return {
                priority: 100,
                link: {
                    pre: function(scope, el, attrs) {
                        var ctrl = {
                            $setTheme: function(theme) {
                                $mdTheming.registered(theme) || $log.warn("attempted to use unregistered theme '" + theme + "'");
                                ctrl.$mdTheme = theme;
                            }
                        };
                        el.data("$mdThemeController", ctrl);
                        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
                        attrs.$observe("mdTheme", ctrl.$setTheme);
                    }
                }
            };
        }
        function ThemableDirective($mdTheming) {
            return $mdTheming;
        }
        function parseRules(theme, colorType, rules) {
            checkValidPalette(theme, colorType);
            rules = rules.replace(/THEME_NAME/g, theme.name);
            var generatedRules = [], color = theme.colors[colorType], themeNameRegex = new RegExp(".md-" + theme.name + "-theme", "g"), hueRegex = new RegExp("('|\")?{{\\s*(" + colorType + ")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?", "g"), simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g, palette = PALETTES[color.name];
            // find and replace simple variables where we use a specific hue, not an entire palette
            // eg. "{{primary-100}}"
            //\(' + THEME_COLOR_TYPES.join('\|') + '\)'
            rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {
                if ("foreground" === colorType) return "shadow" == hue ? theme.foregroundShadow : theme.foregroundPalette[hue] || theme.foregroundPalette[1];
                0 === hue.indexOf("hue") && (hue = theme.colors[colorType].hues[hue]);
                return rgba((PALETTES[theme.colors[colorType].name][hue] || "")[contrast ? "contrast" : "value"], opacity);
            });
            // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)
            angular.forEach(color.hues, function(hueValue, hueName) {
                var newRule = rules.replace(hueRegex, function(match, _, colorType, hueType, opacity) {
                    return rgba(palette[hueValue]["color" === hueType ? "value" : "contrast"], opacity);
                });
                "default" !== hueName && (newRule = newRule.replace(themeNameRegex, ".md-" + theme.name + "-theme.md-" + hueName));
                // Don't apply a selector rule to the default theme, making it easier to override
                // styles of the base-component
                if ("default" == theme.name) {
                    var themeRuleRegex = /((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g;
                    newRule = newRule.replace(themeRuleRegex, function(match, prefix, target, suffix) {
                        return match + ", " + prefix + target + suffix;
                    });
                }
                generatedRules.push(newRule);
            });
            return generatedRules;
        }
        // Generate our themes at run time given the state of THEMES and PALETTES
        function generateAllThemes($injector) {
            // *************************
            // Internal functions
            // *************************
            // The user specifies a 'default' contrast color as either light or dark,
            // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)
            function sanitizePalette(palette) {
                var defaultContrast = palette.contrastDefaultColor, lightColors = palette.contrastLightColors || [], strongLightColors = palette.contrastStrongLightColors || [], darkColors = palette.contrastDarkColors || [];
                // These colors are provided as space-separated lists
                "string" == typeof lightColors && (lightColors = lightColors.split(" "));
                "string" == typeof strongLightColors && (strongLightColors = strongLightColors.split(" "));
                "string" == typeof darkColors && (darkColors = darkColors.split(" "));
                // Cleanup after ourselves
                delete palette.contrastDefaultColor;
                delete palette.contrastLightColors;
                delete palette.contrastStrongLightColors;
                delete palette.contrastDarkColors;
                // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }
                angular.forEach(palette, function(hueValue, hueName) {
                    if (!angular.isObject(hueValue)) {
                        // Already converted
                        // Map everything to rgb colors
                        var rgbValue = colorToRgbaArray(hueValue);
                        if (!rgbValue) throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1", hueValue).replace("%2", palette.name).replace("%3", hueName));
                        palette[hueName] = {
                            value: rgbValue,
                            contrast: function() {
                                return "light" === defaultContrast ? darkColors.indexOf(hueName) > -1 ? DARK_CONTRAST_COLOR : strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : lightColors.indexOf(hueName) > -1 ? strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR : DARK_CONTRAST_COLOR;
                            }()
                        };
                    }
                });
            }
            var head = document.head, firstChild = head ? head.firstElementChild : null, themeCss = $injector.has("$MD_THEME_CSS") ? $injector.get("$MD_THEME_CSS") : "";
            if (firstChild && 0 !== themeCss.length) {
                // no rules, so no point in running this expensive task
                // Expose contrast colors for palettes to ensure that text is always readable
                angular.forEach(PALETTES, sanitizePalette);
                // MD_THEME_CSS is a string generated by the build process that includes all the themable
                // components as templates
                // Break the CSS into individual rules
                var rules = themeCss.split(/\}(?!(\}|'|"|;))/).filter(function(rule) {
                    return rule && rule.length;
                }).map(function(rule) {
                    return rule.trim() + "}";
                }), ruleMatchRegex = new RegExp("md-(" + THEME_COLOR_TYPES.join("|") + ")", "g");
                THEME_COLOR_TYPES.forEach(function(type) {
                    rulesByType[type] = "";
                });
                // Sort the rules based on type, allowing us to do color substitution on a per-type basis
                rules.forEach(function(rule) {
                    // First: test that if the rule has '.md-accent', it goes into the accent set of rules
                    for (var type, i = (rule.match(ruleMatchRegex), 0); type = THEME_COLOR_TYPES[i]; i++) if (rule.indexOf(".md-" + type) > -1) return rulesByType[type] += rule;
                    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from
                    // there
                    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) if (rule.indexOf(type) > -1) return rulesByType[type] += rule;
                    // Default to the primary array
                    return rulesByType[DEFAULT_COLOR_TYPE] += rule;
                });
                // If themes are being generated on-demand, quit here. The user will later manually
                // call generateTheme to do this on a theme-by-theme basis.
                generateOnDemand || angular.forEach(THEMES, function(theme) {
                    GENERATED[theme.name] || generateTheme(theme.name, nonce);
                });
            }
        }
        function generateTheme(name, nonce) {
            var theme = THEMES[name], head = document.head, firstChild = head ? head.firstElementChild : null;
            if (!GENERATED[name]) {
                // For each theme, use the color palettes specified for
                // `primary`, `warn` and `accent` to generate CSS rules.
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    for (var styleStrings = parseRules(theme, colorType, rulesByType[colorType]); styleStrings.length; ) {
                        var styleContent = styleStrings.shift();
                        if (styleContent) {
                            var style = document.createElement("style");
                            style.setAttribute("md-theme-style", "");
                            nonce && style.setAttribute("nonce", nonce);
                            style.appendChild(document.createTextNode(styleContent));
                            head.insertBefore(style, firstChild);
                        }
                    }
                });
                theme.colors.primary.name == theme.colors.accent.name && console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec.");
                GENERATED[theme.name] = !0;
            }
        }
        function checkValidPalette(theme, colorType) {
            // If theme attempts to use a palette that doesnt exist, throw error
            if (!PALETTES[(theme.colors[colorType] || {}).name]) throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1", theme.name).replace("%2", colorType).replace("%3", Object.keys(PALETTES).join(", ")));
        }
        function colorToRgbaArray(clr) {
            if (angular.isArray(clr) && 3 == clr.length) return clr;
            if (/^rgb/.test(clr)) return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, "").split(",").map(function(value, i) {
                return 3 == i ? parseFloat(value, 10) : parseInt(value, 10);
            });
            "#" == clr.charAt(0) && (clr = clr.substring(1));
            if (/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) {
                var dig = clr.length / 3, red = clr.substr(0, dig), grn = clr.substr(dig, dig), blu = clr.substr(2 * dig);
                if (1 === dig) {
                    red += red;
                    grn += grn;
                    blu += blu;
                }
                return [ parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16) ];
            }
        }
        function rgba(rgbArray, opacity) {
            if (!rgbArray) return "rgb('0,0,0')";
            if (4 == rgbArray.length) {
                rgbArray = angular.copy(rgbArray);
                opacity ? rgbArray.pop() : opacity = rgbArray.pop();
            }
            return opacity && ("number" == typeof opacity || "string" == typeof opacity && opacity.length) ? "rgba(" + rgbArray.join(",") + "," + opacity + ")" : "rgb(" + rgbArray.join(",") + ")";
        }
        angular.module("material.core.theming", [ "material.core.theming.palette" ]).directive("mdTheme", ThemingDirective).directive("mdThemable", ThemableDirective).provider("$mdTheming", ThemingProvider).run(generateAllThemes);
        /**
 * @ngdoc service
 * @name $mdThemingProvider
 * @module material.core.theming
 *
 * @description Provider to configure the `$mdTheming` service.
 */
        /**
 * @ngdoc method
 * @name $mdThemingProvider#setNonce
 * @param {string} nonceValue The nonce to be added as an attribute to the theme style tags.
 * Setting a value allows the use CSP policy without using the unsafe-inline directive.
 */
        /**
 * @ngdoc method
 * @name $mdThemingProvider#setDefaultTheme
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.
 */
        /**
 * @ngdoc method
 * @name $mdThemingProvider#alwaysWatchTheme
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply
 * classes when they change. Default is `false`. Enabling can reduce performance.
 */
        /* Some Example Valid Theming Expressions
 * =======================================
 *
 * Intention group expansion: (valid for primary, accent, warn, background)
 *
 * {{primary-100}} - grab shade 100 from the primary palette
 * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7
 * {{primary-100-contrast}} - grab shade 100's contrast color
 * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette
 * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1
 * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue
 * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules
 * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
 * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules
 *
 * Foreground expansion: Applies rgba to black/white foreground text
 *
 * {{foreground-1}} - used for primary text
 * {{foreground-2}} - used for secondary text/divider
 * {{foreground-3}} - used for disabled text
 * {{foreground-4}} - used for dividers
 *
 */
        // In memory generated CSS rules; registered by theme.name
        var PALETTES, THEMES, GENERATED = {}, DARK_FOREGROUND = {
            name: "dark",
            "1": "rgba(0,0,0,0.87)",
            "2": "rgba(0,0,0,0.54)",
            "3": "rgba(0,0,0,0.26)",
            "4": "rgba(0,0,0,0.12)"
        }, LIGHT_FOREGROUND = {
            name: "light",
            "1": "rgba(255,255,255,1.0)",
            "2": "rgba(255,255,255,0.7)",
            "3": "rgba(255,255,255,0.3)",
            "4": "rgba(255,255,255,0.12)"
        }, DARK_SHADOW = "1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)", LIGHT_SHADOW = "", DARK_CONTRAST_COLOR = colorToRgbaArray("rgba(0,0,0,0.87)"), LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgba(255,255,255,0.87)"), STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray("rgb(255,255,255)"), THEME_COLOR_TYPES = [ "primary", "accent", "warn", "background" ], DEFAULT_COLOR_TYPE = "primary", LIGHT_DEFAULT_HUES = {
            accent: {
                default: "A200",
                "hue-1": "A100",
                "hue-2": "A400",
                "hue-3": "A700"
            },
            background: {
                default: "A100",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "900"
            }
        }, DARK_DEFAULT_HUES = {
            background: {
                default: "800",
                "hue-1": "600",
                "hue-2": "300",
                "hue-3": "900"
            }
        };
        THEME_COLOR_TYPES.forEach(function(colorType) {
            // Color types with unspecified default hues will use these default hue values
            var defaultDefaultHues = {
                default: "500",
                "hue-1": "300",
                "hue-2": "800",
                "hue-3": "A100"
            };
            LIGHT_DEFAULT_HUES[colorType] || (LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues);
            DARK_DEFAULT_HUES[colorType] || (DARK_DEFAULT_HUES[colorType] = defaultDefaultHues);
        });
        var VALID_HUE_VALUES = [ "50", "100", "200", "300", "400", "500", "600", "700", "800", "900", "A100", "A200", "A400", "A700" ], generateOnDemand = !1, nonce = null;
        ThemingProvider.$inject = [ "$mdColorPalette" ];
        ThemingDirective.$inject = [ "$mdTheming", "$interpolate", "$log" ];
        ThemableDirective.$inject = [ "$mdTheming" ];
        var rulesByType = {};
        generateAllThemes.$inject = [ "$injector" ];
    }();
    !function() {
        /**
 * Factory function that requires special injections
 */
        function AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {
            var self;
            return self = {
                /**
     *
     */
                translate3d: function(target, from, to, options) {
                    /**
       * Specific reversal of the request translate animation above...
       */
                    function reverseTranslate(newFrom) {
                        return $animateCss(target, {
                            to: newFrom || from,
                            addClass: options.transitionOutClass,
                            removeClass: options.transitionInClass
                        }).start();
                    }
                    return $animateCss(target, {
                        from: from,
                        to: to,
                        addClass: options.transitionInClass,
                        removeClass: options.transitionOutClass
                    }).start().then(function() {
                        // Resolve with reverser function...
                        return reverseTranslate;
                    });
                },
                /**
     * Listen for transitionEnd event (with optional timeout)
     * Announce completion or failure via promise handlers
     */
                waitTransitionEnd: function(element, opts) {
                    // fallback is 3 secs
                    return $q(function(resolve, reject) {
                        /**
         * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.
         * NOTE: Make sure this transitionEnd didn't bubble up from a child
         */
                        function finished(ev) {
                            if (!ev || ev.target === element[0]) {
                                ev && $timeout.cancel(timer);
                                element.off($mdConstant.CSS.TRANSITIONEND, finished);
                                // Never reject since ngAnimate may cause timeouts due missed transitionEnd events
                                resolve();
                            }
                        }
                        opts = opts || {};
                        var timer = $timeout(finished, opts.timeout || 3e3);
                        element.on($mdConstant.CSS.TRANSITIONEND, finished);
                    });
                },
                calculateTransformValues: function(element, originator) {
                    var origin = originator.element, bounds = originator.bounds;
                    if (origin || bounds) {
                        var originBnds = origin ? self.clientRect(origin) || /**
       * This is a fallback if the origin information is no longer valid, then the
       * origin bounds simply becomes the current bounds for the dialogContainer's parent
       */
                        function() {
                            var cntr = element ? element.parent() : null, parent = cntr ? cntr.parent() : null;
                            return parent ? self.clientRect(parent) : null;
                        }() : self.copyRect(bounds), dialogRect = self.copyRect(element[0].getBoundingClientRect()), dialogCenterPt = self.centerPointFor(dialogRect), originCenterPt = self.centerPointFor(originBnds);
                        return {
                            centerX: originCenterPt.x - dialogCenterPt.x,
                            centerY: originCenterPt.y - dialogCenterPt.y,
                            scaleX: Math.round(100 * Math.min(.5, originBnds.width / dialogRect.width)) / 100,
                            scaleY: Math.round(100 * Math.min(.5, originBnds.height / dialogRect.height)) / 100
                        };
                    }
                    return {
                        centerX: 0,
                        centerY: 0,
                        scaleX: .5,
                        scaleY: .5
                    };
                },
                /**
     * Calculate the zoom transform from dialog to origin.
     *
     * We use this to set the dialog position immediately;
     * then the md-transition-in actually translates back to
     * `translate3d(0,0,0) scale(1.0)`...
     *
     * NOTE: all values are rounded to the nearest integer
     */
                calculateZoomToOrigin: function(element, originator) {
                    return angular.bind(null, $mdUtil.supplant, "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )")(self.calculateTransformValues(element, originator));
                },
                /**
     * Calculate the slide transform from panel to origin.
     * NOTE: all values are rounded to the nearest integer
     */
                calculateSlideToOrigin: function(element, originator) {
                    return angular.bind(null, $mdUtil.supplant, "translate3d( {centerX}px, {centerY}px, 0 )")(self.calculateTransformValues(element, originator));
                },
                /**
     * Enhance raw values to represent valid css stylings...
     */
                toCss: function(raw) {
                    function convertToVendor(key, vendor, value) {
                        angular.forEach(vendor.split(" "), function(key) {
                            css[key] = value;
                        });
                    }
                    var css = {};
                    angular.forEach(raw, function(value, key) {
                        if (!angular.isUndefined(value)) if ("left top right bottom width height x y min-width min-height max-width max-height".indexOf(key) >= 0) css[key] = value + "px"; else switch (key) {
                          case "transition":
                            convertToVendor(key, $mdConstant.CSS.TRANSITION, value);
                            break;

                          case "transform":
                            convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);
                            break;

                          case "transformOrigin":
                            convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);
                        }
                    });
                    return css;
                },
                /**
     * Convert the translate CSS value to key/value pair(s).
     */
                toTransformCss: function(transform, addTransition, transition) {
                    var css = {};
                    angular.forEach($mdConstant.CSS.TRANSFORM.split(" "), function(key) {
                        css[key] = transform;
                    });
                    if (addTransition) {
                        transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";
                        css.transition = transition;
                    }
                    return css;
                },
                /**
     *  Clone the Rect and calculate the height/width if needed
     */
                copyRect: function(source, destination) {
                    if (!source) return null;
                    destination = destination || {};
                    angular.forEach("left top right bottom width height".split(" "), function(key) {
                        destination[key] = Math.round(source[key]);
                    });
                    destination.width = destination.width || destination.right - destination.left;
                    destination.height = destination.height || destination.bottom - destination.top;
                    return destination;
                },
                /**
     * Calculate ClientRect of element; return null if hidden or zero size
     */
                clientRect: function(element) {
                    var bounds = angular.element(element)[0].getBoundingClientRect();
                    // If the event origin element has zero size, it has probably been hidden.
                    return function(rect) {
                        return rect && rect.width > 0 && rect.height > 0;
                    }(bounds) ? self.copyRect(bounds) : null;
                },
                /**
     *  Calculate 'rounded' center point of Rect
     */
                centerPointFor: function(targetRect) {
                    return targetRect ? {
                        x: Math.round(targetRect.left + targetRect.width / 2),
                        y: Math.round(targetRect.top + targetRect.height / 2)
                    } : {
                        x: 0,
                        y: 0
                    };
                }
            };
        }
        // Polyfill angular < 1.4 (provide $animateCss)
        angular.module("material.core").factory("$$mdAnimate", [ "$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss) {
            // Since $$mdAnimate is injected into $mdUtil... use a wrapper function
            // to subsequently inject $mdUtil as an argument to the AnimateDomUtils
            return function($mdUtil) {
                return AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss);
            };
        } ]);
    }();
    !function() {
        angular.version.minor >= 4 ? angular.module("material.core.animate", []) : function() {
            /**
   * Older browsers [FF31] expect camelCase
   * property keys.
   * e.g.
   *  animation-duration --> animationDuration
   */
            function camelCase(str) {
                return str.replace(/-[a-z]/g, function(str) {
                    return str.charAt(1).toUpperCase();
                });
            }
            var forEach = angular.forEach, WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance), PREFIX = WEBKIT ? "-webkit-" : "", TRANSITION_EVENTS = (WEBKIT ? "webkitTransitionEnd " : "") + "transitionend", ANIMATION_EVENTS = (WEBKIT ? "webkitAnimationEnd " : "") + "animationend", $$ForceReflowFactory = [ "$document", function($document) {
                return function() {
                    return $document[0].body.clientWidth + 1;
                };
            } ], $$rAFMutexFactory = [ "$$rAF", function($$rAF) {
                return function() {
                    var passed = !1;
                    $$rAF(function() {
                        passed = !0;
                    });
                    return function(fn) {
                        passed ? fn() : $$rAF(fn);
                    };
                };
            } ], $$AnimateRunnerFactory = [ "$q", "$$rAFMutex", function($q, $$rAFMutex) {
                function AnimateRunner(host) {
                    this.setHost(host);
                    this._doneCallbacks = [];
                    this._runInAnimationFrame = $$rAFMutex();
                    this._state = 0;
                }
                AnimateRunner.prototype = {
                    setHost: function(host) {
                        this.host = host || {};
                    },
                    done: function(fn) {
                        2 === this._state ? fn() : this._doneCallbacks.push(fn);
                    },
                    progress: angular.noop,
                    getPromise: function() {
                        if (!this.promise) {
                            var self = this;
                            this.promise = $q(function(resolve, reject) {
                                self.done(function(status) {
                                    !1 === status ? reject() : resolve();
                                });
                            });
                        }
                        return this.promise;
                    },
                    then: function(resolveHandler, rejectHandler) {
                        return this.getPromise().then(resolveHandler, rejectHandler);
                    },
                    catch: function(handler) {
                        return this.getPromise().catch(handler);
                    },
                    finally: function(handler) {
                        return this.getPromise().finally(handler);
                    },
                    pause: function() {
                        this.host.pause && this.host.pause();
                    },
                    resume: function() {
                        this.host.resume && this.host.resume();
                    },
                    end: function() {
                        this.host.end && this.host.end();
                        this._resolve(!0);
                    },
                    cancel: function() {
                        this.host.cancel && this.host.cancel();
                        this._resolve(!1);
                    },
                    complete: function(response) {
                        var self = this;
                        if (0 === self._state) {
                            self._state = 1;
                            self._runInAnimationFrame(function() {
                                self._resolve(response);
                            });
                        }
                    },
                    _resolve: function(response) {
                        if (2 !== this._state) {
                            forEach(this._doneCallbacks, function(fn) {
                                fn(response);
                            });
                            this._doneCallbacks.length = 0;
                            this._state = 2;
                        }
                    }
                };
                return AnimateRunner;
            } ];
            angular.module("material.core.animate", []).factory("$$forceReflow", $$ForceReflowFactory).factory("$$AnimateRunner", $$AnimateRunnerFactory).factory("$$rAFMutex", $$rAFMutexFactory).factory("$animateCss", [ "$window", "$$rAF", "$$AnimateRunner", "$$forceReflow", "$$jqLite", "$timeout", "$animate", function($window, $$rAF, $$AnimateRunner, $$forceReflow, $$jqLite, $timeout, $animate) {
                function init(element, options) {
                    var temporaryStyles = [], node = getDomNode(element), areAnimationsAllowed = node && $animate.enabled(), hasCompleteStyles = !1, hasCompleteClasses = !1;
                    if (areAnimationsAllowed) {
                        options.transitionStyle && temporaryStyles.push([ PREFIX + "transition", options.transitionStyle ]);
                        options.keyframeStyle && temporaryStyles.push([ PREFIX + "animation", options.keyframeStyle ]);
                        options.delay && temporaryStyles.push([ PREFIX + "transition-delay", options.delay + "s" ]);
                        options.duration && temporaryStyles.push([ PREFIX + "transition-duration", options.duration + "s" ]);
                        hasCompleteStyles = options.keyframeStyle || options.to && (options.duration > 0 || options.transitionStyle);
                        hasCompleteClasses = !!options.addClass || !!options.removeClass;
                        blockTransition(element, !0);
                    }
                    var hasCompleteAnimation = areAnimationsAllowed && (hasCompleteStyles || hasCompleteClasses);
                    applyAnimationFromStyles(element, options);
                    var events, eventFn, animationClosed = !1;
                    return {
                        close: $window.close,
                        start: function() {
                            function close() {
                                if (!animationClosed) {
                                    animationClosed = !0;
                                    events && eventFn && element.off(events, eventFn);
                                    applyClasses(element, options);
                                    applyAnimationStyles(element, options);
                                    forEach(temporaryStyles, function(entry) {
                                        node.style[camelCase(entry[0])] = "";
                                    });
                                    runner.complete(!0);
                                    return runner;
                                }
                            }
                            var runner = new $$AnimateRunner();
                            waitUntilQuiet(function() {
                                blockTransition(element, !1);
                                if (!hasCompleteAnimation) return close();
                                forEach(temporaryStyles, function(entry) {
                                    var key = entry[0], value = entry[1];
                                    node.style[camelCase(key)] = value;
                                });
                                applyClasses(element, options);
                                var timings = computeTimings(element);
                                if (0 === timings.duration) return close();
                                var moreStyles = [];
                                if (options.easing) {
                                    timings.transitionDuration && moreStyles.push([ PREFIX + "transition-timing-function", options.easing ]);
                                    timings.animationDuration && moreStyles.push([ PREFIX + "animation-timing-function", options.easing ]);
                                }
                                options.delay && timings.animationDelay && moreStyles.push([ PREFIX + "animation-delay", options.delay + "s" ]);
                                options.duration && timings.animationDuration && moreStyles.push([ PREFIX + "animation-duration", options.duration + "s" ]);
                                forEach(moreStyles, function(entry) {
                                    var key = entry[0], value = entry[1];
                                    node.style[camelCase(key)] = value;
                                    temporaryStyles.push(entry);
                                });
                                var maxDelay = timings.delay, maxDelayTime = 1e3 * maxDelay, maxDuration = timings.duration, maxDurationTime = 1e3 * maxDuration, startTime = Date.now();
                                events = [];
                                timings.transitionDuration && events.push(TRANSITION_EVENTS);
                                timings.animationDuration && events.push(ANIMATION_EVENTS);
                                events = events.join(" ");
                                eventFn = function(event) {
                                    event.stopPropagation();
                                    var ev = event.originalEvent || event, timeStamp = ev.timeStamp || Date.now(), elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));
                                    Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration && close();
                                };
                                element.on(events, eventFn);
                                applyAnimationToStyles(element, options);
                                $timeout(close, maxDelayTime + 1.5 * maxDurationTime, !1);
                            });
                            return runner;
                        }
                    };
                }
                function applyClasses(element, options) {
                    if (options.addClass) {
                        $$jqLite.addClass(element, options.addClass);
                        options.addClass = null;
                    }
                    if (options.removeClass) {
                        $$jqLite.removeClass(element, options.removeClass);
                        options.removeClass = null;
                    }
                }
                function computeTimings(element) {
                    function prop(key) {
                        return WEBKIT ? "Webkit" + key.charAt(0).toUpperCase() + key.substr(1) : key;
                    }
                    var node = getDomNode(element), cs = $window.getComputedStyle(node), tdr = parseMaxTime(cs[prop("transitionDuration")]), adr = parseMaxTime(cs[prop("animationDuration")]), tdy = parseMaxTime(cs[prop("transitionDelay")]), ady = parseMaxTime(cs[prop("animationDelay")]);
                    adr *= parseInt(cs[prop("animationIterationCount")], 10) || 1;
                    return {
                        duration: Math.max(adr, tdr),
                        delay: Math.max(ady, tdy),
                        animationDuration: adr,
                        transitionDuration: tdr,
                        animationDelay: ady,
                        transitionDelay: tdy
                    };
                }
                function parseMaxTime(str) {
                    var maxValue = 0, values = (str || "").split(/\s*,\s*/);
                    forEach(values, function(value) {
                        // it's always safe to consider only second values and omit `ms` values since
                        // getComputedStyle will always handle the conversion for us
                        "s" == value.charAt(value.length - 1) && (value = value.substring(0, value.length - 1));
                        value = parseFloat(value) || 0;
                        maxValue = maxValue ? Math.max(value, maxValue) : value;
                    });
                    return maxValue;
                }
                function waitUntilQuiet(callback) {
                    cancelLastRAFRequest && cancelLastRAFRequest();
                    rafWaitQueue.push(callback);
                    cancelLastRAFRequest = $$rAF(function() {
                        cancelLastRAFRequest = null;
                        // we use a for loop to ensure that if the queue is changed
                        // during this looping then it will consider new requests
                        for (var pageWidth = $$forceReflow(), i = 0; i < rafWaitQueue.length; i++) rafWaitQueue[i](pageWidth);
                        rafWaitQueue.length = 0;
                    });
                }
                function applyAnimationStyles(element, options) {
                    applyAnimationFromStyles(element, options);
                    applyAnimationToStyles(element, options);
                }
                function applyAnimationFromStyles(element, options) {
                    if (options.from) {
                        element.css(options.from);
                        options.from = null;
                    }
                }
                function applyAnimationToStyles(element, options) {
                    if (options.to) {
                        element.css(options.to);
                        options.to = null;
                    }
                }
                function getDomNode(element) {
                    for (var i = 0; i < element.length; i++) if (1 === element[i].nodeType) return element[i];
                }
                function blockTransition(element, bool) {
                    var node = getDomNode(element), key = camelCase(PREFIX + "transition-delay");
                    node.style[key] = bool ? "-9999s" : "";
                }
                var cancelLastRAFRequest, rafWaitQueue = [];
                return init;
            } ]);
        }();
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.autocomplete
 */
        /*
 * @see js folder for autocomplete implementation
 */
        angular.module("material.components.autocomplete", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]);
    }();
    !function() {
        /*
 * @ngdoc module
 * @name material.components.backdrop
 * @description Backdrop
 */
        /**
 * @ngdoc directive
 * @name mdBackdrop
 * @module material.components.backdrop
 *
 * @restrict E
 *
 * @description
 * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.
 * Apply class `opaque` to make the backdrop use the theme backdrop color.
 *
 */
        angular.module("material.components.backdrop", [ "material.core" ]).directive("mdBackdrop", [ "$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
            function postLink(scope, element, attrs) {
                // If body scrolling has been disabled using mdUtil.disableBodyScroll(),
                // adjust the 'backdrop' height to account for the fixed 'body' top offset
                var body = $window.getComputedStyle($document[0].body);
                if ("fixed" == body.position) {
                    var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));
                    element.css({
                        height: hViewport + "px"
                    });
                }
                // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless
                $animate.pin && $animate.pin(element, $rootElement);
                $$rAF(function() {
                    // Often $animate.enter() is used to append the backDrop element
                    // so let's wait until $animate is done...
                    var parent = element.parent()[0];
                    if (parent) {
                        "BODY" == parent.nodeName && element.css({
                            position: "fixed"
                        });
                        "static" == $window.getComputedStyle(parent).position && // backdrop uses position:absolute and will not work properly with parent position:static (default)
                        $log.warn(ERROR_CSS_POSITION);
                    }
                    // Only inherit the parent if the backdrop has a parent.
                    element.parent().length && $mdTheming.inherit(element, element.parent());
                });
            }
            var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";
            return {
                restrict: "E",
                link: postLink
            };
        } ]);
    }();
    !function() {
        /* @ngInject */
        function MdBottomSheetDirective($mdBottomSheet) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    // When navigation force destroys an interimElement, then
                    // listen and $destroy() that interim instance...
                    scope.$on("$destroy", function() {
                        $mdBottomSheet.destroy();
                    });
                }
            };
        }
        /**
 * @ngdoc service
 * @name $mdBottomSheet
 * @module material.components.bottomSheet
 *
 * @description
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.
 *
 * ## Restrictions
 *
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.
 * - Add the `md-grid` class to the bottom sheet for a grid layout.
 * - Add the `md-list` class to the bottom sheet for a list layout.
 *
 * @usage
 * <hljs lang="html">
 * <div ng-controller="MyController">
 *   <md-button ng-click="openBottomSheet()">
 *     Open a Bottom Sheet!
 *   </md-button>
 * </div>
 * </hljs>
 * <hljs lang="js">
 * var app = angular.module('app', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdBottomSheet) {
 *   $scope.openBottomSheet = function() {
 *     $mdBottomSheet.show({
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'
 *     });
 *   };
 * });
 * </hljs>
 */
        /**
 * @ngdoc method
 * @name $mdBottomSheet#show
 *
 * @description
 * Show a bottom sheet with the specified options.
 *
 * @param {object} options An options object, with the following properties:
 *
 *   - `templateUrl` - `{string=}`: The url of an html template file that will
 *   be used as the content of the bottom sheet. Restrictions: the template must
 *   have an outer `md-bottom-sheet` element.
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
 *   template string.
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
 *   be used as names of values to inject into the controller. For example,
 *   `locals: {three: 3}` would inject `three` into the controller with the value
 *   of 3.
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the bottom sheet to
 *     close it. Default true.
 *   - `disableBackdrop` - `{boolean=}`: When set to true, the bottomsheet will not show a backdrop.
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the bottom sheet.
 *     Default true.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
 *   and the bottom sheet will not open until the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,
 *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
 *   e.g. angular.element(document.getElementById('content')) or "#content"
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.
 *     Default true.
 *
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or
 * rejected with `$mdBottomSheet.cancel()`.
 */
        /**
 * @ngdoc method
 * @name $mdBottomSheet#hide
 *
 * @description
 * Hide the existing bottom sheet and resolve the promise returned from
 * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).
 *
 * @param {*=} response An argument for the resolved promise.
 *
 */
        /**
 * @ngdoc method
 * @name $mdBottomSheet#cancel
 *
 * @description
 * Hide the existing bottom sheet and reject the promise returned from
 * `$mdBottomSheet.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 */
        function MdBottomSheetProvider($$interimElementProvider) {
            /* @ngInject */
            function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
                function onShow(scope, element, options, controller) {
                    element = $mdUtil.extractElementByName(element, "md-bottom-sheet");
                    // prevent tab focus or click focus on the bottom-sheet container
                    element.attr("tabindex", "-1");
                    if (!options.disableBackdrop) {
                        // Add a backdrop that will close on click
                        backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");
                        // Prevent mouse focus on backdrop; ONLY programatic focus allowed.
                        // This allows clicks on backdrop to propogate to the $rootElement and
                        // ESC key events to be detected properly.
                        backdrop[0].tabIndex = -1;
                        options.clickOutsideToClose && backdrop.on("click", function() {
                            $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                        });
                        $mdTheming.inherit(backdrop, options.parent);
                        $animate.enter(backdrop, options.parent, null);
                    }
                    var bottomSheet = new BottomSheet(element, options.parent);
                    options.bottomSheet = bottomSheet;
                    $mdTheming.inherit(bottomSheet.element, options.parent);
                    options.disableParentScroll && (options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent));
                    return $animate.enter(bottomSheet.element, options.parent, backdrop).then(function() {
                        var focusable = $mdUtil.findFocusTarget(element) || angular.element(element[0].querySelector("button") || element[0].querySelector("a") || element[0].querySelector("[ng-click]")) || backdrop;
                        if (options.escapeToClose) {
                            options.rootElementKeyupCallback = function(e) {
                                e.keyCode === $mdConstant.KEY_CODE.ESCAPE && $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                            };
                            $rootElement.on("keyup", options.rootElementKeyupCallback);
                            focusable && focusable.focus();
                        }
                    });
                }
                function onRemove(scope, element, options) {
                    var bottomSheet = options.bottomSheet;
                    options.disableBackdrop || $animate.leave(backdrop);
                    return $animate.leave(bottomSheet.element).then(function() {
                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }
                        bottomSheet.cleanup();
                    });
                }
                /**
     * BottomSheet class to apply bottom-sheet behavior to an element
     */
                function BottomSheet(element, parent) {
                    function onDragStart(ev) {
                        // Disable transitions on transform so that it feels fast
                        element.css($mdConstant.CSS.TRANSITION_DURATION, "0ms");
                    }
                    function onDrag(ev) {
                        var transform = ev.pointer.distanceY;
                        transform < 5 && (// Slow down drag when trying to drag up, and stop after PADDING
                        transform = Math.max(-PADDING, transform / 2));
                        element.css($mdConstant.CSS.TRANSFORM, "translate3d(0," + (PADDING + transform) + "px,0)");
                    }
                    function onDragEnd(ev) {
                        if (ev.pointer.distanceY > 0 && (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {
                            var distanceRemaining = element.prop("offsetHeight") - ev.pointer.distanceY, transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * .75, 500);
                            element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + "ms");
                            $mdUtil.nextTick($mdBottomSheet.cancel, !0);
                        } else {
                            element.css($mdConstant.CSS.TRANSITION_DURATION, "");
                            element.css($mdConstant.CSS.TRANSFORM, "");
                        }
                    }
                    var deregister = $mdGesture.register(parent, "drag", {
                        horizontal: !1
                    });
                    parent.on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                    return {
                        element: element,
                        cleanup: function() {
                            deregister();
                            parent.off("$md.dragstart", onDragStart);
                            parent.off("$md.drag", onDrag);
                            parent.off("$md.dragend", onDragEnd);
                        }
                    };
                }
                var backdrop;
                return {
                    themable: !0,
                    onShow: onShow,
                    onRemove: onRemove,
                    disableBackdrop: !1,
                    escapeToClose: !0,
                    clickOutsideToClose: !0,
                    disableParentScroll: !0
                };
            }
            // how fast we need to flick down to close the sheet, pixels/ms
            var CLOSING_VELOCITY = .5, PADDING = 80;
            // same as css
            bottomSheetDefaults.$inject = [ "$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture" ];
            return $$interimElementProvider("$mdBottomSheet").setDefaults({
                methods: [ "disableParentScroll", "escapeToClose", "clickOutsideToClose" ],
                options: bottomSheetDefaults
            });
        }
        /**
 * @ngdoc module
 * @name material.components.bottomSheet
 * @description
 * BottomSheet
 */
        angular.module("material.components.bottomSheet", [ "material.core", "material.components.backdrop" ]).directive("mdBottomSheet", MdBottomSheetDirective).provider("$mdBottomSheet", MdBottomSheetProvider);
        MdBottomSheetDirective.$inject = [ "$mdBottomSheet" ];
        MdBottomSheetProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdButton
 * @module material.components.button
 *
 * @restrict E
 *
 * @description
 * `<md-button>` is a button directive with optional ink ripples (default enabled).
 *
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will
 * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.
 * @param {expression=} ng-disabled En/Disable based on the expression
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.
 * If no default text is found, a warning will be logged.
 *
 * @usage
 *
 * Regular buttons:
 *
 * <hljs lang="html">
 *  <md-button> Flat Button </md-button>
 *  <md-button href="http://google.com"> Flat link </md-button>
 *  <md-button class="md-raised"> Raised Button </md-button>
 *  <md-button ng-disabled="true"> Disabled Button </md-button>
 *  <md-button>
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *    Register Now
 *  </md-button>
 * </hljs>
 *
 * FAB buttons:
 *
 * <hljs lang="html">
 *  <md-button class="md-fab" aria-label="FAB">
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *  </md-button>
 *  <!-- mini-FAB -->
 *  <md-button class="md-fab md-mini" aria-label="Mini FAB">
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>
 *  </md-button>
 *  <!-- Button with SVG Icon -->
 *  <md-button class="md-icon-button" aria-label="Custom Icon Button">
 *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>
 *  </md-button>
 * </hljs>
 */
        function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {
            function isAnchor(attr) {
                return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
            }
            function getTemplate(element, attr) {
                return isAnchor(attr) ? '<a class="md-button" ng-transclude></a>' : '<button class="md-button" type="' + (void 0 === attr.type ? "button" : attr.type) + '" ng-transclude></button>';
            }
            function postLink(scope, element, attr) {
                $mdTheming(element);
                $mdButtonInkRipple.attach(scope, element);
                // Use async expect to support possible bindings in the button label
                $mdAria.expectWithText(element, "aria-label");
                // For anchor elements, we have to set tabindex manually when the
                // element is disabled
                isAnchor(attr) && angular.isDefined(attr.ngDisabled) && scope.$watch(attr.ngDisabled, function(isDisabled) {
                    element.attr("tabindex", isDisabled ? -1 : 0);
                });
                // disabling click event when disabled is true
                element.on("click", function(e) {
                    if (!0 === attr.disabled) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });
                // restrict focus styles to the keyboard
                scope.mouseActive = !1;
                element.on("mousedown", function() {
                    scope.mouseActive = !0;
                    $timeout(function() {
                        scope.mouseActive = !1;
                    }, 100);
                }).on("focus", function() {
                    !1 === scope.mouseActive && element.addClass("md-focused");
                }).on("blur", function(ev) {
                    element.removeClass("md-focused");
                });
            }
            return {
                restrict: "EA",
                replace: !0,
                transclude: !0,
                template: getTemplate,
                link: postLink
            };
        }
        /**
 * @ngdoc module
 * @name material.components.button
 * @description
 *
 * Button
 */
        angular.module("material.components.button", [ "material.core" ]).directive("mdButton", MdButtonDirective);
        MdButtonDirective.$inject = [ "$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdCard
 * @module material.components.card
 *
 * @restrict E
 *
 * @description
 * The `<md-card>` directive is a container element used within `<md-content>` containers.
 *
 * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`
 * container will wrap text content and provide padding. An `<md-card-footer>` element can be
 * optionally included to put content flush against the bottom edge of the card.
 *
 * Action buttons can be included in an `<md-card-actions>` element, similar to `<md-dialog-actions>`.
 * You can then position buttons using layout attributes.
 *
 * Card is built with:
 * * `<md-card-header>` - Header for the card, holds avatar, text and squared image
 *  - `<md-card-avatar>` - Card avatar
 *    - `md-user-avatar` - Class for user image
 *    - `<md-icon>`
 *  - `<md-card-header-text>` - Contains elements for the card description
 *    - `md-title` - Class for the card title
 *    - `md-subhead` - Class for the card sub header
 * * `<img>` - Image for the card
 * * `<md-card-title>` - Card content title
 *  - `<md-card-title-text>`
 *    - `md-headline` - Class for the card content title
 *    - `md-subhead` - Class for the card content sub header
 *  - `<md-card-title-media>` - Squared image within the title
 *    - `md-media-sm` - Class for small image
 *    - `md-media-md` - Class for medium image
 *    - `md-media-lg` - Class for large image
 * * `<md-card-content>` - Card content
 *  - `md-media-xl` - Class for extra large image
 * * `<md-card-actions>` - Card actions
 *  - `<md-card-icon-actions>` - Icon actions
 *
 * Cards have constant width and variable heights; where the maximum height is limited to what can
 * fit within a single view on a platform, but it can temporarily expand as needed.
 *
 * @usage
 * ### Card with optional footer
 * <hljs lang="html">
 * <md-card>
 *  <img src="card-image.png" class="md-card-image" alt="image caption">
 *  <md-card-content>
 *    <h2>Card headline</h2>
 *    <p>Card content</p>
 *  </md-card-content>
 *  <md-card-footer>
 *    Card footer
 *  </md-card-footer>
 * </md-card>
 * </hljs>
 *
 * ### Card with actions
 * <hljs lang="html">
 * <md-card>
 *  <img src="card-image.png" class="md-card-image" alt="image caption">
 *  <md-card-content>
 *    <h2>Card headline</h2>
 *    <p>Card content</p>
 *  </md-card-content>
 *  <md-card-actions layout="row" layout-align="end center">
 *    <md-button>Action 1</md-button>
 *    <md-button>Action 2</md-button>
 *  </md-card-actions>
 * </md-card>
 * </hljs>
 *
 * ### Card with header, image, title actions and content
 * <hljs lang="html">
 * <md-card>
 *   <md-card-header>
 *     <md-card-avatar>
 *       <img class="md-user-avatar" src="avatar.png"/>
 *     </md-card-avatar>
 *     <md-card-header-text>
 *       <span class="md-title">Title</span>
 *       <span class="md-subhead">Sub header</span>
 *     </md-card-header-text>
 *   </md-card-header>
 *   <img ng-src="card-image.png" class="md-card-image" alt="image caption">
 *   <md-card-title>
 *     <md-card-title-text>
 *       <span class="md-headline">Card headline</span>
 *       <span class="md-subhead">Card subheader</span>
 *     </md-card-title-text>
 *   </md-card-title>
 *   <md-card-actions layout="row" layout-align="start center">
 *     <md-button>Action 1</md-button>
 *     <md-button>Action 2</md-button>
 *     <md-card-icon-actions>
 *       <md-button class="md-icon-button" aria-label="icon">
 *         <md-icon md-svg-icon="icon"></md-icon>
 *       </md-button>
 *     </md-card-icon-actions>
 *   </md-card-actions>
 *   <md-card-content>
 *     <p>
 *      Card content
 *     </p>
 *   </md-card-content>
 * </md-card>
 * </hljs>
 */
        function mdCardDirective($mdTheming) {
            return {
                restrict: "E",
                link: function($scope, $element) {
                    $mdTheming($element);
                }
            };
        }
        /**
 * @ngdoc module
 * @name material.components.card
 *
 * @description
 * Card components.
 */
        angular.module("material.components.card", [ "material.core" ]).directive("mdCard", mdCardDirective);
        mdCardDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdCheckbox
 * @module material.components.checkbox
 * @restrict E
 *
 * @description
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the checkbox is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects
 * @param {string=} aria-label Adds label to checkbox for accessibility.
 *     Defaults to checkbox's text. If no default text is found, a warning will be logged.
 * @param {expression=} md-indeterminate This determines when the checkbox should be rendered as 'indeterminate'.
 *     If a truthy expression or no value is passed in the checkbox renders in the md-indeterminate state.
 *     If falsy expression is passed in it just looks like a normal unchecked checkbox.
 *     The indeterminate, checked, and unchecked states are mutually exclusive. A box cannot be in any two states at the same time. 
 *     When a checkbox is indeterminate that overrides any checked/unchecked rendering logic.
 *
 * @usage
 * <hljs lang="html">
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">
 *   Finished ?
 * </md-checkbox>
 *
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-checkbox>
 *
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-checkbox>
 *
 * </hljs>
 *
 */
        function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {
            // **********************************************************
            // Private Methods
            // **********************************************************
            function compile(tElement, tAttrs) {
                var container = tElement.children(), mdIndeterminateStateEnabled = tAttrs.hasOwnProperty("mdIndeterminate");
                tAttrs.type = "checkbox";
                tAttrs.tabindex = tAttrs.tabindex || "0";
                tElement.attr("role", tAttrs.type);
                // Attach a click handler in compile in order to immediately stop propagation
                // (especially for ng-click) when the checkbox is disabled.
                tElement.on("click", function(event) {
                    this.hasAttribute("disabled") && event.stopImmediatePropagation();
                });
                // Redirect focus events to the root element, because IE11 is always focusing the container element instead
                // of the md-checkbox element. This causes issues when using ngModelOptions: `updateOnBlur`
                container.on("focus", function() {
                    tElement.focus();
                });
                return function(scope, element, attr, ngModelCtrl) {
                    function keypressHandler(ev) {
                        var keyCode = ev.which || ev.keyCode;
                        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {
                            ev.preventDefault();
                            element.hasClass("md-focused") || element.addClass("md-focused");
                            listener(ev);
                        }
                    }
                    function listener(ev) {
                        element[0].hasAttribute("disabled") || scope.$apply(function() {
                            // Toggle the checkbox value...
                            var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;
                            ngModelCtrl.$setViewValue(viewValue, ev && ev.type);
                            ngModelCtrl.$render();
                        });
                    }
                    function render() {
                        ngModelCtrl.$viewValue && !isIndeterminate ? element.addClass(CHECKED_CSS) : element.removeClass(CHECKED_CSS);
                    }
                    function setIndeterminateState(newValue) {
                        isIndeterminate = !1 !== newValue;
                        isIndeterminate && element.attr("aria-checked", "mixed");
                        element.toggleClass("md-indeterminate", isIndeterminate);
                    }
                    var isIndeterminate;
                    ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
                    $mdTheming(element);
                    if (mdIndeterminateStateEnabled) {
                        setIndeterminateState();
                        scope.$watch(attr.mdIndeterminate, setIndeterminateState);
                    }
                    attr.ngChecked && scope.$watch(scope.$eval.bind(scope, attr.ngChecked), ngModelCtrl.$setViewValue.bind(ngModelCtrl));
                    !function(expr, htmlAttr, valueOpts) {
                        attr[expr] && scope.$watch(attr[expr], function(val) {
                            valueOpts[val] && element.attr(htmlAttr, valueOpts[val]);
                        });
                    }("ngDisabled", "tabindex", {
                        true: "-1",
                        false: attr.tabindex
                    });
                    $mdAria.expectWithText(element, "aria-label");
                    // Reuse the original input[type=checkbox] directive from Angular core.
                    // This is a bit hacky as we need our own event listener and own render
                    // function.
                    inputDirective.link.pre(scope, {
                        on: angular.noop,
                        0: {}
                    }, attr, [ ngModelCtrl ]);
                    scope.mouseActive = !1;
                    element.on("click", listener).on("keypress", keypressHandler).on("mousedown", function() {
                        scope.mouseActive = !0;
                        $timeout(function() {
                            scope.mouseActive = !1;
                        }, 100);
                    }).on("focus", function() {
                        !1 === scope.mouseActive && element.addClass("md-focused");
                    }).on("blur", function() {
                        element.removeClass("md-focused");
                    });
                    ngModelCtrl.$render = render;
                };
            }
            inputDirective = inputDirective[0];
            var CHECKED_CSS = "md-checked";
            return {
                restrict: "E",
                transclude: !0,
                require: "?ngModel",
                priority: 210,
                // Run before ngAria
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',
                compile: compile
            };
        }
        /**
 * @ngdoc module
 * @name material.components.checkbox
 * @description Checkbox module!
 */
        angular.module("material.components.checkbox", [ "material.core" ]).directive("mdCheckbox", MdCheckboxDirective);
        MdCheckboxDirective.$inject = [ "inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout" ];
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.chips
 */
        /*
 * @see js folder for chips implementation
 */
        angular.module("material.components.chips", [ "material.core", "material.components.autocomplete" ]);
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdContent
 * @module material.components.content
 *
 * @restrict E
 *
 * @description
 * The `<md-content>` directive is a container element useful for scrollable content
 *
 * @usage
 *
 * - Add the `[layout-padding]` attribute to make the content padded.
 *
 * <hljs lang="html">
 *  <md-content layout-padding>
 *      Lorem ipsum dolor sit amet, ne quod novum mei.
 *  </md-content>
 * </hljs>
 *
 */
        function mdContentDirective($mdTheming) {
            function ContentController($scope, $element) {
                this.$scope = $scope;
                this.$element = $element;
            }
            return {
                restrict: "E",
                controller: [ "$scope", "$element", ContentController ],
                link: function(scope, element, attr) {
                    element[0];
                    $mdTheming(element);
                    scope.$broadcast("$mdContentLoaded", element);
                    iosScrollFix(element[0]);
                }
            };
        }
        function iosScrollFix(node) {
            // IOS FIX:
            // If we scroll where there is no more room for the webview to scroll,
            // by default the webview itself will scroll up and down, this looks really
            // bad.  So if we are scrolling to the very top or bottom, add/subtract one
            angular.element(node).on("$md.pressdown", function(ev) {
                // Only touch events
                if ("t" === ev.pointer.type && !ev.$materialScrollFixed) // Don't let a child content's touchstart ruin it for us.
                {
                    ev.$materialScrollFixed = !0;
                    0 === node.scrollTop ? node.scrollTop = 1 : node.scrollHeight === node.scrollTop + node.offsetHeight && (node.scrollTop -= 1);
                }
            });
        }
        /**
 * @ngdoc module
 * @name material.components.content
 *
 * @description
 * Scrollable content
 */
        angular.module("material.components.content", [ "material.core" ]).directive("mdContent", mdContentDirective);
        mdContentDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        !function() {
            function calendarDirective() {
                return {
                    template: '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table><div class="md-calendar-scroll-mask"><md-virtual-repeat-container class="md-calendar-scroll-container" md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '"><table role="grid" tabindex="0" class="md-calendar" aria-readonly="true"><tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month md-month-offset="$index" class="md-calendar-month" md-start-index="ctrl.getSelectedMonthIndex()" md-item-size="' + TBODY_HEIGHT + '"></tbody></table></md-virtual-repeat-container></div>',
                    scope: {
                        minDate: "=mdMinDate",
                        maxDate: "=mdMaxDate",
                        dateFilter: "=mdDateFilter"
                    },
                    require: [ "ngModel", "mdCalendar" ],
                    controller: CalendarCtrl,
                    controllerAs: "ctrl",
                    bindToController: !0,
                    link: function(scope, element, attrs, controllers) {
                        var ngModelCtrl = controllers[0];
                        controllers[1].configureNgModel(ngModelCtrl);
                    }
                };
            }
            /**
   * Controller for the mdCalendar component.
   * @ngInject @constructor
   */
            function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant, $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {
                $mdTheming($element);
                /**
     * Dummy array-like object for virtual-repeat to iterate over. The length is the total
     * number of months that can be viewed. This is shorter than ideal because of (potential)
     * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.
     */
                this.items = {
                    length: 2e3
                };
                if (this.maxDate && this.minDate) {
                    // Limit the number of months if min and max dates are set.
                    var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;
                    numMonths = Math.max(numMonths, 1);
                    // Add an additional month as the final dummy month for rendering purposes.
                    numMonths += 1;
                    this.items.length = numMonths;
                }
                /** @final {!angular.$animate} */
                this.$animate = $animate;
                /** @final {!angular.$q} */
                this.$q = $q;
                /** @final */
                this.$mdInkRipple = $mdInkRipple;
                /** @final */
                this.$mdUtil = $mdUtil;
                /** @final */
                this.keyCode = $mdConstant.KEY_CODE;
                /** @final */
                this.dateUtil = $$mdDateUtil;
                /** @final */
                this.dateLocale = $mdDateLocale;
                /** @final {!angular.JQLite} */
                this.$element = $element;
                /** @final {!angular.Scope} */
                this.$scope = $scope;
                /** @final {HTMLElement} */
                this.calendarElement = $element[0].querySelector(".md-calendar");
                /** @final {HTMLElement} */
                this.calendarScroller = $element[0].querySelector(".md-virtual-repeat-scroller");
                /** @final {Date} */
                this.today = this.dateUtil.createDateAtMidnight();
                /** @type {Date} */
                this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);
                if (this.minDate && this.minDate > this.firstRenderableDate) this.firstRenderableDate = this.minDate; else if (this.maxDate) {
                    // Calculate the difference between the start date and max date.
                    // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.
                    //
                    this.items.length;
                    this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));
                }
                /** @final {number} Unique ID for this calendar instance. */
                this.id = nextUniqueId++;
                /** @type {!angular.NgModelController} */
                this.ngModelCtrl = null;
                /**
     * The selected date. Keep track of this separately from the ng-model value so that we
     * can know, when the ng-model value changes, what the previous value was before it's updated
     * in the component's UI.
     *
     * @type {Date}
     */
                this.selectedDate = null;
                /**
     * The date that is currently focused or showing in the calendar. This will initially be set
     * to the ng-model value if set, otherwise to today. It will be updated as the user navigates
     * to other months. The cell corresponding to the displayDate does not necesarily always have
     * focus in the document (such as for cases when the user is scrolling the calendar).
     * @type {Date}
     */
                this.displayDate = null;
                /**
     * The date that has or should have focus.
     * @type {Date}
     */
                this.focusDate = null;
                /** @type {boolean} */
                this.isInitialized = !1;
                /** @type {boolean} */
                this.isMonthTransitionInProgress = !1;
                // Unless the user specifies so, the calendar should not be a tab stop.
                // This is necessary because ngAria might add a tabindex to anything with an ng-model
                // (based on whether or not the user has turned that particular feature on/off).
                $attrs.tabindex || $element.attr("tabindex", "-1");
                var self = this;
                /**
     * Handles a click event on a date cell.
     * Created here so that every cell can use the same function instance.
     * @this {HTMLTableCellElement} The cell that was clicked.
     */
                this.cellClickHandler = function() {
                    var cellElement = this;
                    this.hasAttribute("data-timestamp") && $scope.$apply(function() {
                        var timestamp = Number(cellElement.getAttribute("data-timestamp"));
                        self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));
                    });
                };
                this.attachCalendarEventListeners();
            }
            /**
   * @ngdoc module
   * @name material.components.datepicker
   * @description Datepicker
   */
            angular.module("material.components.datepicker", [ "material.core", "material.components.icon", "material.components.virtualRepeat" ]).directive("mdCalendar", calendarDirective);
            // POST RELEASE
            // TODO(jelbourn): Mac Cmd + left / right == Home / End
            // TODO(jelbourn): Clicking on the month label opens the month-picker.
            // TODO(jelbourn): Minimum and maximum date
            // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).
            // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.
            // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)
            // TODO(jelbourn): Scroll snapping (virtual repeat)
            // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)
            // TODO(jelbourn): Month headers stick to top when scrolling.
            // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.
            // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live
            //     announcement and key handling).
            // Read-only calendar (not just date-picker).
            /**
   * Height of one calendar month tbody. This must be made known to the virtual-repeat and is
   * subsequently used for scrolling to specific months.
   */
            var TBODY_HEIGHT = 265, TBODY_SINGLE_ROW_HEIGHT = 45, nextUniqueId = 0;
            CalendarCtrl.$inject = [ "$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil" ];
            /*** Initialization ***/
            /**
   * Sets up the controller's reference to ngModelController.
   * @param {!angular.NgModelController} ngModelCtrl
   */
            CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;
                var self = this;
                ngModelCtrl.$render = function() {
                    self.changeSelectedDate(self.ngModelCtrl.$viewValue);
                };
            };
            /**
   * Initialize the calendar by building the months that are initially visible.
   * Initialization should occur after the ngModel value is known.
   */
            CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {
                this.buildWeekHeader();
                this.hideVerticalScrollbar();
                this.displayDate = this.selectedDate || this.today;
                this.isInitialized = !0;
            };
            /**
   * Hides the vertical scrollbar on the calendar scroller by setting the width on the
   * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting
   * a padding-right on the scroller equal to the width of the browser's scrollbar.
   *
   * This will cause a reflow.
   */
            CalendarCtrl.prototype.hideVerticalScrollbar = function() {
                var element = this.$element[0], scrollMask = element.querySelector(".md-calendar-scroll-mask"), scroller = this.calendarScroller, headerWidth = element.querySelector(".md-calendar-day-header").clientWidth, scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;
                scrollMask.style.width = headerWidth + "px";
                scroller.style.width = headerWidth + scrollbarWidth + "px";
                scroller.style.paddingRight = scrollbarWidth + "px";
            };
            /** Attach event listeners for the calendar. */
            CalendarCtrl.prototype.attachCalendarEventListeners = function() {
                // Keyboard interaction.
                this.$element.on("keydown", angular.bind(this, this.handleKeyEvent));
            };
            /*** User input handling ***/
            /**
   * Handles a key event in the calendar with the appropriate action. The action will either
   * be to select the focused date or to navigate to focus a new date.
   * @param {KeyboardEvent} event
   */
            CalendarCtrl.prototype.handleKeyEvent = function(event) {
                var self = this;
                this.$scope.$apply(function() {
                    // Capture escape and emit back up so that a wrapping component
                    // (such as a date-picker) can decide to close.
                    if (event.which != self.keyCode.ESCAPE && event.which != self.keyCode.TAB) // Remaining key events fall into two categories: selection and navigation.
                    // Start by checking if this is a selection event.
                    if (event.which !== self.keyCode.ENTER) {
                        // Selection isn't occuring, so the key event is either navigation or nothing.
                        var date = self.getFocusDateFromKeyEvent(event);
                        if (date) {
                            date = self.boundDateByMinAndMax(date);
                            event.preventDefault();
                            event.stopPropagation();
                            // Since this is a keyboard interaction, actually give the newly focused date keyboard
                            // focus after the been brought into view.
                            self.changeDisplayDate(date).then(function() {
                                self.focus(date);
                            });
                        }
                    } else {
                        self.setNgModelValue(self.displayDate);
                        event.preventDefault();
                    } else {
                        self.$scope.$emit("md-calendar-close");
                        event.which == self.keyCode.TAB && event.preventDefault();
                    }
                });
            };
            /**
   * Gets the date to focus as the result of a key event.
   * @param {KeyboardEvent} event
   * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.
   */
            CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {
                var dateUtil = this.dateUtil, keyCode = this.keyCode;
                switch (event.which) {
                  case keyCode.RIGHT_ARROW:
                    return dateUtil.incrementDays(this.displayDate, 1);

                  case keyCode.LEFT_ARROW:
                    return dateUtil.incrementDays(this.displayDate, -1);

                  case keyCode.DOWN_ARROW:
                    return event.metaKey ? dateUtil.incrementMonths(this.displayDate, 1) : dateUtil.incrementDays(this.displayDate, 7);

                  case keyCode.UP_ARROW:
                    return event.metaKey ? dateUtil.incrementMonths(this.displayDate, -1) : dateUtil.incrementDays(this.displayDate, -7);

                  case keyCode.PAGE_DOWN:
                    return dateUtil.incrementMonths(this.displayDate, 1);

                  case keyCode.PAGE_UP:
                    return dateUtil.incrementMonths(this.displayDate, -1);

                  case keyCode.HOME:
                    return dateUtil.getFirstDateOfMonth(this.displayDate);

                  case keyCode.END:
                    return dateUtil.getLastDateOfMonth(this.displayDate);

                  default:
                    return null;
                }
            };
            /**
   * Gets the "index" of the currently selected date as it would be in the virtual-repeat.
   * @returns {number}
   */
            CalendarCtrl.prototype.getSelectedMonthIndex = function() {
                return this.dateUtil.getMonthDistance(this.firstRenderableDate, this.selectedDate || this.today);
            };
            /**
   * Scrolls to the month of the given date.
   * @param {Date} date
   */
            CalendarCtrl.prototype.scrollToMonth = function(date) {
                if (this.dateUtil.isValidDate(date)) {
                    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);
                    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;
                }
            };
            /**
   * Sets the ng-model value for the calendar and emits a change event.
   * @param {Date} date
   */
            CalendarCtrl.prototype.setNgModelValue = function(date) {
                this.$scope.$emit("md-calendar-change", date);
                this.ngModelCtrl.$setViewValue(date);
                this.ngModelCtrl.$render();
            };
            /**
   * Focus the cell corresponding to the given date.
   * @param {Date=} opt_date
   */
            CalendarCtrl.prototype.focus = function(opt_date) {
                var date = opt_date || this.selectedDate || this.today, previousFocus = this.calendarElement.querySelector(".md-focus");
                previousFocus && previousFocus.classList.remove("md-focus");
                var cellId = this.getDateId(date), cell = document.getElementById(cellId);
                if (cell) {
                    cell.classList.add("md-focus");
                    cell.focus();
                } else this.focusDate = date;
            };
            /**
   * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.
   * Otherwise, returns the date.
   * @param {Date} date
   * @return {Date}
   */
            CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {
                var boundDate = date;
                this.minDate && date < this.minDate && (boundDate = new Date(this.minDate.getTime()));
                this.maxDate && date > this.maxDate && (boundDate = new Date(this.maxDate.getTime()));
                return boundDate;
            };
            /*** Updating the displayed / selected date ***/
            /**
   * Change the selected date in the calendar (ngModel value has already been changed).
   * @param {Date} date
   */
            CalendarCtrl.prototype.changeSelectedDate = function(date) {
                var self = this, previousSelectedDate = this.selectedDate;
                this.selectedDate = date;
                this.changeDisplayDate(date).then(function() {
                    // Remove the selected class from the previously selected date, if any.
                    if (previousSelectedDate) {
                        var prevDateCell = document.getElementById(self.getDateId(previousSelectedDate));
                        if (prevDateCell) {
                            prevDateCell.classList.remove("md-calendar-selected-date");
                            prevDateCell.setAttribute("aria-selected", "false");
                        }
                    }
                    // Apply the select class to the new selected date if it is set.
                    if (date) {
                        var dateCell = document.getElementById(self.getDateId(date));
                        if (dateCell) {
                            dateCell.classList.add("md-calendar-selected-date");
                            dateCell.setAttribute("aria-selected", "true");
                        }
                    }
                });
            };
            /**
   * Change the date that is being shown in the calendar. If the given date is in a different
   * month, the displayed month will be transitioned.
   * @param {Date} date
   */
            CalendarCtrl.prototype.changeDisplayDate = function(date) {
                // Initialization is deferred until this function is called because we want to reflect
                // the starting value of ngModel.
                if (!this.isInitialized) {
                    this.buildInitialCalendarDisplay();
                    return this.$q.when();
                }
                // If trying to show an invalid date or a transition is in progress, do nothing.
                if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) return this.$q.when();
                this.isMonthTransitionInProgress = !0;
                var animationPromise = this.animateDateChange(date);
                this.displayDate = date;
                var self = this;
                animationPromise.then(function() {
                    self.isMonthTransitionInProgress = !1;
                });
                return animationPromise;
            };
            /**
   * Animates the transition from the calendar's current month to the given month.
   * @param {Date} date
   * @returns {angular.$q.Promise} The animation promise.
   */
            CalendarCtrl.prototype.animateDateChange = function(date) {
                this.scrollToMonth(date);
                return this.$q.when();
            };
            /*** Constructing the calendar table ***/
            /**
   * Builds and appends a day-of-the-week header to the calendar.
   * This should only need to be called once during initialization.
   */
            CalendarCtrl.prototype.buildWeekHeader = function() {
                for (var firstDayOfWeek = this.dateLocale.firstDayOfWeek, shortDays = this.dateLocale.shortDays, row = document.createElement("tr"), i = 0; i < 7; i++) {
                    var th = document.createElement("th");
                    th.textContent = shortDays[(i + firstDayOfWeek) % 7];
                    row.appendChild(th);
                }
                this.$element.find("thead").append(row);
            };
            /**
   * Gets an identifier for a date unique to the calendar instance for internal
   * purposes. Not to be displayed.
   * @param {Date} date
   * @returns {string}
   */
            CalendarCtrl.prototype.getDateId = function(date) {
                return [ "md", this.id, date.getFullYear(), date.getMonth(), date.getDate() ].join("-");
            };
        }();
    }();
    !function() {
        !function() {
            /**
   * Private directive consumed by md-calendar. Having this directive lets the calender use
   * md-virtual-repeat and also cleanly separates the month DOM construction functions from
   * the rest of the calendar controller logic.
   */
            function mdCalendarMonthDirective() {
                return {
                    require: [ "^^mdCalendar", "mdCalendarMonth" ],
                    scope: {
                        offset: "=mdMonthOffset"
                    },
                    controller: CalendarMonthCtrl,
                    controllerAs: "mdMonthCtrl",
                    bindToController: !0,
                    link: function(scope, element, attrs, controllers) {
                        var calendarCtrl = controllers[0], monthCtrl = controllers[1];
                        monthCtrl.calendarCtrl = calendarCtrl;
                        monthCtrl.generateContent();
                        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number
                        // of repeated items that are linked, and then those elements have their bindings updataed.
                        // Since the months are not generated by bindings, we simply regenerate the entire thing
                        // when the binding (offset) changes.
                        scope.$watch(function() {
                            return monthCtrl.offset;
                        }, function(offset, oldOffset) {
                            offset != oldOffset && monthCtrl.generateContent();
                        });
                    }
                };
            }
            /**
   * Controller for a single calendar month.
   * @ngInject @constructor
   */
            function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {
                this.dateUtil = $$mdDateUtil;
                this.dateLocale = $mdDateLocale;
                this.$element = $element;
                this.calendarCtrl = null;
                /**
     * Number of months from the start of the month "items" that the currently rendered month
     * occurs. Set via angular data binding.
     * @type {number}
     */
                this.offset;
                /**
     * Date cell to focus after appending the month to the document.
     * @type {HTMLElement}
     */
                this.focusAfterAppend = null;
            }
            angular.module("material.components.datepicker").directive("mdCalendarMonth", mdCalendarMonthDirective);
            CalendarMonthCtrl.$inject = [ "$element", "$$mdDateUtil", "$mdDateLocale" ];
            /** Generate and append the content for this month to the directive element. */
            CalendarMonthCtrl.prototype.generateContent = function() {
                var calendarCtrl = this.calendarCtrl, date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);
                this.$element.empty();
                this.$element.append(this.buildCalendarForMonth(date));
                if (this.focusAfterAppend) {
                    this.focusAfterAppend.classList.add("md-focus");
                    this.focusAfterAppend.focus();
                    this.focusAfterAppend = null;
                }
            };
            /**
   * Creates a single cell to contain a date in the calendar with all appropriate
   * attributes and classes added. If a date is given, the cell content will be set
   * based on the date.
   * @param {Date=} opt_date
   * @returns {HTMLElement}
   */
            CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {
                var calendarCtrl = this.calendarCtrl, cell = document.createElement("td");
                cell.tabIndex = -1;
                cell.classList.add("md-calendar-date");
                cell.setAttribute("role", "gridcell");
                if (opt_date) {
                    cell.setAttribute("tabindex", "-1");
                    cell.setAttribute("aria-label", this.dateLocale.longDateFormatter(opt_date));
                    cell.id = calendarCtrl.getDateId(opt_date);
                    // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.
                    cell.setAttribute("data-timestamp", opt_date.getTime());
                    // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.
                    // It may be better to finish the construction and then query the node and add the class.
                    this.dateUtil.isSameDay(opt_date, calendarCtrl.today) && cell.classList.add("md-calendar-date-today");
                    if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) && this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {
                        cell.classList.add("md-calendar-selected-date");
                        cell.setAttribute("aria-selected", "true");
                    }
                    var cellText = this.dateLocale.dates[opt_date.getDate()];
                    if (this.isDateEnabled(opt_date)) {
                        // Add a indicator for select, hover, and focus states.
                        var selectionIndicator = document.createElement("span");
                        cell.appendChild(selectionIndicator);
                        selectionIndicator.classList.add("md-calendar-date-selection-indicator");
                        selectionIndicator.textContent = cellText;
                        cell.addEventListener("click", calendarCtrl.cellClickHandler);
                        calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate) && (this.focusAfterAppend = cell);
                    } else {
                        cell.classList.add("md-calendar-date-disabled");
                        cell.textContent = cellText;
                    }
                }
                return cell;
            };
            /**
   * Check whether date is in range and enabled
   * @param {Date=} opt_date
   * @return {boolean} Whether the date is enabled.
   */
            CalendarMonthCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date, this.calendarCtrl.minDate, this.calendarCtrl.maxDate) && (!angular.isFunction(this.calendarCtrl.dateFilter) || this.calendarCtrl.dateFilter(opt_date));
            };
            /**
   * Builds a `tr` element for the calendar grid.
   * @param rowNumber The week number within the month.
   * @returns {HTMLElement}
   */
            CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {
                var row = document.createElement("tr");
                row.setAttribute("role", "row");
                // Because of an NVDA bug (with Firefox), the row needs an aria-label in order
                // to prevent the entire row being read aloud when the user moves between rows.
                // See http://community.nvda-project.org/ticket/4643.
                row.setAttribute("aria-label", this.dateLocale.weekNumberFormatter(rowNumber));
                return row;
            };
            /**
   * Builds the <tbody> content for the given date's month.
   * @param {Date=} opt_dateInMonth
   * @returns {DocumentFragment} A document fragment containing the <tr> elements.
   */
            CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {
                var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date(), firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date), firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth), numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date), monthBody = document.createDocumentFragment(), rowNumber = 1, row = this.buildDateRow(rowNumber);
                monthBody.appendChild(row);
                // If this is the final month in the list of items, only the first week should render,
                // so we should return immediately after the first row is complete and has been
                // attached to the body.
                var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1, blankCellOffset = 0, monthLabelCell = document.createElement("td");
                monthLabelCell.classList.add("md-calendar-month-label");
                // If the entire month is after the max date, render the label as a disabled state.
                this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate && monthLabelCell.classList.add("md-calendar-month-label-disabled");
                monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);
                if (firstDayOfTheWeek <= 2) {
                    monthLabelCell.setAttribute("colspan", "7");
                    var monthLabelRow = this.buildDateRow();
                    monthLabelRow.appendChild(monthLabelCell);
                    monthBody.insertBefore(monthLabelRow, row);
                    if (isFinalMonth) return monthBody;
                } else {
                    blankCellOffset = 2;
                    monthLabelCell.setAttribute("colspan", "2");
                    row.appendChild(monthLabelCell);
                }
                // Add a blank cell for each day of the week that occurs before the first of the month.
                // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.
                // The blankCellOffset is needed in cases where the first N cells are used by the month label.
                for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) row.appendChild(this.buildDateCell());
                for (var dayOfWeek = firstDayOfTheWeek, iterationDate = firstDayOfMonth, d = 1; d <= numberOfDaysInMonth; d++) {
                    // If we've reached the end of the week, start a new row.
                    if (7 === dayOfWeek) {
                        // We've finished the first row, so we're done if this is the final month.
                        if (isFinalMonth) return monthBody;
                        dayOfWeek = 0;
                        rowNumber++;
                        row = this.buildDateRow(rowNumber);
                        monthBody.appendChild(row);
                    }
                    iterationDate.setDate(d);
                    var cell = this.buildDateCell(iterationDate);
                    row.appendChild(cell);
                    dayOfWeek++;
                }
                // Ensure that the last row of the month has 7 cells.
                for (;row.childNodes.length < 7; ) row.appendChild(this.buildDateCell());
                // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat
                // requires that all items have exactly the same height.
                for (;monthBody.childNodes.length < 6; ) {
                    for (var whitespaceRow = this.buildDateRow(), i = 0; i < 7; i++) whitespaceRow.appendChild(this.buildDateCell());
                    monthBody.appendChild(whitespaceRow);
                }
                return monthBody;
            };
            /**
   * Gets the day-of-the-week index for a date for the current locale.
   * @private
   * @param {Date} date
   * @returns {number} The column index of the date in the calendar.
   */
            CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {
                return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7;
            };
        }();
    }();
    !function() {
        !function() {
            /**
   * @ngdoc service
   * @name $mdDateLocaleProvider
   * @module material.components.datepicker
   *
   * @description
   * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.
   * This provider that allows the user to specify messages, formatters, and parsers for date
   * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material
   * components that deal with dates.
   *
   * @property {(Array<string>)=} months Array of month names (in order).
   * @property {(Array<string>)=} shortMonths Array of abbreviated month names.
   * @property {(Array<string>)=} days Array of the days of the week (in order).
   * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.
   * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales
   *     using a numeral system other than [1, 2, 3...].
   * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,
   *    etc.
   * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.
   * @property {(function(Date): string)=} formatDate Function to format a date object to a string.
   * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for
   *     a month given a date.
   * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for
   *     a week given the week number.
   * @property {(string)=} msgCalendar Translation of the label "Calendar" for the current locale.
   * @property {(string)=} msgOpenCalendar Translation of the button label "Open calendar" for the
   *     current locale.
   *
   * @usage
   * <hljs lang="js">
   *   myAppModule.config(function($mdDateLocaleProvider) {
   *
   *     // Example of a French localization.
   *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];
   *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];
   *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];
   *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];
   *
   *     // Can change week display to start on Monday.
   *     $mdDateLocaleProvider.firstDayOfWeek = 1;
   *
   *     // Optional.
   *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];
   *
   *     // Example uses moment.js to parse and format dates.
   *     $mdDateLocaleProvider.parseDate = function(dateString) {
   *       var m = moment(dateString, 'L', true);
   *       return m.isValid() ? m.toDate() : new Date(NaN);
   *     };
   *
   *     $mdDateLocaleProvider.formatDate = function(date) {
   *       return moment(date).format('L');
   *     };
   *
   *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {
   *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();
   *     };
   *
   *     // In addition to date display, date components also need localized messages
   *     // for aria-labels for screen-reader users.
   *
   *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {
   *       return 'Semaine ' + weekNumber;
   *     };
   *
   *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';
   *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';
   *
   * });
   * </hljs>
   *
   */
            angular.module("material.components.datepicker").config([ "$provide", function($provide) {
                // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.
                /** @constructor */
                function DateLocaleProvider() {
                    /** Array of full month names. E.g., ['January', 'Febuary', ...] */
                    this.months = null;
                    /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */
                    this.shortMonths = null;
                    /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */
                    this.days = null;
                    /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */
                    this.shortDays = null;
                    /** Array of dates of a month (1 - 31). Characters might be different in some locales. */
                    this.dates = null;
                    /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */
                    this.firstDayOfWeek = 0;
                    /**
       * Function that converts the date portion of a Date to a string.
       * @type {(function(Date): string)}
       */
                    this.formatDate = null;
                    /**
       * Function that converts a date string to a Date object (the date portion)
       * @type {function(string): Date}
       */
                    this.parseDate = null;
                    /**
       * Function that formats a Date into a month header string.
       * @type {function(Date): string}
       */
                    this.monthHeaderFormatter = null;
                    /**
       * Function that formats a week number into a label for the week.
       * @type {function(number): string}
       */
                    this.weekNumberFormatter = null;
                    /**
       * Function that formats a date into a long aria-label that is read
       * when the focused date changes.
       * @type {function(Date): string}
       */
                    this.longDateFormatter = null;
                    /**
       * ARIA label for the calendar "dialog" used in the datepicker.
       * @type {string}
       */
                    this.msgCalendar = "";
                    /**
       * ARIA label for the datepicker's "Open calendar" buttons.
       * @type {string}
       */
                    this.msgOpenCalendar = "";
                }
                /**
     * Factory function that returns an instance of the dateLocale service.
     * @ngInject
     * @param $locale
     * @returns {DateLocale}
     */
                DateLocaleProvider.prototype.$get = function($locale) {
                    /**
       * Default date-to-string formatting function.
       * @param {!Date} date
       * @returns {string}
       */
                    function defaultFormatDate(date) {
                        if (!date) return "";
                        // All of the dates created through ng-material *should* be set to midnight.
                        // If we encounter a date where the localeTime shows at 11pm instead of midnight,
                        // we have run into an issue with DST where we need to increment the hour by one:
                        // var d = new Date(1992, 9, 8, 0, 0, 0);
                        // d.toLocaleString(); // == "10/7/1992, 11:00:00 PM"
                        var localeTime = date.toLocaleTimeString(), formatDate = date;
                        0 != date.getHours() || -1 === localeTime.indexOf("11:") && -1 === localeTime.indexOf("23:") || (formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0));
                        return formatDate.toLocaleDateString();
                    }
                    /**
       * Default string-to-date parsing function.
       * @param {string} dateString
       * @returns {!Date}
       */
                    function defaultParseDate(dateString) {
                        return new Date(dateString);
                    }
                    /**
       * Default function to determine whether a string makes sense to be
       * parsed to a Date object.
       *
       * This is very permissive and is just a basic sanity check to ensure that
       * things like single integers aren't able to be parsed into dates.
       * @param {string} dateString
       * @returns {boolean}
       */
                    function defaultIsDateComplete(dateString) {
                        dateString = dateString.trim();
                        return /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/.test(dateString);
                    }
                    /**
       * Default date-to-string formatter to get a month header.
       * @param {!Date} date
       * @returns {string}
       */
                    function defaultMonthHeaderFormatter(date) {
                        return service.shortMonths[date.getMonth()] + " " + date.getFullYear();
                    }
                    /**
       * Default week number formatter.
       * @param number
       * @returns {string}
       */
                    function defaultWeekNumberFormatter(number) {
                        return "Week " + number;
                    }
                    /**
       * Default formatter for date cell aria-labels.
       * @param {!Date} date
       * @returns {string}
       */
                    function defaultLongDateFormatter(date) {
                        // Example: 'Thursday June 18 2015'
                        return [ service.days[date.getDay()], service.months[date.getMonth()], service.dates[date.getDate()], date.getFullYear() ].join(" ");
                    }
                    for (var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {
                        return day[0];
                    }), defaultDates = Array(32), i = 1; i <= 31; i++) defaultDates[i] = i;
                    // Default ARIA messages are in English (US).
                    var service = {
                        months: this.months || $locale.DATETIME_FORMATS.MONTH,
                        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,
                        days: this.days || $locale.DATETIME_FORMATS.DAY,
                        shortDays: this.shortDays || defaultShortDays,
                        dates: this.dates || defaultDates,
                        firstDayOfWeek: this.firstDayOfWeek || 0,
                        formatDate: this.formatDate || defaultFormatDate,
                        parseDate: this.parseDate || defaultParseDate,
                        isDateComplete: this.isDateComplete || defaultIsDateComplete,
                        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,
                        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,
                        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,
                        msgCalendar: this.msgCalendar || "Calendar",
                        msgOpenCalendar: this.msgOpenCalendar || "Open calendar"
                    };
                    return service;
                };
                DateLocaleProvider.prototype.$get.$inject = [ "$locale" ];
                $provide.provider("$mdDateLocale", new DateLocaleProvider());
            } ]);
        }();
    }();
    !function() {
        !function() {
            /**
   * @ngdoc directive
   * @name mdDatepicker
   * @module material.components.datepicker
   *
   * @param {Date} ng-model The component's model. Expects a JavaScript Date object.
   * @param {expression=} ng-change Expression evaluated when the model value changes.
   * @param {Date=} md-min-date Expression representing a min date (inclusive).
   * @param {Date=} md-max-date Expression representing a max date (inclusive).
   * @param {(function(Date): boolean)=} md-date-filter Function expecting a date and returning a boolean whether it can be selected or not.
   * @param {String=} md-placeholder The date input placeholder value.
   * @param {boolean=} ng-disabled Whether the datepicker is disabled.
   * @param {boolean=} ng-required Whether a value is required for the datepicker.
   *
   * @description
   * `<md-datepicker>` is a component used to select a single date.
   * For information on how to configure internationalization for the date picker,
   * see `$mdDateLocaleProvider`.
   *
   * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).
   * Supported attributes are:
   * * `required`: whether a required date is not set.
   * * `mindate`: whether the selected date is before the minimum allowed date.
   * * `maxdate`: whether the selected date is after the maximum allowed date.
   *
   * @usage
   * <hljs lang="html">
   *   <md-datepicker ng-model="birthday"></md-datepicker>
   * </hljs>
   *
   */
            function datePickerDirective() {
                return {
                    template: // Buttons are not in the tab order because users can open the calendar via keyboard
                    // interaction on the text input, and multiple tab stops for one component (picker)
                    // may be confusing.
                    '<md-button class="md-datepicker-button md-icon-button" type="button" tabindex="-1" aria-hidden="true" ng-click="ctrl.openCalendarPane($event)"><md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon></md-button><div class="md-datepicker-input-container" ng-class="{\'md-datepicker-focused\': ctrl.isFocused}"><input class="md-datepicker-input" aria-haspopup="true" ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)"><md-button type="button" md-no-ink class="md-datepicker-triangle-button md-icon-button" ng-click="ctrl.openCalendarPane($event)" aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}"><div class="md-datepicker-expand-triangle"></div></md-button></div><div class="md-datepicker-calendar-pane md-whiteframe-z1"><div class="md-datepicker-input-mask"><div class="md-datepicker-input-mask-opaque"></div></div><div class="md-datepicker-calendar"><md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"md-date-filter="ctrl.dateFilter"ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen"></md-calendar></div></div>',
                    require: [ "ngModel", "mdDatepicker", "?^mdInputContainer" ],
                    scope: {
                        minDate: "=mdMinDate",
                        maxDate: "=mdMaxDate",
                        placeholder: "@mdPlaceholder",
                        dateFilter: "=mdDateFilter"
                    },
                    controller: DatePickerCtrl,
                    controllerAs: "ctrl",
                    bindToController: !0,
                    link: function(scope, element, attr, controllers) {
                        var ngModelCtrl = controllers[0], mdDatePickerCtrl = controllers[1];
                        if (controllers[2]) throw Error("md-datepicker should not be placed inside md-input-container.");
                        mdDatePickerCtrl.configureNgModel(ngModelCtrl);
                    }
                };
            }
            /**
   * Controller for md-datepicker.
   *
   * @ngInject @constructor
   */
            function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window, $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {
                /** @final */
                this.$compile = $compile;
                /** @final */
                this.$timeout = $timeout;
                /** @final */
                this.$window = $window;
                /** @final */
                this.dateLocale = $mdDateLocale;
                /** @final */
                this.dateUtil = $$mdDateUtil;
                /** @final */
                this.$mdConstant = $mdConstant;
                /* @final */
                this.$mdUtil = $mdUtil;
                /** @final */
                this.$$rAF = $$rAF;
                /**
     * The root document element. This is used for attaching a top-level click handler to
     * close the calendar panel when a click outside said panel occurs. We use `documentElement`
     * instead of body because, when scrolling is disabled, some browsers consider the body element
     * to be completely off the screen and propagate events directly to the html element.
     * @type {!angular.JQLite}
     */
                this.documentElement = angular.element(document.documentElement);
                /** @type {!angular.NgModelController} */
                this.ngModelCtrl = null;
                /** @type {HTMLInputElement} */
                this.inputElement = $element[0].querySelector("input");
                /** @final {!angular.JQLite} */
                this.ngInputElement = angular.element(this.inputElement);
                /** @type {HTMLElement} */
                this.inputContainer = $element[0].querySelector(".md-datepicker-input-container");
                /** @type {HTMLElement} Floating calendar pane. */
                this.calendarPane = $element[0].querySelector(".md-datepicker-calendar-pane");
                /** @type {HTMLElement} Calendar icon button. */
                this.calendarButton = $element[0].querySelector(".md-datepicker-button");
                /**
     * Element covering everything but the input in the top of the floating calendar pane.
     * @type {HTMLElement}
     */
                this.inputMask = $element[0].querySelector(".md-datepicker-input-mask-opaque");
                /** @final {!angular.JQLite} */
                this.$element = $element;
                /** @final {!angular.Attributes} */
                this.$attrs = $attrs;
                /** @final {!angular.Scope} */
                this.$scope = $scope;
                /** @type {Date} */
                this.date = null;
                /** @type {boolean} */
                this.isFocused = !1;
                /** @type {boolean} */
                this.isDisabled;
                this.setDisabled($element[0].disabled || angular.isString($attrs.disabled));
                /** @type {boolean} Whether the date-picker's calendar pane is open. */
                this.isCalendarOpen = !1;
                /**
     * Element from which the calendar pane was opened. Keep track of this so that we can return
     * focus to it when the pane is closed.
     * @type {HTMLElement}
     */
                this.calendarPaneOpenedFrom = null;
                this.calendarPane.id = "md-date-pane" + $mdUtil.nextUid();
                $mdTheming($element);
                /** Pre-bound click handler is saved so that the event listener can be removed. */
                this.bodyClickHandler = angular.bind(this, this.handleBodyClick);
                /** Pre-bound resize handler so that the event listener can be removed. */
                this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);
                // Unless the user specifies so, the datepicker should not be a tab stop.
                // This is necessary because ngAria might add a tabindex to anything with an ng-model
                // (based on whether or not the user has turned that particular feature on/off).
                $attrs.tabindex || $element.attr("tabindex", "-1");
                this.installPropertyInterceptors();
                this.attachChangeListeners();
                this.attachInteractionListeners();
                var self = this;
                $scope.$on("$destroy", function() {
                    self.detachCalendarPane();
                });
            }
            // POST RELEASE
            // TODO(jelbourn): Demo that uses moment.js
            // TODO(jelbourn): make sure this plays well with validation and ngMessages.
            // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.
            // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)
            // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)
            // TODO(jelbourn): input behavior (masking? auto-complete?)
            // TODO(jelbourn): UTC mode
            // TODO(jelbourn): RTL
            angular.module("material.components.datepicker").directive("mdDatepicker", datePickerDirective);
            DatePickerCtrl.$inject = [ "$scope", "$element", "$attrs", "$compile", "$timeout", "$window", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF" ];
            /**
   * Sets up the controller's reference to ngModelController.
   * @param {!angular.NgModelController} ngModelCtrl
   */
            DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;
                var self = this;
                ngModelCtrl.$render = function() {
                    var value = self.ngModelCtrl.$viewValue;
                    if (value && !(value instanceof Date)) throw Error("The ng-model for md-datepicker must be a Date instance. Currently the model is a: " + typeof value);
                    self.date = value;
                    self.inputElement.value = self.dateLocale.formatDate(value);
                    self.resizeInputElement();
                    self.updateErrorState();
                };
            };
            /**
   * Attach event listeners for both the text input and the md-calendar.
   * Events are used instead of ng-model so that updates don't infinitely update the other
   * on a change. This should also be more performant than using a $watch.
   */
            DatePickerCtrl.prototype.attachChangeListeners = function() {
                var self = this;
                self.$scope.$on("md-calendar-change", function(event, date) {
                    self.ngModelCtrl.$setViewValue(date);
                    self.date = date;
                    self.inputElement.value = self.dateLocale.formatDate(date);
                    self.closeCalendarPane();
                    self.resizeInputElement();
                    self.updateErrorState();
                });
                self.ngInputElement.on("input", angular.bind(self, self.resizeInputElement));
                // TODO(chenmike): Add ability for users to specify this interval.
                self.ngInputElement.on("input", self.$mdUtil.debounce(self.handleInputEvent, 500, self));
            };
            /** Attach event listeners for user interaction. */
            DatePickerCtrl.prototype.attachInteractionListeners = function() {
                var self = this, $scope = this.$scope, keyCodes = this.$mdConstant.KEY_CODE;
                // Add event listener through angular so that we can triggerHandler in unit tests.
                self.ngInputElement.on("keydown", function(event) {
                    if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {
                        self.openCalendarPane(event);
                        $scope.$digest();
                    }
                });
                $scope.$on("md-calendar-close", function() {
                    self.closeCalendarPane();
                });
            };
            /**
   * Capture properties set to the date-picker and imperitively handle internal changes.
   * This is done to avoid setting up additional $watches.
   */
            DatePickerCtrl.prototype.installPropertyInterceptors = function() {
                var self = this;
                if (this.$attrs.ngDisabled) {
                    // The expression is to be evaluated against the directive element's scope and not
                    // the directive's isolate scope.
                    var scope = this.$scope.$parent;
                    scope && scope.$watch(this.$attrs.ngDisabled, function(isDisabled) {
                        self.setDisabled(isDisabled);
                    });
                }
                Object.defineProperty(this, "placeholder", {
                    get: function() {
                        return self.inputElement.placeholder;
                    },
                    set: function(value) {
                        self.inputElement.placeholder = value || "";
                    }
                });
            };
            /**
   * Sets whether the date-picker is disabled.
   * @param {boolean} isDisabled
   */
            DatePickerCtrl.prototype.setDisabled = function(isDisabled) {
                this.isDisabled = isDisabled;
                this.inputElement.disabled = isDisabled;
                this.calendarButton.disabled = isDisabled;
            };
            /**
   * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:
   *   - mindate: whether the selected date is before the minimum date.
   *   - maxdate: whether the selected flag is after the maximum date.
   *   - filtered: whether the selected date is allowed by the custom filtering function.
   *   - valid: whether the entered text input is a valid date
   *
   * The 'required' flag is handled automatically by ngModel.
   *
   * @param {Date=} opt_date Date to check. If not given, defaults to the datepicker's model value.
   */
            DatePickerCtrl.prototype.updateErrorState = function(opt_date) {
                var date = opt_date || this.date;
                // Clear any existing errors to get rid of anything that's no longer relevant.
                this.clearErrorState();
                if (this.dateUtil.isValidDate(date)) {
                    // Force all dates to midnight in order to ignore the time portion.
                    date = this.dateUtil.createDateAtMidnight(date);
                    if (this.dateUtil.isValidDate(this.minDate)) {
                        var minDate = this.dateUtil.createDateAtMidnight(this.minDate);
                        this.ngModelCtrl.$setValidity("mindate", date >= minDate);
                    }
                    if (this.dateUtil.isValidDate(this.maxDate)) {
                        var maxDate = this.dateUtil.createDateAtMidnight(this.maxDate);
                        this.ngModelCtrl.$setValidity("maxdate", date <= maxDate);
                    }
                    angular.isFunction(this.dateFilter) && this.ngModelCtrl.$setValidity("filtered", this.dateFilter(date));
                } else // The date is seen as "not a valid date" if there is *something* set
                // (i.e.., not null or undefined), but that something isn't a valid date.
                this.ngModelCtrl.$setValidity("valid", null == date);
                // TODO(jelbourn): Change this to classList.toggle when we stop using PhantomJS in unit tests
                // because it doesn't conform to the DOMTokenList spec.
                // See https://github.com/ariya/phantomjs/issues/12782.
                this.ngModelCtrl.$valid || this.inputContainer.classList.add("md-datepicker-invalid");
            };
            /** Clears any error flags set by `updateErrorState`. */
            DatePickerCtrl.prototype.clearErrorState = function() {
                this.inputContainer.classList.remove("md-datepicker-invalid");
                [ "mindate", "maxdate", "filtered", "valid" ].forEach(function(field) {
                    this.ngModelCtrl.$setValidity(field, !0);
                }, this);
            };
            /** Resizes the input element based on the size of its content. */
            DatePickerCtrl.prototype.resizeInputElement = function() {
                this.inputElement.size = this.inputElement.value.length + 3;
            };
            /**
   * Sets the model value if the user input is a valid date.
   * Adds an invalid class to the input element if not.
   */
            DatePickerCtrl.prototype.handleInputEvent = function() {
                var inputString = this.inputElement.value, parsedDate = inputString ? this.dateLocale.parseDate(inputString) : null;
                this.dateUtil.setDateTimeToMidnight(parsedDate);
                // The datepicker's model is only updated when there is a valid input.
                if ("" == inputString || this.dateUtil.isValidDate(parsedDate) && this.dateLocale.isDateComplete(inputString) && this.isDateEnabled(parsedDate)) {
                    this.ngModelCtrl.$setViewValue(parsedDate);
                    this.date = parsedDate;
                }
                this.updateErrorState(parsedDate);
            };
            /**
   * Check whether date is in range and enabled
   * @param {Date=} opt_date
   * @return {boolean} Whether the date is enabled.
   */
            DatePickerCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date, this.minDate, this.maxDate) && (!angular.isFunction(this.dateFilter) || this.dateFilter(opt_date));
            };
            /** Position and attach the floating calendar to the document. */
            DatePickerCtrl.prototype.attachCalendarPane = function() {
                var calendarPane = this.calendarPane;
                calendarPane.style.transform = "";
                this.$element.addClass("md-datepicker-open");
                var elementRect = this.inputContainer.getBoundingClientRect(), bodyRect = document.body.getBoundingClientRect(), paneTop = elementRect.top - bodyRect.top, paneLeft = elementRect.left - bodyRect.left, viewportTop = bodyRect.top < 0 && 0 == document.body.scrollTop ? -bodyRect.top : document.body.scrollTop, viewportLeft = bodyRect.left < 0 && 0 == document.body.scrollLeft ? -bodyRect.left : document.body.scrollLeft, viewportBottom = viewportTop + this.$window.innerHeight, viewportRight = viewportLeft + this.$window.innerWidth;
                // If the right edge of the pane would be off the screen and shifting it left by the
                // difference would not go past the left edge of the screen. If the calendar pane is too
                // big to fit on the screen at all, move it to the left of the screen and scale the entire
                // element down to fit.
                if (paneLeft + 360 > viewportRight) {
                    if (viewportRight - 360 > 0) paneLeft = viewportRight - 360; else {
                        paneLeft = viewportLeft;
                        var scale = this.$window.innerWidth / 360;
                        calendarPane.style.transform = "scale(" + scale + ")";
                    }
                    calendarPane.classList.add("md-datepicker-pos-adjusted");
                }
                // If the bottom edge of the pane would be off the screen and shifting it up by the
                // difference would not go past the top edge of the screen.
                if (paneTop + 368 > viewportBottom && viewportBottom - 368 > viewportTop) {
                    paneTop = viewportBottom - 368;
                    calendarPane.classList.add("md-datepicker-pos-adjusted");
                }
                calendarPane.style.left = paneLeft + "px";
                calendarPane.style.top = paneTop + "px";
                document.body.appendChild(calendarPane);
                // The top of the calendar pane is a transparent box that shows the text input underneath.
                // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is
                // also shown unless we cover it up. The inputMask does this by filling up the remaining space
                // based on the width of the input.
                this.inputMask.style.left = elementRect.width + "px";
                // Add CSS class after one frame to trigger open animation.
                this.$$rAF(function() {
                    calendarPane.classList.add("md-pane-open");
                });
            };
            /** Detach the floating calendar pane from the document. */
            DatePickerCtrl.prototype.detachCalendarPane = function() {
                this.$element.removeClass("md-datepicker-open");
                this.calendarPane.classList.remove("md-pane-open");
                this.calendarPane.classList.remove("md-datepicker-pos-adjusted");
                this.isCalendarOpen && this.$mdUtil.enableScrolling();
                this.calendarPane.parentNode && // Use native DOM removal because we do not want any of the angular state of this element
                // to be disposed.
                this.calendarPane.parentNode.removeChild(this.calendarPane);
            };
            /**
   * Open the floating calendar pane.
   * @param {Event} event
   */
            DatePickerCtrl.prototype.openCalendarPane = function(event) {
                if (!this.isCalendarOpen && !this.isDisabled) {
                    this.isCalendarOpen = !0;
                    this.calendarPaneOpenedFrom = event.target;
                    // Because the calendar pane is attached directly to the body, it is possible that the
                    // rest of the component (input, etc) is in a different scrolling container, such as
                    // an md-content. This means that, if the container is scrolled, the pane would remain
                    // stationary. To remedy this, we disable scrolling while the calendar pane is open, which
                    // also matches the native behavior for things like `<select>` on Mac and Windows.
                    this.$mdUtil.disableScrollAround(this.calendarPane);
                    this.attachCalendarPane();
                    this.focusCalendar();
                    // Attach click listener inside of a timeout because, if this open call was triggered by a
                    // click, we don't want it to be immediately propogated up to the body and handled.
                    var self = this;
                    this.$mdUtil.nextTick(function() {
                        // Use 'touchstart` in addition to click in order to work on iOS Safari, where click
                        // events aren't propogated under most circumstances.
                        // See http://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
                        self.documentElement.on("click touchstart", self.bodyClickHandler);
                    }, !1);
                    window.addEventListener("resize", this.windowResizeHandler);
                }
            };
            /** Close the floating calendar pane. */
            DatePickerCtrl.prototype.closeCalendarPane = function() {
                if (this.isCalendarOpen) {
                    this.detachCalendarPane();
                    this.isCalendarOpen = !1;
                    this.calendarPaneOpenedFrom.focus();
                    this.calendarPaneOpenedFrom = null;
                    this.ngModelCtrl.$setTouched();
                    this.documentElement.off("click touchstart", this.bodyClickHandler);
                    window.removeEventListener("resize", this.windowResizeHandler);
                }
            };
            /** Gets the controller instance for the calendar in the floating pane. */
            DatePickerCtrl.prototype.getCalendarCtrl = function() {
                return angular.element(this.calendarPane.querySelector("md-calendar")).controller("mdCalendar");
            };
            /** Focus the calendar in the floating pane. */
            DatePickerCtrl.prototype.focusCalendar = function() {
                // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.
                var self = this;
                this.$mdUtil.nextTick(function() {
                    self.getCalendarCtrl().focus();
                }, !1);
            };
            /**
   * Sets whether the input is currently focused.
   * @param {boolean} isFocused
   */
            DatePickerCtrl.prototype.setFocused = function(isFocused) {
                isFocused || this.ngModelCtrl.$setTouched();
                this.isFocused = isFocused;
            };
            /**
   * Handles a click on the document body when the floating calendar pane is open.
   * Closes the floating calendar pane if the click is not inside of it.
   * @param {MouseEvent} event
   */
            DatePickerCtrl.prototype.handleBodyClick = function(event) {
                if (this.isCalendarOpen) {
                    this.$mdUtil.getClosest(event.target, "md-calendar") || this.closeCalendarPane();
                    this.$scope.$digest();
                }
            };
        }();
    }();
    !function() {
        !function() {
            /**
   * Utility for performing date calculations to facilitate operation of the calendar and
   * datepicker.
   */
            angular.module("material.components.datepicker").factory("$$mdDateUtil", function() {
                /**
     * Gets the first day of the month for the given date's month.
     * @param {Date} date
     * @returns {Date}
     */
                function getFirstDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), 1);
                }
                /**
     * Gets the number of days in the month for the given date's month.
     * @param date
     * @returns {number}
     */
                function getNumberOfDaysInMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
                }
                /**
     * Get an arbitrary date in the month after the given date's month.
     * @param date
     * @returns {Date}
     */
                function getDateInNextMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 1);
                }
                /**
     * Get an arbitrary date in the month before the given date's month.
     * @param date
     * @returns {Date}
     */
                function getDateInPreviousMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() - 1, 1);
                }
                /**
     * Gets whether two dates have the same month and year.
     * @param {Date} d1
     * @param {Date} d2
     * @returns {boolean}
     */
                function isSameMonthAndYear(d1, d2) {
                    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();
                }
                /**
     * Gets whether two dates are the same day (not not necesarily the same time).
     * @param {Date} d1
     * @param {Date} d2
     * @returns {boolean}
     */
                function isSameDay(d1, d2) {
                    return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);
                }
                /**
     * Gets whether a date is in the month immediately after some date.
     * @param {Date} startDate The date from which to compare.
     * @param {Date} endDate The date to check.
     * @returns {boolean}
     */
                function isInNextMonth(startDate, endDate) {
                    return isSameMonthAndYear(getDateInNextMonth(startDate), endDate);
                }
                /**
     * Gets whether a date is in the month immediately before some date.
     * @param {Date} startDate The date from which to compare.
     * @param {Date} endDate The date to check.
     * @returns {boolean}
     */
                function isInPreviousMonth(startDate, endDate) {
                    return isSameMonthAndYear(endDate, getDateInPreviousMonth(startDate));
                }
                /**
     * Gets the midpoint between two dates.
     * @param {Date} d1
     * @param {Date} d2
     * @returns {Date}
     */
                function getDateMidpoint(d1, d2) {
                    return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);
                }
                /**
     * Gets the week of the month that a given date occurs in.
     * @param {Date} date
     * @returns {number} Index of the week of the month (zero-based).
     */
                function getWeekOfMonth(date) {
                    var firstDayOfMonth = getFirstDateOfMonth(date);
                    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);
                }
                /**
     * Gets a new date incremented by the given number of days. Number of days can be negative.
     * @param {Date} date
     * @param {number} numberOfDays
     * @returns {Date}
     */
                function incrementDays(date, numberOfDays) {
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);
                }
                /**
     * Gets a new date incremented by the given number of months. Number of months can be negative.
     * If the date of the given month does not match the target month, the date will be set to the
     * last day of the month.
     * @param {Date} date
     * @param {number} numberOfMonths
     * @returns {Date}
     */
                function incrementMonths(date, numberOfMonths) {
                    // If the same date in the target month does not actually exist, the Date object will
                    // automatically advance *another* month by the number of missing days.
                    // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.
                    // So, we check if the month overflowed and go to the last day of the target month instead.
                    var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1), numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);
                    numberOfDaysInMonth < date.getDate() ? dateInTargetMonth.setDate(numberOfDaysInMonth) : dateInTargetMonth.setDate(date.getDate());
                    return dateInTargetMonth;
                }
                /**
     * Get the integer distance between two months. This *only* considers the month and year
     * portion of the Date instances.
     *
     * @param {Date} start
     * @param {Date} end
     * @returns {number} Number of months between `start` and `end`. If `end` is before `start`
     *     chronologically, this number will be negative.
     */
                function getMonthDistance(start, end) {
                    return 12 * (end.getFullYear() - start.getFullYear()) + (end.getMonth() - start.getMonth());
                }
                /**
     * Gets the last day of the month for the given date.
     * @param {Date} date
     * @returns {Date}
     */
                function getLastDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));
                }
                /**
     * Checks whether a date is valid.
     * @param {Date} date
     * @return {boolean} Whether the date is a valid Date.
     */
                function isValidDate(date) {
                    return null != date && date.getTime && !isNaN(date.getTime());
                }
                /**
     * Sets a date's time to midnight.
     * @param {Date} date
     */
                function setDateTimeToMidnight(date) {
                    isValidDate(date) && date.setHours(0, 0, 0, 0);
                }
                /**
     * Creates a date with the time set to midnight.
     * Drop-in replacement for two forms of the Date constructor:
     * 1. No argument for Date representing now.
     * 2. Single-argument value representing number of seconds since Unix Epoch
     * or a Date object.
     * @param {number|Date=} opt_value
     * @return {Date} New date with time set to midnight.
     */
                function createDateAtMidnight(opt_value) {
                    var date;
                    date = angular.isUndefined(opt_value) ? new Date() : new Date(opt_value);
                    setDateTimeToMidnight(date);
                    return date;
                }
                /**
      * Checks if a date is within a min and max range, ignoring the time component.
      * If minDate or maxDate are not dates, they are ignored.
      * @param {Date} date
      * @param {Date} minDate
      * @param {Date} maxDate
      */
                function isDateWithinRange(date, minDate, maxDate) {
                    var dateAtMidnight = createDateAtMidnight(date), minDateAtMidnight = isValidDate(minDate) ? createDateAtMidnight(minDate) : null, maxDateAtMidnight = isValidDate(maxDate) ? createDateAtMidnight(maxDate) : null;
                    return (!minDateAtMidnight || minDateAtMidnight <= dateAtMidnight) && (!maxDateAtMidnight || maxDateAtMidnight >= dateAtMidnight);
                }
                return {
                    getFirstDateOfMonth: getFirstDateOfMonth,
                    getNumberOfDaysInMonth: getNumberOfDaysInMonth,
                    getDateInNextMonth: getDateInNextMonth,
                    getDateInPreviousMonth: getDateInPreviousMonth,
                    isInNextMonth: isInNextMonth,
                    isInPreviousMonth: isInPreviousMonth,
                    getDateMidpoint: getDateMidpoint,
                    isSameMonthAndYear: isSameMonthAndYear,
                    getWeekOfMonth: getWeekOfMonth,
                    incrementDays: incrementDays,
                    incrementMonths: incrementMonths,
                    getLastDateOfMonth: getLastDateOfMonth,
                    isSameDay: isSameDay,
                    getMonthDistance: getMonthDistance,
                    isValidDate: isValidDate,
                    setDateTimeToMidnight: setDateTimeToMidnight,
                    createDateAtMidnight: createDateAtMidnight,
                    isDateWithinRange: isDateWithinRange
                };
            });
        }();
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdDialog
 * @module material.components.dialog
 *
 * @restrict E
 *
 * @description
 * `<md-dialog>` - The dialog's template must be inside this element.
 *
 * Inside, use an `<md-dialog-content>` element for the dialog's content, and use
 * an `<md-dialog-actions>` element for the dialog's actions.
 *
 * ## CSS
 * - `.md-dialog-content` - class that sets the padding on the content as the spec file
 *
 * ## Notes
 * - If you specify an `id` for the `<md-dialog>`, the `<md-dialog-content>` will have the same `id`
 * prefixed with `dialogContent_`.
 *
 * @usage
 * ### Dialog template
 * <hljs lang="html">
 * <md-dialog aria-label="List dialog">
 *   <md-dialog-content>
 *     <md-list>
 *       <md-list-item ng-repeat="item in items">
 *         <p>Number {{item}}</p>
 *       </md-list-item>
 *     </md-list>
 *   </md-dialog-content>
 *   <md-dialog-actions>
 *     <md-button ng-click="closeDialog()" class="md-primary">Close Dialog</md-button>
 *   </md-dialog-actions>
 * </md-dialog>
 * </hljs>
 */
        function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    $$rAF(function() {
                        /**
         *
         */
                        function addOverflowClass() {
                            element.toggleClass("md-content-overflow", content.scrollHeight > content.clientHeight);
                        }
                        var images, content = element[0].querySelector("md-dialog-content");
                        if (content) {
                            images = content.getElementsByTagName("img");
                            addOverflowClass();
                            //-- delayed image loading may impact scroll height, check after images are loaded
                            angular.element(images).on("load", addOverflowClass);
                        }
                        scope.$on("$destroy", function() {
                            $mdDialog.destroy(element);
                        });
                    });
                }
            };
        }
        /**
 * @ngdoc service
 * @name $mdDialog
 * @module material.components.dialog
 *
 * @description
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require
 *  them to make decisions. There are two approaches for setup: a simple promise API
 *  and regular object syntax.
 *
 * ## Restrictions
 *
 * - The dialog is always given an isolate scope.
 * - The dialog's template must have an outer `<md-dialog>` element.
 *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use
 *   an `<md-dialog-actions>` element for the dialog's actions.
 * - Dialogs must cover the entire application to keep interactions inside of them.
 * Use the `parent` option to change where dialogs are appended.
 *
 * ## Sizing
 * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.
 * - Default max-width is 80% of the `rootElement` or `parent`.
 *
 * ## CSS
 * - `.md-dialog-content` - class that sets the padding on the content as the spec file
 *
 * @usage
 * <hljs lang="html">
 * <div  ng-app="demoApp" ng-controller="EmployeeController">
 *   <div>
 *     <md-button ng-click="showAlert()" class="md-raised md-warn">
 *       Employee Alert!
 *       </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="showDialog($event)" class="md-raised">
 *       Custom Dialog
 *       </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">
 *       Close Alert
 *     </md-button>
 *   </div>
 *   <div>
 *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >
 *       Greet Employee
 *       </md-button>
 *   </div>
 * </div>
 * </hljs>
 *
 * ### JavaScript: object syntax
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *    .module('demoApp', ['ngMaterial'])
 *    .controller('AppCtrl', AppController);
 *
 *   function AppController($scope, $mdDialog) {
 *     var alert;
 *     $scope.showAlert = showAlert;
 *     $scope.showDialog = showDialog;
 *     $scope.items = [1, 2, 3];
 *
 *     // Internal method
 *     function showAlert() {
 *       alert = $mdDialog.alert({
 *         title: 'Attention',
 *         textContent: 'This is an example of how easy dialogs can be!',
 *         ok: 'Close'
 *       });
 *
 *       $mdDialog
 *         .show( alert )
 *         .finally(function() {
 *           alert = undefined;
 *         });
 *     }
 *
 *     function showDialog($event) {
 *        var parentEl = angular.element(document.body);
 *        $mdDialog.show({
 *          parent: parentEl,
 *          targetEvent: $event,
 *          template:
 *            '<md-dialog aria-label="List dialog">' +
 *            '  <md-dialog-content>'+
 *            '    <md-list>'+
 *            '      <md-list-item ng-repeat="item in items">'+
 *            '       <p>Number {{item}}</p>' +
 *            '      </md-item>'+
 *            '    </md-list>'+
 *            '  </md-dialog-content>' +
 *            '  <md-dialog-actions>' +
 *            '    <md-button ng-click="closeDialog()" class="md-primary">' +
 *            '      Close Dialog' +
 *            '    </md-button>' +
 *            '  </md-dialog-actions>' +
 *            '</md-dialog>',
 *          locals: {
 *            items: $scope.items
 *          },
 *          controller: DialogController
 *       });
 *       function DialogController($scope, $mdDialog, items) {
 *         $scope.items = items;
 *         $scope.closeDialog = function() {
 *           $mdDialog.hide();
 *         }
 *       }
 *     }
 *   }
 * })(angular);
 * </hljs>
 *
 * ### JavaScript: promise API syntax, custom dialog template
 * <hljs lang="js">
 * (function(angular, undefined){
 *   "use strict";
 *
 *   angular
 *     .module('demoApp', ['ngMaterial'])
 *     .controller('EmployeeController', EmployeeEditor)
 *     .controller('GreetingController', GreetingController);
 *
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.
 *
 *   function EmployeeEditor($scope, $mdDialog) {
 *     var alert;
 *
 *     $scope.showAlert = showAlert;
 *     $scope.closeAlert = closeAlert;
 *     $scope.showGreeting = showCustomGreeting;
 *
 *     $scope.hasAlert = function() { return !!alert };
 *     $scope.userName = $scope.userName || 'Bobby';
 *
 *     // Dialog #1 - Show simple alert dialog and cache
 *     // reference to dialog instance
 *
 *     function showAlert() {
 *       alert = $mdDialog.alert()
 *         .title('Attention, ' + $scope.userName)
 *         .textContent('This is an example of how easy dialogs can be!')
 *         .ok('Close');
 *
 *       $mdDialog
 *           .show( alert )
 *           .finally(function() {
 *             alert = undefined;
 *           });
 *     }
 *
 *     // Close the specified dialog instance and resolve with 'finished' flag
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close
 *     // the most recent dialog popup.
 *
 *     function closeAlert() {
 *       $mdDialog.hide( alert, "finished" );
 *       alert = undefined;
 *     }
 *
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.
 *
 *     function showCustomGreeting($event) {
 *         $mdDialog.show({
 *           targetEvent: $event,
 *           template:
 *             '<md-dialog>' +
 *
 *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +
 *
 *             '  <md-dialog-actions>' +
 *             '    <md-button ng-click="closeDialog()" class="md-primary">' +
 *             '      Close Greeting' +
 *             '    </md-button>' +
 *             '  </md-dialog-actions>' +
 *             '</md-dialog>',
 *           controller: 'GreetingController',
 *           onComplete: afterShowAnimation,
 *           locals: { employee: $scope.userName }
 *         });
 *
 *         // When the 'enter' animation finishes...
 *
 *         function afterShowAnimation(scope, element, options) {
 *            // post-show code here: DOM element focus, etc.
 *         }
 *     }
 *
 *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog
 *     //             Here we used ng-controller="GreetingController as vm" and
 *     //             $scope.vm === <controller instance>
 *
 *     function showCustomGreeting() {
 *
 *        $mdDialog.show({
 *           clickOutsideToClose: true,
 *
 *           scope: $scope,        // use parent scope in template
 *           preserveScope: true,  // do not forget this if use parent scope

 *           // Since GreetingController is instantiated with ControllerAs syntax
 *           // AND we are passing the parent '$scope' to the dialog, we MUST
 *           // use 'vm.<xxx>' in the template markup
 *
 *           template: '<md-dialog>' +
 *                     '  <md-dialog-content>' +
 *                     '     Hi There {{vm.employee}}' +
 *                     '  </md-dialog-content>' +
 *                     '</md-dialog>',
 *
 *           controller: function DialogController($scope, $mdDialog) {
 *             $scope.closeDialog = function() {
 *               $mdDialog.hide();
 *             }
 *           }
 *        });
 *     }
 *
 *   }
 *
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog
 *
 *   function GreetingController($scope, $mdDialog, employee) {
 *     // Assigned from construction <code>locals</code> options...
 *     $scope.employee = employee;
 *
 *     $scope.closeDialog = function() {
 *       // Easily hides most recent dialog shown...
 *       // no specific instance reference is needed.
 *       $mdDialog.hide();
 *     };
 *   }
 *
 * })(angular);
 * </hljs>
 */
        /**
 * @ngdoc method
 * @name $mdDialog#alert
 *
 * @description
 * Builds a preconfigured dialog with the specified message.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * - $mdDialogPreset#title(string) - Sets the alert title.
 * - $mdDialogPreset#textContent(string) - Sets the alert message.
 * - $mdDialogPreset#htmlContent(string) - Sets the alert message as HTML. Requires ngSanitize
 *     module to be loaded. HTML is not run through Angular's compiler.
 * - $mdDialogPreset#ok(string) - Sets the alert "Okay" button text.
 * - $mdDialogPreset#theme(string) - Sets the theme of the alert dialog.
 * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *
 */
        /**
 * @ngdoc method
 * @name $mdDialog#confirm
 *
 * @description
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned
 * will be resolved only if the user clicks the confirm action on the dialog.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * Additionally, it supports the following methods:
 *
 * - $mdDialogPreset#title(string) - Sets the confirm title.
 * - $mdDialogPreset#textContent(string) - Sets the confirm message.
 * - $mdDialogPreset#htmlContent(string) - Sets the confirm message as HTML. Requires ngSanitize
 *     module to be loaded. HTML is not run through Angular's compiler.
 * - $mdDialogPreset#ok(string) - Sets the confirm "Okay" button text.
 * - $mdDialogPreset#cancel(string) - Sets the confirm "Cancel" button text.
 * - $mdDialogPreset#theme(string) - Sets the theme of the confirm dialog.
 * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *
 */
        /**
 * @ngdoc method
 * @name $mdDialog#prompt
 *
 * @description
 * Builds a preconfigured dialog with the specified message and input box. You can call show and the promise returned
 * will be resolved only if the user clicks the prompt action on the dialog, passing the input value as the first argument.
 *
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
 *
 * Additionally, it supports the following methods:
 *
 * - $mdDialogPreset#title(string) - Sets the prompt title.
 * - $mdDialogPreset#textContent(string) - Sets the prompt message.
 * - $mdDialogPreset#htmlContent(string) - Sets the prompt message as HTML. Requires ngSanitize
 *     module to be loaded. HTML is not run through Angular's compiler.
 * - $mdDialogPreset#placeholder(string) - Sets the placeholder text for the input.
 * - $mdDialogPreset#ok(string) - Sets the prompt "Okay" button text.
 * - $mdDialogPreset#cancel(string) - Sets the prompt "Cancel" button text.
 * - $mdDialogPreset#theme(string) - Sets the theme of the prompt dialog.
 * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *
 */
        /**
 * @ngdoc method
 * @name $mdDialog#show
 *
 * @description
 * Show a dialog with the specified options.
 *
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and
 * `confirm()`, or an options object with the following properties:
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content
 *   of the dialog.
 *   - `template` - `{string=}`: HTML template to show in the dialog. This **must** be trusted HTML
 *      with respect to Angular's [$sce service](https://docs.angularjs.org/api/ng/service/$sce).
 *      This template should **never** be constructed with any kind of user input or user data.
 *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template with a
 *     `<md-dialog>` tag if one is not provided. Defaults to true. Can be disabled if you provide a
 *     custom dialog directive.
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
 *     the location of the click will be used as the starting point for the opening animation
 *     of the the dialog.
 *   - `openFrom` - `{string|Element|object}`: The query selector, DOM element or the Rect object
 *     that is used to determine the bounds (top, left, height, width) from which the Dialog will
 *     originate.
 *   - `closeTo` - `{string|Element|object}`: The query selector, DOM element or the Rect object
 *     that is used to determine the bounds (top, left, height, width) to which the Dialog will
 *     target.
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,
 *     it will create a new isolate scope.
 *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.
 *     Default true.
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.
 *     Default true.
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to
 *     close it. Default false.
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.
 *     Default true.
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if
 *     focusing some other way, as focus management is required for dialogs to be accessible.
 *     Defaults to true.
 *   - `controller` - `{function|string=}`: The controller to associate with the dialog. The controller
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be
 *     copied to the controller instead.
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the
 *     dialog will not open until all of the promises resolve.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending
 *     to the root element of the application.
 *   - `onShowing` `{function=} Callback function used to announce the show() action is
 *     starting.
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is
 *     finished.
 *   - `onRemoving` `{function=}`: Callback function used to announce the close/hide() action is
 *     starting. This allows developers to run custom animations in parallel the close animations.
 *   - `fullscreen` `{boolean=}`: An option to apply `.md-dialog-fullscreen` class on open.
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or
 * rejected with `$mdDialog.cancel()`.
 */
        /**
 * @ngdoc method
 * @name $mdDialog#hide
 *
 * @description
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the resolved promise.
 *
 * @returns {promise} A promise that is resolved when the dialog has been closed.
 */
        /**
 * @ngdoc method
 * @name $mdDialog#cancel
 *
 * @description
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.
 *
 * @param {*=} response An argument for the rejected promise.
 *
 * @returns {promise} A promise that is resolved when the dialog has been closed.
 */
        function MdDialogProvider($$interimElementProvider) {
            /* @ngInject */
            function advancedDialogOptions($mdDialog, $mdTheming, $mdConstant) {
                return {
                    template: [ '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">', '  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">', '    <h2 class="md-title">{{ dialog.title }}</h2>', '    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ', '        ng-bind-html="::dialog.mdHtmlContent"></div>', '    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">', "      <p>{{::dialog.mdTextContent}}</p>", "    </div>", '    <md-input-container md-no-float ng-if="::dialog.$type == \'prompt\'" class="md-prompt-input-container">', '      <input ng-keypress="dialog.keypress($event)" md-autofocus ng-model="dialog.result" placeholder="{{::dialog.placeholder}}">', "    </md-input-container>", "  </md-dialog-content>", "  <md-dialog-actions>", '    <md-button ng-if="dialog.$type === \'confirm\' || dialog.$type === \'prompt\'"               ng-click="dialog.abort()" class="md-primary">', "      {{ dialog.cancel }}", "    </md-button>", '    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type===\'alert\'">', "      {{ dialog.ok }}", "    </md-button>", "  </md-dialog-actions>", "</md-dialog>" ].join("").replace(/\s\s+/g, ""),
                    controller: function() {
                        this.hide = function() {
                            $mdDialog.hide("prompt" !== this.$type || this.result);
                        };
                        this.abort = function() {
                            $mdDialog.cancel();
                        };
                        this.keypress = function($event) {
                            $event.keyCode === $mdConstant.KEY_CODE.ENTER && $mdDialog.hide(this.result);
                        };
                    },
                    controllerAs: "dialog",
                    bindToController: !0,
                    theme: $mdTheming.defaultTheme()
                };
            }
            /* @ngInject */
            function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement, $log, $injector) {
                function beforeShow(scope, element, options, controller) {
                    if (controller) {
                        controller.mdHtmlContent = controller.htmlContent || options.htmlContent || "";
                        controller.mdTextContent = controller.textContent || options.textContent || controller.content || options.content || "";
                        if (controller.mdHtmlContent && !$injector.has("$sanitize")) throw Error("The ngSanitize module must be loaded in order to use htmlContent.");
                        if (controller.mdHtmlContent && controller.mdTextContent) throw Error("md-dialog cannot have both `htmlContent` and `textContent`");
                    }
                }
                /** Show method for dialogs */
                function onShow(scope, element, options, controller) {
                    /**
       * Check to see if they used the deprecated .md-actions class and log a warning
       */
                    function warnDeprecatedActions() {
                        element[0].querySelectorAll(".md-actions").length > 0 && $log.warn("Using a class of md-actions is deprecated, please use <md-dialog-actions>.");
                    }
                    /**
       * For alerts, focus on content... otherwise focus on
       * the close button (or equivalent)
       */
                    function focusOnOpen() {
                        if (options.focusOnOpen) {
                            ($mdUtil.findFocusTarget(element) || /**
         * If no element with class dialog-close, try to find the last
         * button child in md-actions and assume it is a close button.
         *
         * If we find no actions at all, log a warning to the console.
         */
                            function() {
                                var closeButton = element[0].querySelector(".dialog-close");
                                if (!closeButton) {
                                    var actionButtons = element[0].querySelectorAll(".md-actions button, md-dialog-actions button");
                                    closeButton = actionButtons[actionButtons.length - 1];
                                }
                                return angular.element(closeButton);
                            }()).focus();
                        }
                    }
                    angular.element($document[0].body).addClass("md-dialog-is-showing");
                    captureParentAndFromToElements(options);
                    configureAria(element.find("md-dialog"), options);
                    showBackdrop(scope, element, options);
                    return dialogPopIn(element, options).then(function() {
                        activateListeners(element, options);
                        lockScreenReader(element, options);
                        warnDeprecatedActions();
                        focusOnOpen();
                    });
                }
                /**
     * Remove function for all dialogs
     */
                function onRemove(scope, element, options) {
                    /**
       * Detach the element
       */
                    function detachAndClean() {
                        angular.element($document[0].body).removeClass("md-dialog-is-showing");
                        element.remove();
                        options.$destroy || options.origin.focus();
                    }
                    options.deactivateListeners();
                    options.unlockScreenReader();
                    options.hideBackdrop(options.$destroy);
                    // Remove the focus traps that we added earlier for keeping focus within the dialog.
                    topFocusTrap && topFocusTrap.parentNode && topFocusTrap.parentNode.removeChild(topFocusTrap);
                    bottomFocusTrap && bottomFocusTrap.parentNode && bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);
                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal
                    /**
       * For normal closes, animate the removal.
       * For forced closes (like $destroy events), skip the animations
       */
                    return options.$destroy ? detachAndClean() : function() {
                        return dialogPopOut(element, options);
                    }().then(detachAndClean);
                }
                /**
     * Capture originator/trigger/from/to element information (if available)
     * and the parent container for the dialog; defaults to the $rootElement
     * unless overridden in the options.parent
     */
                function captureParentAndFromToElements(options) {
                    /**
           * Identify the bounding RECT for the target element
           *
           */
                    function getBoundingClientRect(element, orig) {
                        var source = angular.element(element || {});
                        if (source && source.length) {
                            // Compute and save the target element's bounding rect, so that if the
                            // element is hidden when the dialog closes, we can shrink the dialog
                            // back to the same position it expanded from.
                            //
                            // Checking if the source is a rect object or a DOM element
                            var bounds = {
                                top: 0,
                                left: 0,
                                height: 0,
                                width: 0
                            }, hasFn = angular.isFunction(source[0].getBoundingClientRect);
                            return angular.extend(orig || {}, {
                                element: hasFn ? source : undefined,
                                bounds: hasFn ? source[0].getBoundingClientRect() : angular.extend({}, bounds, source[0]),
                                focus: angular.bind(source, source.focus)
                            });
                        }
                    }
                    /**
           * If the specifier is a simple string selector, then query for
           * the DOM element.
           */
                    function getDomElement(element, defaultElement) {
                        if (angular.isString(element)) {
                            var simpleSelector = element, container = $document[0].querySelectorAll(simpleSelector);
                            element = container.length ? container[0] : null;
                        }
                        // If we have a reference to a raw dom element, always wrap it in jqLite
                        return angular.element(element || defaultElement);
                    }
                    options.origin = angular.extend({
                        element: null,
                        bounds: null,
                        focus: angular.noop
                    }, options.origin || {});
                    options.parent = getDomElement(options.parent, $rootElement);
                    options.closeTo = getBoundingClientRect(getDomElement(options.closeTo));
                    options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));
                    options.targetEvent && (options.origin = getBoundingClientRect(options.targetEvent.target, options.origin));
                }
                /**
     * Listen for escape keys and outside clicks to auto close
     */
                function activateListeners(element, options) {
                    var window = angular.element($window), onWindowResize = $mdUtil.debounce(function() {
                        stretchDialogContainerToViewport(element, options);
                    }, 60), removeListeners = [], smartClose = function() {
                        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will
                        // cancel or fallback to hide.
                        var closeFn = "alert" == options.$type ? $mdDialog.hide : $mdDialog.cancel;
                        $mdUtil.nextTick(closeFn, !0);
                    };
                    if (options.escapeToClose) {
                        var parentTarget = options.parent, keyHandlerFn = function(ev) {
                            if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                                ev.stopPropagation();
                                ev.preventDefault();
                                smartClose();
                            }
                        };
                        // Add keydown listeners
                        element.on("keydown", keyHandlerFn);
                        parentTarget.on("keydown", keyHandlerFn);
                        // Queue remove listeners function
                        removeListeners.push(function() {
                            element.off("keydown", keyHandlerFn);
                            parentTarget.off("keydown", keyHandlerFn);
                        });
                    }
                    // Register listener to update dialog on window resize
                    window.on("resize", onWindowResize);
                    removeListeners.push(function() {
                        window.off("resize", onWindowResize);
                    });
                    if (options.clickOutsideToClose) {
                        var sourceElem, target = element, mousedownHandler = function(ev) {
                            sourceElem = ev.target;
                        }, mouseupHandler = function(ev) {
                            if (sourceElem === target[0] && ev.target === target[0]) {
                                ev.stopPropagation();
                                ev.preventDefault();
                                smartClose();
                            }
                        };
                        // Add listeners
                        target.on("mousedown", mousedownHandler);
                        target.on("mouseup", mouseupHandler);
                        // Queue remove listeners function
                        removeListeners.push(function() {
                            target.off("mousedown", mousedownHandler);
                            target.off("mouseup", mouseupHandler);
                        });
                    }
                    // Attach specific `remove` listener handler
                    options.deactivateListeners = function() {
                        removeListeners.forEach(function(removeFn) {
                            removeFn();
                        });
                        options.deactivateListeners = null;
                    };
                }
                /**
     * Show modal backdrop element...
     */
                function showBackdrop(scope, element, options) {
                    options.disableParentScroll && (// !! DO this before creating the backdrop; since disableScrollAround()
                    //    configures the scroll offset; which is used by mdBackDrop postLink()
                    options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent));
                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");
                        $animate.enter(options.backdrop, options.parent);
                    }
                    /**
       * Hide modal backdrop element...
       */
                    options.hideBackdrop = function($destroy) {
                        options.backdrop && ($destroy ? options.backdrop.remove() : $animate.leave(options.backdrop));
                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }
                        options.hideBackdrop = null;
                    };
                }
                /**
     * Inject ARIA-specific attributes appropriate for Dialogs
     */
                function configureAria(element, options) {
                    var role = "alert" === options.$type ? "alertdialog" : "dialog", dialogContent = element.find("md-dialog-content"), existingDialogId = element.attr("id"), dialogContentId = "dialogContent_" + (existingDialogId || $mdUtil.nextUid());
                    element.attr({
                        role: role,
                        tabIndex: "-1"
                    });
                    if (0 === dialogContent.length) {
                        dialogContent = element;
                        // If the dialog element already had an ID, don't clobber it.
                        existingDialogId && (dialogContentId = existingDialogId);
                    }
                    dialogContent.attr("id", dialogContentId);
                    element.attr("aria-describedby", dialogContentId);
                    options.ariaLabel ? $mdAria.expect(element, "aria-label", options.ariaLabel) : $mdAria.expectAsync(element, "aria-label", function() {
                        var words = dialogContent.text().split(/\s+/);
                        words.length > 3 && (words = words.slice(0, 3).concat("..."));
                        return words.join(" ");
                    });
                    // Set up elements before and after the dialog content to capture focus and
                    // redirect back into the dialog.
                    topFocusTrap = document.createElement("div");
                    topFocusTrap.classList.add("md-dialog-focus-trap");
                    topFocusTrap.tabIndex = 0;
                    bottomFocusTrap = topFocusTrap.cloneNode(!1);
                    // When focus is about to move out of the dialog, we want to intercept it and redirect it
                    // back to the dialog element.
                    var focusHandler = function() {
                        element.focus();
                    };
                    topFocusTrap.addEventListener("focus", focusHandler);
                    bottomFocusTrap.addEventListener("focus", focusHandler);
                    // The top focus trap inserted immeidately before the md-dialog element (as a sibling).
                    // The bottom focus trap is inserted at the very end of the md-dialog element (as a child).
                    element[0].parentNode.insertBefore(topFocusTrap, element[0]);
                    element.after(bottomFocusTrap);
                }
                /**
     * Prevents screen reader interaction behind modal window
     * on swipe interfaces
     */
                function lockScreenReader(element, options) {
                    /**
       * Walk DOM to apply or remove aria-hidden on sibling nodes
       * and parent sibling nodes
       *
       */
                    function walkDOM(element) {
                        for (;element.parentNode; ) {
                            if (element === document.body) return;
                            for (var children = element.parentNode.children, i = 0; i < children.length; i++) // skip over child if it is an ascendant of the dialog
                            // or a script or style tag
                            element === children[i] || isNodeOneOf(children[i], [ "SCRIPT", "STYLE" ]) || children[i].setAttribute("aria-hidden", isHidden);
                            walkDOM(element = element.parentNode);
                        }
                    }
                    var isHidden = !0;
                    // get raw DOM node
                    walkDOM(element[0]);
                    options.unlockScreenReader = function() {
                        isHidden = !1;
                        walkDOM(element[0]);
                        options.unlockScreenReader = null;
                    };
                }
                /**
     * Ensure the dialog container fill-stretches to the viewport
     */
                function stretchDialogContainerToViewport(container, options) {
                    var isFixed = "fixed" == $window.getComputedStyle($document[0].body).position, backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null, height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;
                    container.css({
                        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + "px",
                        height: height ? height + "px" : "100%"
                    });
                    return container;
                }
                /**
     *  Dialog open and pop-in animation
     */
                function dialogPopIn(container, options) {
                    // Add the `md-dialog-container` to the DOM
                    options.parent.append(container);
                    stretchDialogContainerToViewport(container, options);
                    var dialogEl = container.find("md-dialog"), animator = $mdUtil.dom.animator, buildTranslateToOrigin = animator.calculateZoomToOrigin, translateOptions = {
                        transitionInClass: "md-transition-in",
                        transitionOutClass: "md-transition-out"
                    }, from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin)), to = animator.toTransformCss("");
                    // defaults to center display (or parent or $rootElement)
                    options.fullscreen && dialogEl.addClass("md-dialog-fullscreen");
                    return animator.translate3d(dialogEl, from, to, translateOptions).then(function(animateReversal) {
                        // Build a reversal translate function synched to this translation...
                        options.reverseAnimate = function() {
                            delete options.reverseAnimate;
                            if (options.closeTo) {
                                // Using the opposite classes to create a close animation to the closeTo element
                                translateOptions = {
                                    transitionInClass: "md-transition-out",
                                    transitionOutClass: "md-transition-in"
                                };
                                from = to;
                                to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));
                                return animator.translate3d(dialogEl, from, to, translateOptions);
                            }
                            // in case the origin element has moved or is hidden,
                            // let's recalculate the translateCSS
                            return animateReversal(animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin)));
                        };
                        return !0;
                    });
                }
                /**
     * Dialog close and pop-out animation
     */
                function dialogPopOut(container, options) {
                    return options.reverseAnimate();
                }
                /**
     * Utility function to filter out raw DOM nodes
     */
                function isNodeOneOf(elem, nodeTypeArray) {
                    if (-1 !== nodeTypeArray.indexOf(elem.nodeName)) return !0;
                }
                return {
                    hasBackdrop: !0,
                    isolateScope: !0,
                    onShow: onShow,
                    onShowing: beforeShow,
                    onRemove: onRemove,
                    clickOutsideToClose: !1,
                    escapeToClose: !0,
                    targetEvent: null,
                    closeTo: null,
                    openFrom: null,
                    focusOnOpen: !0,
                    disableParentScroll: !0,
                    autoWrap: !0,
                    fullscreen: !1,
                    transformTemplate: function(template, options) {
                        // Make the dialog container focusable, because otherwise the focus will be always redirected to
                        // an element outside of the container, and the focus trap won't work probably..
                        // Also the tabindex is needed for the `escapeToClose` functionality, because
                        // the keyDown event can't be triggered when the focus is outside of the container.
                        /**
         * The specified template should contain a <md-dialog> wrapper element....
         */
                        return '<div class="md-dialog-container" tabindex="-1">' + function(template) {
                            return options.autoWrap && !/<\/md-dialog>/g.test(template) ? "<md-dialog>" + (template || "") + "</md-dialog>" : template || "";
                        }(template) + "</div>";
                    }
                };
            }
            // Elements to capture and redirect focus when the user presses tab at the dialog boundary.
            var topFocusTrap, bottomFocusTrap;
            advancedDialogOptions.$inject = [ "$mdDialog", "$mdTheming", "$mdConstant" ];
            dialogDefaultOptions.$inject = [ "$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement", "$log", "$injector" ];
            return $$interimElementProvider("$mdDialog").setDefaults({
                methods: [ "disableParentScroll", "hasBackdrop", "clickOutsideToClose", "escapeToClose", "targetEvent", "closeTo", "openFrom", "parent", "fullscreen" ],
                options: dialogDefaultOptions
            }).addPreset("alert", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "theme", "css" ],
                options: advancedDialogOptions
            }).addPreset("confirm", {
                methods: [ "title", "htmlContent", "textContent", "content", "ariaLabel", "ok", "cancel", "theme", "css" ],
                options: advancedDialogOptions
            }).addPreset("prompt", {
                methods: [ "title", "htmlContent", "textContent", "content", "placeholder", "ariaLabel", "ok", "cancel", "theme", "css" ],
                options: advancedDialogOptions
            });
        }
        /**
 * @ngdoc module
 * @name material.components.dialog
 */
        angular.module("material.components.dialog", [ "material.core", "material.components.backdrop" ]).directive("mdDialog", MdDialogDirective).provider("$mdDialog", MdDialogProvider);
        MdDialogDirective.$inject = [ "$$rAF", "$mdTheming", "$mdDialog" ];
        MdDialogProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdDivider
 * @module material.components.divider
 * @restrict E
 *
 * @description
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.
 * @usage
 * <hljs lang="html">
 * <md-divider></md-divider>
 *
 * <md-divider md-inset></md-divider>
 * </hljs>
 *
 */
        function MdDividerDirective($mdTheming) {
            return {
                restrict: "E",
                link: $mdTheming
            };
        }
        /**
 * @ngdoc module
 * @name material.components.divider
 * @description Divider module!
 */
        angular.module("material.components.divider", [ "material.core" ]).directive("mdDivider", MdDividerDirective);
        MdDividerDirective.$inject = [ "$mdTheming" ];
    }();
    !function() {
        !function() {
            /**
   * @ngdoc directive
   * @name mdFabActions
   * @module material.components.fabActions
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or
   * `<md-fab-toolbar>` directive to mark an element (or elements) as the actions and setup the
   * proper event listeners.
   *
   * @usage
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
   */
            function MdFabActionsDirective() {
                return {
                    restrict: "E",
                    require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ],
                    compile: function(element, attributes) {
                        var children = element.children(), hasNgRepeat = !1;
                        angular.forEach([ "", "data-", "x-" ], function(prefix) {
                            hasNgRepeat = hasNgRepeat || !!children.attr(prefix + "ng-repeat");
                        });
                        // Support both ng-repeat and static content
                        hasNgRepeat ? children.addClass("md-fab-action-item") : // Wrap every child in a new div and add a class that we can scale/fling independently
                        children.wrap('<div class="md-fab-action-item">');
                    }
                };
            }
            /**
   * @ngdoc module
   * @name material.components.fabActions
   */
            angular.module("material.components.fabActions", [ "material.core" ]).directive("mdFabActions", MdFabActionsDirective);
        }();
    }();
    !function() {
        !function() {
            function FabController($scope, $element, $animate, $mdUtil, $mdConstant, $timeout) {
                function parseEvents(event) {
                    // If the event is a click, just handle it
                    "click" == event.type && handleItemClick(event);
                    // If we focusout, set a timeout to close the element
                    "focusout" != event.type || closeTimeout || (closeTimeout = $timeout(function() {
                        vm.close();
                    }, 100, !1));
                    // If we see a focusin and there is a timeout about to run, cancel it so we stay open
                    if ("focusin" == event.type && closeTimeout) {
                        $timeout.cancel(closeTimeout);
                        closeTimeout = null;
                    }
                }
                function resetActionIndex() {
                    vm.currentActionIndex = -1;
                }
                function fireInitialAnimations() {
                    // If the element is actually visible on the screen
                    if ($element[0].scrollHeight > 0) // Fire our animation
                    $animate.addClass($element, "md-animations-ready").then(function() {
                        // Remove the waiting class
                        $element.removeClass("md-animations-waiting");
                    }); else if (initialAnimationAttempts < 10) {
                        $timeout(fireInitialAnimations, 100);
                        // Increment our counter
                        initialAnimationAttempts += 1;
                    }
                }
                function enableKeyboard() {
                    $element.on("keydown", keyPressed);
                    // On the next tick, setup a check for outside clicks; we do this on the next tick to avoid
                    // clicks/touches that result in the isOpen attribute changing (e.g. a bound radio button)
                    $mdUtil.nextTick(function() {
                        angular.element(document).on("click touchend", checkForOutsideClick);
                    });
                }
                function disableKeyboard() {
                    $element.off("keydown", keyPressed);
                    angular.element(document).off("click touchend", checkForOutsideClick);
                }
                function checkForOutsideClick(event) {
                    if (event.target) {
                        var closestTrigger = $mdUtil.getClosest(event.target, "md-fab-trigger"), closestActions = $mdUtil.getClosest(event.target, "md-fab-actions");
                        closestTrigger || closestActions || vm.close();
                    }
                }
                function keyPressed(event) {
                    switch (event.which) {
                      case $mdConstant.KEY_CODE.ESCAPE:
                        vm.close();
                        event.preventDefault();
                        return !1;

                      case $mdConstant.KEY_CODE.LEFT_ARROW:
                        doKeyLeft(event);
                        return !1;

                      case $mdConstant.KEY_CODE.UP_ARROW:
                        doKeyUp(event);
                        return !1;

                      case $mdConstant.KEY_CODE.RIGHT_ARROW:
                        doKeyRight(event);
                        return !1;

                      case $mdConstant.KEY_CODE.DOWN_ARROW:
                        doKeyDown(event);
                        return !1;
                    }
                }
                function doActionPrev(event) {
                    focusAction(event, -1);
                }
                function doActionNext(event) {
                    focusAction(event, 1);
                }
                function focusAction(event, direction) {
                    var actions = resetActionTabIndexes();
                    // Increment/decrement the counter with restrictions
                    vm.currentActionIndex = vm.currentActionIndex + direction;
                    vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);
                    vm.currentActionIndex = Math.max(0, vm.currentActionIndex);
                    // Focus the element
                    var focusElement = angular.element(actions[vm.currentActionIndex]).children()[0];
                    angular.element(focusElement).attr("tabindex", 0);
                    focusElement.focus();
                    // Make sure the event doesn't bubble and cause something else
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
                function resetActionTabIndexes() {
                    // Grab all of the actions
                    var actions = getActionsElement()[0].querySelectorAll(".md-fab-action-item");
                    // Disable all other actions for tabbing
                    angular.forEach(actions, function(action) {
                        angular.element(angular.element(action).children()[0]).attr("tabindex", -1);
                    });
                    return actions;
                }
                function doKeyLeft(event) {
                    "left" === vm.direction ? doActionNext(event) : doActionPrev(event);
                }
                function doKeyUp(event) {
                    "down" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function doKeyRight(event) {
                    "left" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function doKeyDown(event) {
                    "up" === vm.direction ? doActionPrev(event) : doActionNext(event);
                }
                function isTrigger(element) {
                    return $mdUtil.getClosest(element, "md-fab-trigger");
                }
                function isAction(element) {
                    return $mdUtil.getClosest(element, "md-fab-actions");
                }
                function handleItemClick(event) {
                    isTrigger(event.target) && vm.toggle();
                    isAction(event.target) && vm.close();
                }
                function getTriggerElement() {
                    return $element.find("md-fab-trigger");
                }
                function getActionsElement() {
                    return $element.find("md-fab-actions");
                }
                var vm = this;
                // NOTE: We use async eval(s) below to avoid conflicts with any existing digest loops
                vm.open = function() {
                    $scope.$evalAsync("vm.isOpen = true");
                };
                vm.close = function() {
                    // Async eval to avoid conflicts with existing digest loops
                    $scope.$evalAsync("vm.isOpen = false");
                    // Focus the trigger when the element closes so users can still tab to the next item
                    $element.find("md-fab-trigger")[0].focus();
                };
                // Toggle the open/close state when the trigger is clicked
                vm.toggle = function() {
                    $scope.$evalAsync("vm.isOpen = !vm.isOpen");
                };
                !function() {
                    // Set the default direction to 'down' if none is specified
                    vm.direction = vm.direction || "down";
                    // Set the default to be closed
                    vm.isOpen = vm.isOpen || !1;
                    // Start the keyboard interaction at the first action
                    resetActionIndex();
                    // Add an animations waiting class so we know not to run
                    $element.addClass("md-animations-waiting");
                }();
                !function() {
                    var eventTypes = [ "click", "focusin", "focusout" ];
                    // Add our listeners
                    angular.forEach(eventTypes, function(eventType) {
                        $element.on(eventType, parseEvents);
                    });
                    // Remove our listeners when destroyed
                    $scope.$on("$destroy", function() {
                        angular.forEach(eventTypes, function(eventType) {
                            $element.off(eventType, parseEvents);
                        });
                        // remove any attached keyboard handlers in case element is removed while
                        // speed dial is open
                        disableKeyboard();
                    });
                }();
                !function() {
                    // Watch for changes to the direction and update classes/attributes
                    $scope.$watch("vm.direction", function(newDir, oldDir) {
                        // Add the appropriate classes so we can target the direction in the CSS
                        $animate.removeClass($element, "md-" + oldDir);
                        $animate.addClass($element, "md-" + newDir);
                        // Reset the action index since it may have changed
                        resetActionIndex();
                    });
                    var trigger, actions;
                    // Watch for changes to md-open
                    $scope.$watch("vm.isOpen", function(isOpen) {
                        // Reset the action index since it may have changed
                        resetActionIndex();
                        // We can't get the trigger/actions outside of the watch because the component hasn't been
                        // linked yet, so we wait until the first watch fires to cache them.
                        if (!trigger || !actions) {
                            trigger = getTriggerElement();
                            actions = getActionsElement();
                        }
                        isOpen ? enableKeyboard() : disableKeyboard();
                        var toAdd = isOpen ? "md-is-open" : "", toRemove = isOpen ? "" : "md-is-open";
                        // Set the proper ARIA attributes
                        trigger.attr("aria-haspopup", !0);
                        trigger.attr("aria-expanded", isOpen);
                        actions.attr("aria-hidden", !isOpen);
                        // Animate the CSS classes
                        $animate.setClass($element, toAdd, toRemove);
                    });
                }();
                var initialAnimationAttempts = 0;
                fireInitialAnimations();
                var closeTimeout;
            }
            angular.module("material.components.fabShared", [ "material.core" ]).controller("FabController", FabController);
            FabController.$inject = [ "$scope", "$element", "$animate", "$mdUtil", "$mdConstant", "$timeout" ];
        }();
    }();
    !function() {
        !function() {
            /**
   * @ngdoc directive
   * @name mdFabSpeedDial
   * @module material.components.fabSpeedDial
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually
   * `<md-button>`s) for quick access to common actions.
   *
   * There are currently two animations available by applying one of the following classes to
   * the component:
   *
   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their
   *    appropriate positions.
   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.
   *
   * You may also easily position the trigger by applying one one of the following classes to the
   * `<md-fab-speed-dial>` element:
   *  - `md-fab-top-left`
   *  - `md-fab-top-right`
   *  - `md-fab-bottom-left`
   *  - `md-fab-bottom-right`
   *
   * These CSS classes use `position: absolute`, so you need to ensure that the container element
   * also uses `position: absolute` or `position: relative` in order for them to work.
   *
   * Additionally, you may use the standard `ng-mouseenter` and `ng-mouseleave` directives to
   * open or close the speed dial. However, if you wish to allow users to hover over the empty
   * space where the actions will appear, you must also add the `md-hover-full` class to the speed
   * dial element. Without this, the hover effect will only occur on top of the trigger.
   *
   * See the demos for more information.
   *
   * ## Troubleshooting
   *
   * If your speed dial shows the closing animation upon launch, you may need to use `ng-cloak` on
   * the parent container to ensure that it is only visible once ready. We have plans to remove this
   * necessity in the future.
   *
   * @usage
   * <hljs lang="html">
   * <md-fab-speed-dial md-direction="up" class="md-fling">
   *   <md-fab-trigger>
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
   *   </md-fab-trigger>
   *
   *   <md-fab-actions>
   *     <md-button aria-label="Add User">
   *       <md-icon icon="/img/icons/user.svg"></md-icon>
   *     </md-button>
   *
   *     <md-button aria-label="Add Group">
   *       <md-icon icon="/img/icons/group.svg"></md-icon>
   *     </md-button>
   *   </md-fab-actions>
   * </md-fab-speed-dial>
   * </hljs>
   *
   * @param {string} md-direction From which direction you would like the speed dial to appear
   * relative to the trigger element.
   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.
   */
            function MdFabSpeedDialDirective() {
                function FabSpeedDialLink(scope, element) {
                    // Prepend an element to hold our CSS variables so we can use them in the animations below
                    element.prepend('<div class="md-css-variables"></div>');
                }
                return {
                    restrict: "E",
                    scope: {
                        direction: "@?mdDirection",
                        isOpen: "=?mdOpen"
                    },
                    bindToController: !0,
                    controller: "FabController",
                    controllerAs: "vm",
                    link: FabSpeedDialLink
                };
            }
            function MdFabSpeedDialFlingAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, !1);
                }
                function runAnimation(element) {
                    // Don't run if we are still waiting and we are not ready
                    if (!element.hasClass("md-animations-waiting") || element.hasClass("md-animations-ready")) {
                        var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), triggerElement = el.querySelector("md-fab-trigger"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                        // Always reset the items to their natural position/state
                        angular.forEach(items, function(item, index) {
                            var styles = item.style;
                            styles.transform = styles.webkitTransform = "";
                            styles.transitionDelay = "";
                            styles.opacity = 1;
                            // Make the items closest to the trigger have the highest z-index
                            styles.zIndex = items.length - index + startZIndex;
                        });
                        // Set the trigger to be above all of the actions so they disappear behind it.
                        triggerElement.style.zIndex = startZIndex + items.length + 1;
                        // If the control is closed, hide the items behind the trigger
                        ctrl.isOpen || angular.forEach(items, function(item, index) {
                            var newPosition, axis, styles = item.style, triggerItemHeightOffset = (triggerElement.clientHeight - item.clientHeight) / 2, triggerItemWidthOffset = (triggerElement.clientWidth - item.clientWidth) / 2;
                            switch (ctrl.direction) {
                              case "up":
                                newPosition = item.scrollHeight * (index + 1) + triggerItemHeightOffset;
                                axis = "Y";
                                break;

                              case "down":
                                newPosition = -(item.scrollHeight * (index + 1) + triggerItemHeightOffset);
                                axis = "Y";
                                break;

                              case "left":
                                newPosition = item.scrollWidth * (index + 1) + triggerItemWidthOffset;
                                axis = "X";
                                break;

                              case "right":
                                newPosition = -(item.scrollWidth * (index + 1) + triggerItemWidthOffset);
                                axis = "X";
                            }
                            var newTranslate = "translate" + axis + "(" + newPosition + "px)";
                            styles.transform = styles.webkitTransform = newTranslate;
                        });
                    }
                }
                return {
                    addClass: function(element, className, done) {
                        if (element.hasClass("md-fling")) {
                            runAnimation(element);
                            delayDone(done);
                        } else done();
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                };
            }
            function MdFabSpeedDialScaleAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, !1);
                }
                function runAnimation(element) {
                    var el = element[0], ctrl = element.controller("mdFabSpeedDial"), items = el.querySelectorAll(".md-fab-action-item"), variablesElement = el.querySelector(".md-css-variables"), startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);
                    // Always reset the items to their natural position/state
                    angular.forEach(items, function(item, index) {
                        var styles = item.style, offsetDelay = index * delay;
                        styles.opacity = ctrl.isOpen ? 1 : 0;
                        styles.transform = styles.webkitTransform = ctrl.isOpen ? "scale(1)" : "scale(0)";
                        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : items.length - offsetDelay) + "ms";
                        // Make the items closest to the trigger have the highest z-index
                        styles.zIndex = items.length - index + startZIndex;
                    });
                }
                var delay = 65;
                return {
                    addClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                };
            }
            /**
   * The duration of the CSS animation in milliseconds.
   *
   * @type {number}
   */
            var cssAnimationDuration = 300;
            /**
   * @ngdoc module
   * @name material.components.fabSpeedDial
   */
            angular.module("material.components.fabSpeedDial", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabSpeedDial", MdFabSpeedDialDirective).animation(".md-fling", MdFabSpeedDialFlingAnimation).animation(".md-scale", MdFabSpeedDialScaleAnimation).service("mdFabSpeedDialFlingAnimation", MdFabSpeedDialFlingAnimation).service("mdFabSpeedDialScaleAnimation", MdFabSpeedDialScaleAnimation);
            MdFabSpeedDialFlingAnimation.$inject = [ "$timeout" ];
            MdFabSpeedDialScaleAnimation.$inject = [ "$timeout" ];
        }();
    }();
    !function() {
        !function() {
            /**
   * @ngdoc directive
   * @name mdFabToolbar
   * @module material.components.fabToolbar
   *
   * @restrict E
   *
   * @description
   *
   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)
   * for quick access to common actions when a floating action button is activated (via click or
   * keyboard navigation).
   *
   * You may also easily position the trigger by applying one one of the following classes to the
   * `<md-fab-toolbar>` element:
   *  - `md-fab-top-left`
   *  - `md-fab-top-right`
   *  - `md-fab-bottom-left`
   *  - `md-fab-bottom-right`
   *
   * These CSS classes use `position: absolute`, so you need to ensure that the container element
   * also uses `position: absolute` or `position: relative` in order for them to work.
   *
   * @usage
   *
   * <hljs lang="html">
   * <md-fab-toolbar md-direction='left'>
   *   <md-fab-trigger>
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
   *   </md-fab-trigger>
   *
   *   <md-fab-actions>
   *     <md-button aria-label="Add User">
   *       <md-icon icon="/img/icons/user.svg"></md-icon>
   *     </md-button>
   *
   *     <md-button aria-label="Add Group">
   *       <md-icon icon="/img/icons/group.svg"></md-icon>
   *     </md-button>
   *   </md-fab-actions>
   * </md-fab-toolbar>
   * </hljs>
   *
   * @param {string} md-direction From which direction you would like the toolbar items to appear
   * relative to the trigger element. Supports `left` and `right` directions.
   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.
   */
            function MdFabToolbarDirective() {
                function link(scope, element, attributes) {
                    // Add the base class for animations
                    element.addClass("md-fab-toolbar");
                    // Prepend the background element to the trigger's button
                    element.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>');
                }
                return {
                    restrict: "E",
                    transclude: !0,
                    template: '<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',
                    scope: {
                        direction: "@?mdDirection",
                        isOpen: "=?mdOpen"
                    },
                    bindToController: !0,
                    controller: "FabController",
                    controllerAs: "vm",
                    link: link
                };
            }
            function MdFabToolbarAnimation() {
                function runAnimation(element, className, done) {
                    // If no className was specified, don't do anything
                    if (className) {
                        var el = element[0], ctrl = element.controller("mdFabToolbar"), backgroundElement = el.querySelector(".md-fab-toolbar-background"), triggerElement = el.querySelector("md-fab-trigger button"), toolbarElement = el.querySelector("md-toolbar"), iconElement = el.querySelector("md-fab-trigger button md-icon"), actions = element.find("md-fab-actions").children();
                        // If we have both elements, use them to position the new background
                        if (triggerElement && backgroundElement) {
                            // Get our variables
                            var color = window.getComputedStyle(triggerElement).getPropertyValue("background-color"), width = el.offsetWidth, scale = (el.offsetHeight, 
                            width / triggerElement.offsetWidth * 2);
                            // Set some basic styles no matter what animation we're doing
                            backgroundElement.style.backgroundColor = color;
                            backgroundElement.style.borderRadius = width + "px";
                            // If we're open
                            if (ctrl.isOpen) {
                                // Turn on toolbar pointer events when closed
                                toolbarElement.style.pointerEvents = "initial";
                                backgroundElement.style.width = triggerElement.offsetWidth + "px";
                                backgroundElement.style.height = triggerElement.offsetHeight + "px";
                                backgroundElement.style.transform = "scale(" + scale + ")";
                                // Set the next close animation to have the proper delays
                                backgroundElement.style.transitionDelay = "0ms";
                                iconElement && (iconElement.style.transitionDelay = ".3s");
                                // Apply a transition delay to actions
                                angular.forEach(actions, function(action, index) {
                                    action.style.transitionDelay = 25 * (actions.length - index) + "ms";
                                });
                            } else {
                                // Turn off toolbar pointer events when closed
                                toolbarElement.style.pointerEvents = "none";
                                // Scale it back down to the trigger's size
                                backgroundElement.style.transform = "scale(1)";
                                // Reset the position
                                backgroundElement.style.top = "0";
                                if (element.hasClass("md-right")) {
                                    backgroundElement.style.left = "0";
                                    backgroundElement.style.right = null;
                                }
                                if (element.hasClass("md-left")) {
                                    backgroundElement.style.right = "0";
                                    backgroundElement.style.left = null;
                                }
                                // Set the next open animation to have the proper delays
                                backgroundElement.style.transitionDelay = "200ms";
                                iconElement && (iconElement.style.transitionDelay = "0ms");
                                // Apply a transition delay to actions
                                angular.forEach(actions, function(action, index) {
                                    action.style.transitionDelay = 200 + 25 * index + "ms";
                                });
                            }
                        }
                    }
                }
                return {
                    addClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    }
                };
            }
            /**
   * @ngdoc module
   * @name material.components.fabToolbar
   */
            angular.module("material.components.fabToolbar", [ "material.core", "material.components.fabShared", "material.components.fabTrigger", "material.components.fabActions" ]).directive("mdFabToolbar", MdFabToolbarDirective).animation(".md-fab-toolbar", MdFabToolbarAnimation).service("mdFabToolbarAnimation", MdFabToolbarAnimation);
        }();
    }();
    !function() {
        !function() {
            /**
   * @ngdoc directive
   * @name mdFabTrigger
   * @module material.components.fabSpeedDial
   *
   * @restrict E
   *
   * @description
   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or
   * `<md-fab-toolbar>` directive to mark an element (or elements) as the trigger and setup the
   * proper event listeners.
   *
   * @usage
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
   */
            function MdFabTriggerDirective() {
                // TODO: Remove this completely?
                return {
                    restrict: "E",
                    require: [ "^?mdFabSpeedDial", "^?mdFabToolbar" ]
                };
            }
            /**
   * @ngdoc module
   * @name material.components.fabTrigger
   */
            angular.module("material.components.fabTrigger", [ "material.core" ]).directive("mdFabTrigger", MdFabTriggerDirective);
        }();
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdGridList
 * @module material.components.gridList
 * @restrict E
 * @description
 * Grid lists are an alternative to standard list views. Grid lists are distinct
 * from grids used for layouts and other visual presentations.
 *
 * A grid list is best suited to presenting a homogenous data type, typically
 * images, and is optimized for visual comprehension and differentiating between
 * like data types.
 *
 * A grid list is a continuous element consisting of tessellated, regular
 * subdivisions called cells that contain tiles (`md-grid-tile`).
 *
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">
 *
 * Cells are arrayed vertically and horizontally within the grid.
 *
 * Tiles hold content and can span one or more cells vertically or horizontally.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-list` directive supports "responsive" attributes, which allow
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the
 * currently matching media query.
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-cols-lg="8"`)
 *
 * @param {number} md-cols Number of columns in the grid.
 * @param {string} md-row-height One of
 * <ul>
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>
 *   <li>`{width}:{height}` - Ratio of width to height (eg.
 *   `md-row-height="16:9"`)</li>
 *   <li>`"fit"` - Height will be determined by subdividing the available
 *   height by the number of rows</li>
 * </ul>
 * @param {string=} md-gutter The amount of space between tiles in CSS units
 *     (default 1px)
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event
 *     object is available as `$event`, and contains performance information.
 *
 * @usage
 * Basic:
 * <hljs lang="html">
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fixed-height rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="200px" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Fit rows:
 * <hljs lang="html">
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 *
 * Using responsive attributes:
 * <hljs lang="html">
 * <md-grid-list
 *     md-cols-sm="2"
 *     md-cols-md="4"
 *     md-cols-lg="8"
 *     md-cols-gt-lg="12"
 *     ...>
 *   <md-grid-tile></md-grid-tile>
 * </md-grid-list>
 * </hljs>
 */
        function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {
            function postLink(scope, element, attrs, ctrl) {
                function unwatchMedia() {
                    ctrl.layoutDelegate = angular.noop;
                    unwatchAttrs();
                    for (var mediaName in $mdConstant.MEDIA) $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).removeListener(invalidateLayout);
                }
                /**
     * Performs grid layout if the provided mediaName matches the currently
     * active media type.
     */
                function layoutIfMediaMatch(mediaName) {
                    null == mediaName ? // TODO(shyndman): It would be nice to only layout if we have
                    // instances of attributes using this media type
                    ctrl.invalidateLayout() : $mdMedia(mediaName) && ctrl.invalidateLayout();
                }
                /**
     * Invokes the layout engine, and uses its results to lay out our
     * tile elements.
     *
     * @param {boolean} tilesInvalidated Whether tiles have been
     *    added/removed/moved since the last layout. This is to avoid situations
     *    where tiles are replaced with properties identical to their removed
     *    counterparts.
     */
                function layoutDelegate(tilesInvalidated) {
                    var tiles = getTileElements(), props = {
                        tileSpans: getTileSpans(tiles),
                        colCount: getColumnCount(),
                        rowMode: getRowMode(),
                        rowHeight: getRowHeight(),
                        gutter: getGutter()
                    };
                    if (tilesInvalidated || !angular.equals(props, lastLayoutProps)) {
                        var performance = $mdGridLayout(props.colCount, props.tileSpans, tiles).map(function(tilePositions, rowCount) {
                            return {
                                grid: {
                                    element: element,
                                    style: getGridStyle(props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                },
                                tiles: tilePositions.map(function(ps, i) {
                                    return {
                                        element: angular.element(tiles[i]),
                                        style: getTileStyle(ps.position, ps.spans, props.colCount, rowCount, props.gutter, props.rowMode, props.rowHeight)
                                    };
                                })
                            };
                        }).reflow().performance();
                        // Report layout
                        scope.mdOnLayout({
                            $event: {
                                performance: performance
                            }
                        });
                        lastLayoutProps = props;
                    }
                }
                // Returns an expression wrapped in the interpolator's start and end symbols.
                function expr(exprStr) {
                    return startSymbol + exprStr + endSymbol;
                }
                /**
     * Gets the styles applied to a tile element described by the given parameters.
     * @param {{row: number, col: number}} position The row and column indices of the tile.
     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.
     * @param {number} colCount The number of columns.
     * @param {number} rowCount The number of rows.
     * @param {string} gutter The amount of space between tiles. This will be something like
     *     '5px' or '2em'.
     * @param {string} rowMode The row height mode. Can be one of:
     *     'fixed': all rows have a fixed size, given by rowHeight,
     *     'ratio': row height defined as a ratio to width, or
     *     'fit': fit to the grid-list element height, divinding evenly among rows.
     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and
     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).
     * @returns {Object} Map of CSS properties to be applied to the style element. Will define
     *     values for top, left, width, height, marginTop, and paddingTop.
     */
                function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
                    // TODO(shyndman): There are style caching opportunities here.
                    // Percent of the available horizontal space that one column takes up.
                    var hShare = 1 / colCount * 100, hGutterShare = (colCount - 1) / colCount, hUnit = UNIT({
                        share: hShare,
                        gutterShare: hGutterShare,
                        gutter: gutter
                    }), style = {
                        left: POSITION({
                            unit: hUnit,
                            offset: position.col,
                            gutter: gutter
                        }),
                        width: DIMENSION({
                            unit: hUnit,
                            span: spans.col,
                            gutter: gutter
                        }),
                        // resets
                        paddingTop: "",
                        marginTop: "",
                        top: "",
                        height: ""
                    };
                    switch (rowMode) {
                      case "fixed":
                        // In fixed mode, simply use the given rowHeight.
                        style.top = POSITION({
                            unit: rowHeight,
                            offset: position.row,
                            gutter: gutter
                        });
                        style.height = DIMENSION({
                            unit: rowHeight,
                            span: spans.row,
                            gutter: gutter
                        });
                        break;

                      case "ratio":
                        // Percent of the available vertical space that one row takes up. Here, rowHeight holds
                        // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.
                        var vShare = hShare / rowHeight, vUnit = UNIT({
                            share: vShare,
                            gutterShare: hGutterShare,
                            gutter: gutter
                        });
                        // padidngTop and marginTop are used to maintain the given aspect ratio, as
                        // a percentage-based value for these properties is applied to the *width* of the
                        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
                        style.paddingTop = DIMENSION({
                            unit: vUnit,
                            span: spans.row,
                            gutter: gutter
                        });
                        style.marginTop = POSITION({
                            unit: vUnit,
                            offset: position.row,
                            gutter: gutter
                        });
                        break;

                      case "fit":
                        // Fraction of the gutter size that each column takes up.
                        var vGutterShare = (rowCount - 1) / rowCount, vShare = 1 / rowCount * 100, vUnit = UNIT({
                            share: vShare,
                            gutterShare: vGutterShare,
                            gutter: gutter
                        });
                        style.top = POSITION({
                            unit: vUnit,
                            offset: position.row,
                            gutter: gutter
                        });
                        style.height = DIMENSION({
                            unit: vUnit,
                            span: spans.row,
                            gutter: gutter
                        });
                    }
                    return style;
                }
                function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {
                    var style = {};
                    switch (rowMode) {
                      case "fixed":
                        style.height = DIMENSION({
                            unit: rowHeight,
                            span: rowCount,
                            gutter: gutter
                        });
                        style.paddingBottom = "";
                        break;

                      case "ratio":
                        // rowHeight is width / height
                        var hGutterShare = 1 === colCount ? 0 : (colCount - 1) / colCount, hShare = 1 / colCount * 100, vShare = hShare * (1 / rowHeight), vUnit = UNIT({
                            share: vShare,
                            gutterShare: hGutterShare,
                            gutter: gutter
                        });
                        style.height = "";
                        style.paddingBottom = DIMENSION({
                            unit: vUnit,
                            span: rowCount,
                            gutter: gutter
                        });
                    }
                    return style;
                }
                function getTileElements() {
                    return [].filter.call(element.children(), function(ele) {
                        return "MD-GRID-TILE" == ele.tagName && !ele.$$mdDestroyed;
                    });
                }
                /**
     * Gets an array of objects containing the rowspan and colspan for each tile.
     * @returns {Array<{row: number, col: number}>}
     */
                function getTileSpans(tileElements) {
                    return [].map.call(tileElements, function(ele) {
                        var ctrl = angular.element(ele).controller("mdGridTile");
                        return {
                            row: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-rowspan"), 10) || 1,
                            col: parseInt($mdMedia.getResponsiveAttribute(ctrl.$attrs, "md-colspan"), 10) || 1
                        };
                    });
                }
                function getColumnCount() {
                    var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, "md-cols"), 10);
                    if (isNaN(colCount)) throw "md-grid-list: md-cols attribute was not found, or contained a non-numeric value";
                    return colCount;
                }
                function getGutter() {
                    return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, "md-gutter") || 1);
                }
                function getRowHeight() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                    if (!rowHeight) throw "md-grid-list: md-row-height attribute was not found";
                    switch (getRowMode()) {
                      case "fixed":
                        return applyDefaultUnit(rowHeight);

                      case "ratio":
                        var whRatio = rowHeight.split(":");
                        return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);

                      case "fit":
                        return 0;
                    }
                }
                function getRowMode() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, "md-row-height");
                    if (!rowHeight) throw "md-grid-list: md-row-height attribute was not found";
                    return "fit" == rowHeight ? "fit" : -1 !== rowHeight.indexOf(":") ? "ratio" : "fixed";
                }
                function applyDefaultUnit(val) {
                    return /\D$/.test(val) ? val : val + "px";
                }
                // Apply semantics
                element.attr("role", "list");
                // Provide the controller with a way to trigger layouts.
                ctrl.layoutDelegate = layoutDelegate;
                var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout), unwatchAttrs = /**
     * Watches for changes in media, invalidating layout as necessary.
     */
                function() {
                    for (var mediaName in $mdConstant.MEDIA) {
                        $mdMedia(mediaName);
                        // initialize
                        $mdMedia.getQuery($mdConstant.MEDIA[mediaName]).addListener(invalidateLayout);
                    }
                    return $mdMedia.watchResponsiveAttributes([ "md-cols", "md-row-height", "md-gutter" ], attrs, layoutIfMediaMatch);
                }();
                scope.$on("$destroy", unwatchMedia);
                var lastLayoutProps, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), UNIT = $interpolate(expr("share") + "% - (" + expr("gutter") + " * " + expr("gutterShare") + ")"), POSITION = $interpolate("calc((" + expr("unit") + " + " + expr("gutter") + ") * " + expr("offset") + ")"), DIMENSION = $interpolate("calc((" + expr("unit") + ") * " + expr("span") + " + (" + expr("span") + " - 1) * " + expr("gutter") + ")");
            }
            return {
                restrict: "E",
                controller: GridListController,
                scope: {
                    mdOnLayout: "&"
                },
                link: postLink
            };
        }
        /* @ngInject */
        function GridListController($mdUtil) {
            this.layoutInvalidated = !1;
            this.tilesInvalidated = !1;
            this.$timeout_ = $mdUtil.nextTick;
            this.layoutDelegate = angular.noop;
        }
        /* @ngInject */
        function GridLayoutFactory($mdUtil) {
            /**
   * Publish layout function
   */
            function GridLayout(colCount, tileSpans) {
                var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;
                layoutTime = $mdUtil.time(function() {
                    layoutInfo = calculateGridFor(colCount, tileSpans);
                });
                return self = {
                    /**
         * An array of objects describing each tile's position in the grid.
         */
                    layoutInfo: function() {
                        return layoutInfo;
                    },
                    /**
         * Maps grid positioning to an element and a set of styles using the
         * provided updateFn.
         */
                    map: function(updateFn) {
                        mapTime = $mdUtil.time(function() {
                            var info = self.layoutInfo();
                            gridStyles = updateFn(info.positioning, info.rowCount);
                        });
                        return self;
                    },
                    /**
         * Default animator simply sets the element.css( <styles> ). An alternate
         * animator can be provided as an argument. The function has the following
         * signature:
         *
         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)
         */
                    reflow: function(animatorFn) {
                        reflowTime = $mdUtil.time(function() {
                            (animatorFn || defaultAnimator)(gridStyles.grid, gridStyles.tiles);
                        });
                        return self;
                    },
                    /**
         * Timing for the most recent layout run.
         */
                    performance: function() {
                        return {
                            tileCount: tileSpans.length,
                            layoutTime: layoutTime,
                            mapTime: mapTime,
                            reflowTime: reflowTime,
                            totalTime: layoutTime + mapTime + reflowTime
                        };
                    }
                };
            }
            /**
   * Default Gridlist animator simple sets the css for each element;
   * NOTE: any transitions effects must be manually set in the CSS.
   * e.g.
   *
   *  md-grid-tile {
   *    transition: all 700ms ease-out 50ms;
   *  }
   *
   */
            function GridTileAnimator(grid, tiles) {
                grid.element.css(grid.style);
                tiles.forEach(function(t) {
                    t.element.css(t.style);
                });
            }
            /**
   * Calculates the positions of tiles.
   *
   * The algorithm works as follows:
   *    An Array<Number> with length colCount (spaceTracker) keeps track of
   *    available tiling positions, where elements of value 0 represents an
   *    empty position. Space for a tile is reserved by finding a sequence of
   *    0s with length <= than the tile's colspan. When such a space has been
   *    found, the occupied tile positions are incremented by the tile's
   *    rowspan value, as these positions have become unavailable for that
   *    many rows.
   *
   *    If the end of a row has been reached without finding space for the
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum
   *    of 0. Rows are searched in this fashion until space is found.
   */
            function calculateGridFor(colCount, tileSpans) {
                function reserveSpace(spans, i) {
                    if (spans.col > colCount) throw "md-grid-list: Tile at position " + i + " has a colspan (" + spans.col + ") that exceeds the column count (" + colCount + ")";
                    // TODO(shyndman): This loop isn't strictly necessary if you can
                    // determine the minimum number of rows before a space opens up. To do
                    // this, recognize that you've iterated across an entire row looking for
                    // space, and if so fast-forward by the minimum rowSpan count. Repeat
                    // until the required space opens up.
                    for (var start = 0, end = 0; end - start < spans.col; ) if (curCol >= colCount) nextRow(); else {
                        start = spaceTracker.indexOf(0, curCol);
                        if (-1 !== start && -1 !== (end = findEnd(start + 1))) curCol = end + 1; else {
                            start = end = 0;
                            nextRow();
                        }
                    }
                    adjustRow(start, spans.col, spans.row);
                    curCol = start + spans.col;
                    return {
                        col: start,
                        row: curRow
                    };
                }
                function nextRow() {
                    curCol = 0;
                    curRow++;
                    adjustRow(0, colCount, -1);
                }
                function adjustRow(from, cols, by) {
                    for (var i = from; i < from + cols; i++) spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
                }
                function findEnd(start) {
                    var i;
                    for (i = start; i < spaceTracker.length; i++) if (0 !== spaceTracker[i]) return i;
                    if (i === spaceTracker.length) return i;
                }
                var curCol = 0, curRow = 0, spaceTracker = function() {
                    for (var tracker = [], i = 0; i < colCount; i++) tracker.push(0);
                    return tracker;
                }();
                return {
                    positioning: tileSpans.map(function(spans, i) {
                        return {
                            spans: spans,
                            position: reserveSpace(spans, i)
                        };
                    }),
                    rowCount: curRow + Math.max.apply(Math, spaceTracker)
                };
            }
            var defaultAnimator = GridTileAnimator;
            /**
   * Set the reflow animator callback
   */
            GridLayout.animateWith = function(customAnimator) {
                defaultAnimator = angular.isFunction(customAnimator) ? customAnimator : GridTileAnimator;
            };
            return GridLayout;
        }
        /**
 * @ngdoc directive
 * @name mdGridTile
 * @module material.components.gridList
 * @restrict E
 * @description
 * Tiles contain the content of an `md-grid-list`. They span one or more grid
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to
 * display secondary content.
 *
 * ### Responsive Attributes
 *
 * The `md-grid-tile` directive supports "responsive" attributes, which allow
 * different `md-rowspan` and `md-colspan` values depending on the currently
 * matching media query.
 *
 * In order to set a responsive attribute, first define the fallback value with
 * the standard attribute name, then add additional attributes with the
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
 * (ie. `md-colspan-sm="4"`)
 *
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot
 *    exceed the number of columns in the grid. Supports interpolation.
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports
 *     interpolation.
 *
 * @usage
 * With header:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-header>
 *     <h3>This is a header</h3>
 *   </md-grid-tile-header>
 * </md-grid-tile>
 * </hljs>
 *
 * With footer:
 * <hljs lang="html">
 * <md-grid-tile>
 *   <md-grid-tile-footer>
 *     <h3>This is a footer</h3>
 *   </md-grid-tile-footer>
 * </md-grid-tile>
 * </hljs>
 *
 * Spanning multiple rows/columns:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="2" md-rowspan="3">
 * </md-grid-tile>
 * </hljs>
 *
 * Responsive attributes:
 * <hljs lang="html">
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">
 * </md-grid-tile>
 * </hljs>
 */
        function GridTileDirective($mdMedia) {
            function postLink(scope, element, attrs, gridCtrl) {
                // Apply semantics
                element.attr("role", "listitem");
                // If our colspan or rowspan changes, trigger a layout
                var unwatchAttrs = $mdMedia.watchResponsiveAttributes([ "md-colspan", "md-rowspan" ], attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));
                // Tile registration/deregistration
                gridCtrl.invalidateTiles();
                scope.$on("$destroy", function() {
                    // Mark the tile as destroyed so it is no longer considered in layout,
                    // even if the DOM element sticks around (like during a leave animation)
                    element[0].$$mdDestroyed = !0;
                    unwatchAttrs();
                    gridCtrl.invalidateLayout();
                });
                angular.isDefined(scope.$parent.$index) && scope.$watch(function() {
                    return scope.$parent.$index;
                }, function(newIdx, oldIdx) {
                    newIdx !== oldIdx && gridCtrl.invalidateTiles();
                });
            }
            return {
                restrict: "E",
                require: "^mdGridList",
                template: "<figure ng-transclude></figure>",
                transclude: !0,
                scope: {},
                // Simple controller that exposes attributes to the grid directive
                controller: [ "$attrs", function($attrs) {
                    this.$attrs = $attrs;
                } ],
                link: postLink
            };
        }
        function GridTileCaptionDirective() {
            return {
                template: "<figcaption ng-transclude></figcaption>",
                transclude: !0
            };
        }
        /**
 * @ngdoc module
 * @name material.components.gridList
 */
        angular.module("material.components.gridList", [ "material.core" ]).directive("mdGridList", GridListDirective).directive("mdGridTile", GridTileDirective).directive("mdGridTileFooter", GridTileCaptionDirective).directive("mdGridTileHeader", GridTileCaptionDirective).factory("$mdGridLayout", GridLayoutFactory);
        GridListDirective.$inject = [ "$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia" ];
        GridListController.$inject = [ "$mdUtil" ];
        GridListController.prototype = {
            invalidateTiles: function() {
                this.tilesInvalidated = !0;
                this.invalidateLayout();
            },
            invalidateLayout: function() {
                if (!this.layoutInvalidated) {
                    this.layoutInvalidated = !0;
                    this.$timeout_(angular.bind(this, this.layout));
                }
            },
            layout: function() {
                try {
                    this.layoutDelegate(this.tilesInvalidated);
                } finally {
                    this.layoutInvalidated = !1;
                    this.tilesInvalidated = !1;
                }
            }
        };
        GridLayoutFactory.$inject = [ "$mdUtil" ];
        GridTileDirective.$inject = [ "$mdMedia" ];
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.icon
 * @description
 * Icon
 */
        angular.module("material.components.icon", [ "material.core" ]);
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdInputContainer
 * @module material.components.input
 *
 * @restrict E
 *
 * @description
 * `<md-input-container>` is the parent of any input or textarea element.
 *
 * Input and textarea elements will not behave properly unless the md-input-container
 * parent is provided.
 *
 * A single `<md-input-container>` should contain only one `<input>` element, otherwise it will throw an error.
 *
 * <b>Exception:</b> Hidden inputs (`<input type="hidden" />`) are ignored and will not throw an error, so
 * you may combine these with other inputs.
 *
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container
 *   will go into error state. Defaults to erroring if the input has been touched and is invalid.
 * @param md-no-float {boolean=} When present, `placeholder` attributes on the input will not be converted to floating
 *   labels.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-input-container>
 *   <label>Username</label>
 *   <input type="text" ng-model="user.name">
 * </md-input-container>
 *
 * <md-input-container>
 *   <label>Description</label>
 *   <textarea ng-model="user.description"></textarea>
 * </md-input-container>
 *
 * </hljs>
 *
 * <h3>When disabling floating labels</h3>
 * <hljs lang="html">
 *
 * <md-input-container md-no-float>
 *   <input type="text" placeholder="Non-Floating Label">
 * </md-input-container>
 *
 * </hljs>
 */
        function mdInputContainerDirective($mdTheming, $parse) {
            function postLink(scope, element, attr) {
                $mdTheming(element);
                element.find("md-icon").length && element.addClass("md-has-icon");
            }
            function ContainerCtrl($scope, $element, $attrs, $animate) {
                var self = this;
                self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);
                self.delegateClick = function() {
                    self.input.focus();
                };
                self.element = $element;
                self.setFocused = function(isFocused) {
                    $element.toggleClass("md-input-focused", !!isFocused);
                };
                self.setHasValue = function(hasValue) {
                    $element.toggleClass("md-input-has-value", !!hasValue);
                };
                self.setHasPlaceholder = function(hasPlaceholder) {
                    $element.toggleClass("md-input-has-placeholder", !!hasPlaceholder);
                };
                self.setInvalid = function(isInvalid) {
                    isInvalid ? $animate.addClass($element, "md-input-invalid") : $animate.removeClass($element, "md-input-invalid");
                };
                $scope.$watch(function() {
                    return self.label && self.input;
                }, function(hasLabelAndInput) {
                    hasLabelAndInput && !self.label.attr("for") && self.label.attr("for", self.input.attr("id"));
                });
            }
            ContainerCtrl.$inject = [ "$scope", "$element", "$attrs", "$animate" ];
            return {
                restrict: "E",
                link: postLink,
                controller: ContainerCtrl
            };
        }
        function labelDirective() {
            return {
                restrict: "E",
                require: "^?mdInputContainer",
                link: function(scope, element, attr, containerCtrl) {
                    if (containerCtrl && !attr.mdNoFloat && !element.hasClass("md-container-ignore")) {
                        containerCtrl.label = element;
                        scope.$on("$destroy", function() {
                            containerCtrl.label = null;
                        });
                    }
                }
            };
        }
        /**
 * @ngdoc directive
 * @name mdInput
 * @restrict E
 * @module material.components.input
 *
 * @description
 * You can use any `<input>` or `<textarea>` element as a child of an `<md-input-container>`. This
 * allows you to build complex forms for data entry.
 *
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is
 *   specified, a character counter will be shown underneath the input.<br/><br/>
 *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't
 *   want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength`
 *   or maxlength attributes.
 * @param {string=} aria-label Aria-label is required when no label is present.  A warning message
 *   will be logged in the console if not present.
 * @param {string=} placeholder An alternative approach to using aria-label when the label is not
 *   PRESENT. The placeholder text is copied to the aria-label attribute.
 * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.
 * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are
 *   revealed after being hidden. This is off by default for performance reasons because it
 *   guarantees a reflow every digest cycle.
 *
 * @usage
 * <hljs lang="html">
 * <md-input-container>
 *   <label>Color</label>
 *   <input type="text" ng-model="color" required md-maxlength="10">
 * </md-input-container>
 * </hljs>
 *
 * <h3>With Errors</h3>
 *
 * `md-input-container` also supports errors using the standard `ng-messages` directives and
 * animates the messages when they become visible using from the `ngEnter`/`ngLeave` events or
 * the `ngShow`/`ngHide` events.
 *
 * By default, the messages will be hidden until the input is in an error state. This is based off
 * of the `md-is-error` expression of the `md-input-container`. This gives the user a chance to
 * fill out the form before the errors become visible.
 *
 * <hljs lang="html">
 * <form name="colorForm">
 *   <md-input-container>
 *     <label>Favorite Color</label>
 *     <input name="favoriteColor" ng-model="favoriteColor" required>
 *     <div ng-messages="userForm.lastName.$error">
 *       <div ng-message="required">This is required!</div>
 *     </div>
 *   </md-input-container>
 * </form>
 * </hljs>
 *
 * We automatically disable this auto-hiding functionality if you provide any of the following
 * visibility directives on the `ng-messages` container:
 *
 *  - `ng-if`
 *  - `ng-show`/`ng-hide`
 *  - `ng-switch-when`/`ng-switch-default`
 *
 * You can also disable this functionality manually by adding the `md-auto-hide="false"` expression
 * to the `ng-messages` container. This may be helpful if you always want to see the error messages
 * or if you are building your own visibilty directive.
 *
 * _<b>Note:</b> The `md-auto-hide` attribute is a static string that is  only checked upon
 * initialization of the `ng-messages` directive to see if it equals the string `false`._
 *
 * <hljs lang="html">
 * <form name="userForm">
 *   <md-input-container>
 *     <label>Last Name</label>
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *       <div ng-message="minlength">That's too short!</div>
 *     </div>
 *   </md-input-container>
 *   <md-input-container>
 *     <label>Biography</label>
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">
 *       <div ng-message="required">This is required!</div>
 *       <div ng-message="md-maxlength">That's too long!</div>
 *     </div>
 *   </md-input-container>
 *   <md-input-container>
 *     <input aria-label='title' ng-model='title'>
 *   </md-input-container>
 *   <md-input-container>
 *     <input placeholder='title' ng-model='title'>
 *   </md-input-container>
 * </form>
 * </hljs>
 *
 * <h3>Notes</h3>
 *
 * - Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).
 * - Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).
 *
 * The `md-input` and `md-input-container` directives use very specific positioning to achieve the
 * error animation effects. Therefore, it is *not* advised to use the Layout system inside of the
 * `<md-input-container>` tags. Instead, use relative or absolute positioning.
 *
 */
        function inputTextareaDirective($mdUtil, $window, $mdAria) {
            function postLink(scope, element, attr, ctrls) {
                /**
     *
     */
                function ngModelPipelineCheckValue(arg) {
                    containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
                    return arg;
                }
                function inputCheckValue() {
                    // An input's value counts if its length > 0,
                    // or if the input's validity state says it has bad input (eg string in a number input)
                    containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);
                }
                var containerCtrl = ctrls[0], hasNgModel = !!ctrls[1], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel(), isReadonly = angular.isDefined(attr.readonly);
                if (containerCtrl) if ("hidden" !== attr.type) {
                    if (containerCtrl.input) throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");
                    containerCtrl.input = element;
                    // Add an error spacer div after our input to provide space for the char counter and any ng-messages
                    var errorsSpacer = angular.element('<div class="md-errors-spacer">');
                    element.after(errorsSpacer);
                    containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                    element.addClass("md-input");
                    element.attr("id") || element.attr("id", "input_" + $mdUtil.nextUid());
                    "textarea" === element[0].tagName.toLowerCase() && function() {
                        function pipelineListener(value) {
                            onChangeTextarea();
                            return value;
                        }
                        function growTextarea() {
                            // sets the md-input-container height to avoid jumping around
                            container.style.height = container.offsetHeight + "px";
                            // temporarily disables element's flex so its height 'runs free'
                            element.addClass("md-no-flex");
                            if (isNaN(min_rows)) {
                                node.style.height = "auto";
                                node.scrollTop = 0;
                                var height = getHeight();
                                height && (node.style.height = height + "px");
                            } else {
                                node.setAttribute("rows", 1);
                                if (!lineHeight) {
                                    node.style.minHeight = "0";
                                    lineHeight = element.prop("clientHeight");
                                    node.style.minHeight = null;
                                }
                                var rows = Math.min(min_rows, Math.round(node.scrollHeight / lineHeight));
                                node.setAttribute("rows", rows);
                                node.style.height = lineHeight * rows + "px";
                            }
                            // reset everything back to normal
                            element.removeClass("md-no-flex");
                            container.style.height = "auto";
                        }
                        function getHeight() {
                            var line = node.scrollHeight - node.offsetHeight;
                            return node.offsetHeight + (line > 0 ? line : 0);
                        }
                        function onScroll(e) {
                            node.scrollTop = 0;
                            // for smooth new line adding
                            var line = node.scrollHeight - node.offsetHeight, height = node.offsetHeight + line;
                            node.style.height = height + "px";
                        }
                        if (!angular.isDefined(element.attr("md-no-autogrow"))) {
                            var node = element[0], container = containerCtrl.element[0], min_rows = NaN, lineHeight = null;
                            // can't check if height was or not explicity set,
                            // so rows attribute will take precedence if present
                            node.hasAttribute("rows") && (min_rows = parseInt(node.getAttribute("rows")));
                            var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);
                            if (ngModelCtrl) {
                                ngModelCtrl.$formatters.push(pipelineListener);
                                ngModelCtrl.$viewChangeListeners.push(pipelineListener);
                            } else onChangeTextarea();
                            element.on("keydown input", onChangeTextarea);
                            if (isNaN(min_rows)) {
                                element.attr("rows", "1");
                                element.on("scroll", onScroll);
                            }
                            angular.element($window).on("resize", onChangeTextarea);
                            scope.$on("$destroy", function() {
                                angular.element($window).off("resize", onChangeTextarea);
                            });
                            // Attach a watcher to detect when the textarea gets shown.
                            if (angular.isDefined(element.attr("md-detect-hidden"))) {
                                var handleHiddenChange = function() {
                                    var wasHidden = !1;
                                    return function() {
                                        var isHidden = 0 === node.offsetHeight;
                                        !1 === isHidden && !0 === wasHidden && growTextarea();
                                        wasHidden = isHidden;
                                    };
                                }();
                                // Check every digest cycle whether the visibility of the textarea has changed.
                                // Queue up to run after the digest cycle is complete.
                                scope.$watch(function() {
                                    $mdUtil.nextTick(handleHiddenChange, !1);
                                    return !0;
                                });
                            }
                        }
                    }();
                    // If the input doesn't have an ngModel, it may have a static value. For that case,
                    // we have to do one initial check to determine if the container should be in the
                    // "has a value" state.
                    hasNgModel || inputCheckValue();
                    var isErrorGetter = containerCtrl.isErrorGetter || function() {
                        return ngModelCtrl.$invalid && (ngModelCtrl.$touched || isParentFormSubmitted());
                    }, isParentFormSubmitted = function() {
                        var parent = $mdUtil.getClosest(element, "form"), form = parent ? angular.element(parent).controller("form") : null;
                        return !!form && form.$submitted;
                    };
                    scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
                    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);
                    element.on("input", inputCheckValue);
                    isReadonly || element.on("focus", function(ev) {
                        $mdUtil.nextTick(function() {
                            containerCtrl.setFocused(!0);
                        });
                    }).on("blur", function(ev) {
                        $mdUtil.nextTick(function() {
                            containerCtrl.setFocused(!1);
                            inputCheckValue();
                        });
                    });
                    //ngModelCtrl.$setTouched();
                    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();
                    scope.$on("$destroy", function() {
                        containerCtrl.setFocused(!1);
                        containerCtrl.setHasValue(!1);
                        containerCtrl.input = null;
                    });
                } else element.attr("aria-hidden", "true");
            }
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "?ngModel" ],
                link: postLink
            };
        }
        function mdMaxlengthDirective($animate, $mdUtil) {
            function postLink(scope, element, attr, ctrls) {
                function renderCharCount(value) {
                    // If we have not been appended to the body yet; do not render
                    if (!charCountEl.parent) return value;
                    // Force the value into a string since it may be a number,
                    // which does not have a length property.
                    charCountEl.text(String(element.val() || value || "").length + "/" + maxlength);
                    return value;
                }
                var maxlength, charCountEl, errorsSpacer, ngModelCtrl = ctrls[0], containerCtrl = ctrls[1];
                // Wait until the next tick to ensure that the input has setup the errors spacer where we will
                // append our counter
                $mdUtil.nextTick(function() {
                    errorsSpacer = angular.element(containerCtrl.element[0].querySelector(".md-errors-spacer"));
                    charCountEl = angular.element('<div class="md-char-counter">');
                    // Append our character counter inside the errors spacer
                    errorsSpacer.append(charCountEl);
                    // Stop model from trimming. This makes it so whitespace
                    // over the maxlength still counts as invalid.
                    attr.$set("ngTrim", "false");
                    ngModelCtrl.$formatters.push(renderCharCount);
                    ngModelCtrl.$viewChangeListeners.push(renderCharCount);
                    element.on("input keydown keyup", function() {
                        renderCharCount();
                    });
                    scope.$watch(attr.mdMaxlength, function(value) {
                        maxlength = value;
                        if (angular.isNumber(value) && value > 0) {
                            charCountEl.parent().length || $animate.enter(charCountEl, errorsSpacer);
                            renderCharCount();
                        } else $animate.leave(charCountEl);
                    });
                    ngModelCtrl.$validators["md-maxlength"] = function(modelValue, viewValue) {
                        return !angular.isNumber(maxlength) || maxlength < 0 || (modelValue || element.val() || viewValue || "").length <= maxlength;
                    };
                });
            }
            return {
                restrict: "A",
                require: [ "ngModel", "^mdInputContainer" ],
                link: postLink
            };
        }
        function placeholderDirective($log) {
            function postLink(scope, element, attr, inputContainer) {
                // If there is no input container, just return
                if (inputContainer) {
                    var label = inputContainer.element.find("label"), hasNoFloat = angular.isDefined(inputContainer.element.attr("md-no-float"));
                    // If we have a label, or they specify the md-no-float attribute, just return
                    if (label && label.length || hasNoFloat) // Add a placeholder class so we can target it in the CSS
                    inputContainer.setHasPlaceholder(!0); else {
                        // Otherwise, grab/remove the placeholder
                        var placeholderText = attr.placeholder;
                        element.removeAttr("placeholder");
                        // And add the placeholder text as a separate label
                        if (inputContainer.input && "MD-SELECT" != inputContainer.input[0].nodeName) {
                            var placeholder = '<label ng-click="delegateClick()">' + placeholderText + "</label>";
                            inputContainer.element.addClass("md-icon-float");
                            inputContainer.element.prepend(placeholder);
                        }
                    }
                }
            }
            return {
                restrict: "A",
                require: "^^?mdInputContainer",
                priority: 200,
                link: postLink
            };
        }
        /**
 * @ngdoc directive
 * @name mdSelectOnFocus
 * @module material.components.input
 *
 * @restrict A
 *
 * @description
 * The `md-select-on-focus` directive allows you to automatically select the element's input text on focus.
 *
 * <h3>Notes</h3>
 * - The use of `md-select-on-focus` is restricted to `<input>` and `<textarea>` elements.
 *
 * @usage
 * <h3>Using with an Input</h3>
 * <hljs lang="html">
 *
 * <md-input-container>
 *   <label>Auto Select</label>
 *   <input type="text" md-select-on-focus>
 * </md-input-container>
 * </hljs>
 *
 * <h3>Using with a Textarea</h3>
 * <hljs lang="html">
 *
 * <md-input-container>
 *   <label>Auto Select</label>
 *   <textarea md-select-on-focus>This text will be selected on focus.</textarea>
 * </md-input-container>
 *
 * </hljs>
 */
        function mdSelectOnFocusDirective() {
            function postLink(scope, element, attr) {
                function onFocus() {
                    // Use HTMLInputElement#select to fix firefox select issues
                    element[0].select();
                }
                if ("INPUT" === element[0].nodeName || "TEXTAREA" === element[0].nodeName) {
                    element.on("focus", onFocus);
                    scope.$on("$destroy", function() {
                        element.off("focus", onFocus);
                    });
                }
            }
            return {
                restrict: "A",
                link: postLink
            };
        }
        function ngMessagesDirective() {
            function postLink(scope, element, attrs, inputContainer) {
                // If we are not a child of an input container, don't do anything
                if (inputContainer) {
                    // Add our animation class
                    element.toggleClass("md-input-messages-animation", !0);
                    // Add our md-auto-hide class to automatically hide/show messages when container is invalid
                    element.toggleClass("md-auto-hide", !0);
                    // If we see some known visibility directives, remove the md-auto-hide class
                    ("false" == attrs.mdAutoHide || hasVisibiltyDirective(attrs)) && element.toggleClass("md-auto-hide", !1);
                }
            }
            function hasVisibiltyDirective(attrs) {
                return visibilityDirectives.some(function(attr) {
                    return attrs[attr];
                });
            }
            return {
                restrict: "EA",
                link: postLink,
                // This is optional because we don't want target *all* ngMessage instances, just those inside of
                // mdInputContainer.
                require: "^^?mdInputContainer"
            };
        }
        function ngMessageDirective($mdUtil) {
            function compile(element) {
                // If we are not a child of an input container, don't do anything
                if ($mdUtil.getClosest(element, "md-input-container")) {
                    // Add our animation class
                    element.toggleClass("md-input-message-animation", !0);
                    return {};
                }
            }
            return {
                restrict: "EA",
                compile: compile,
                priority: 100
            };
        }
        function mdInputInvalidMessagesAnimation($q, $animateCss) {
            return {
                addClass: function(element, className, done) {
                    var messages = getMessagesElement(element);
                    "md-input-invalid" == className && messages.hasClass("md-auto-hide") ? showInputMessages(element, $animateCss, $q).finally(done) : done();
                }
            };
        }
        function ngMessagesAnimation($q, $animateCss) {
            return {
                enter: function(element, done) {
                    showInputMessages(element, $animateCss, $q).finally(done);
                },
                leave: function(element, done) {
                    hideInputMessages(element, $animateCss, $q).finally(done);
                },
                addClass: function(element, className, done) {
                    "ng-hide" == className ? hideInputMessages(element, $animateCss, $q).finally(done) : done();
                },
                removeClass: function(element, className, done) {
                    "ng-hide" == className ? showInputMessages(element, $animateCss, $q).finally(done) : done();
                }
            };
        }
        function ngMessageAnimation($animateCss) {
            return {
                enter: function(element, done) {
                    // If we have the md-auto-hide class, the md-input-invalid animation will fire, so we can skip
                    if (!getMessagesElement(element).hasClass("md-auto-hide")) return showMessage(element, $animateCss);
                    done();
                },
                leave: function(element, done) {
                    return hideMessage(element, $animateCss);
                }
            };
        }
        function showInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = showMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function hideInputMessages(element, $animateCss, $q) {
            var animator, animators = [], messages = getMessagesElement(element);
            angular.forEach(messages.children(), function(child) {
                animator = hideMessage(angular.element(child), $animateCss);
                animators.push(animator.start());
            });
            return $q.all(animators);
        }
        function showMessage(element, $animateCss) {
            return $animateCss(element, {
                event: "enter",
                structural: !0,
                from: {
                    opacity: 0,
                    "margin-top": -element[0].offsetHeight + "px"
                },
                to: {
                    opacity: 1,
                    "margin-top": "0"
                },
                duration: .3
            });
        }
        function hideMessage(element, $animateCss) {
            var height = element[0].offsetHeight;
            // If we are already hidden, just return an empty animation
            // If we are already hidden, just return an empty animation
            return 0 == window.getComputedStyle(element[0]).opacity ? $animateCss(element, {}) : $animateCss(element, {
                event: "leave",
                structural: !0,
                from: {
                    opacity: 1,
                    "margin-top": 0
                },
                to: {
                    opacity: 0,
                    "margin-top": -height + "px"
                },
                duration: .3
            });
        }
        function getInputElement(element) {
            return element.controller("mdInputContainer").element;
        }
        function getMessagesElement(element) {
            var input = getInputElement(element);
            return angular.element(input[0].querySelector("ng-messages,data-ng-messages,x-ng-messages,[ng-messages],[data-ng-messages],[x-ng-messages]"));
        }
        /**
 * @ngdoc module
 * @name material.components.input
 */
        angular.module("material.components.input", [ "material.core" ]).directive("mdInputContainer", mdInputContainerDirective).directive("label", labelDirective).directive("input", inputTextareaDirective).directive("textarea", inputTextareaDirective).directive("mdMaxlength", mdMaxlengthDirective).directive("placeholder", placeholderDirective).directive("ngMessages", ngMessagesDirective).directive("ngMessage", ngMessageDirective).directive("ngMessageExp", ngMessageDirective).directive("mdSelectOnFocus", mdSelectOnFocusDirective).animation(".md-input-invalid", mdInputInvalidMessagesAnimation).animation(".md-input-messages-animation", ngMessagesAnimation).animation(".md-input-message-animation", ngMessageAnimation);
        mdInputContainerDirective.$inject = [ "$mdTheming", "$parse" ];
        inputTextareaDirective.$inject = [ "$mdUtil", "$window", "$mdAria" ];
        mdMaxlengthDirective.$inject = [ "$animate", "$mdUtil" ];
        placeholderDirective.$inject = [ "$log" ];
        var visibilityDirectives = [ "ngIf", "ngShow", "ngHide", "ngSwitchWhen", "ngSwitchDefault" ];
        ngMessageDirective.$inject = [ "$mdUtil" ];
        mdInputInvalidMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        ngMessagesAnimation.$inject = [ "$q", "$animateCss" ];
        ngMessageAnimation.$inject = [ "$animateCss" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdList
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.
 *
 * @usage
 * <hljs lang="html">
 * <md-list>
 *   <md-list-item class="md-2-line" ng-repeat="item in todos">
 *     <md-checkbox ng-model="item.done"></md-checkbox>
 *     <div class="md-list-item-text">
 *       <h3>{{item.title}}</h3>
 *       <p>{{item.description}}</p>
 *     </div>
 *   </md-list-item>
 * </md-list>
 * </hljs>
 */
        function mdListDirective($mdTheming) {
            return {
                restrict: "E",
                compile: function(tEl) {
                    tEl[0].setAttribute("role", "list");
                    return $mdTheming;
                }
            };
        }
        /**
 * @ngdoc directive
 * @name mdListItem
 * @module material.components.list
 *
 * @restrict E
 *
 * @description
 * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.
 * The `md-2-line` and `md-3-line` classes can be added to a `<md-list-item>` 
 * to increase the height with 22px and 40px respectively.
 *
 * ## CSS
 * `.md-avatar` - class for image avatars
 *
 * `.md-avatar-icon` - class for icon avatars
 *
 * `.md-offset` - on content without an avatar
 *
 * @usage
 * <hljs lang="html">
 *  <md-list>
 *    <md-list-item>
 *      <img class="md-avatar" ng-src="path/to/img"/>
 *      <span>Item content in list</span>
 *    </md-list-item>
 *    <md-list-item>
 *      <md-icon class="md-avatar-icon" md-svg-icon="communication:phone"></md-icon>
 *      <span>Item content in list</span>
 *    </md-list-item>
 *  </md-list>
 * </hljs>
 *
 * _**Note:** We automatically apply special styling when the inner contents are wrapped inside
 * of a `<md-button>` tag. This styling is automatically ignored for `class="md-secondary"` buttons
 * and you can include a class of `class="md-exclude"` if you need to use a non-secondary button
 * that is inside the list, but does not wrap the contents._
 */
        function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {
            var proxiedTypes = [ "md-checkbox", "md-switch" ];
            return {
                restrict: "E",
                controller: "MdListController",
                compile: function(tEl, tAttrs) {
                    function wrapIn(type) {
                        var container;
                        if ("div" == type) {
                            container = angular.element('<div class="md-no-style md-list-item-inner">');
                            container.append(tEl.contents());
                            tEl.addClass("md-proxy-focus");
                        } else {
                            container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
                            copyAttributes(tEl[0], container[0]);
                            container.children().eq(0).append(tEl.contents());
                        }
                        tEl[0].setAttribute("tabindex", "-1");
                        tEl.append(container);
                    }
                    function copyAttributes(item, wrapper) {
                        var copiedAttrs = [ "ng-if", "ng-click", "aria-label", "ng-disabled", "ui-sref", "href", "ng-href", "ng-attr-ui-sref" ];
                        angular.forEach(copiedAttrs, function(attr) {
                            if (item.hasAttribute(attr)) {
                                wrapper.setAttribute(attr, item.getAttribute(attr));
                                item.removeAttribute(attr);
                            }
                        });
                    }
                    function isProxiedElement(el) {
                        return -1 != proxiedTypes.indexOf(el.nodeName.toLowerCase());
                    }
                    function isButton(el) {
                        var nodeName = el.nodeName.toUpperCase();
                        return "MD-BUTTON" == nodeName || "BUTTON" == nodeName;
                    }
                    function postLink($scope, $element, $attr, ctrl) {
                        var proxies = [], firstChild = $element[0].firstElementChild, hasClick = firstChild && function(element) {
                            for (var attr = element.attributes, i = 0; i < attr.length; i++) if ("ngClick" === $attr.$normalize(attr[i].name)) return !0;
                            return !1;
                        }(firstChild);
                        !function() {
                            var children = $element.children();
                            children.length && !children[0].hasAttribute("ng-click") && angular.forEach(proxiedTypes, function(type) {
                                angular.forEach(firstChild.querySelectorAll(type), function(child) {
                                    proxies.push(child);
                                });
                            });
                        }();
                        !function() {
                            if (1 == proxies.length || hasClick) {
                                $element.addClass("md-clickable");
                                hasClick || ctrl.attachRipple($scope, angular.element($element[0].querySelector(".md-no-style")));
                            }
                        }();
                        $element.hasClass("md-proxy-focus") && proxies.length && angular.forEach(proxies, function(proxy) {
                            proxy = angular.element(proxy);
                            $scope.mouseActive = !1;
                            proxy.on("mousedown", function() {
                                $scope.mouseActive = !0;
                                $timeout(function() {
                                    $scope.mouseActive = !1;
                                }, 100);
                            }).on("focus", function() {
                                !1 === $scope.mouseActive && $element.addClass("md-focused");
                                proxy.on("blur", function proxyOnBlur() {
                                    $element.removeClass("md-focused");
                                    proxy.off("blur", proxyOnBlur);
                                });
                            });
                        });
                        var firstChildKeypressListener = function(e) {
                            if ("INPUT" != e.target.nodeName && "TEXTAREA" != e.target.nodeName && !e.target.isContentEditable) {
                                if ((e.which || e.keyCode) == $mdConstant.KEY_CODE.SPACE && firstChild) {
                                    firstChild.click();
                                    e.preventDefault();
                                    e.stopPropagation();
                                }
                            }
                        };
                        hasClick || proxies.length || firstChild && firstChild.addEventListener("keypress", firstChildKeypressListener);
                        $element.off("click");
                        $element.off("keypress");
                        1 == proxies.length && firstChild && $element.children().eq(0).on("click", function(e) {
                            !$mdUtil.getClosest(e.target, "BUTTON") && firstChild.contains(e.target) && angular.forEach(proxies, function(proxy) {
                                e.target === proxy || proxy.contains(e.target) || angular.element(proxy).triggerHandler("click");
                            });
                        });
                        $scope.$on("$destroy", function() {
                            firstChild && firstChild.removeEventListener("keypress", firstChildKeypressListener);
                        });
                    }
                    // Check for proxy controls (no ng-click on parent, and a control inside)
                    var hasProxiedElement, secondaryItem = tEl[0].querySelector(".md-secondary");
                    tEl[0].setAttribute("role", "listitem");
                    if (tAttrs.ngClick || tAttrs.ngHref || tAttrs.href || tAttrs.uiSref || tAttrs.ngAttrUiSref) wrapIn("button"); else {
                        for (var type, i = 0; type = proxiedTypes[i]; ++i) if (tEl[0].querySelector(type)) {
                            hasProxiedElement = !0;
                            break;
                        }
                        hasProxiedElement ? wrapIn("div") : tEl[0].querySelector("md-button:not(.md-secondary):not(.md-exclude)") || tEl.addClass("md-no-proxy");
                    }
                    !function() {
                        if (secondaryItem && !isButton(secondaryItem) && secondaryItem.hasAttribute("ng-click")) {
                            $mdAria.expect(secondaryItem, "aria-label");
                            var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');
                            copyAttributes(secondaryItem, buttonWrapper[0]);
                            secondaryItem.setAttribute("tabindex", "-1");
                            secondaryItem.classList.remove("md-secondary");
                            buttonWrapper.append(secondaryItem);
                            secondaryItem = buttonWrapper[0];
                        }
                        // Check for a secondary item and move it outside
                        if (secondaryItem && (secondaryItem.hasAttribute("ng-click") || tAttrs.ngClick && isProxiedElement(secondaryItem))) {
                            tEl.addClass("md-with-secondary");
                            tEl.append(secondaryItem);
                        }
                    }();
                    !function() {
                        for (var toggle, toggleType, toggleTypes = [ "md-switch", "md-checkbox" ], i = 0; toggleType = toggleTypes[i]; ++i) if ((toggle = tEl.find(toggleType)[0]) && !toggle.hasAttribute("aria-label")) {
                            var p = tEl.find("p")[0];
                            if (!p) return;
                            toggle.setAttribute("aria-label", "Toggle " + p.textContent);
                        }
                    }();
                    return postLink;
                }
            };
        }
        /*
 * @private
 * @ngdoc controller
 * @name MdListController
 * @module material.components.list
 *
 */
        function MdListController($scope, $element, $mdListInkRipple) {
            function attachRipple(scope, element) {
                var options = {};
                $mdListInkRipple.attach(scope, element, options);
            }
            this.attachRipple = attachRipple;
        }
        /**
 * @ngdoc module
 * @name material.components.list
 * @description
 * List module
 */
        angular.module("material.components.list", [ "material.core" ]).controller("MdListController", MdListController).directive("mdList", mdListDirective).directive("mdListItem", mdListItemDirective);
        mdListDirective.$inject = [ "$mdTheming" ];
        mdListItemDirective.$inject = [ "$mdAria", "$mdConstant", "$mdUtil", "$timeout" ];
        MdListController.$inject = [ "$scope", "$element", "$mdListInkRipple" ];
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.menu
 */
        angular.module("material.components.menu", [ "material.core", "material.components.backdrop" ]);
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.menu-bar
 */
        angular.module("material.components.menuBar", [ "material.core", "material.components.menu" ]);
    }();
    !function() {
        /**
 * A service that is used for controlling/displaying panels on the screen.
 * @param {!angular.JQLite} $rootElement
 * @param {!angular.Scope} $rootScope
 * @param {!angular.$injector} $injector
 * @param {!angular.$window} $window
 * @final @constructor @ngInject
 */
        function MdPanelService($rootElement, $rootScope, $injector, $window) {
            /**
   * Default config options for the panel.
   * Anything angular related needs to be done later. Therefore
   *     scope: $rootScope.$new(true),
   *     attachTo: $rootElement,
   * are added later.
   * @private {!Object}
   */
            this._defaultConfigOptions = {
                bindToController: !0,
                clickOutsideToClose: !1,
                disableParentScroll: !1,
                escapeToClose: !1,
                focusOnOpen: !0,
                fullscreen: !1,
                hasBackdrop: !1,
                transformTemplate: angular.bind(this, this._wrapTemplate),
                trapFocus: !1,
                zIndex: defaultZIndex
            };
            /** @private {!Object} */
            this._config = {};
            /** @private @const */
            this._$rootElement = $rootElement;
            /** @private @const */
            this._$rootScope = $rootScope;
            /** @private @const */
            this._$injector = $injector;
            /** @private @const */
            this._$window = $window;
            /**
   * Default animations that can be used within the panel.
   * @type {enum}
   */
            this.animation = MdPanelAnimation.animation;
            /**
   * Possible values of xPosition for positioning the panel relative to
   * another element.
   * @type {enum}
   */
            this.xPosition = MdPanelPosition.xPosition;
            /**
   * Possible values of yPosition for positioning the panel relative to
   * another element.
   * @type {enum}
   */
            this.yPosition = MdPanelPosition.yPosition;
        }
        /*****************************************************************************
 *                                 MdPanelRef                                *
 *****************************************************************************/
        /**
 * A reference to a created panel. This reference contains a unique id for the
 * panel, along with properties/functions used to control the panel.
 *
 * @param {!Object} config
 * @param {!angular.$injector} $injector
 * @final @constructor
 */
        function MdPanelRef(config, $injector) {
            // Injected variables.
            /** @private @const {!angular.$q} */
            this._$q = $injector.get("$q");
            /** @private @const {!angular.$mdCompiler} */
            this._$mdCompiler = $injector.get("$mdCompiler");
            /** @private @const {!angular.$mdConstant} */
            this._$mdConstant = $injector.get("$mdConstant");
            /** @private @const {!angular.$mdUtil} */
            this._$mdUtil = $injector.get("$mdUtil");
            /** @private @const {!angular.Scope} */
            this._$rootScope = $injector.get("$rootScope");
            /** @private @const {!angular.$animate} */
            this._$animate = $injector.get("$animate");
            /** @private @const {!MdPanelRef} */
            this._$mdPanel = $injector.get("$mdPanel");
            /** @private @const {!angular.$log} */
            this._$log = $injector.get("$log");
            /** @private @const {!angular.$window} */
            this._$window = $injector.get("$window");
            /** @private @const {!Function} */
            this._$$rAF = $injector.get("$$rAF");
            // Public variables.
            /**
   * Unique id for the panelRef.
   * @type {string}
   */
            this.id = config.id;
            /**
   * Whether the panel is attached. This is synchronous. When attach is called,
   * isAttached is set to true. When detach is called, isAttached is set to
   * false.
   * @type {boolean}
   */
            this.isAttached = !1;
            // Private variables.
            /** @private {!Object} */
            this._config = config;
            /** @private {!angular.JQLite|undefined} */
            this._panelContainer;
            /** @private {!angular.JQLite|undefined} */
            this._panelEl;
            /** @private {Array<function()>} */
            this._removeListeners = [];
            /** @private {!angular.JQLite|undefined} */
            this._topFocusTrap;
            /** @private {!angular.JQLite|undefined} */
            this._bottomFocusTrap;
            /** @private {!$mdPanel|undefined} */
            this._backdropRef;
            /** @private {Function?} */
            this._restoreScroll = null;
        }
        /*****************************************************************************
 *                               MdPanelPosition                             *
 *****************************************************************************/
        /**
 * Position configuration object. To use, create an MdPanelPosition with the
 * desired properties, then pass the object as part of $mdPanel creation.
 *
 * Example:
 *
 * var panelPosition = new MdPanelPosition()
 *     .relativeTo(myButtonEl)
 *     .addPanelPosition($mdPanel.xPosition.CENTER, $mdPanel.yPosition.ALIGN_TOPS);
 *
 * $mdPanel.create({
 *   position: panelPosition
 * });
 *
 * @param {!angular.$window} $window
 * @final @constructor
 */
        function MdPanelPosition($window) {
            /** @private @const */
            this._$window = $window;
            /** @private {boolean} */
            this._absolute = !1;
            /** @private {!angular.JQLite} */
            this._relativeToEl;
            /** @private {string} */
            this._top = "";
            /** @private {string} */
            this._bottom = "";
            /** @private {string} */
            this._left = "";
            /** @private {string} */
            this._right = "";
            /** @private {!Array<string>} */
            this._translateX = [];
            /** @private {!Array<string>} */
            this._translateY = [];
            /** @private {!Array<{x:string, y:string}>} */
            this._positions = [];
            /** @private {?{x:string, y:string}} */
            this._actualPosition;
        }
        /*****************************************************************************
 *                               MdPanelAnimation                            *
 *****************************************************************************/
        /**
 * Animation configuration object. To use, create an MdPanelAnimation with the
 * desired properties, then pass the object as part of $mdPanel creation.
 *
 * Example:
 *
 * var panelAnimation = new MdPanelAnimation()
 *     .openFrom(myButtonEl)
 *     .closeTo('.my-button')
 *     .withAnimation($mdPanel.animation.SCALE);
 *
 * $mdPanel.create({
 *   animation: panelAnimation
 * });
 *
 * @param {!angular.$injector} $injector
 * @final @constructor
 */
        function MdPanelAnimation($injector) {
            /** @private @const {!angular.$mdUtil} */
            this._$mdUtil = $injector.get("$mdUtil");
            /**
   * @private {{element: !angular.JQLite|undefined, bounds: !DOMRect}|
   *    undefined}
   */
            this._openFrom;
            /**
   * @private {{element: !angular.JQLite|undefined, bounds: !DOMRect}|
   *    undefined}
   */
            this._closeTo;
            /** @private {string|{open: string, close: string} */
            this._animationClass = "";
        }
        /*****************************************************************************
 *                                Util Methods                               *
 *****************************************************************************/
        /**
 * Returns the angular element associated with a css selector or element.
 * @param el {string|!angular.JQLite|!Element}
 * @returns {!angular.JQLite}
 */
        function getElement(el) {
            var queryResult = angular.isString(el) ? document.querySelector(el) : el;
            return angular.element(queryResult);
        }
        /**
 * @ngdoc module
 * @name material.components.panel
 */
        angular.module("material.components.panel", [ "material.core", "material.components.backdrop" ]).service("$mdPanel", MdPanelService);
        /*****************************************************************************
 *                            PUBLIC DOCUMENTATION                           *
 *****************************************************************************/
        /**
 * @ngdoc service
 * @name $mdPanel
 * @module material.components.panel
 *
 * @description
 * `$mdPanel` is a robust, low-level service for creating floating panels on
 * the screen. It can be used to implement tooltips, dialogs, pop-ups, etc.
 *
 * @usage
 * <hljs lang="js">
 * (function(angular, undefined) {
 *   ‘use strict’;
 *
 *   angular
 *       .module('demoApp', ['ngMaterial'])
 *       .controller('DemoDialogController', DialogController);
 *
 *   var panelRef;
 *
 *   function showPanel($event) {
 *     var panelPosition = $mdPanelPosition
 *         .absolute()
 *         .top('50%')
 *         .left('50%');
 *
 *     var panelAnimation = $mdPanelAnimation
 *         .targetEvent($event)
 *         .defaultAnimation('md-panel-animate-fly')
 *         .closeTo('.show-button');
 *
 *     var config = {
 *       attachTo: angular.element(document.body),
 *       controller: DialogController,
 *       controllerAs: 'ctrl',
 *       position: panelPosition,
 *       animation: panelAnimation,
 *       targetEvent: $event,
 *       template: 'dialog-template.html',
 *       clickOutsideToClose: true,
 *       escapeToClose: true,
 *       focusOnOpen: true
 *     }
 *     panelRef = $mdPanel.create(config);
 *     panelRef.open()
 *         .finally(function() {
 *           panelRef = undefined;
 *         });
 *   }
 *
 *   function DialogController(MdPanelRef, toppings) {
 *     var toppings;
 *
 *     function closeDialog() {
 *       MdPanelRef.close();
 *     }
 *   }
 * })(angular);
 * </hljs>
 */
        /**
 * @ngdoc method
 * @name $mdPanel#create
 * @description
 * Creates a panel with the specified options.
 *
 * @param opt_config {Object=} Specific configuration object that may contain
 * the following properties:
 *
 *   - `template` - `{string=}`: HTML template to show in the dialog. This
 *     **must** be trusted HTML with respect to Angular’s
 *     [$sce service](https://docs.angularjs.org/api/ng/service/$sce).
 *   - `templateUrl` - `{string=}`: The URL that will be used as the content of
 *     the panel.
 *   - `controller` - `{(function|string)=}`: The controller to associate with
 *     the panel. The controller can inject a reference to the returned
 *     panelRef, which allows the panel to be closed, hidden, and shown. Any
 *     fields passed in through locals or resolve will be bound to the
 *     controller.
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on
 *     the scope.
 *   - `bindToController` - `{boolean=}`: Binds locals to the controller
 *     instead of passing them in. Defaults to true, as this is a best
 *     practice.
 *   - `locals` - `{Object=}`: An object containing key/value pairs. The keys
 *     will be used as names of values to inject into the controller. For
 *     example, `locals: {three: 3}` would inject `three` into the controller,
 *     with the value 3.
 *   - `resolve` - `{Object=}`: Similar to locals, except it takes promises as
 *     values. The panel will not open until all of the promises resolve.
 *   - `attachTo` - `{(string|!angular.JQLite|!Element)=}`: The element to
 *     attach the panel to. Defaults to appending to the root element of the
 *     application.
 *   - `panelClass` - `{string=}`: A css class to apply to the panel element.
 *     This class should define any borders, box-shadow, etc. for the panel.
 *   - `zIndex` - `{number=}`: The z-index to place the panel at.
 *     Defaults to 80.
 *   - `position` - `{MdPanelPosition=}`: An MdPanelPosition object that
 *     specifies the alignment of the panel. For more information, see
 *     `MdPanelPosition`.
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click
 *     outside the panel to close it. Defaults to false.
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to
 *     close the panel. Defaults to false.
 *   - `trapFocus` - `{boolean=}`: Whether focus should be trapped within the
 *     panel. If `trapFocus` is true, the user will not be able to interact
 *     with the rest of the page until the panel is dismissed. Defaults to
 *     false.
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on
 *     open. Only disable if focusing some other way, as focus management is
 *     required for panels to be accessible. Defaults to true.
 *   - `fullscreen` - `{boolean=}`: Whether the panel should be full screen.
 *     Applies the class `._md-panel-fullscreen` to the panel on open. Defaults
 *     to false.
 *   - `animation` - `{MdPanelAnimation=}`: An MdPanelAnimation object that
 *     specifies the animation of the panel. For more information, see
 *     `MdPanelAnimation`.
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop
 *     behind the panel. Defaults to false.
 *   - `disableParentScroll` - `{boolean=}`: Whether the user can scroll the
 *     page behind the panel. Defaults to false.
 *   - `onDomAdded` - `{function=}`: Callback function used to announce when
 *     the panel is added to the DOM.
 *   - `onOpenComplete` - `{function=}`: Callback function used to announce
 *     when the open() action is finished.
 *   - `onRemoving` - `{function=}`: Callback function used to announce the
 *     close/hide() action is starting.
 *   - `onDomRemoved` - `{function=}`: Callback function used to announce when the
 *     panel is removed from the DOM.
 *   - `origin` - `{(string|!angular.JQLite|!Element)=}`: The element to
 *     focus on when the panel closes. This is commonly the element which triggered
 *     the opening of the panel.
 *
 * TODO(ErinCoughlan): Add the following config options.
 *   - `groupName` - `{string=}`: Name of panel groups. This group name is
 *     used for configuring the number of open panels and identifying specific
 *     behaviors for groups. For instance, all tooltips will be identified
 *     using the same groupName.
 *
 * @returns {MdPanelRef} panelRef
 */
        /**
 * @ngdoc method
 * @name $mdPanel#open
 * @description
 * Calls the create method above, then opens the panel. This is a shortcut for
 * creating and then calling open manually. If custom methods need to be
 * called when the panel is added to the DOM or opened, do not use this method.
 * Instead create the panel, chain promises on the domAdded and openComplete
 * methods, and call open from the returned panelRef.
 *
 * @param {Object=} opt_config Specific configuration object that may contain
 * the properties defined in `$mdPanel.create`.
 *
 * @returns {angular.$q.Promise<MdPanelRef>} panelRef A promise that resolves
 * to an instance of the panel.
 */
        /**
 * @ngdoc method
 * @name $mdPanel#setGroupMaxOpen
 * @description
 * Sets the maximum number of panels in a group that can be opened at a given
 * time.
 *
 * @param groupName {string} The name of the group to configure.
 * @param maxOpen {number} The max number of panels that can be opened.
 */
        /**
 * @ngdoc method
 * @name $mdPanel#newPanelPosition
 * @description
 * Returns a new instance of the MdPanelPosition object. Use this to create
 * the position config object.
 *
 * @returns {MdPanelPosition} panelPosition
 */
        /**
 * @ngdoc method
 * @name $mdPanel#newPanelAnimation
 * @description
 * Returns a new instance of the MdPanelAnimation object. Use this to create
 * the animation config object.
 *
 * @returns {MdPanelAnimation} panelAnimation
 */
        /*****************************************************************************
 *                                 MdPanelRef                                *
 *****************************************************************************/
        /**
 * @ngdoc type
 * @name MdPanelRef
 * @module material.components.panel
 * @description
 * A reference to a created panel. This reference contains a unique id for the
 * panel, along with the following properties:
 *   - `id` - `{string}: The unique id for the panel. This id is used to track
 *     when a panel was interacted with.
 *   - `config` - `{Object=}`: The entire config object that was used in
 *     create.
 *   - `isAttached` - `{boolean}`: Whether the panel is attached to the DOM.
 *     Visibility to the user does not factor into isAttached.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#open
 * @description
 * Attaches and shows the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * opened.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#close
 * @description
 * Hides and detaches the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * closed.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#attach
 * @description
 * Create the panel elements and attach them to the DOM. The panel will be
 * hidden by default.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * attached.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#detach
 * @description
 * Removes the panel from the DOM. This will NOT hide the panel before removing it.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * detached.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#show
 * @description
 * Shows the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel has
 * shown and animations are completed.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#hide
 * @description
 * Hides the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel has
 * hidden and animations are completed.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#destroy
 * @description
 * Destroys the panel. The panel cannot be opened again after this is called.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#addClass
 * @description
 * Adds a class to the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} newClass Class to be added.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#removeClass
 * @description
 * Removes a class from the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} oldClass Class to be removed.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#toggleClass
 * @description
 * Toggles a class on the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} toggleClass Class to be toggled.
 */
        /**
 * @ngdoc method
 * @name MdPanelRef#focusOnOpen
 * @description
 * Focuses the panel content if the focusOnOpen config value is true.
 */
        /*****************************************************************************
 *                               MdPanelPosition                            *
 *****************************************************************************/
        /**
 * @ngdoc type
 * @name MdPanelPosition
 * @module material.components.panel
 * @description
 * Object for configuring the position of the panel. Examples:
 *
 * Centering the panel:
 * `new MdPanelPosition().absolute().center();`
 *
 * Overlapping the panel with an element:
 * `new MdPanelPosition()
 *     .relativeTo(someElement)
 *     .addPanelPosition($mdPanel.xPosition.ALIGN_START, $mdPanel.yPosition.ALIGN_TOPS);`
 *
 * Aligning the panel with the bottom of an element:
 * `new MdPanelPosition()
 *     .relativeTo(someElement)
 *     .addPanelPosition($mdPanel.xPosition.CENTER, $mdPanel.yPosition.BELOW);
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#absolute
 * @description
 * Positions the panel absolutely relative to the parent element. If the parent
 * is document.body, this is equivalent to positioning the panel absolutely
 * within the viewport.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#relativeTo
 * @description
 * Positions the panel relative to a specific element.
 * @param {string|!Element|!angular.JQLite} element Query selector,
 *     DOM element, or angular element to position the panel with respect to.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#top
 * @description
 * Sets the value of `top` for the panel. Clears any previously set
 * vertical position.
 * @param {string=} opt_top Value of `top`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#bottom
 * @description
 * Sets the value of `bottom` for the panel. Clears any previously set
 * vertical position.
 * @param {string=} opt_bottom Value of `bottom`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#left
 * @description
 * Sets the value of `left` for the panel. Clears any previously set
 * horizontal position.
 * @param {string=} opt_left Value of `left`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#right
 * @description
 * Sets the value of `right` for the panel. Clears any previously set
 * horizontal position.
 * @param {string=} opt_right Value of `right`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#centerHorizontally
 * @description
 * Centers the panel horizontally in the viewport. Clears any previously set
 * horizontal position.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#centerVertically
 * @description
 * Centers the panel vertically in the viewport. Clears any previously set
 * vertical position.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#center
 * @description
 * Centers the panel horizontally and vertically in the viewport. This is
 * equivalent to calling both `centerHorizontally` and `centerVertically`.
 * Clears any previously set horizontal and vertical positions.
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#addPanelPosition
 * @param {string} xPosition
 * @param {string} yPosition
 * @description
 * Sets the x and y position for the panel relative to another element. Can be
 * called multiple times to specify an ordered list of panel positions. The
 * first position which allows the panel to be completely on-screen will be
 * chosen; the last position will be chose whether it is on-screen or not.
 *
 * xPosition must be one of the following values available on
 * $mdPanel.xPosition:
 *
 * CENTER | ALIGN_START | ALIGN_END | OFFSET_START | OFFSET_END
 *
 *    *************
 *    *           *
 *    *   PANEL   *
 *    *           *
 *    *************
 *   A B    C    D E
 *
 * A: OFFSET_START (for LTR displays)
 * B: ALIGN_START (for LTR displays)
 * C: CENTER
 * D: ALIGN_END (for LTR displays)
 * E: OFFSET_END (for LTR displays)
 *
 * yPosition must be one of the following values available on
 * $mdPanel.yPosition:
 *
 * CENTER | ALIGN_TOPS | ALIGN_BOTTOMS | ABOVE | BELOW
 *
 *   F
 *   G *************
 *     *           *
 *   H *   PANEL   *
 *     *           *
 *   I *************
 *   J
 *
 * F: BELOW
 * G: ALIGN_TOPS
 * H: CENTER
 * I: ALIGN_BOTTOMS
 * J: ABOVE
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#withOffsetX
 * @description
 * Sets the value of the offset in the x-direction.
 * @param {string} offsetX
 * @returns {MdPanelPosition}
 */
        /**
 * @ngdoc method
 * @name MdPanelPosition#withOffsetY
 * @description
 * Sets the value of the offset in the y-direction.
 * @param {string} offsetY
 * @returns {MdPanelPosition}
 */
        /*****************************************************************************
 *                               MdPanelAnimation                            *
 *****************************************************************************/
        /**
 * @ngdoc object
 * @name MdPanelAnimation
 * @description
 * Animation configuration object. To use, create an MdPanelAnimation with the
 * desired properties, then pass the object as part of $mdPanel creation.
 *
 * Example:
 *
 * var panelAnimation = new MdPanelAnimation()
 *     .openFrom(myButtonEl)
 *     .closeTo('.my-button')
 *     .withAnimation($mdPanel.animation.SCALE);
 *
 * $mdPanel.create({
 *   animation: panelAnimation
 * });
 */
        /**
 * @ngdoc method
 * @name MdPanelAnimation#openFrom
 * @description
 * Specifies where to start the open animation. `openFrom` accepts a
 * click event object, query selector, DOM element, or a Rect object that
 * is used to determine the bounds. When passed a click event, the location
 * of the click will be used as the position to start the animation.
 *
 * @param {string|!Element|!Event|{top: number, left: number}}
 * @returns {MdPanelAnimation}
 */
        /**
 * @ngdoc method
 * @name MdPanelAnimation#closeTo
 * @description
 * Specifies where to animate the dialog close. `closeTo` accepts a
 * query selector, DOM element, or a Rect object that is used to determine
 * the bounds.
 *
 * @param {string|!Element|{top: number, left: number}}
 * @returns {MdPanelAnimation}
 */
        /**
 * @ngdoc method
 * @name MdPanelAnimation#withAnimation
 * @description
 * Specifies the animation class.
 *
 * There are several default animations that can be used:
 * ($mdPanel.animation)
 *   SLIDE: The panel slides in and out from the specified
 *       elements. It will not fade in or out.
 *   SCALE: The panel scales in and out. Slide and fade are
 *       included in this animation.
 *   FADE: The panel fades in and out.
 *
 * Custom classes will by default fade in and out unless
 * "transition: opacity 1ms" is added to the to custom class.
 *
 * @param {string|{open: string, close: string}} cssClass
 * @returns {MdPanelAnimation}
 */
        /*****************************************************************************
 *                                IMPLEMENTATION                             *
 *****************************************************************************/
        // Default z-index for the panel.
        var defaultZIndex = 80, FOCUS_TRAP_TEMPLATE = angular.element('<div class="_md-panel-focus-trap" tabindex="0"></div>');
        MdPanelService.$inject = [ "$rootElement", "$rootScope", "$injector", "$window" ];
        /**
 * Creates a panel with the specified options.
 * @param {!Object=} opt_config Configuration object for the panel.
 * @returns {!MdPanelRef}
 */
        MdPanelService.prototype.create = function(opt_config) {
            var configSettings = opt_config || {};
            this._config = {
                scope: this._$rootScope.$new(!0),
                attachTo: this._$rootElement
            };
            angular.extend(this._config, this._defaultConfigOptions, configSettings);
            var instanceId = "panel_" + this._$injector.get("$mdUtil").nextUid();
            return new MdPanelRef(angular.extend({
                id: instanceId
            }, this._config), this._$injector);
        };
        /**
 * Creates and opens a panel with the specified options.
 * @param {!Object=} opt_config Configuration object for the panel.
 * @returns {!angular.$q.Promise<MdPanelRef>} The panel created from create.
 */
        MdPanelService.prototype.open = function(opt_config) {
            var panelRef = this.create(opt_config);
            return panelRef.open().then(function() {
                return panelRef;
            });
        };
        /**
 * Returns a new instance of the MdPanelPosition. Use this to create the
 * positioning object.
 *
 * @returns {MdPanelPosition}
 */
        MdPanelService.prototype.newPanelPosition = function() {
            return new MdPanelPosition(this._$window);
        };
        /**
 * Returns a new instance of the MdPanelAnimation. Use this to create the
 * animation object.
 *
 * @returns {MdPanelAnimation}
 */
        MdPanelService.prototype.newPanelAnimation = function() {
            return new MdPanelAnimation(this._$injector);
        };
        /**
 * Wraps the users template in two elements, md-panel-outer-wrapper, which
 * covers the entire attachTo element, and md-panel, which contains only the
 * template. This allows the panel control over positioning, animations,
 * and similar properties.
 *
 * @param {string} origTemplate The original template.
 * @returns {string} The wrapped template.
 * @private
 */
        MdPanelService.prototype._wrapTemplate = function(origTemplate) {
            // The panel should be initially rendered offscreen so we can calculate
            // height and width for positioning.
            return '<div class="md-panel-outer-wrapper">  <div class="md-panel" style="left: -9999px;">' + (origTemplate || "") + "</div></div>";
        };
        /**
 * Opens an already created and configured panel. If the panel is already
 * visible, does nothing.
 *
 * @returns {!angular.$q.Promise<MdPanelRef>} A promise that is resolved when
 * the panel is opened and animations finish.
 */
        MdPanelRef.prototype.open = function() {
            var self = this;
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self), show = self._simpleBind(self.show, self);
                self.attach().then(show).then(done).catch(reject);
            });
        };
        /**
 * Closes the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * closed and animations finish.
 */
        MdPanelRef.prototype.close = function() {
            var self = this;
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self), detach = self._simpleBind(self.detach, self);
                self.hide().then(detach).then(done).catch(reject);
            });
        };
        /**
 * Attaches the panel. The panel will be hidden afterwards.
 *
 * @returns {!angular.$q.Promise<MdPanelRef>} A promise that is resolved when
 * the panel is attached.
 */
        MdPanelRef.prototype.attach = function() {
            if (this.isAttached && this._panelEl) return this._$q.when(this);
            var self = this;
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self), onDomAdded = self._config.onDomAdded || angular.noop, addListeners = function(response) {
                    self.isAttached = !0;
                    self._addEventListeners();
                    return response;
                };
                self._$q.all([ self._createBackdrop(), self._createPanel().then(addListeners).catch(reject) ]).then(onDomAdded).then(done).catch(reject);
            });
        };
        /**
 * Only detaches the panel. Will NOT hide the panel first.
 *
 * @returns {!angular.$q.Promise<MdPanelRef>} A promise that is resolved when the panel is
 * detached.
 */
        MdPanelRef.prototype.detach = function() {
            if (!this.isAttached) return this._$q.when(this);
            var self = this, onDomRemoved = self._config.onDomRemoved || angular.noop, detachFn = function() {
                self._removeEventListeners();
                // Remove the focus traps that we added earlier for keeping focus within
                // the panel.
                self._topFocusTrap && self._topFocusTrap.parentNode && self._topFocusTrap.parentNode.removeChild(self._topFocusTrap);
                self._bottomFocusTrap && self._bottomFocusTrap.parentNode && self._bottomFocusTrap.parentNode.removeChild(self._bottomFocusTrap);
                self._panelContainer.remove();
                self.isAttached = !1;
                return self._$q.when(self);
            };
            if (this._restoreScroll) {
                this._restoreScroll();
                this._restoreScroll = null;
            }
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self);
                self._$q.all([ detachFn(), !self._backdropRef || self._backdropRef.detach() ]).then(onDomRemoved).then(done).catch(reject);
            });
        };
        /**
 * Destroys the panel. The Panel cannot be opened again after this.
 */
        MdPanelRef.prototype.destroy = function() {
            this._config.locals = null;
        };
        /**
 * Shows the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel has
 * shown and animations finish.
 */
        MdPanelRef.prototype.show = function() {
            if (!this._panelContainer) return this._$q(function(resolve, reject) {
                reject("Panel does not exist yet. Call open() or attach().");
            });
            if (!this._panelContainer.hasClass("_md-panel-hidden")) return this._$q.when(this);
            var self = this, animatePromise = function() {
                self.removeClass("_md-panel-hidden");
                return self._animateOpen();
            };
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self), onOpenComplete = self._config.onOpenComplete || angular.noop;
                self._$q.all([ self._backdropRef ? self._backdropRef.show() : self, animatePromise().then(function() {
                    self._focusOnOpen();
                }, reject) ]).then(onOpenComplete).then(done).catch(reject);
            });
        };
        /**
 * Hides the panel.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel has
 * hidden and animations finish.
 */
        MdPanelRef.prototype.hide = function() {
            if (!this._panelContainer) return this._$q(function(resolve, reject) {
                reject("Panel does not exist yet. Call open() or attach().");
            });
            if (this._panelContainer.hasClass("_md-panel-hidden")) return this._$q.when(this);
            var self = this;
            return this._$q(function(resolve, reject) {
                var done = self._done(resolve, self), onRemoving = self._config.onRemoving || angular.noop, focusOnOrigin = function() {
                    var origin = self._config.origin;
                    origin && getElement(origin).focus();
                }, hidePanel = function() {
                    self.addClass("_md-panel-hidden");
                };
                self._$q.all([ self._backdropRef ? self._backdropRef.hide() : self, self._animateClose().then(onRemoving).then(hidePanel).then(focusOnOrigin).catch(reject) ]).then(done, reject);
            });
        };
        /**
 * Add a class to the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} newClass Class to be added.
 */
        MdPanelRef.prototype.addClass = function(newClass) {
            if (!this._panelContainer) throw new Error("Panel does not exist yet. Call open() or attach().");
            this._panelContainer.hasClass(newClass) || this._panelContainer.addClass(newClass);
        };
        /**
 * Remove a class from the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} oldClass Class to be removed.
 */
        MdPanelRef.prototype.removeClass = function(oldClass) {
            if (!this._panelContainer) throw new Error("Panel does not exist yet. Call open() or attach().");
            this._panelContainer.hasClass(oldClass) && this._panelContainer.removeClass(oldClass);
        };
        /**
 * Toggle a class on the panel. DO NOT use this to hide/show the panel.
 *
 * @param {string} toggleClass The class to toggle.
 */
        MdPanelRef.prototype.toggleClass = function(toggleClass) {
            if (!this._panelContainer) throw new Error("Panel does not exist yet. Call open() or attach().");
            this._panelContainer.toggleClass(toggleClass);
        };
        /**
 * Creates a panel and adds it to the dom.
 *
 * @returns {!angular.$q.Promise} A promise that is resolved when the panel is
 * created.
 * @private
 */
        MdPanelRef.prototype._createPanel = function() {
            var self = this;
            return this._$q(function(resolve, reject) {
                self._config.locals || (self._config.locals = {});
                self._config.locals.mdPanelRef = self;
                self._$mdCompiler.compile(self._config).then(function(compileData) {
                    self._panelContainer = compileData.link(self._config.scope);
                    getElement(self._config.attachTo).append(self._panelContainer);
                    self._config.disableParentScroll && (self._restoreScroll = self._$mdUtil.disableScrollAround(null, self._panelContainer));
                    self._panelEl = angular.element(self._panelContainer[0].querySelector(".md-panel"));
                    // Add a custom CSS class.
                    self._config.panelClass && self._panelEl.addClass(self._config.panelClass);
                    // Panel may be outside the $rootElement, tell ngAnimate to animate
                    // regardless.
                    self._$animate.pin && self._$animate.pin(self._panelContainer, getElement(self._config.attachTo));
                    self._configureTrapFocus();
                    self._addStyles().then(function() {
                        resolve(self);
                    }, reject);
                }, reject);
            });
        };
        /**
 * Adds the styles for the panel, such as positioning and z-index.
 * @return {!angular.$q.Promise<MdPanelRef>}
 * @private
 */
        MdPanelRef.prototype._addStyles = function() {
            var self = this;
            return this._$q(function(resolve) {
                self._panelContainer.css("z-index", self._config.zIndex);
                self._panelEl.css("z-index", self._config.zIndex + 1);
                var hideAndResolve = function() {
                    // Remove left: -9999px and add hidden class.
                    self._panelEl.css("left", "");
                    self._panelContainer.addClass("_md-panel-hidden");
                    resolve(self);
                };
                if (self._config.fullscreen) {
                    self._panelEl.addClass("_md-panel-fullscreen");
                    hideAndResolve();
                } else {
                    self._config.position ? // Wait for angular to finish processing the template, then position it
                    // correctly. This is necessary so that the panel will have a defined height
                    // and width.
                    self._$rootScope.$$postDigest(function() {
                        self._updatePosition(!0);
                        resolve(self);
                    }) : hideAndResolve();
                }
            });
        };
        /**
 * Calculates and updates the position of the panel.
 * @param {boolean=} opt_init
 * @private
 */
        MdPanelRef.prototype._updatePosition = function(opt_init) {
            var positionConfig = this._config.position;
            if (positionConfig) {
                positionConfig._setPanelPosition(this._panelEl);
                // Hide the panel now that position is known.
                opt_init && this._panelContainer.addClass("_md-panel-hidden");
                this._panelEl.css("top", positionConfig.getTop());
                this._panelEl.css("bottom", positionConfig.getBottom());
                this._panelEl.css("left", positionConfig.getLeft());
                this._panelEl.css("right", positionConfig.getRight());
                // Use the vendor prefixed version of transform.
                var prefixedTransform = this._$mdConstant.CSS.TRANSFORM;
                this._panelEl.css(prefixedTransform, positionConfig.getTransform());
            }
        };
        /**
 * Focuses on the panel or the first focus target.
 * @private
 */
        MdPanelRef.prototype._focusOnOpen = function() {
            if (this._config.focusOnOpen) {
                // Wait for the template to finish rendering to guarantee md-autofocus has
                // finished adding the class _md-autofocus, otherwise the focusable element
                // isn't available to focus.
                var self = this;
                this._$rootScope.$$postDigest(function() {
                    (self._$mdUtil.findFocusTarget(self._panelEl) || self._panelEl).focus();
                });
            }
        };
        /**
 * Shows the backdrop.
 * @returns {!angular.$q.Promise} A promise that is resolved when the backdrop
 * is created and attached.
 * @private
 */
        MdPanelRef.prototype._createBackdrop = function() {
            if (this._config.hasBackdrop) {
                if (!this._backdropRef) {
                    var backdropAnimation = this._$mdPanel.newPanelAnimation().openFrom(this._config.attachTo).withAnimation({
                        open: "_md-opaque-enter",
                        close: "_md-opaque-leave"
                    }), backdropConfig = {
                        animation: backdropAnimation,
                        attachTo: this._config.attachTo,
                        focusOnOpen: !1,
                        panelClass: "_md-panel-backdrop",
                        zIndex: this._config.zIndex - 1
                    };
                    this._backdropRef = this._$mdPanel.create(backdropConfig);
                }
                if (!this._backdropRef.isAttached) return this._backdropRef.attach();
            }
        };
        /**
 * Listen for escape keys and outside clicks to auto close.
 * @private
 */
        MdPanelRef.prototype._addEventListeners = function() {
            this._configureEscapeToClose();
            this._configureClickOutsideToClose();
            this._configureScrollListener();
        };
        /**
 * Remove event listeners added in _addEventListeners.
 * @private
 */
        MdPanelRef.prototype._removeEventListeners = function() {
            this._removeListeners && this._removeListeners.forEach(function(removeFn) {
                removeFn();
            });
            this._removeListeners = null;
        };
        /**
 * Setup the escapeToClose event listeners.
 * @private
 */
        MdPanelRef.prototype._configureEscapeToClose = function() {
            if (this._config.escapeToClose) {
                var parentTarget = getElement(this._config.attachTo), self = this, keyHandlerFn = function(ev) {
                    if (ev.keyCode === self._$mdConstant.KEY_CODE.ESCAPE) {
                        ev.stopPropagation();
                        ev.preventDefault();
                        self.close();
                    }
                };
                // Add keydown listeners
                this._panelContainer.on("keydown", keyHandlerFn);
                parentTarget.on("keydown", keyHandlerFn);
                // Queue remove listeners function
                this._removeListeners.push(function() {
                    self._panelContainer.off("keydown", keyHandlerFn);
                    parentTarget.off("keydown", keyHandlerFn);
                });
            }
        };
        /**
 * Setup the clickOutsideToClose event listeners.
 * @private
 */
        MdPanelRef.prototype._configureClickOutsideToClose = function() {
            if (this._config.clickOutsideToClose) {
                var sourceElem, target = this._panelContainer, mousedownHandler = function(ev) {
                    sourceElem = ev.target;
                }, self = this, mouseupHandler = function(ev) {
                    if (sourceElem === target[0] && ev.target === target[0]) {
                        ev.stopPropagation();
                        ev.preventDefault();
                        self.close();
                    }
                };
                // Add listeners
                target.on("mousedown", mousedownHandler);
                target.on("mouseup", mouseupHandler);
                // Queue remove listeners function
                this._removeListeners.push(function() {
                    target.off("mousedown", mousedownHandler);
                    target.off("mouseup", mouseupHandler);
                });
            }
        };
        /**
 * Configures the listeners for updating the panel position on scroll.
 * @private
*/
        MdPanelRef.prototype._configureScrollListener = function() {
            var updatePosition = angular.bind(this, this._updatePosition), debouncedUpdatePosition = this._$$rAF.throttle(updatePosition), self = this, onScroll = function() {
                self._config.disableParentScroll || debouncedUpdatePosition();
            };
            // Add listeners.
            this._$window.addEventListener("scroll", onScroll, !0);
            // Queue remove listeners function.
            this._removeListeners.push(function() {
                self._$window.removeEventListener("scroll", onScroll, !0);
            });
        };
        /**
 * Setup the focus traps. These traps will wrap focus when tabbing past the
 * panel. When shift-tabbing, the focus will stick in place.
 * @private
 */
        MdPanelRef.prototype._configureTrapFocus = function() {
            // Focus doesn't remain instead of the panel without this.
            this._panelEl.attr("tabIndex", "-1");
            if (this._config.trapFocus) {
                var element = this._panelEl;
                // Set up elements before and after the panel to capture focus and
                // redirect back into the panel.
                this._topFocusTrap = FOCUS_TRAP_TEMPLATE.clone()[0];
                this._bottomFocusTrap = FOCUS_TRAP_TEMPLATE.clone()[0];
                // When focus is about to move out of the panel, we want to intercept it
                // and redirect it back to the panel element.
                var focusHandler = function() {
                    element.focus();
                };
                this._topFocusTrap.addEventListener("focus", focusHandler);
                this._bottomFocusTrap.addEventListener("focus", focusHandler);
                // Queue remove listeners function
                this._removeListeners.push(this._simpleBind(function() {
                    this._topFocusTrap.removeEventListener("focus", focusHandler);
                    this._bottomFocusTrap.removeEventListener("focus", focusHandler);
                }, this));
                // The top focus trap inserted immediately before the md-panel element (as
                // a sibling). The bottom focus trap inserted immediately after the
                // md-panel element (as a sibling).
                element[0].parentNode.insertBefore(this._topFocusTrap, element[0]);
                element.after(this._bottomFocusTrap);
            }
        };
        /**
 * Animate the panel opening.
 * @returns {!angular.$q.Promise}
 * @private
 */
        MdPanelRef.prototype._animateOpen = function() {
            this.addClass("md-panel-is-showing");
            var animationConfig = this._config.animation;
            if (!animationConfig) {
                // Promise is in progress, return it.
                this.addClass("_md-panel-shown");
                return this._$q.when(this);
            }
            var self = this;
            return this._$q(function(resolve) {
                var done = self._done(resolve, self), warnAndOpen = function() {
                    self._$log.warn("MdPanel Animations failed. Showing panel without animating.");
                    done();
                };
                animationConfig.animateOpen(self._panelEl).then(done, warnAndOpen);
            });
        };
        /**
 * Animate the panel closing.
 * @returns {!angular.$q.Promise}
 * @private
 */
        MdPanelRef.prototype._animateClose = function() {
            var animationConfig = this._config.animation;
            if (!animationConfig) {
                this.removeClass("md-panel-is-showing");
                this.removeClass("_md-panel-shown");
                return this._$q.when(this);
            }
            var self = this;
            return this._$q(function(resolve) {
                var done = function() {
                    self.removeClass("md-panel-is-showing");
                    resolve(self);
                }, warnAndClose = function() {
                    self._$log.warn("MdPanel Animations failed. Hiding panel without animating.");
                    done();
                };
                animationConfig.animateClose(self._panelEl).then(done, warnAndClose);
            });
        };
        /**
 * Faster, more basic than angular.bind
 * http://jsperf.com/angular-bind-vs-custom-vs-native
 * @param {function} callback
 * @param {!Object} self
 * @return {function} Callback function with a bound self.
 */
        MdPanelRef.prototype._simpleBind = function(callback, self) {
            return function(value) {
                return callback.apply(self, value);
            };
        };
        /**
 * @param {function} callback
 * @param {!Object} self
 * @return {function} Callback function with a self param.
 */
        MdPanelRef.prototype._done = function(callback, self) {
            return function() {
                callback(self);
            };
        };
        /**
 * Possible values of xPosition.
 * @enum {string}
 */
        MdPanelPosition.xPosition = {
            CENTER: "center",
            ALIGN_START: "align-start",
            ALIGN_END: "align-end",
            OFFSET_START: "offset-start",
            OFFSET_END: "offset-end"
        };
        /**
 * Possible values of yPosition.
 * @enum {string}
 */
        MdPanelPosition.yPosition = {
            CENTER: "center",
            ALIGN_TOPS: "align-tops",
            ALIGN_BOTTOMS: "align-bottoms",
            ABOVE: "above",
            BELOW: "below"
        };
        /**
 * Sets absolute positioning for the panel.
 * @return {!MdPanelPosition}
 */
        MdPanelPosition.prototype.absolute = function() {
            this._absolute = !0;
            return this;
        };
        /**
 * Sets the value of `top` for the panel. Clears any previously set vertical
 * position.
 * @param {string=} opt_top Value of `top`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.top = function(opt_top) {
            this._bottom = "";
            this._top = opt_top || "0";
            return this;
        };
        /**
 * Sets the value of `bottom` for the panel. Clears any previously set vertical
 * position.
 * @param {string=} opt_bottom Value of `bottom`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.bottom = function(opt_bottom) {
            this._top = "";
            this._bottom = opt_bottom || "0";
            return this;
        };
        /**
 * Sets the value of `left` for the panel. Clears any previously set
 * horizontal position.
 * @param {string=} opt_left Value of `left`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.left = function(opt_left) {
            this._right = "";
            this._left = opt_left || "0";
            return this;
        };
        /**
 * Sets the value of `right` for the panel. Clears any previously set
 * horizontal position.
 * @param {string=} opt_right Value of `right`. Defaults to '0'.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.right = function(opt_right) {
            this._left = "";
            this._right = opt_right || "0";
            return this;
        };
        /**
 * Centers the panel horizontally in the viewport. Clears any previously set
 * horizontal position.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.centerHorizontally = function() {
            this._left = "50%";
            this._right = "";
            this._translateX = [ "-50%" ];
            return this;
        };
        /**
 * Centers the panel vertically in the viewport. Clears any previously set
 * vertical position.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.centerVertically = function() {
            this._top = "50%";
            this._bottom = "";
            this._translateY = [ "-50%" ];
            return this;
        };
        /**
 * Centers the panel horizontally and vertically in the viewport. This is
 * equivalent to calling both `centerHorizontally` and `centerVertically`.
 * Clears any previously set horizontal and vertical positions.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.center = function() {
            return this.centerHorizontally().centerVertically();
        };
        /**
 * Sets element for relative positioning.
 * @param {string|!Element|!angular.JQLite} element Query selector,
 *     DOM element, or angular element to set the panel relative to.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.relativeTo = function(element) {
            this._absolute = !1;
            this._relativeToEl = getElement(element);
            return this;
        };
        /**
 * Sets the x and y positions for the panel relative to another element.
 * @param {string} xPosition must be one of the MdPanelPosition.xPosition values.
 * @param {string} yPosition must be one of the MdPanelPosition.yPosition values.
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.addPanelPosition = function(xPosition, yPosition) {
            if (!this._relativeToEl) throw new Error("addPanelPosition can only be used with relative positioning. Set relativeTo first.");
            this._validateXPosition(xPosition);
            this._validateYPosition(yPosition);
            this._positions.push({
                x: xPosition,
                y: yPosition
            });
            return this;
        };
        /**
 * Ensure that yPosition is a valid position name. Throw an exception if not.
 * @param {string} yPosition
 */
        MdPanelPosition.prototype._validateYPosition = function(yPosition) {
            // empty is ok
            if (null != yPosition) {
                for (var key, positionKeys = Object.keys(MdPanelPosition.yPosition), positionValues = [], i = 0; key = positionKeys[i]; i++) {
                    var position = MdPanelPosition.yPosition[key];
                    positionValues.push(position);
                    if (position === yPosition) return;
                }
                throw new Error("Panel y position only accepts the following values:\n" + positionValues.join(" | "));
            }
        };
        /**
 * Ensure that xPosition is a valid position name. Throw an exception if not.
 * @param {string} xPosition
 */
        MdPanelPosition.prototype._validateXPosition = function(xPosition) {
            // empty is ok
            if (null != xPosition) {
                for (var key, positionKeys = Object.keys(MdPanelPosition.xPosition), positionValues = [], i = 0; key = positionKeys[i]; i++) {
                    var position = MdPanelPosition.xPosition[key];
                    positionValues.push(position);
                    if (position === xPosition) return;
                }
                throw new Error("Panel x Position only accepts the following values:\n" + positionValues.join(" | "));
            }
        };
        /**
 * Sets the value of the offset in the x-direction. This will add
 * to any previously set offsets.
 * @param {string} offsetX
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.withOffsetX = function(offsetX) {
            this._translateX.push(offsetX);
            return this;
        };
        /**
 * Sets the value of the offset in the y-direction. This will add
 * to any previously set offsets.
 * @param {string} offsetY
 * @returns {MdPanelPosition}
 */
        MdPanelPosition.prototype.withOffsetY = function(offsetY) {
            this._translateY.push(offsetY);
            return this;
        };
        /**
 * Gets the value of `top` for the panel.
 * @returns {string}
 */
        MdPanelPosition.prototype.getTop = function() {
            return this._top;
        };
        /**
 * Gets the value of `bottom` for the panel.
 * @returns {string}
 */
        MdPanelPosition.prototype.getBottom = function() {
            return this._bottom;
        };
        /**
 * Gets the value of `left` for the panel.
 * @returns {string}
 */
        MdPanelPosition.prototype.getLeft = function() {
            return this._left;
        };
        /**
 * Gets the value of `right` for the panel.
 * @returns {string}
 */
        MdPanelPosition.prototype.getRight = function() {
            return this._right;
        };
        /**
 * Gets the value of `transform` for the panel.
 * @returns {string}
 */
        MdPanelPosition.prototype.getTransform = function() {
            // It's important to trim the result, because the browser will ignore the set
            // operation if the string contains only whitespace.
            return (this._reduceTranslateValues("translateX", this._translateX) + " " + this._reduceTranslateValues("translateY", this._translateY)).trim();
        };
        /**
 * True if the panel is completely on-screen with this positioning; false
 * otherwise.
 * @param {!angular.JQLite} panelEl
 * @return {boolean}
 */
        MdPanelPosition.prototype._isOnscreen = function(panelEl) {
            // this works because we always use fixed positioning for the panel,
            // which is relative to the viewport.
            // TODO(gmoothart): take into account _translateX and _translateY to the
            //   extent feasible.
            var left = parseInt(this.getLeft()), top = parseInt(this.getTop()), right = left + panelEl[0].offsetWidth, bottom = top + panelEl[0].offsetHeight;
            return left >= 0 && top >= 0 && bottom <= this._$window.innerHeight && right <= this._$window.innerWidth;
        };
        /**
 * Gets the first x/y position that can fit on-screen.
 * @returns {{x: string, y: string}}
 */
        MdPanelPosition.prototype.getActualPosition = function() {
            return this._actualPosition;
        };
        /**
 * Reduces a list of translate values to a string that can be used within
 * transform.
 * @param {string} translateFn
 * @param {!Array<string>} values
 * @returns {string}
 * @private
 */
        MdPanelPosition.prototype._reduceTranslateValues = function(translateFn, values) {
            return values.map(function(translation) {
                return translateFn + "(" + translation + ")";
            }).join(" ");
        };
        /**
 * Sets the panel position based on the created panel element and best x/y
 * positioning.
 * @param {!angular.JQLite} panelEl
 * @private
 */
        MdPanelPosition.prototype._setPanelPosition = function(panelEl) {
            // Only calculate the position if necessary.
            if (!this._absolute) // TODO(ErinCoughlan): Position panel intelligently to keep it on screen.
            if (this._actualPosition) this._calculatePanelPosition(panelEl, this._actualPosition); else for (var i = 0; i < this._positions.length; i++) {
                this._actualPosition = this._positions[i];
                this._calculatePanelPosition(panelEl, this._actualPosition);
                if (this._isOnscreen(panelEl)) break;
            }
        };
        /**
 * Calculates the panel position based on the created panel element and the
 * provided positioning.
 * @param {!angular.JQLite} panelEl
 * @param {!{x:string, y:string}} position
 * @private
 */
        MdPanelPosition.prototype._calculatePanelPosition = function(panelEl, position) {
            var panelBounds = panelEl[0].getBoundingClientRect(), panelWidth = panelBounds.width, panelHeight = panelBounds.height, targetBounds = this._relativeToEl[0].getBoundingClientRect(), targetLeft = targetBounds.left, targetRight = targetBounds.right, targetWidth = targetBounds.width;
            switch (position.x) {
              case MdPanelPosition.xPosition.OFFSET_START:
                // TODO(ErinCoughlan): Change OFFSET_START for rtl vs ltr.
                this._left = targetLeft - panelWidth + "px";
                break;

              case MdPanelPosition.xPosition.ALIGN_END:
                // TODO(ErinCoughlan): Change ALIGN_END for rtl vs ltr.
                this._left = targetRight - panelWidth + "px";
                break;

              case MdPanelPosition.xPosition.CENTER:
                var left = targetLeft + .5 * targetWidth - .5 * panelWidth;
                this._left = left + "px";
                break;

              case MdPanelPosition.xPosition.ALIGN_START:
                // TODO(ErinCoughlan): Change ALIGN_START for rtl vs ltr.
                this._left = targetLeft + "px";
                break;

              case MdPanelPosition.xPosition.OFFSET_END:
                // TODO(ErinCoughlan): Change OFFSET_END for rtl vs ltr.
                this._left = targetRight + "px";
            }
            var targetTop = targetBounds.top, targetBottom = targetBounds.bottom, targetHeight = targetBounds.height;
            switch (position.y) {
              case MdPanelPosition.yPosition.ABOVE:
                this._top = targetTop - panelHeight + "px";
                break;

              case MdPanelPosition.yPosition.ALIGN_BOTTOMS:
                this._top = targetBottom - panelHeight + "px";
                break;

              case MdPanelPosition.yPosition.CENTER:
                var top = targetTop + .5 * targetHeight - .5 * panelHeight;
                this._top = top + "px";
                break;

              case MdPanelPosition.yPosition.ALIGN_TOPS:
                this._top = targetTop + "px";
                break;

              case MdPanelPosition.yPosition.BELOW:
                this._top = targetBottom + "px";
            }
        };
        /**
 * Possible default animations.
 * @enum {string}
 */
        MdPanelAnimation.animation = {
            SLIDE: "md-panel-animate-slide",
            SCALE: "md-panel-animate-scale",
            FADE: "md-panel-animate-fade"
        };
        /**
 * Specifies where to start the open animation. `openFrom` accepts a
 * click event object, query selector, DOM element, or a Rect object that
 * is used to determine the bounds. When passed a click event, the location
 * of the click will be used as the position to start the animation.
 *
 * @param {string|!Element|!Event|{top: number, left: number}} openFrom
 * @returns {MdPanelAnimation}
 */
        MdPanelAnimation.prototype.openFrom = function(openFrom) {
            // Check if 'openFrom' is an Event.
            openFrom = openFrom.target ? openFrom.target : openFrom;
            this._openFrom = this._getPanelAnimationTarget(openFrom);
            this._closeTo || (this._closeTo = this._openFrom);
            return this;
        };
        /**
 * Specifies where to animate the dialog close. `closeTo` accepts a
 * query selector, DOM element, or a Rect object that is used to determine
 * the bounds.
 *
 * @param {string|!Element|{top: number, left: number}} closeTo
 * @returns {MdPanelAnimation}
 */
        MdPanelAnimation.prototype.closeTo = function(closeTo) {
            this._closeTo = this._getPanelAnimationTarget(closeTo);
            return this;
        };
        /**
 * Returns the element and bounds for the animation target.
 * @param {string|!Element|{top: number, left: number}} location
 * @returns {{element: !angular.JQLite|undefined, bounds: !DOMRect}}
 * @private
 */
        MdPanelAnimation.prototype._getPanelAnimationTarget = function(location) {
            return angular.isDefined(location.top) || angular.isDefined(location.left) ? {
                element: undefined,
                bounds: {
                    top: location.top || 0,
                    left: location.left || 0
                }
            } : this._getBoundingClientRect(getElement(location));
        };
        /**
 * Specifies the animation class.
 *
 * There are several default animations that can be used:
 * (MdPanelAnimation.animation)
 *   SLIDE: The panel slides in and out from the specified
 *        elements.
 *   SCALE: The panel scales in and out.
 *   FADE: The panel fades in and out.
 *
 * @param {string|{open: string, close: string}} cssClass
 * @returns {MdPanelAnimation}
 */
        MdPanelAnimation.prototype.withAnimation = function(cssClass) {
            this._animationClass = cssClass;
            return this;
        };
        /**
 * Animate the panel open.
 * @param {!angular.JQLite} panelEl
 * @returns {!angular.$q.Promise}
 */
        MdPanelAnimation.prototype.animateOpen = function(panelEl) {
            var animator = this._$mdUtil.dom.animator;
            this._fixBounds(panelEl);
            var animationOptions = {}, panelTransform = panelEl[0].style.transform || "", openFrom = animator.toTransformCss(panelTransform), openTo = animator.toTransformCss(panelTransform);
            switch (this._animationClass) {
              case MdPanelAnimation.animation.SLIDE:
                // Slide should start with opacity: 1.
                panelEl.css("opacity", "1");
                animationOptions = {
                    transitionInClass: "_md-panel-animate-enter"
                };
                var openSlide = animator.calculateSlideToOrigin(panelEl, this._openFrom) || "";
                openFrom = animator.toTransformCss(openSlide + " " + panelTransform);
                break;

              case MdPanelAnimation.animation.SCALE:
                animationOptions = {
                    transitionInClass: "_md-panel-animate-enter"
                };
                var openScale = animator.calculateZoomToOrigin(panelEl, this._openFrom) || "";
                openFrom = animator.toTransformCss(openScale + " " + panelTransform);
                break;

              case MdPanelAnimation.animation.FADE:
                animationOptions = {
                    transitionInClass: "_md-panel-animate-enter"
                };
                break;

              default:
                animationOptions = angular.isString(this._animationClass) ? {
                    transitionInClass: this._animationClass
                } : {
                    transitionInClass: this._animationClass.open,
                    transitionOutClass: this._animationClass.close
                };
            }
            return animator.translate3d(panelEl, openFrom, openTo, animationOptions);
        };
        /**
 * Animate the panel close.
 * @param {!angular.JQLite} panelEl
 * @returns {!angular.$q.Promise}
 */
        MdPanelAnimation.prototype.animateClose = function(panelEl) {
            var animator = this._$mdUtil.dom.animator, reverseAnimationOptions = {}, panelTransform = panelEl[0].style.transform || "", closeFrom = animator.toTransformCss(panelTransform), closeTo = animator.toTransformCss(panelTransform);
            switch (this._animationClass) {
              case MdPanelAnimation.animation.SLIDE:
                // Slide should start with opacity: 1.
                panelEl.css("opacity", "1");
                reverseAnimationOptions = {
                    transitionInClass: "_md-panel-animate-leave"
                };
                var closeSlide = animator.calculateSlideToOrigin(panelEl, this._closeTo) || "";
                closeTo = animator.toTransformCss(closeSlide + " " + panelTransform);
                break;

              case MdPanelAnimation.animation.SCALE:
                reverseAnimationOptions = {
                    transitionInClass: "_md-panel-animate-scale-out _md-panel-animate-leave"
                };
                var closeScale = animator.calculateZoomToOrigin(panelEl, this._closeTo) || "";
                closeTo = animator.toTransformCss(closeScale + " " + panelTransform);
                break;

              case MdPanelAnimation.animation.FADE:
                reverseAnimationOptions = {
                    transitionInClass: "_md-panel-animate-fade-out _md-panel-animate-leave"
                };
                break;

              default:
                reverseAnimationOptions = angular.isString(this._animationClass) ? {
                    transitionOutClass: this._animationClass
                } : {
                    transitionInClass: this._animationClass.close,
                    transitionOutClass: this._animationClass.open
                };
            }
            return animator.translate3d(panelEl, closeFrom, closeTo, reverseAnimationOptions);
        };
        /**
 * Set the height and width to match the panel if not provided.
 * @param {!angular.JQLite} panelEl
 * @private
 */
        MdPanelAnimation.prototype._fixBounds = function(panelEl) {
            var panelWidth = panelEl[0].offsetWidth, panelHeight = panelEl[0].offsetHeight;
            this._openFrom && null == this._openFrom.bounds.height && (this._openFrom.bounds.height = panelHeight);
            this._openFrom && null == this._openFrom.bounds.width && (this._openFrom.bounds.width = panelWidth);
            this._closeTo && null == this._closeTo.bounds.height && (this._closeTo.bounds.height = panelHeight);
            this._closeTo && null == this._closeTo.bounds.width && (this._closeTo.bounds.width = panelWidth);
        };
        /**
 * Identify the bounding RECT for the target element.
 * @param {!angular.JQLite} element
 * @returns {{element: !angular.JQLite|undefined, bounds: !DOMRect}}
 * @private
 */
        MdPanelAnimation.prototype._getBoundingClientRect = function(element) {
            if (element instanceof angular.element) return {
                element: element,
                bounds: element[0].getBoundingClientRect()
            };
        };
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdProgressCircular
 * @module material.components.progressCircular
 * @restrict E
 *
* @description
 * The circular progress directive is used to make loading content in your app as delightful and
 * painless as possible by minimizing the amount of visual change a user sees before they can view
 * and interact with content.
 *
 * For operations where the percentage of the operation completed can be determined, use a
 * determinate indicator. They give users a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while something finishes up, and it’s
 * not necessary to expose what's happening behind the scenes and how long it will take, use an
 * indeterminate indicator.
 *
 * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.
 *
 * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`
 * will be auto-applied as a style to the component.
 *
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute.
 * If `value=""` is also specified, however, then `md-mode="determinate"` would be auto-injected instead.
 * @param {number=} value In determinate mode, this number represents the percentage of the
 *     circular progress. Default: 0
 * @param {number=} md-diameter This specifies the diameter of the circular progress. The value
 * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is
 * not present then a default value of '48px' is assumed.
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>
 *
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>
 *
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>
 * </hljs>
 */
        function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {
            function compile(tElement) {
                // The javascript in this file is mainly responsible for setting the correct aria attributes.
                // The animation of the progress spinner is done entirely with just CSS.
                tElement.attr("aria-valuemin", 0);
                tElement.attr("aria-valuemax", 100);
                tElement.attr("role", "progressbar");
                return postLink;
            }
            function postLink(scope, element, attr) {
                /**
     * Manually animate the Determinate indicator based on the specified
     * percentage value (0-100).
     *
     * Note: this animation was previously done using SCSS.
     * - generated 54K of styles
     * - use attribute selectors which had poor performances in IE
     */
                function animateIndicator(value) {
                    if (mode()) {
                        leftC = leftC || angular.element(element[0].querySelector(".md-left > .md-half-circle"));
                        rightC = rightC || angular.element(element[0].querySelector(".md-right > .md-half-circle"));
                        gap = gap || angular.element(element[0].querySelector(".md-gap"));
                        var gapStyles = removeEmptyValues({
                            borderBottomColor: value <= 50 ? "transparent !important" : "",
                            transition: value <= 50 ? "" : "borderBottomColor 0.1s linear"
                        }), leftStyles = removeEmptyValues({
                            transition: value <= 50 ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [ value <= 50 ? 135 : (value - 50) / 50 * 180 + 135 ])
                        }), rightStyles = removeEmptyValues({
                            transition: value >= 50 ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [ value >= 50 ? 45 : value / 50 * 180 - 135 ])
                        });
                        leftC.css(toVendorCSS(leftStyles));
                        rightC.css(toVendorCSS(rightStyles));
                        gap.css(toVendorCSS(gapStyles));
                    }
                }
                /**
     * We will scale the progress circle based on the default diameter.
     *
     * Determine the diameter percentage (defaults to 100%)
     * May be express as float, percentage, or integer
     */
                function getDiameterRatio() {
                    if (!attr.mdDiameter) return DEFAULT_SCALING;
                    var match = /([0-9]*)%/.exec(attr.mdDiameter), value = Math.max(0, match && match[1] / 100 || parseFloat(attr.mdDiameter));
                    // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size
                    return value > 1 ? value / DEFAULT_PROGRESS_SIZE : value;
                }
                /**
     * Is the md-mode a valid option?
     */
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                        break;

                      default:
                        value = undefined;
                    }
                    return value;
                }
                $mdTheming(element);
                var lastMode, circle = element, spinnerWrapper = angular.element(element.children()[0]), toVendorCSS = $mdUtil.dom.animator.toCss;
                element.attr("md-mode", mode());
                !/**
     * Update size/scaling of the progress indicator
     * Watch the "value" and "md-mode" attributes
     */
                function() {
                    // set the outer container to the size the user specified
                    circle.css({
                        width: 100 * getDiameterRatio() + "px",
                        height: 100 * getDiameterRatio() + "px"
                    });
                    // the internal element is still 100px, so we have to scale it down to match the size
                    circle.children().eq(0).css(toVendorCSS({
                        transform: $mdUtil.supplant("translate(-50%, -50%) scale( {0} )", [ getDiameterRatio() ])
                    }));
                }();
                !/**
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified
     */
                function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressCircular element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !/**
     * Watch the value and md-mode attributes
     */
                function() {
                    attr.$observe("value", function(value) {
                        var percentValue = clamp(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() == MODE_DETERMINATE && animateIndicator(percentValue);
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            spinnerWrapper.removeClass("ng-hide");
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && spinnerWrapper.removeClass(lastMode);
                            spinnerWrapper.addClass("ng-hide");
                            lastMode = undefined;
                        }
                    });
                }();
                var leftC, rightC, gap;
            }
            /**
   * Clamps the value to be between 0 and 100.
   * @param {number} value The value to clamp.
   * @returns {number}
   */
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
            function removeEmptyValues(target) {
                for (var key in target) target.hasOwnProperty(key) && "" == target[key] && delete target[key];
                return target;
            }
            var DEFAULT_PROGRESS_SIZE = 100, DEFAULT_SCALING = .5, MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate";
            return {
                restrict: "E",
                scope: !0,
                template: // The progress 'circle' is composed of two half-circles: the left side and the right
                // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.
                '<div class="md-scale-wrapper"><div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div></div>',
                compile: compile
            };
        }
        /**
 * @ngdoc module
 * @name material.components.progressCircular
 * @description Circular Progress module!
 */
        angular.module("material.components.progressCircular", [ "material.core" ]).directive("mdProgressCircular", MdProgressCircularDirective);
        MdProgressCircularDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdProgressLinear
 * @module material.components.progressLinear
 * @restrict E
 *
 * @description
 * The linear progress directive is used to make loading content
 * in your app as delightful and painless as possible by minimizing
 * the amount of visual change a user sees before they can view
 * and interact with content.
 *
 * Each operation should only be represented by one activity indicator
 * For example: one refresh operation should not display both a
 * refresh bar and an activity circle.
 *
 * For operations where the percentage of the operation completed
 * can be determined, use a determinate indicator. They give users
 * a quick sense of how long an operation will take.
 *
 * For operations where the user is asked to wait a moment while
 * something finishes up, and it’s not necessary to expose what's
 * happening behind the scenes and how long it will take, use an
 * indeterminate indicator.
 *
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.
 *
 * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`
 * will be auto-applied as a style to the component.
 *
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute. If `value=""` is also specified, however,
 * then `md-mode="determinate"` would be auto-injected instead.
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0
 *
 * @usage
 * <hljs lang="html">
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>
 *
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>
 *
 * <md-progress-linear md-mode="query"></md-progress-linear>
 * </hljs>
 */
        function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {
            function compile(tElement, tAttrs, transclude) {
                tElement.attr("aria-valuemin", 0);
                tElement.attr("aria-valuemax", 100);
                tElement.attr("role", "progressbar");
                return postLink;
            }
            function postLink(scope, element, attr) {
                /**
     * Is the md-mode a valid option?
     */
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) switch (value) {
                      case MODE_DETERMINATE:
                      case MODE_INDETERMINATE:
                      case MODE_BUFFER:
                      case MODE_QUERY:
                        break;

                      default:
                        value = undefined;
                    }
                    return value;
                }
                /**
     * Manually set CSS to animate the Determinate indicator based on the specified
     * percentage value (0-100).
     */
                function animateIndicator(target, value) {
                    if (mode()) {
                        var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [ (value - 100) / 2, value / 100 ]), styles = toVendorCSS({
                            transform: to
                        });
                        angular.element(target).css(styles);
                    }
                }
                $mdTheming(element);
                var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss, bar1 = angular.element(element[0].querySelector(".md-bar1")), bar2 = angular.element(element[0].querySelector(".md-bar2")), container = angular.element(element[0].querySelector(".md-container"));
                element.attr("md-mode", mode());
                !/**
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified
     */
                function() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value), mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        $log.debug($mdUtil.supplant("Auto-adding the missing md-mode='{0}' to the ProgressLinear element", [ mode ]));
                        element.attr("md-mode", mode);
                        attr.mdMode = mode;
                    }
                }();
                !/**
     * Watch the value, md-buffer-value, and md-mode attributes
     */
                function() {
                    attr.$observe("value", function(value) {
                        var percentValue = clamp(value);
                        element.attr("aria-valuenow", percentValue);
                        mode() != MODE_QUERY && animateIndicator(bar2, percentValue);
                    });
                    attr.$observe("mdBufferValue", function(value) {
                        animateIndicator(bar1, clamp(value));
                    });
                    attr.$observe("mdMode", function(mode) {
                        switch (mode) {
                          case MODE_QUERY:
                          case MODE_BUFFER:
                          case MODE_DETERMINATE:
                          case MODE_INDETERMINATE:
                            container.removeClass("ng-hide " + lastMode);
                            container.addClass(lastMode = "md-mode-" + mode);
                            break;

                          default:
                            lastMode && container.removeClass(lastMode);
                            container.addClass("ng-hide");
                            lastMode = undefined;
                        }
                    });
                }();
            }
            /**
   * Clamps the value to be between 0 and 100.
   * @param {number} value The value to clamp.
   * @returns {number}
   */
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
            var MODE_DETERMINATE = "determinate", MODE_INDETERMINATE = "indeterminate", MODE_BUFFER = "buffer", MODE_QUERY = "query";
            return {
                restrict: "E",
                template: '<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',
                compile: compile
            };
        }
        /**
 * @ngdoc module
 * @name material.components.progressLinear
 * @description Linear Progress module!
 */
        angular.module("material.components.progressLinear", [ "material.core" ]).directive("mdProgressLinear", MdProgressLinearDirective);
        MdProgressLinearDirective.$inject = [ "$mdTheming", "$mdUtil", "$log" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioGroup
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-group>` directive identifies a grouping
 * container for the 1..n grouped radio buttons; specified using nested
 * `<md-radio-button>` tags.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the radio button is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently
 * than the native `<input type='radio'>` controls. Whereas the native controls
 * force the user to tab through all the radio buttons, `<md-radio-group>`
 * is focusable, and by default the `<md-radio-button>`s are not.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.
 *
 * @usage
 * <hljs lang="html">
 * <md-radio-group ng-model="selected">
 *
 *   <md-radio-button
 *        ng-repeat="d in colorOptions"
 *        ng-value="d.value" aria-label="{{ d.label }}">
 *
 *          {{ d.label }}
 *
 *   </md-radio-button>
 *
 * </md-radio-group>
 * </hljs>
 *
 */
        function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {
            function linkRadioGroup(scope, element, attr, ctrls) {
                /**
     *
     */
                function setFocus() {
                    element.hasClass("md-focused") || element.addClass("md-focused");
                }
                /**
     *
     */
                function keydownListener(ev) {
                    var keyCode = ev.which || ev.keyCode;
                    // Only listen to events that we originated ourselves
                    // so that we don't trigger on things like arrow keys in
                    // inputs.
                    if (keyCode == $mdConstant.KEY_CODE.ENTER || ev.currentTarget == ev.target) switch (keyCode) {
                      case $mdConstant.KEY_CODE.LEFT_ARROW:
                      case $mdConstant.KEY_CODE.UP_ARROW:
                        ev.preventDefault();
                        rgCtrl.selectPrevious();
                        setFocus();
                        break;

                      case $mdConstant.KEY_CODE.RIGHT_ARROW:
                      case $mdConstant.KEY_CODE.DOWN_ARROW:
                        ev.preventDefault();
                        rgCtrl.selectNext();
                        setFocus();
                        break;

                      case $mdConstant.KEY_CODE.ENTER:
                        var form = angular.element($mdUtil.getClosest(element[0], "form"));
                        form.length > 0 && form.triggerHandler("submit");
                    }
                }
                $mdTheming(element);
                var rgCtrl = ctrls[0], ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
                rgCtrl.init(ngModelCtrl);
                scope.mouseActive = !1;
                element.attr({
                    role: "radiogroup",
                    tabIndex: element.attr("tabindex") || "0"
                }).on("keydown", keydownListener).on("mousedown", function(event) {
                    scope.mouseActive = !0;
                    $timeout(function() {
                        scope.mouseActive = !1;
                    }, 100);
                }).on("focus", function() {
                    !1 === scope.mouseActive && rgCtrl.$element.addClass("md-focused");
                }).on("blur", function() {
                    rgCtrl.$element.removeClass("md-focused");
                });
            }
            function RadioGroupController($element) {
                this._radioButtonRenderFns = [];
                this.$element = $element;
            }
            /**
   * Change the radio group's selected button by a given increment.
   * If no button is selected, select the first button.
   */
            function changeSelectedButton(parent, increment) {
                // Coerce all child radio buttons into an array, then wrap then in an iterator
                var buttons = $mdUtil.iterator(parent[0].querySelectorAll("md-radio-button"), !0);
                if (buttons.count()) {
                    var validate = function(button) {
                        // If disabled, then NOT valid
                        return !angular.element(button).attr("disabled");
                    }, selected = parent[0].querySelector("md-radio-button.md-checked"), target = buttons[increment < 0 ? "previous" : "next"](selected, validate) || buttons.first();
                    // Activate radioButton's click listener (triggerHandler won't create a real click event)
                    angular.element(target).triggerHandler("click");
                }
            }
            RadioGroupController.prototype = function() {
                return {
                    init: function(ngModelCtrl) {
                        this._ngModelCtrl = ngModelCtrl;
                        this._ngModelCtrl.$render = angular.bind(this, this.render);
                    },
                    add: function(rbRender) {
                        this._radioButtonRenderFns.push(rbRender);
                    },
                    remove: function(rbRender) {
                        var index = this._radioButtonRenderFns.indexOf(rbRender);
                        -1 !== index && this._radioButtonRenderFns.splice(index, 1);
                    },
                    render: function() {
                        this._radioButtonRenderFns.forEach(function(rbRender) {
                            rbRender();
                        });
                    },
                    setViewValue: function(value, eventType) {
                        this._ngModelCtrl.$setViewValue(value, eventType);
                        // update the other radio buttons as well
                        this.render();
                    },
                    getViewValue: function() {
                        return this._ngModelCtrl.$viewValue;
                    },
                    selectNext: function() {
                        return changeSelectedButton(this.$element, 1);
                    },
                    selectPrevious: function() {
                        return changeSelectedButton(this.$element, -1);
                    },
                    setActiveDescendant: function(radioId) {
                        this.$element.attr("aria-activedescendant", radioId);
                    }
                };
            }();
            return {
                restrict: "E",
                controller: [ "$element", RadioGroupController ],
                require: [ "mdRadioGroup", "?ngModel" ],
                link: {
                    pre: linkRadioGroup
                }
            };
        }
        /**
 * @ngdoc directive
 * @module material.components.radioButton
 * @name mdRadioButton
 *
 * @restrict E
 *
 * @description
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.
 *
 * While similar to the `<input type="radio" ng-model="" value="">` directive,
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and
 * supports use within named radio groups.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {string} ngValue Angular expression which sets the value to which the expression should
 *    be set when selected.
 * @param {string} value The value to which the expression should be set when selected.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} aria-label Adds label to radio button for accessibility.
 * Defaults to radio button's text. If no text content is available, a warning will be logged.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-radio-button value="1" aria-label="Label 1">
 *   Label 1
 * </md-radio-button>
 *
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">
 *   Green
 * </md-radio-button>
 *
 * </hljs>
 *
 */
        function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {
            function link(scope, element, attr, rgCtrl) {
                /**
     *
     */
                function listener(ev) {
                    element[0].hasAttribute("disabled") || scope.$apply(function() {
                        rgCtrl.setViewValue(attr.value, ev && ev.type);
                    });
                }
                /**
     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).
     *  Update the `aria-activedescendant` attribute.
     */
                function render() {
                    /**
       * If the radioButton is inside a div, then add class so highlighting will work...
       */
                    function markParentAsChecked(addClass) {
                        "MD-RADIO-GROUP" != element.parent()[0].nodeName && element.parent()[addClass ? "addClass" : "removeClass"](CHECKED_CSS);
                    }
                    var checked = rgCtrl.getViewValue() == attr.value;
                    if (checked !== lastChecked) {
                        lastChecked = checked;
                        element.attr("aria-checked", checked);
                        if (checked) {
                            markParentAsChecked(!0);
                            element.addClass(CHECKED_CSS);
                            rgCtrl.setActiveDescendant(element.attr("id"));
                        } else {
                            markParentAsChecked(!1);
                            element.removeClass(CHECKED_CSS);
                        }
                    }
                }
                var lastChecked;
                $mdTheming(element);
                !/**
     * Inject ARIA-specific attributes appropriate for each radio button
     */
                function(element, scope) {
                    scope.ariaId = /**
       * Build a unique ID for each radio button that will be used with aria-activedescendant.
       * Preserve existing ID if already specified.
       * @returns {*|string}
       */
                    function() {
                        return attr.id || "radio_" + $mdUtil.nextUid();
                    }();
                    element.attr({
                        id: scope.ariaId,
                        role: "radio",
                        "aria-checked": "false"
                    });
                    $mdAria.expectWithText(element, "aria-label");
                }(element, scope);
                !/**
     *
     */
                function(controller) {
                    if (!rgCtrl) throw "RadioGroupController not found.";
                    rgCtrl.add(render);
                    attr.$observe("value", render);
                    element.on("click", listener).on("$destroy", function() {
                        rgCtrl.remove(render);
                    });
                }();
            }
            var CHECKED_CSS = "md-checked";
            return {
                restrict: "E",
                require: "^mdRadioGroup",
                transclude: !0,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',
                link: link
            };
        }
        /**
 * @ngdoc module
 * @name material.components.radioButton
 * @description radioButton module!
 */
        angular.module("material.components.radioButton", [ "material.core" ]).directive("mdRadioGroup", mdRadioGroupDirective).directive("mdRadioButton", mdRadioButtonDirective);
        mdRadioGroupDirective.$inject = [ "$mdUtil", "$mdConstant", "$mdTheming", "$timeout" ];
        mdRadioButtonDirective.$inject = [ "$mdAria", "$mdUtil", "$mdTheming" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdSelect
 * @restrict E
 * @module material.components.select
 *
 * @description Displays a select box, bound to an ng-model.
 *
 * @param {expression} ng-model The model!
 * @param {boolean=} multiple Whether it's multiple.
 * @param {expression=} md-on-close Expression to be evaluated when the select is closed.
 * @param {expression=} md-on-open Expression to be evaluated when opening the select.
 * Will hide the select options and show a spinner until the evaluated promise resolves.
 * @param {expression=} md-selected-text Expression to be evaluated that will return a string
 * to be displayed as a placeholder in the select input box when it is closed.
 * @param {string=} placeholder Placeholder hint text.
 * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or
 * explicit label is present.
 * @param {string=} md-container-class Class list to get applied to the `.md-select-menu-container`
 * element (for custom styling).
 *
 * @usage
 * With a placeholder (label and aria-label are added dynamically)
 * <hljs lang="html">
 *   <md-input-container>
 *     <md-select
 *       ng-model="someModel"
 *       placeholder="Select a state">
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
 *     </md-select>
 *   </md-input-container>
 * </hljs>
 *
 * With an explicit label
 * <hljs lang="html">
 *   <md-input-container>
 *     <label>State</label>
 *     <md-select
 *       ng-model="someModel">
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
 *     </md-select>
 *   </md-input-container>
 * </hljs>
 *
 * With a select-header
 *
 * When a developer needs to put more than just a text label in the
 * md-select-menu, they should use the md-select-header.
 * The user can put custom HTML inside of the header and style it to their liking.
 * One common use case of this would be a sticky search bar.
 *
 * When using the md-select-header the labels that would previously be added to the
 * OptGroupDirective are ignored.
 *
 * <hljs lang="html">
 *   <md-input-container>
 *     <md-select ng-model="someModel">
 *       <md-select-header>
 *         <span> Neighborhoods - </span>
 *       </md-select-header>
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
 *     </md-select>
 *   </md-input-container>
 * </hljs>
 *
 * ## Selects and object equality
 * When using a `md-select` to pick from a list of objects, it is important to realize how javascript handles
 * equality. Consider the following example:
 * <hljs lang="js">
 * angular.controller('MyCtrl', function($scope) {
 *   $scope.users = [
 *     { id: 1, name: 'Bob' },
 *     { id: 2, name: 'Alice' },
 *     { id: 3, name: 'Steve' }
 *   ];
 *   $scope.selectedUser = { id: 1, name: 'Bob' };
 * });
 * </hljs>
 * <hljs lang="html">
 * <div ng-controller="MyCtrl">
 *   <md-select ng-model="selectedUser">
 *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>
 *   </md-select>
 * </div>
 * </hljs>
 *
 * At first one might expect that the select should be populated with "Bob" as the selected user. However,
 * this is not true. To determine whether something is selected,
 * `ngModelController` is looking at whether `$scope.selectedUser == (any user in $scope.users);`;
 *
 * Javascript's `==` operator does not check for deep equality (ie. that all properties
 * on the object are the same), but instead whether the objects are *the same object in memory*.
 * In this case, we have two instances of identical objects, but they exist in memory as unique
 * entities. Because of this, the select will have no value populated for a selected user.
 *
 * To get around this, `ngModelController` provides a `track by` option that allows us to specify a different
 * expression which will be used for the equality operator. As such, we can update our `html` to
 * make use of this by specifying the `ng-model-options="{trackBy: '$value.id'}"` on the `md-select`
 * element. This converts our equality expression to be
 * `$scope.selectedUser.id == (any id in $scope.users.map(function(u) { return u.id; }));`
 * which results in Bob being selected as desired.
 *
 * Working HTML:
 * <hljs lang="html">
 * <div ng-controller="MyCtrl">
 *   <md-select ng-model="selectedUser" ng-model-options="{trackBy: '$value.id'}">
 *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>
 *   </md-select>
 * </div>
 * </hljs>
 */
        function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {
            function compile(element, attr) {
                // add the select value that will hold our placeholder or selected option value
                var valueEl = angular.element("<md-select-value><span></span></md-select-value>");
                valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');
                valueEl.addClass("md-select-value");
                valueEl[0].hasAttribute("id") || valueEl.attr("id", "select_value_label_" + $mdUtil.nextUid());
                // There's got to be an md-content inside. If there's not one, let's add it.
                element.find("md-content").length || element.append(angular.element("<md-content>").append(element.contents()));
                // Add progress spinner for md-options-loading
                if (attr.mdOnOpen) {
                    // Show progress indicator while loading async
                    // Use ng-hide for `display:none` so the indicator does not interfere with the options list
                    element.find("md-content").prepend(angular.element('<div> <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone" md-diameter="25px"></md-progress-circular></div>'));
                    // Hide list [of item options] while loading async
                    element.find("md-option").attr("ng-show", "$$loadingAsyncDone");
                }
                if (attr.name) {
                    var autofillClone = angular.element('<select class="md-visually-hidden">');
                    autofillClone.attr({
                        name: "." + attr.name,
                        "ng-model": attr.ngModel,
                        "aria-hidden": "true",
                        tabindex: "-1"
                    });
                    var opts = element.find("md-option");
                    angular.forEach(opts, function(el) {
                        var newEl = angular.element("<option>" + el.innerHTML + "</option>");
                        el.hasAttribute("ng-value") ? newEl.attr("ng-value", el.getAttribute("ng-value")) : el.hasAttribute("value") && newEl.attr("value", el.getAttribute("value"));
                        autofillClone.append(newEl);
                    });
                    element.parent().append(autofillClone);
                }
                // Use everything that's left inside element.contents() as the contents of the menu
                var multiple = angular.isDefined(attr.multiple) ? "multiple" : "", selectTemplate = '<div class="md-select-menu-container" aria-hidden="true"><md-select-menu {0}>{1}</md-select-menu></div>';
                selectTemplate = $mdUtil.supplant(selectTemplate, [ multiple, element.html() ]);
                element.empty().append(valueEl);
                element.append(selectTemplate);
                attr.tabindex || attr.$set("tabindex", 0);
                return function(scope, element, attr, ctrls) {
                    function initAriaLabel() {
                        var labelText = element.attr("aria-label") || element.attr("placeholder");
                        !labelText && containerCtrl && containerCtrl.label && (labelText = containerCtrl.label.text());
                        ariaLabelBase = labelText;
                        $mdAria.expect(element, "aria-label", labelText);
                    }
                    function syncLabelText() {
                        if (selectContainer) {
                            selectMenuCtrl = selectMenuCtrl || selectContainer.find("md-select-menu").controller("mdSelectMenu");
                            mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());
                        }
                    }
                    function syncAriaLabel() {
                        if (ariaLabelBase) {
                            var ariaLabels = selectMenuCtrl.selectedLabels({
                                mode: "aria"
                            });
                            element.attr("aria-label", ariaLabels.length ? ariaLabelBase + ": " + ariaLabels : ariaLabelBase);
                        }
                    }
                    function inputCheckValue() {
                        // The select counts as having a value if one or more options are selected,
                        // or if the input's validity state says it has bad input (eg string in a number input)
                        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
                    }
                    function handleKeypress(e) {
                        if (-1 != [ 32, 13, 38, 40 ].indexOf(e.keyCode)) {
                            // prevent page scrolling on interaction
                            e.preventDefault();
                            openSelect();
                        } else if (e.keyCode <= 90 && e.keyCode >= 31) {
                            e.preventDefault();
                            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);
                            if (!node) return;
                            var optionCtrl = angular.element(node).controller("mdOption");
                            selectMenuCtrl.isMultiple || selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);
                            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                            selectMenuCtrl.refreshViewValue();
                        }
                    }
                    function openSelect() {
                        selectScope.isOpen = !0;
                        element.attr("aria-expanded", "true");
                        $mdSelect.show({
                            scope: selectScope,
                            preserveScope: !0,
                            skipCompile: !0,
                            element: selectContainer,
                            target: element[0],
                            selectCtrl: mdSelectCtrl,
                            preserveElement: !0,
                            hasBackdrop: !0,
                            loadingAsync: !!attr.mdOnOpen && (scope.$eval(attr.mdOnOpen) || !0)
                        }).finally(function() {
                            selectScope.isOpen = !1;
                            element.focus();
                            element.attr("aria-expanded", "false");
                            ngModelCtrl.$setTouched();
                        });
                    }
                    var isDisabled, ariaLabelBase, untouched = !0, containerCtrl = ctrls[0], mdSelectCtrl = ctrls[1], ngModelCtrl = ctrls[2], formCtrl = ctrls[3], valueEl = element.find("md-select-value"), isReadonly = angular.isDefined(attr.readonly);
                    if (containerCtrl) {
                        var isErrorGetter = containerCtrl.isErrorGetter || function() {
                            return ngModelCtrl.$invalid && ngModelCtrl.$touched;
                        };
                        if (containerCtrl.input && element.find("md-select-header").find("input")[0] !== containerCtrl.input[0]) throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");
                        containerCtrl.input = element;
                        containerCtrl.label || $mdAria.expect(element, "aria-label", element.attr("placeholder"));
                        scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    }
                    var selectContainer, selectScope, selectMenuCtrl;
                    !function() {
                        selectContainer = angular.element(element[0].querySelector(".md-select-menu-container"));
                        selectScope = scope;
                        if (attr.mdContainerClass) {
                            var value = selectContainer[0].getAttribute("class") + " " + attr.mdContainerClass;
                            selectContainer[0].setAttribute("class", value);
                        }
                        selectMenuCtrl = selectContainer.find("md-select-menu").controller("mdSelectMenu");
                        selectMenuCtrl.init(ngModelCtrl, attr.ngModel);
                        element.on("$destroy", function() {
                            selectContainer.remove();
                        });
                    }();
                    $mdTheming(element);
                    if (attr.name && formCtrl) {
                        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');
                        $mdUtil.nextTick(function() {
                            var controller = angular.element(selectEl).controller("ngModel");
                            controller && formCtrl.$removeControl(controller);
                        });
                    }
                    formCtrl && angular.isDefined(attr.multiple) && $mdUtil.nextTick(function() {
                        (ngModelCtrl.$modelValue || ngModelCtrl.$viewValue) && formCtrl.$setPristine();
                    });
                    var originalRender = ngModelCtrl.$render;
                    ngModelCtrl.$render = function() {
                        originalRender();
                        syncLabelText();
                        syncAriaLabel();
                        inputCheckValue();
                    };
                    attr.$observe("placeholder", ngModelCtrl.$render);
                    mdSelectCtrl.setLabelText = function(text) {
                        mdSelectCtrl.setIsPlaceholder(!text);
                        if (attr.mdSelectedText) text = $parse(attr.mdSelectedText)(scope); else {
                            // Use placeholder attribute, otherwise fallback to the md-input-container label
                            var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : "");
                            text = text || tmpPlaceholder || "";
                        }
                        valueEl.children().eq(0).html(text);
                    };
                    mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {
                        if (isPlaceholder) {
                            valueEl.addClass("md-select-placeholder");
                            containerCtrl && containerCtrl.label && containerCtrl.label.addClass("md-placeholder");
                        } else {
                            valueEl.removeClass("md-select-placeholder");
                            containerCtrl && containerCtrl.label && containerCtrl.label.removeClass("md-placeholder");
                        }
                    };
                    if (!isReadonly) {
                        element.on("focus", function(ev) {
                            // only set focus on if we don't currently have a selected value. This avoids the "bounce"
                            // on the label transition because the focus will immediately switch to the open menu.
                            containerCtrl && containerCtrl.element.hasClass("md-input-has-value") && containerCtrl.setFocused(!0);
                        });
                        // Attach before ngModel's blur listener to stop propagation of blur event
                        // to prevent from setting $touched.
                        element.on("blur", function(event) {
                            if (untouched) {
                                untouched = !1;
                                selectScope.isOpen && event.stopImmediatePropagation();
                            }
                            if (!selectScope.isOpen) {
                                containerCtrl && containerCtrl.setFocused(!1);
                                inputCheckValue();
                            }
                        });
                    }
                    mdSelectCtrl.triggerClose = function() {
                        $parse(attr.mdOnClose)(scope);
                    };
                    scope.$$postDigest(function() {
                        initAriaLabel();
                        syncLabelText();
                        syncAriaLabel();
                    });
                    scope.$watch(selectMenuCtrl.selectedLabels, syncLabelText);
                    var deregisterWatcher;
                    attr.$observe("ngMultiple", function(val) {
                        deregisterWatcher && deregisterWatcher();
                        var parser = $parse(val);
                        deregisterWatcher = scope.$watch(function() {
                            return parser(scope);
                        }, function(multiple, prevVal) {
                            if (multiple !== undefined || prevVal !== undefined) {
                                // assume compiler did a good job
                                multiple ? element.attr("multiple", "multiple") : element.removeAttr("multiple");
                                element.attr("aria-multiselectable", multiple ? "true" : "false");
                                if (selectContainer) {
                                    selectMenuCtrl.setMultiple(multiple);
                                    originalRender = ngModelCtrl.$render;
                                    ngModelCtrl.$render = function() {
                                        originalRender();
                                        syncLabelText();
                                        syncAriaLabel();
                                        inputCheckValue();
                                    };
                                    ngModelCtrl.$render();
                                }
                            }
                        });
                    });
                    attr.$observe("disabled", function(disabled) {
                        angular.isString(disabled) && (disabled = !0);
                        // Prevent click event being registered twice
                        if (isDisabled === undefined || isDisabled !== disabled) {
                            isDisabled = disabled;
                            disabled ? element.attr({
                                "aria-disabled": "true"
                            }).removeAttr("tabindex").off("click", openSelect).off("keydown", handleKeypress) : element.attr({
                                tabindex: attr.tabindex,
                                "aria-disabled": "false"
                            }).on("click", openSelect).on("keydown", handleKeypress);
                        }
                    });
                    if (!attr.hasOwnProperty("disabled") && !attr.hasOwnProperty("ngDisabled")) {
                        element.attr({
                            "aria-disabled": "false"
                        });
                        element.on("click", openSelect);
                        element.on("keydown", handleKeypress);
                    }
                    var ariaAttrs = {
                        role: "listbox",
                        "aria-expanded": "false",
                        "aria-multiselectable": attr.multiple === undefined || attr.ngMultiple ? "false" : "true"
                    };
                    element[0].hasAttribute("id") || (ariaAttrs.id = "select_" + $mdUtil.nextUid());
                    var containerId = "select_container_" + $mdUtil.nextUid();
                    selectContainer.attr("id", containerId);
                    ariaAttrs["aria-owns"] = containerId;
                    element.attr(ariaAttrs);
                    scope.$on("$destroy", function() {
                        $mdSelect.destroy().finally(function() {
                            if (containerCtrl) {
                                containerCtrl.setFocused(!1);
                                containerCtrl.setHasValue(!1);
                                containerCtrl.input = null;
                            }
                            ngModelCtrl.$setTouched();
                        });
                    });
                };
            }
            return {
                restrict: "E",
                require: [ "^?mdInputContainer", "mdSelect", "ngModel", "?^form" ],
                compile: compile,
                controller: function() {}
            };
        }
        function SelectMenuDirective($parse, $mdUtil, $mdTheming) {
            // We use preLink instead of postLink to ensure that the select is initialized before
            // its child options run postLink.
            function preLink(scope, element, attr, ctrls) {
                function keyListener(e) {
                    13 != e.keyCode && 32 != e.keyCode || clickListener(e);
                }
                function clickListener(ev) {
                    var option = $mdUtil.getClosest(ev.target, "md-option"), optionCtrl = option && angular.element(option).data("$mdOptionController");
                    if (option && optionCtrl) {
                        if (option.hasAttribute("disabled")) {
                            ev.stopImmediatePropagation();
                            return !1;
                        }
                        var optionHashKey = selectCtrl.hashGetter(optionCtrl.value), isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);
                        scope.$apply(function() {
                            if (selectCtrl.isMultiple) isSelected ? selectCtrl.deselect(optionHashKey) : selectCtrl.select(optionHashKey, optionCtrl.value); else if (!isSelected) {
                                selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionHashKey, optionCtrl.value);
                            }
                            selectCtrl.refreshViewValue();
                        });
                    }
                }
                var selectCtrl = ctrls[0];
                $mdTheming(element);
                element.on("click", clickListener);
                element.on("keypress", keyListener);
            }
            function SelectMenuController($scope, $attrs, $element) {
                function renderMultiple() {
                    var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];
                    if (angular.isArray(newSelectedValues)) {
                        var oldSelected = Object.keys(self.selected), newSelectedHashes = newSelectedValues.map(self.hashGetter);
                        oldSelected.filter(function(hash) {
                            return -1 === newSelectedHashes.indexOf(hash);
                        }).forEach(self.deselect);
                        newSelectedHashes.forEach(function(hashKey, i) {
                            self.select(hashKey, newSelectedValues[i]);
                        });
                    }
                }
                function renderSingular() {
                    var value = self.ngModel.$viewValue || self.ngModel.$modelValue;
                    Object.keys(self.selected).forEach(self.deselect);
                    self.select(self.hashGetter(value), value);
                }
                var self = this;
                self.isMultiple = angular.isDefined($attrs.multiple);
                // selected is an object with keys matching all of the selected options' hashed values
                self.selected = {};
                // options is an object with keys matching every option's hash value,
                // and values matching every option's controller.
                self.options = {};
                $scope.$watchCollection(function() {
                    return self.options;
                }, function() {
                    self.ngModel.$render();
                });
                var deregisterCollectionWatch, defaultIsEmpty;
                self.setMultiple = function(isMultiple) {
                    function validateArray(modelValue, viewValue) {
                        // If a value is truthy but not an array, reject it.
                        // If value is undefined/falsy, accept that it's an empty array.
                        return angular.isArray(modelValue || viewValue || []);
                    }
                    var ngModel = self.ngModel;
                    defaultIsEmpty = defaultIsEmpty || ngModel.$isEmpty;
                    self.isMultiple = isMultiple;
                    deregisterCollectionWatch && deregisterCollectionWatch();
                    if (self.isMultiple) {
                        ngModel.$validators["md-multiple"] = validateArray;
                        ngModel.$render = renderMultiple;
                        // watchCollection on the model because by default ngModel only watches the model's
                        // reference. This allowed the developer to also push and pop from their array.
                        $scope.$watchCollection(self.modelBinding, function(value) {
                            validateArray(value) && renderMultiple();
                            self.ngModel.$setPristine();
                        });
                        ngModel.$isEmpty = function(value) {
                            return !value || 0 === value.length;
                        };
                    } else {
                        delete ngModel.$validators["md-multiple"];
                        ngModel.$render = renderSingular;
                    }
                };
                var clearSearchTimeout, optNodes, optText, searchStr = "";
                self.optNodeForKeyboardSearch = function(e) {
                    clearSearchTimeout && clearTimeout(clearSearchTimeout);
                    clearSearchTimeout = setTimeout(function() {
                        clearSearchTimeout = undefined;
                        searchStr = "";
                        optText = undefined;
                        optNodes = undefined;
                    }, 300);
                    searchStr += String.fromCharCode(e.keyCode);
                    var search = new RegExp("^" + searchStr, "i");
                    if (!optNodes) {
                        optNodes = $element.find("md-option");
                        optText = new Array(optNodes.length);
                        angular.forEach(optNodes, function(el, i) {
                            optText[i] = el.textContent.trim();
                        });
                    }
                    for (var i = 0; i < optText.length; ++i) if (search.test(optText[i])) return optNodes[i];
                };
                self.init = function(ngModel, binding) {
                    self.ngModel = ngModel;
                    self.modelBinding = binding;
                    // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so
                    // that we can properly compare objects set on the model to the available options
                    if (ngModel.$options && ngModel.$options.trackBy) {
                        var trackByLocals = {}, trackByParsed = $parse(ngModel.$options.trackBy);
                        self.hashGetter = function(value, valueScope) {
                            trackByLocals.$value = value;
                            return trackByParsed(valueScope || $scope, trackByLocals);
                        };
                    } else self.hashGetter = function(value) {
                        return angular.isObject(value) ? "object_" + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId)) : value;
                    };
                    self.setMultiple(self.isMultiple);
                };
                self.selectedLabels = function(opts) {
                    opts = opts || {};
                    var mode = opts.mode || "html", selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll("md-option[selected]"));
                    if (selectedOptionEls.length) {
                        var mapFn;
                        "html" == mode ? // Map the given element to its innerHTML string. If the element has a child ripple
                        // container remove it from the HTML string, before returning the string.
                        mapFn = function(el) {
                            var html = el.innerHTML, rippleContainer = el.querySelector(".md-ripple-container");
                            return rippleContainer ? html.replace(rippleContainer.outerHTML, "") : html;
                        } : "aria" == mode && (mapFn = function(el) {
                            return el.hasAttribute("aria-label") ? el.getAttribute("aria-label") : el.textContent;
                        });
                        return selectedOptionEls.map(mapFn).join(", ");
                    }
                    return "";
                };
                self.select = function(hashKey, hashedValue) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!0);
                    self.selected[hashKey] = hashedValue;
                };
                self.deselect = function(hashKey) {
                    var option = self.options[hashKey];
                    option && option.setSelected(!1);
                    delete self.selected[hashKey];
                };
                self.addOption = function(hashKey, optionCtrl) {
                    if (angular.isDefined(self.options[hashKey])) throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "' + optionCtrl.value + '" found.');
                    self.options[hashKey] = optionCtrl;
                    // If this option's value was already in our ngModel, go ahead and select it.
                    if (angular.isDefined(self.selected[hashKey])) {
                        self.select(hashKey, optionCtrl.value);
                        self.refreshViewValue();
                    }
                };
                self.removeOption = function(hashKey) {
                    delete self.options[hashKey];
                };
                self.refreshViewValue = function() {
                    var option, values = [];
                    for (var hashKey in self.selected) // If this hashKey has an associated option, push that option's value to the model.
                    (option = self.options[hashKey]) ? values.push(option.value) : // Otherwise, the given hashKey has no associated option, and we got it
                    // from an ngModel value at an earlier time. Push the unhashed value of
                    // this hashKey to the model.
                    // This allows the developer to put a value in the model that doesn't yet have
                    // an associated option.
                    values.push(self.selected[hashKey]);
                    var usingTrackBy = self.ngModel.$options && self.ngModel.$options.trackBy, newVal = self.isMultiple ? values : values[0], prevVal = self.ngModel.$modelValue;
                    if (usingTrackBy ? !angular.equals(prevVal, newVal) : prevVal != newVal) {
                        self.ngModel.$setViewValue(newVal);
                        self.ngModel.$render();
                    }
                };
            }
            // We want the scope to be set to 'false' so an isolated scope is not created
            // which would interfere with the md-select-header's access to the
            // parent scope.
            SelectMenuController.$inject = [ "$scope", "$attrs", "$element" ];
            return {
                restrict: "E",
                require: [ "mdSelectMenu" ],
                scope: !1,
                controller: SelectMenuController,
                link: {
                    pre: preLink
                }
            };
        }
        function OptionDirective($mdButtonInkRipple, $mdUtil) {
            function compile(element, attr) {
                // Manual transclusion to avoid the extra inner <span> that ng-transclude generates
                element.append(angular.element('<div class="md-text">').append(element.contents()));
                element.attr("tabindex", attr.tabindex || "0");
                return postLink;
            }
            function postLink(scope, element, attr, ctrls) {
                function setOptionValue(newValue, oldValue, prevAttempt) {
                    if (selectCtrl.hashGetter) {
                        var oldHashKey = selectCtrl.hashGetter(oldValue, scope), newHashKey = selectCtrl.hashGetter(newValue, scope);
                        optionCtrl.hashKey = newHashKey;
                        optionCtrl.value = newValue;
                        selectCtrl.removeOption(oldHashKey, optionCtrl);
                        selectCtrl.addOption(newHashKey, optionCtrl);
                    } else prevAttempt || scope.$$postDigest(function() {
                        setOptionValue(newValue, oldValue, !0);
                    });
                }
                var optionCtrl = ctrls[0], selectCtrl = ctrls[1];
                if (selectCtrl.isMultiple) {
                    element.addClass("md-checkbox-enabled");
                    element.prepend(CHECKBOX_SELECTION_INDICATOR.clone());
                }
                angular.isDefined(attr.ngValue) ? scope.$watch(attr.ngValue, setOptionValue) : angular.isDefined(attr.value) ? setOptionValue(attr.value) : scope.$watch(function() {
                    return element.text().trim();
                }, setOptionValue);
                attr.$observe("disabled", function(disabled) {
                    disabled ? element.attr("tabindex", "-1") : element.attr("tabindex", "0");
                });
                scope.$$postDigest(function() {
                    attr.$observe("selected", function(selected) {
                        if (angular.isDefined(selected)) {
                            "string" == typeof selected && (selected = !0);
                            if (selected) {
                                selectCtrl.isMultiple || selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                            } else selectCtrl.deselect(optionCtrl.hashKey);
                            selectCtrl.refreshViewValue();
                        }
                    });
                });
                $mdButtonInkRipple.attach(scope, element);
                !function() {
                    var ariaAttrs = {
                        role: "option",
                        "aria-selected": "false"
                    };
                    element[0].hasAttribute("id") || (ariaAttrs.id = "select_option_" + $mdUtil.nextUid());
                    element.attr(ariaAttrs);
                }();
                scope.$on("$destroy", function() {
                    selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);
                });
            }
            function OptionController($element) {
                this.selected = !1;
                this.setSelected = function(isSelected) {
                    if (isSelected && !this.selected) $element.attr({
                        selected: "selected",
                        "aria-selected": "true"
                    }); else if (!isSelected && this.selected) {
                        $element.removeAttr("selected");
                        $element.attr("aria-selected", "false");
                    }
                    this.selected = isSelected;
                };
            }
            OptionController.$inject = [ "$element" ];
            return {
                restrict: "E",
                require: [ "mdOption", "^^mdSelectMenu" ],
                controller: OptionController,
                compile: compile
            };
        }
        function OptgroupDirective() {
            function compile(el, attrs) {
                // If we have a select header element, we don't want to add the normal label
                // header.
                (function() {
                    return el.parent().find("md-select-header").length;
                })() || function() {
                    var labelElement = el.find("label");
                    if (!labelElement.length) {
                        labelElement = angular.element("<label>");
                        el.prepend(labelElement);
                    }
                    labelElement.addClass("md-container-ignore");
                    attrs.label && labelElement.text(attrs.label);
                }();
            }
            return {
                restrict: "E",
                compile: compile
            };
        }
        function SelectHeaderDirective() {
            return {
                restrict: "E"
            };
        }
        function SelectProvider($$interimElementProvider) {
            /* @ngInject */
            function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate, $document) {
                /**
     * Interim-element onRemove logic....
     */
                function onRemove(scope, element, opts) {
                    /**
       * Restore the element to a closed state
       */
                    function cleanElement() {
                        element.removeClass("md-active");
                        element.attr("aria-hidden", "true");
                        element[0].style.display = "none";
                        announceClosed(opts);
                        !opts.$destroy && opts.restoreFocus && opts.target.focus();
                    }
                    opts = opts || {};
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();
                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal
                    /**
       * For normal closes (eg clicks), animate the removal.
       * For forced closes (like $destroy events from navigation),
       * skip the animations
       */
                    return !0 === opts.$destroy ? cleanElement() : function() {
                        return $animateCss(element, {
                            addClass: "md-leave"
                        }).start();
                    }().then(cleanElement);
                }
                /**
     * Interim-element onShow logic....
     */
                function onShow(scope, element, opts) {
                    /**
       * Initialize container and dropDown menu positions/scale, then animate
       * to show... and autoFocus.
       */
                    function positionAndFocusMenu() {
                        return $q(function(resolve) {
                            if (opts.isRemoved) return $q.reject(!1);
                            var info = calculateMenuPositions(scope, element, opts);
                            info.container.element.css(animator.toCss(info.container.styles));
                            info.dropDown.element.css(animator.toCss(info.dropDown.styles));
                            $$rAF(function() {
                                element.addClass("md-active");
                                info.dropDown.element.css(animator.toCss({
                                    transform: ""
                                }));
                                autoFocus(opts.focusedNode);
                                resolve();
                            });
                        });
                    }
                    /**
       *
       */
                    function autoFocus(focusedNode) {
                        focusedNode && !focusedNode.hasAttribute("disabled") && focusedNode.focus();
                    }
                    /**
       * Configure various resize listeners for screen changes
       */
                    function activateResizing() {
                        var debouncedOnResize = function(scope, target, options) {
                            return function() {
                                if (!options.isRemoved) {
                                    var updates = calculateMenuPositions(scope, target, options), container = updates.container, dropDown = updates.dropDown;
                                    container.element.css(animator.toCss(container.styles));
                                    dropDown.element.css(animator.toCss(dropDown.styles));
                                }
                            };
                        }(scope, element, opts), window = angular.element($window);
                        window.on("resize", debouncedOnResize);
                        window.on("orientationchange", debouncedOnResize);
                        // Publish deactivation closure...
                        return function() {
                            // Disable resizing handlers
                            window.off("resize", debouncedOnResize);
                            window.off("orientationchange", debouncedOnResize);
                        };
                    }
                    /**
       *
       */
                    function activateInteraction() {
                        // ************************************
                        // Closure Functions
                        // ************************************
                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            opts.restoreFocus = !1;
                            $mdUtil.nextTick($mdSelect.hide, !0);
                        }
                        function onMenuKeyDown(ev) {
                            var keyCodes = $mdConstant.KEY_CODE;
                            ev.preventDefault();
                            ev.stopPropagation();
                            switch (ev.keyCode) {
                              case keyCodes.UP_ARROW:
                                return focusPrevOption();

                              case keyCodes.DOWN_ARROW:
                                return focusNextOption();

                              case keyCodes.SPACE:
                              case keyCodes.ENTER:
                                var option = $mdUtil.getClosest(ev.target, "md-option");
                                if (option) {
                                    dropDown.triggerHandler({
                                        type: "click",
                                        target: option
                                    });
                                    ev.preventDefault();
                                }
                                checkCloseMenu(ev);
                                break;

                              case keyCodes.TAB:
                              case keyCodes.ESCAPE:
                                ev.stopPropagation();
                                ev.preventDefault();
                                opts.restoreFocus = !0;
                                $mdUtil.nextTick($mdSelect.hide, !0);
                                break;

                              default:
                                if (ev.keyCode >= 31 && ev.keyCode <= 90) {
                                    var optNode = dropDown.controller("mdSelectMenu").optNodeForKeyboardSearch(ev);
                                    opts.focusedNode = optNode || opts.focusedNode;
                                    optNode && optNode.focus();
                                }
                            }
                        }
                        function focusOption(direction) {
                            var newOption, optionsArray = $mdUtil.nodesToArray(opts.optionNodes), index = optionsArray.indexOf(opts.focusedNode);
                            do {
                                -1 === index ? // We lost the previously focused element, reset to first option
                                index = 0 : "next" === direction && index < optionsArray.length - 1 ? index++ : "prev" === direction && index > 0 && index--;
                                newOption = optionsArray[index];
                                newOption.hasAttribute("disabled") && (newOption = undefined);
                            } while (!newOption && index < optionsArray.length - 1 && index > 0);
                            newOption && newOption.focus();
                            opts.focusedNode = newOption;
                        }
                        function focusNextOption() {
                            focusOption("next");
                        }
                        function focusPrevOption() {
                            focusOption("prev");
                        }
                        function checkCloseMenu(ev) {
                            if (!(ev && "click" == ev.type && ev.currentTarget != dropDown[0] || /**
           * check if the mouseup event was on a scrollbar
           */
                            function() {
                                var clickOnScrollbar = !1;
                                if (ev && ev.currentTarget.children.length > 0) {
                                    var child = ev.currentTarget.children[0];
                                    if (child.scrollHeight > child.clientHeight && child.children.length > 0) {
                                        ev.pageX - ev.currentTarget.getBoundingClientRect().left > child.querySelector("md-option").offsetWidth && (clickOnScrollbar = !0);
                                    }
                                }
                                return clickOnScrollbar;
                            }())) {
                                var option = $mdUtil.getClosest(ev.target, "md-option");
                                if (option && option.hasAttribute && !option.hasAttribute("disabled")) {
                                    ev.preventDefault();
                                    ev.stopPropagation();
                                    if (!selectCtrl.isMultiple) {
                                        opts.restoreFocus = !0;
                                        $mdUtil.nextTick(function() {
                                            $mdSelect.hide(selectCtrl.ngModel.$viewValue);
                                        }, !0);
                                    }
                                }
                            }
                        }
                        if (!opts.isRemoved) {
                            var dropDown = opts.selectEl, selectCtrl = dropDown.controller("mdSelectMenu") || {};
                            element.addClass("md-clickable");
                            // Close on backdrop click
                            opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                            // Escape to close
                            // Cycling of options, and closing on enter
                            dropDown.on("keydown", onMenuKeyDown);
                            dropDown.on("click", checkCloseMenu);
                            return function() {
                                opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                                dropDown.off("keydown", onMenuKeyDown);
                                dropDown.off("click", checkCloseMenu);
                                element.removeClass("md-clickable");
                                opts.isRemoved = !0;
                            };
                        }
                    }
                    !/**
       *  If asynchronously loading, watch and update internal
       *  '$$loadingAsyncDone' flag
       */
                    function() {
                        if (opts.loadingAsync && !opts.isRemoved) {
                            scope.$$loadingAsyncDone = !1;
                            scope.progressMode = "indeterminate";
                            $q.when(opts.loadingAsync).then(function() {
                                scope.$$loadingAsyncDone = !0;
                                scope.progressMode = "";
                                delete opts.loadingAsync;
                            }).then(function() {
                                $$rAF(positionAndFocusMenu);
                            });
                        }
                    }();
                    !/**
       * Check for valid opts and set some sane defaults
       */
                    function(scope, options) {
                        var selectEl = element.find("md-select-menu");
                        if (!options.target) throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [ options.target ]));
                        angular.extend(options, {
                            isRemoved: !1,
                            target: angular.element(options.target),
                            //make sure it's not a naked dom node
                            parent: angular.element(options.parent),
                            selectEl: selectEl,
                            contentEl: element.find("md-content"),
                            optionNodes: selectEl[0].getElementsByTagName("md-option")
                        });
                    }(0, opts);
                    opts.hideBackdrop = /**
       * Show modal backdrop element...
       */
                    function(scope, element, options) {
                        // If we are not within a dialog...
                        options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? // !! DO this before creating the backdrop; since disableScrollAround()
                        //    configures the scroll offset; which is used by mdBackDrop postLink()
                        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                        if (options.hasBackdrop) {
                            // Override duration to immediately show invisible backdrop
                            options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");
                            $animate.enter(options.backdrop, $document[0].body, null, {
                                duration: 0
                            });
                        }
                        /**
         * Hide modal backdrop element...
         */
                        return function() {
                            options.backdrop && options.backdrop.remove();
                            options.disableParentScroll && options.restoreScroll();
                            delete options.restoreScroll;
                        };
                    }(scope, element, opts);
                    // ************************************
                    // Closure Functions
                    // ************************************
                    /**
       *  Attach the select DOM element(s) and animate to the correct positions
       *  and scalings...
       */
                    return function(scope, element, opts) {
                        opts.parent.append(element);
                        return $q(function(resolve, reject) {
                            try {
                                $animateCss(element, {
                                    removeClass: "md-leave",
                                    duration: 0
                                }).start().then(positionAndFocusMenu).then(resolve);
                            } catch (e) {
                                reject(e);
                            }
                        });
                    }(scope, element, opts).then(function(response) {
                        element.attr("aria-hidden", "false");
                        opts.alreadyOpen = !0;
                        opts.cleanupInteraction = activateInteraction();
                        opts.cleanupResizing = activateResizing();
                        return response;
                    }, opts.hideBackdrop);
                }
                /**
     * To notify listeners that the Select menu has closed,
     * trigger the [optional] user-defined expression
     */
                function announceClosed(opts) {
                    var mdSelect = opts.selectCtrl;
                    if (mdSelect) {
                        var menuController = opts.selectEl.controller("mdSelectMenu");
                        mdSelect.setLabelText(menuController.selectedLabels());
                        mdSelect.triggerClose();
                    }
                }
                /**
     * Calculate the
     */
                function calculateMenuPositions(scope, element, opts) {
                    var centeredNode, containerNode = element[0], targetNode = opts.target[0].children[0], // target the label
                    parentNode = $document[0].body, selectNode = opts.selectEl[0], contentNode = opts.contentEl[0], parentRect = parentNode.getBoundingClientRect(), targetRect = targetNode.getBoundingClientRect(), bounds = {
                        left: parentRect.left + SELECT_EDGE_MARGIN,
                        top: SELECT_EDGE_MARGIN,
                        bottom: parentRect.height - SELECT_EDGE_MARGIN,
                        right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)
                    }, spaceAvailable = {
                        top: targetRect.top - bounds.top,
                        left: targetRect.left - bounds.left,
                        right: bounds.right - (targetRect.left + targetRect.width),
                        bottom: bounds.bottom - (targetRect.top + targetRect.height)
                    }, maxWidth = parentRect.width - 2 * SELECT_EDGE_MARGIN, selectedNode = selectNode.querySelector("md-option[selected]"), optionNodes = selectNode.getElementsByTagName("md-option"), optgroupNodes = selectNode.getElementsByTagName("md-optgroup"), isScrollable = calculateScrollable(element, contentNode);
                    // If loading, center on progress indicator
                    centeredNode = isPromiseLike(opts.loadingAsync) ? contentNode.firstElementChild || contentNode : // If a selected node, center around that
                    selectedNode || (optgroupNodes.length ? optgroupNodes[0] : optionNodes.length ? optionNodes[0] : contentNode.firstElementChild || contentNode);
                    contentNode.offsetWidth > maxWidth ? contentNode.style["max-width"] = maxWidth + "px" : contentNode.style.maxWidth = null;
                    // Remove padding before we compute the position of the menu
                    isScrollable && selectNode.classList.add("md-overflow");
                    var focusedNode = centeredNode;
                    if ("MD-OPTGROUP" === (focusedNode.tagName || "").toUpperCase()) {
                        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;
                        centeredNode = focusedNode;
                    }
                    // Cache for autoFocus()
                    opts.focusedNode = focusedNode;
                    // Get the selectMenuRect *after* max-width is possibly set above
                    containerNode.style.display = "block";
                    var selectMenuRect = selectNode.getBoundingClientRect(), centeredRect = getOffsetRect(centeredNode);
                    if (centeredNode) {
                        var centeredStyle = $window.getComputedStyle(centeredNode);
                        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;
                        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;
                    }
                    if (isScrollable) {
                        var scrollBuffer = contentNode.offsetHeight / 2;
                        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;
                        spaceAvailable.top < scrollBuffer ? contentNode.scrollTop = Math.min(centeredRect.top, contentNode.scrollTop + scrollBuffer - spaceAvailable.top) : spaceAvailable.bottom < scrollBuffer && (contentNode.scrollTop = Math.max(centeredRect.top + centeredRect.height - selectMenuRect.height, contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom));
                    }
                    var left, top, transformOrigin, minWidth;
                    left = targetRect.left + centeredRect.left - centeredRect.paddingLeft + 2;
                    top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 - centeredRect.top + contentNode.scrollTop) + 2;
                    transformOrigin = centeredRect.left + targetRect.width / 2 + "px " + (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + "px 0px";
                    minWidth = Math.min(targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight, maxWidth);
                    // Keep left and top within the window
                    var containerRect = containerNode.getBoundingClientRect(), scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1)) / 100, scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1)) / 100;
                    return {
                        container: {
                            element: angular.element(containerNode),
                            styles: {
                                left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),
                                top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),
                                "min-width": minWidth
                            }
                        },
                        dropDown: {
                            element: angular.element(selectNode),
                            styles: {
                                transformOrigin: transformOrigin,
                                transform: opts.alreadyOpen ? "" : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ])
                            }
                        }
                    };
                }
                var ERRROR_TARGET_EXPECTED = "$mdSelect.show() expected a target element in options.target but got '{0}'!", animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    themable: !0,
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: !0,
                    disableParentScroll: !0
                };
            }
            function isPromiseLike(obj) {
                return obj && angular.isFunction(obj.then);
            }
            function clamp(min, n, max) {
                return Math.max(min, Math.min(n, max));
            }
            function getOffsetRect(node) {
                return node ? {
                    left: node.offsetLeft,
                    top: node.offsetTop,
                    width: node.offsetWidth,
                    height: node.offsetHeight
                } : {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                };
            }
            function calculateScrollable(element, contentNode) {
                var isScrollable = !1;
                try {
                    var oldDisplay = element[0].style.display;
                    // Set the element's display to block so that this calculation is correct
                    element[0].style.display = "block";
                    isScrollable = contentNode.scrollHeight > contentNode.offsetHeight;
                    // Reset it back afterwards
                    element[0].style.display = oldDisplay;
                } finally {}
                return isScrollable;
            }
            selectDefaultOptions.$inject = [ "$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate", "$document" ];
            return $$interimElementProvider("$mdSelect").setDefaults({
                methods: [ "target" ],
                options: selectDefaultOptions
            });
        }
        /**
 * @ngdoc module
 * @name material.components.select
 */
        /***************************************************

 ### TODO - POST RC1 ###
 - [ ] Abstract placement logic in $mdSelect service to $mdMenu service

 ***************************************************/
        var SELECT_EDGE_MARGIN = 8, selectNextId = 0, CHECKBOX_SELECTION_INDICATOR = angular.element('<div class="md-container"><div class="md-icon"></div></div>');
        angular.module("material.components.select", [ "material.core", "material.components.backdrop" ]).directive("mdSelect", SelectDirective).directive("mdSelectMenu", SelectMenuDirective).directive("mdOption", OptionDirective).directive("mdOptgroup", OptgroupDirective).directive("mdSelectHeader", SelectHeaderDirective).provider("$mdSelect", SelectProvider);
        SelectDirective.$inject = [ "$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse" ];
        SelectMenuDirective.$inject = [ "$parse", "$mdUtil", "$mdTheming" ];
        OptionDirective.$inject = [ "$mdButtonInkRipple", "$mdUtil" ];
        SelectProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        function createDirective(name, targetValue) {
            return [ "$mdUtil", function($mdUtil) {
                return {
                    restrict: "A",
                    multiElement: !0,
                    link: function($scope, $element, $attr) {
                        var unregister = $scope.$on("$md-resize-enable", function() {
                            unregister();
                            $scope.$watch($attr[name], function(value) {
                                if (!!value === targetValue) {
                                    $mdUtil.nextTick(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                    $mdUtil.dom.animator.waitTransitionEnd($element).then(function() {
                                        $scope.$broadcast("$md-resize");
                                    });
                                }
                            });
                        });
                    }
                };
            } ];
        }
        /**
 * @ngdoc module
 * @name material.components.showHide
 */
        // Add additional handlers to ng-show and ng-hide that notify directives
        // contained within that they should recompute their size.
        // These run in addition to Angular's built-in ng-hide and ng-show directives.
        angular.module("material.components.showHide", [ "material.core" ]).directive("ngShow", createDirective("ngShow", !0)).directive("ngHide", createDirective("ngHide", !1));
    }();
    !function() {
        /**
 * @ngdoc service
 * @name $mdSidenav
 * @module material.components.sidenav
 *
 * @description
 * `$mdSidenav` makes it easy to interact with multiple sidenavs
 * in an app.
 *
 * @usage
 * <hljs lang="js">
 * // Async lookup for sidenav instance; will resolve when the instance is available
 * $mdSidenav(componentId).then(function(instance) {
 *   $log.debug( componentId + "is now ready" );
 * });
 * // Async toggle the given sidenav;
 * // when instance is known ready and lazy lookup is not needed.
 * $mdSidenav(componentId)
 *    .toggle()
 *    .then(function(){
 *      $log.debug('toggled');
 *    });
 * // Async open the given sidenav
 * $mdSidenav(componentId)
 *    .open()
 *    .then(function(){
 *      $log.debug('opened');
 *    });
 * // Async close the given sidenav
 * $mdSidenav(componentId)
 *    .close()
 *    .then(function(){
 *      $log.debug('closed');
 *    });
 * // Sync check to see if the specified sidenav is set to be open
 * $mdSidenav(componentId).isOpen();
 * // Sync check to whether given sidenav is locked open
 * // If this is true, the sidenav will be open regardless of close()
 * $mdSidenav(componentId).isLockedOpen();
 * </hljs>
 */
        function SidenavService($mdComponentRegistry, $q) {
            return function(handle) {
                /**
     * Deferred lookup of component instance using $component registry
     */
                function waitForInstance() {
                    return $mdComponentRegistry.when(handle).then(function(it) {
                        instance = it;
                        return it;
                    });
                }
                // Lookup the controller instance for the specified sidNav instance
                var errorMsg = "SideNav '" + handle + "' is not available!", instance = $mdComponentRegistry.get(handle);
                instance || $mdComponentRegistry.notFoundError(handle);
                return {
                    // -----------------
                    // Sync methods
                    // -----------------
                    isOpen: function() {
                        return instance && instance.isOpen();
                    },
                    isLockedOpen: function() {
                        return instance && instance.isLockedOpen();
                    },
                    // -----------------
                    // Async methods
                    // -----------------
                    toggle: function() {
                        return instance ? instance.toggle() : $q.reject(errorMsg);
                    },
                    open: function() {
                        return instance ? instance.open() : $q.reject(errorMsg);
                    },
                    close: function() {
                        return instance ? instance.close() : $q.reject(errorMsg);
                    },
                    then: function(callbackFn) {
                        return (instance ? $q.when(instance) : waitForInstance()).then(callbackFn || angular.noop);
                    }
                };
            };
        }
        /**
 * @ngdoc directive
 * @name mdSidenavFocus
 * @module material.components.sidenav
 *
 * @restrict A
 *
 * @description
 * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.
 * This is completely optional, as the sidenav itself is focused by default.
 *
 * @usage
 * <hljs lang="html">
 * <md-sidenav>
 *   <form>
 *     <md-input-container>
 *       <label for="testInput">Label</label>
 *       <input id="testInput" type="text" md-sidenav-focus>
 *     </md-input-container>
 *   </form>
 * </md-sidenav>
 * </hljs>
 **/
        function SidenavFocusDirective() {
            return {
                restrict: "A",
                require: "^mdSidenav",
                link: function(scope, element, attr, sidenavCtrl) {}
            };
        }
        /**
 * @ngdoc directive
 * @name mdSidenav
 * @module material.components.sidenav
 * @restrict E
 *
 * @description
 *
 * A Sidenav component that can be opened and closed programatically.
 *
 * By default, upon opening it will slide out on top of the main content area.
 *
 * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.
 * It can be overridden with the `md-autofocus` directive on the child element you want focused.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="row" ng-controller="MyController">
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">
 *     Left Nav!
 *   </md-sidenav>
 *
 *   <md-content>
 *     Center Content
 *     <md-button ng-click="openLeftMenu()">
 *       Open Left Menu
 *     </md-button>
 *   </md-content>
 *
 *   <md-sidenav md-component-id="right"
 *     md-is-locked-open="$mdMedia('min-width: 333px')"
 *     class="md-sidenav-right">
 *     <form>
 *       <md-input-container>
 *         <label for="testInput">Test input</label>
 *         <input id="testInput" type="text"
 *                ng-model="data" md-autofocus>
 *       </md-input-container>
 *     </form>
 *   </md-sidenav>
 * </div>
 * </hljs>
 *
 * <hljs lang="js">
 * var app = angular.module('myApp', ['ngMaterial']);
 * app.controller('MyController', function($scope, $mdSidenav) {
 *   $scope.openLeftMenu = function() {
 *     $mdSidenav('left').toggle();
 *   };
 * });
 * </hljs>
 *
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.
 * @param {string=} md-component-id componentId to use with $mdSidenav service.
 * @param {expression=} md-is-locked-open When this expression evalutes to true,
 * the sidenav 'locks open': it falls into the content's flow instead
 * of appearing over it. This overrides the `md-is-open` attribute.
 *
 * The $mdMedia() service is exposed to the is-locked-open attribute, which
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.
 * Examples:
 *
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`
 *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)
 */
        function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
            /**
   * Directive Post Link function...
   */
            function postLink(scope, element, attr, sidenavCtrl) {
                /**
     * Toggle the DOM classes to indicate `locked`
     * @param isLocked
     */
                function updateIsLocked(isLocked, oldValue) {
                    scope.isLockedOpen = isLocked;
                    isLocked === oldValue ? element.toggleClass("md-locked-open", !!isLocked) : $animate[isLocked ? "addClass" : "removeClass"](element, "md-locked-open");
                    backdrop.toggleClass("md-locked-open", !!isLocked);
                }
                /**
     * Toggle the SideNav view and attach/detach listeners
     * @param isOpen
     */
                function updateIsOpen(isOpen) {
                    // Support deprecated md-sidenav-focus attribute as fallback
                    var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element, "[md-sidenav-focus]") || element, parent = element.parent();
                    parent[isOpen ? "on" : "off"]("keydown", onKeyDown);
                    backdrop[isOpen ? "on" : "off"]("click", close);
                    isOpen && (// Capture upon opening..
                    triggeringElement = $document[0].activeElement);
                    disableParentScroll(isOpen);
                    return promise = $q.all([ isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop), $animate[isOpen ? "removeClass" : "addClass"](element, "md-closed") ]).then(function() {
                        // Perform focus when animations are ALL done...
                        scope.isOpen && focusEl && focusEl.focus();
                    });
                }
                /**
     * Prevent parent scrolling (when the SideNav is open)
     */
                function disableParentScroll(disabled) {
                    var parent = element.parent();
                    if (disabled && !lastParentOverFlow) {
                        lastParentOverFlow = parent.css("overflow");
                        parent.css("overflow", "hidden");
                    } else if (angular.isDefined(lastParentOverFlow)) {
                        parent.css("overflow", lastParentOverFlow);
                        lastParentOverFlow = undefined;
                    }
                }
                /**
     * Toggle the sideNav view and publish a promise to be resolved when
     * the view animation finishes.
     *
     * @param isOpen
     * @returns {*}
     */
                function toggleOpen(isOpen) {
                    return scope.isOpen == isOpen ? $q.when(!0) : $q(function(resolve) {
                        // Toggle value to force an async `updateIsOpen()` to run
                        scope.isOpen = isOpen;
                        $mdUtil.nextTick(function() {
                            // When the current `updateIsOpen()` animation finishes
                            promise.then(function(result) {
                                if (!scope.isOpen) {
                                    // reset focus to originating element (if available) upon close
                                    triggeringElement && triggeringElement.focus();
                                    triggeringElement = null;
                                }
                                resolve(result);
                            });
                        });
                    });
                }
                /**
     * Auto-close sideNav when the `escape` key is pressed.
     * @param evt
     */
                function onKeyDown(ev) {
                    return ev.keyCode === $mdConstant.KEY_CODE.ESCAPE ? close(ev) : $q.when(!0);
                }
                /**
     * With backdrop `clicks` or `escape` key-press, immediately
     * apply the CSS close transition... Then notify the controller
     * to close() and perform its own actions.
     */
                function close(ev) {
                    ev.preventDefault();
                    return sidenavCtrl.close();
                }
                var lastParentOverFlow, triggeringElement = null, promise = $q.when(!0), isLockedOpenParsed = $parse(attr.mdIsLockedOpen), isLocked = function() {
                    return isLockedOpenParsed(scope.$parent, {
                        $media: function(arg) {
                            $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");
                            return $mdMedia(arg);
                        },
                        $mdMedia: $mdMedia
                    });
                }, backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");
                $mdTheming(element);
                // The backdrop should inherit the sidenavs theme,
                // because the backdrop will take its parent theme by default.
                $mdTheming.inherit(backdrop, element);
                element.on("$destroy", function() {
                    backdrop.remove();
                    sidenavCtrl.destroy();
                });
                scope.$on("$destroy", function() {
                    backdrop.remove();
                });
                scope.$watch(isLocked, updateIsLocked);
                scope.$watch("isOpen", updateIsOpen);
                // Publish special accessor for the Controller instance
                sidenavCtrl.$toggleOpen = toggleOpen;
            }
            return {
                restrict: "E",
                scope: {
                    isOpen: "=?mdIsOpen"
                },
                controller: "$mdSidenavController",
                compile: function(element) {
                    element.addClass("md-closed");
                    element.attr("tabIndex", "-1");
                    return postLink;
                }
            };
        }
        /*
 * @private
 * @ngdoc controller
 * @name SidenavController
 * @module material.components.sidenav
 *
 */
        function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {
            var self = this;
            // Use Default internal method until overridden by directive postLink
            // Synchronous getters
            self.isOpen = function() {
                return !!$scope.isOpen;
            };
            self.isLockedOpen = function() {
                return !!$scope.isLockedOpen;
            };
            // Async actions
            self.open = function() {
                return self.$toggleOpen(!0);
            };
            self.close = function() {
                return self.$toggleOpen(!1);
            };
            self.toggle = function() {
                return self.$toggleOpen(!$scope.isOpen);
            };
            self.$toggleOpen = function(value) {
                return $q.when($scope.isOpen = value);
            };
            self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
        }
        /**
 * @ngdoc module
 * @name material.components.sidenav
 *
 * @description
 * A Sidenav QP component.
 */
        angular.module("material.components.sidenav", [ "material.core", "material.components.backdrop" ]).factory("$mdSidenav", SidenavService).directive("mdSidenav", SidenavDirective).directive("mdSidenavFocus", SidenavFocusDirective).controller("$mdSidenavController", SidenavController);
        SidenavService.$inject = [ "$mdComponentRegistry", "$q" ];
        SidenavDirective.$inject = [ "$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document" ];
        SidenavController.$inject = [ "$scope", "$element", "$attrs", "$mdComponentRegistry", "$q" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdSlider
 * @module material.components.slider
 * @restrict E
 * @description
 * The `<md-slider>` component allows the user to choose from a range of
 * values.
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the slider is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * It has two modes: 'normal' mode, where the user slides between a wide range
 * of values, and 'discrete' mode, where the user slides between only a few
 * select values.
 *
 * To enable discrete mode, add the `md-discrete` attribute to a slider,
 * and use the `step` attribute to change the distance between
 * values the user is allowed to pick.
 *
 * @usage
 * <h4>Normal Mode</h4>
 * <hljs lang="html">
 * <md-slider ng-model="myValue" min="5" max="500">
 * </md-slider>
 * </hljs>
 * <h4>Discrete Mode</h4>
 * <hljs lang="html">
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">
 * </md-slider>
 * </hljs>
 *
 * @param {boolean=} md-discrete Whether to enable discrete mode.
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.
 */
        function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {
            // **********************************************************
            // Private Methods
            // **********************************************************
            function compile(tElement, tAttrs) {
                tAttrs.tabindex || tElement.attr("tabindex", 0);
                tElement.attr("role", "slider");
                $mdAria.expect(tElement, "aria-label");
                return postLink;
            }
            function postLink(scope, element, attr, ngModelCtrl) {
                // On resize, recalculate the slider's dimensions and re-render
                function updateAll() {
                    refreshSliderDimensions();
                    ngModelRender();
                    redrawTicks();
                }
                function updateMin(value) {
                    min = parseFloat(value);
                    element.attr("aria-valuemin", value);
                    updateAll();
                }
                function updateMax(value) {
                    max = parseFloat(value);
                    element.attr("aria-valuemax", value);
                    updateAll();
                }
                function updateStep(value) {
                    step = parseFloat(value);
                    redrawTicks();
                }
                function updateAriaDisabled() {
                    element.attr("aria-disabled", !!isDisabled);
                }
                function redrawTicks() {
                    if (angular.isDefined(attr.mdDiscrete) && !angular.isUndefined(step)) {
                        if (step <= 0) {
                            var msg = "Slider step value must be greater than zero when in discrete mode";
                            $log.error(msg);
                            throw new Error(msg);
                        }
                        var numSteps = Math.floor((max - min) / step);
                        if (!tickCanvas) {
                            tickCanvas = angular.element("<canvas>").css("position", "absolute");
                            tickContainer.append(tickCanvas);
                            var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
                            tickCtx = tickCanvas[0].getContext("2d");
                            tickCtx.fillStyle = trackTicksStyle.backgroundColor || "black";
                        }
                        var dimensions = getSliderDimensions();
                        tickCanvas[0].width = dimensions.width;
                        tickCanvas[0].height = dimensions.height;
                        for (var distance, i = 0; i <= numSteps; i++) {
                            distance = Math.floor(dimensions.width * (i / numSteps));
                            tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
                        }
                    }
                }
                function refreshSliderDimensions() {
                    sliderDimensions = trackContainer[0].getBoundingClientRect();
                }
                function getSliderDimensions() {
                    throttledRefreshDimensions();
                    return sliderDimensions;
                }
                /**
     * left/right arrow listener
     */
                function keydownListener(ev) {
                    if (!isDisabled) {
                        var changeAmount;
                        ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW ? changeAmount = -step : ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW && (changeAmount = step);
                        if (changeAmount) {
                            (ev.metaKey || ev.ctrlKey || ev.altKey) && (changeAmount *= 4);
                            ev.preventDefault();
                            ev.stopPropagation();
                            scope.$evalAsync(function() {
                                setModelValue(ngModelCtrl.$viewValue + changeAmount);
                            });
                        }
                    }
                }
                /**
     * ngModel setters and validators
     */
                function setModelValue(value) {
                    ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)));
                }
                function ngModelRender() {
                    isNaN(ngModelCtrl.$viewValue) && (ngModelCtrl.$viewValue = ngModelCtrl.$modelValue);
                    var percent = (ngModelCtrl.$viewValue - min) / (max - min);
                    scope.modelValue = ngModelCtrl.$viewValue;
                    element.attr("aria-valuenow", ngModelCtrl.$viewValue);
                    setSliderPercent(percent);
                    thumbText.text(ngModelCtrl.$viewValue);
                }
                function minMaxValidator(value) {
                    if (angular.isNumber(value)) return Math.max(min, Math.min(max, value));
                }
                function stepValidator(value) {
                    if (angular.isNumber(value)) {
                        var formattedValue = Math.round((value - min) / step) * step + min;
                        // Format to 3 digits after the decimal point - fixes #2015.
                        return Math.round(1e3 * formattedValue) / 1e3;
                    }
                }
                /**
     * @param percent 0-1
     */
                function setSliderPercent(percent) {
                    percent = clamp(percent);
                    var percentStr = 100 * percent + "%";
                    activeTrack.css("width", percentStr);
                    thumbContainer.css("left", percentStr);
                    element.toggleClass("md-min", 0 === percent);
                    element.toggleClass("md-max", 1 === percent);
                }
                function onPressDown(ev) {
                    if (!isDisabled) {
                        element.addClass("md-active");
                        element[0].focus();
                        refreshSliderDimensions();
                        var exactVal = percentToValue(positionToPercent(ev.pointer.x)), closestVal = minMaxValidator(stepValidator(exactVal));
                        scope.$apply(function() {
                            setModelValue(closestVal);
                            setSliderPercent(valueToPercent(closestVal));
                        });
                    }
                }
                function onPressUp(ev) {
                    if (!isDisabled) {
                        element.removeClass("md-dragging md-active");
                        var exactVal = percentToValue(positionToPercent(ev.pointer.x)), closestVal = minMaxValidator(stepValidator(exactVal));
                        scope.$apply(function() {
                            setModelValue(closestVal);
                            ngModelRender();
                        });
                    }
                }
                function onDragStart(ev) {
                    if (!isDisabled) {
                        isDragging = !0;
                        ev.stopPropagation();
                        element.addClass("md-dragging");
                        setSliderFromEvent(ev);
                    }
                }
                function onDrag(ev) {
                    if (isDragging) {
                        ev.stopPropagation();
                        setSliderFromEvent(ev);
                    }
                }
                function onDragEnd(ev) {
                    if (isDragging) {
                        ev.stopPropagation();
                        isDragging = !1;
                    }
                }
                function setSliderFromEvent(ev) {
                    // While panning discrete, update only the
                    // visual positioning but not the model value.
                    isDiscrete ? adjustThumbPosition(ev.pointer.x) : doSlide(ev.pointer.x);
                }
                /**
     * Slide the UI by changing the model value
     * @param x
     */
                function doSlide(x) {
                    scope.$evalAsync(function() {
                        setModelValue(percentToValue(positionToPercent(x)));
                    });
                }
                /**
     * Slide the UI without changing the model (while dragging/panning)
     * @param x
     */
                function adjustThumbPosition(x) {
                    var exactVal = percentToValue(positionToPercent(x)), closestVal = minMaxValidator(stepValidator(exactVal));
                    setSliderPercent(positionToPercent(x));
                    thumbText.text(closestVal);
                }
                /**
    * Clamps the value to be between 0 and 1.
    * @param {number} value The value to clamp.
    * @returns {number}
    */
                function clamp(value) {
                    return Math.max(0, Math.min(value || 0, 1));
                }
                /**
     * Convert horizontal position on slider to percentage value of offset from beginning...
     * @param x
     * @returns {number}
     */
                function positionToPercent(x) {
                    return Math.max(0, Math.min(1, (x - sliderDimensions.left) / sliderDimensions.width));
                }
                /**
     * Convert percentage offset on slide to equivalent model value
     * @param percent
     * @returns {*}
     */
                function percentToValue(percent) {
                    return min + percent * (max - min);
                }
                function valueToPercent(val) {
                    return (val - min) / (max - min);
                }
                $mdTheming(element);
                ngModelCtrl = ngModelCtrl || {
                    // Mock ngModelController if it doesn't exist to give us
                    // the minimum functionality needed
                    $setViewValue: function(val) {
                        this.$viewValue = val;
                        this.$viewChangeListeners.forEach(function(cb) {
                            cb();
                        });
                    },
                    $parsers: [],
                    $formatters: [],
                    $viewChangeListeners: []
                };
                var isDisabled = !1;
                attr.$observe("disabled", function(value) {
                    isDisabled = $mdUtil.parseAttributeBoolean(value, !1);
                    updateAriaDisabled();
                });
                var thumb = angular.element(element[0].querySelector(".md-thumb")), thumbText = angular.element(element[0].querySelector(".md-thumb-text")), thumbContainer = thumb.parent(), trackContainer = angular.element(element[0].querySelector(".md-track-container")), activeTrack = angular.element(element[0].querySelector(".md-track-fill")), tickContainer = angular.element(element[0].querySelector(".md-track-ticks")), throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5e3);
                // Default values, overridable by attrs
                angular.isDefined(attr.min) ? attr.$observe("min", updateMin) : updateMin(0);
                angular.isDefined(attr.max) ? attr.$observe("max", updateMax) : updateMax(100);
                angular.isDefined(attr.step) ? attr.$observe("step", updateStep) : updateStep(1);
                $mdGesture.register(element, "drag");
                element.on("keydown", keydownListener).on("$md.pressdown", onPressDown).on("$md.pressup", onPressUp).on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                setTimeout(updateAll, 0);
                var debouncedUpdateAll = $$rAF.throttle(updateAll);
                angular.element($window).on("resize", debouncedUpdateAll);
                scope.$on("$destroy", function() {
                    angular.element($window).off("resize", debouncedUpdateAll);
                });
                ngModelCtrl.$render = ngModelRender;
                ngModelCtrl.$viewChangeListeners.push(ngModelRender);
                ngModelCtrl.$formatters.push(minMaxValidator);
                ngModelCtrl.$formatters.push(stepValidator);
                /**
     * Attributes
     */
                var min, max, step, tickCanvas, tickCtx, sliderDimensions = {};
                refreshSliderDimensions();
                /**
     * Slide listeners
     */
                var isDragging = !1, isDiscrete = angular.isDefined(attr.mdDiscrete);
            }
            return {
                scope: {},
                require: "?ngModel",
                template: '<div class="md-slider-wrapper"><div class="md-track-container"><div class="md-track"></div><div class="md-track md-track-fill"></div><div class="md-track-ticks"></div></div><div class="md-thumb-container"><div class="md-thumb"></div><div class="md-focus-thumb"></div><div class="md-focus-ring"></div><div class="md-sign"><span class="md-thumb-text"></span></div><div class="md-disabled-thumb"></div></div></div>',
                compile: compile
            };
        }
        /**
   * @ngdoc module
   * @name material.components.slider
   */
        angular.module("material.components.slider", [ "material.core" ]).directive("mdSlider", SliderDirective);
        SliderDirective.$inject = [ "$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log" ];
    }();
    !function() {
        /**
 * @ngdoc service
 * @name $mdSticky
 * @module material.components.sticky
 *
 * @description
 * The `$mdSticky`service provides a mixin to make elements sticky.
 *
 * By default the `$mdSticky` service compiles the cloned element, when not specified through the `elementClone`
 * parameter, in the same scope as the actual element lives.
 *
 *
 * <h3>Notes</h3>
 * When using an element which is containing a compiled directive, which changed its DOM structure during compilation,
 * you should compile the clone yourself using the plain template.<br/><br/>
 * See the right usage below:
 * <hljs lang="js">
 *   angular.module('myModule')
 *     .directive('stickySelect', function($mdSticky, $compile) {
 *       var SELECT_TEMPLATE =
 *         '<md-select ng-model="selected">' +
 *           '<md-option>Option 1</md-option>' +
 *         '</md-select>';
 *
 *       return {
 *         restrict: 'E',
 *         replace: true,
 *         template: SELECT_TEMPLATE,
 *         link: function(scope,element) {
 *           $mdSticky(scope, element, $compile(SELECT_TEMPLATE)(scope));
 *         }
 *       };
 *     });
 * </hljs>
 *
 * @usage
 * <hljs lang="js">
 *   angular.module('myModule')
 *     .directive('stickyText', function($mdSticky, $compile) {
 *       return {
 *         restrict: 'E',
 *         template: '<span>Sticky Text</span>',
 *         link: function(scope,element) {
 *           $mdSticky(scope, element);
 *         }
 *       };
 *     });
 * </hljs>
 *
 * @returns A `$mdSticky` function that takes three arguments:
 *   - `scope`
 *   - `element`: The element that will be 'sticky'
 *   - `elementClone`: A clone of the element, that will be shown
 *     when the user starts scrolling past the original element.
 *     If not provided, it will use the result of `element.clone()` and compiles it in the given scope.
 */
        function MdSticky($document, $mdConstant, $$rAF, $mdUtil, $compile) {
            function setupSticky(contentCtrl) {
                /***************
     * Public
     ***************/
                // Add an element and its sticky clone to this content's sticky collection
                function add(element, stickyClone) {
                    stickyClone.addClass("md-sticky-clone");
                    var item = {
                        element: element,
                        clone: stickyClone
                    };
                    self.items.push(item);
                    $mdUtil.nextTick(function() {
                        contentEl.prepend(item.clone);
                    });
                    debouncedRefreshElements();
                    return function() {
                        self.items.forEach(function(item, index) {
                            if (item.element[0] === element[0]) {
                                self.items.splice(index, 1);
                                item.clone.remove();
                            }
                        });
                        debouncedRefreshElements();
                    };
                }
                function refreshElements() {
                    // Sort our collection of elements by their current position in the DOM.
                    // We need to do this because our elements' order of being added may not
                    // be the same as their order of display.
                    self.items.forEach(refreshPosition);
                    self.items = self.items.sort(function(a, b) {
                        return a.top < b.top ? -1 : 1;
                    });
                    for (var item, currentScrollTop = contentEl.prop("scrollTop"), i = self.items.length - 1; i >= 0; i--) if (currentScrollTop > self.items[i].top) {
                        item = self.items[i];
                        break;
                    }
                    setCurrentItem(item);
                }
                /***************
     * Private
     ***************/
                // Find the `top` of an item relative to the content element,
                // and also the height.
                function refreshPosition(item) {
                    // Find the top of an item by adding to the offsetHeight until we reach the 
                    // content element.
                    var current = item.element[0];
                    item.top = 0;
                    item.left = 0;
                    for (;current && current !== contentEl[0]; ) {
                        item.top += current.offsetTop;
                        item.left += current.offsetLeft;
                        current.offsetParent && (item.right += current.offsetParent.offsetWidth - current.offsetWidth - current.offsetLeft);
                        current = current.offsetParent;
                    }
                    item.height = item.element.prop("offsetHeight");
                    item.clone.css("margin-left", item.left + "px");
                    $mdUtil.floatingScrollbars() && item.clone.css("margin-right", "0");
                }
                // As we scroll, push in and select the correct sticky element.
                function onScroll() {
                    var scrollTop = contentEl.prop("scrollTop"), isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);
                    // Store the previous scroll so we know which direction we are scrolling
                    onScroll.prevScrollTop = scrollTop;
                    //
                    // AT TOP (not scrolling)
                    //
                    if (0 !== scrollTop) {
                        //
                        // SCROLLING DOWN (going towards the next item)
                        //
                        if (isScrollingDown) {
                            // If we've scrolled down past the next item's position, sticky it and return
                            if (self.next && self.next.top <= scrollTop) {
                                setCurrentItem(self.next);
                                return;
                            }
                            // If the next item is close to the current one, push the current one up out of the way
                            if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {
                                translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));
                                return;
                            }
                        }
                        //
                        // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)
                        //
                        if (!isScrollingDown) {
                            // If we've scrolled up past the previous item's position, sticky it and return
                            if (self.current && self.prev && scrollTop < self.current.top) {
                                setCurrentItem(self.prev);
                                return;
                            }
                            // If the next item is close to the current one, pull the current one down into view
                            if (self.next && self.current && scrollTop >= self.next.top - self.current.height) {
                                translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));
                                return;
                            }
                        }
                        //
                        // Otherwise, just move the current item to the proper place (scrolling up or down)
                        //
                        self.current && translate(self.current, scrollTop);
                    } else // If we're at the top, just clear the current item and return
                    setCurrentItem(null);
                }
                function setCurrentItem(item) {
                    if (self.current !== item) {
                        // Deactivate currently active item
                        if (self.current) {
                            translate(self.current, null);
                            setStickyState(self.current, null);
                        }
                        // Activate new item if given
                        item && setStickyState(item, "active");
                        self.current = item;
                        var index = self.items.indexOf(item);
                        // If index === -1, index + 1 = 0. It works out.
                        self.next = self.items[index + 1];
                        self.prev = self.items[index - 1];
                        setStickyState(self.next, "next");
                        setStickyState(self.prev, "prev");
                    }
                }
                function setStickyState(item, state) {
                    if (item && item.state !== state) {
                        if (item.state) {
                            item.clone.attr("sticky-prev-state", item.state);
                            item.element.attr("sticky-prev-state", item.state);
                        }
                        item.clone.attr("sticky-state", state);
                        item.element.attr("sticky-state", state);
                        item.state = state;
                    }
                }
                function translate(item, amount) {
                    if (item) if (null === amount || amount === undefined) {
                        if (item.translateY) {
                            item.translateY = null;
                            item.clone.css($mdConstant.CSS.TRANSFORM, "");
                        }
                    } else {
                        item.translateY = amount;
                        item.clone.css($mdConstant.CSS.TRANSFORM, "translate3d(" + item.left + "px," + amount + "px,0)");
                    }
                }
                var contentEl = contentCtrl.$element, debouncedRefreshElements = $$rAF.throttle(refreshElements);
                // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,
                // more reliable than `scroll` on android.
                setupAugmentedScrollEvents(contentEl);
                contentEl.on("$scrollstart", debouncedRefreshElements);
                contentEl.on("$scroll", onScroll);
                var self;
                return self = {
                    prev: null,
                    current: null,
                    //the currently stickied item
                    next: null,
                    items: [],
                    add: add,
                    refreshElements: refreshElements
                };
            }
            // Android 4.4 don't accurately give scroll events.
            // To fix this problem, we setup a fake scroll event. We say:
            // > If a scroll or touchmove event has happened in the last DELAY milliseconds, 
            //   then send a `$scroll` event every animationFrame.
            // Additionally, we add $scrollstart and $scrollend events.
            function setupAugmentedScrollEvents(element) {
                function loopScrollEvent() {
                    if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
                        isScrolling = !1;
                        element.triggerHandler("$scrollend");
                    } else {
                        element.triggerHandler("$scroll");
                        $$rAF.throttle(loopScrollEvent);
                    }
                }
                var isScrolling, lastScrollTime, SCROLL_END_DELAY = 200;
                element.on("scroll touchmove", function() {
                    if (!isScrolling) {
                        isScrolling = !0;
                        $$rAF.throttle(loopScrollEvent);
                        element.triggerHandler("$scrollstart");
                    }
                    element.triggerHandler("$scroll");
                    lastScrollTime = +$mdUtil.now();
                });
            }
            var browserStickySupport = // Function to check for browser sticky support
            function($el) {
                var stickyProp, testEl = angular.element("<div>");
                $document[0].body.appendChild(testEl[0]);
                for (var stickyProps = [ "sticky", "-webkit-sticky" ], i = 0; i < stickyProps.length; ++i) {
                    testEl.css({
                        position: stickyProps[i],
                        top: 0,
                        "z-index": 2
                    });
                    if (testEl.css("position") == stickyProps[i]) {
                        stickyProp = stickyProps[i];
                        break;
                    }
                }
                testEl.remove();
                return stickyProp;
            }();
            /**
   * Registers an element as sticky, used internally by directives to register themselves
   */
            return function(scope, element, stickyClone) {
                var contentCtrl = element.controller("mdContent");
                if (contentCtrl) if (browserStickySupport) element.css({
                    position: browserStickySupport,
                    top: 0,
                    "z-index": 2
                }); else {
                    var $$sticky = contentCtrl.$element.data("$$sticky");
                    if (!$$sticky) {
                        $$sticky = setupSticky(contentCtrl);
                        contentCtrl.$element.data("$$sticky", $$sticky);
                    }
                    // Compile our cloned element, when cloned in this service, into the given scope.
                    var cloneElement = stickyClone || $compile(element.clone())(scope), deregister = $$sticky.add(element, cloneElement);
                    scope.$on("$destroy", deregister);
                }
            };
        }
        /**
 * @ngdoc module
 * @name material.components.sticky
 * @description
 * Sticky effects for md
 *
 */
        angular.module("material.components.sticky", [ "material.core", "material.components.content" ]).factory("$mdSticky", MdSticky);
        MdSticky.$inject = [ "$document", "$mdConstant", "$$rAF", "$mdUtil", "$compile" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdSubheader
 * @module material.components.subheader
 *
 * @restrict E
 *
 * @description
 * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.
 * You can make it not sticky by applying the `md-no-sticky` class to the subheader.
 *
 *
 * @usage
 * <hljs lang="html">
 * <md-subheader>Online Friends</md-subheader>
 * </hljs>
 */
        function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {
            return {
                restrict: "E",
                replace: !0,
                transclude: !0,
                template: '<div class="md-subheader">  <div class="md-subheader-inner">    <span class="md-subheader-content"></span>  </div></div>',
                link: function(scope, element, attr, controllers, transclude) {
                    function getContent(el) {
                        return angular.element(el[0].querySelector(".md-subheader-content"));
                    }
                    $mdTheming(element);
                    var outerHTML = element[0].outerHTML;
                    // Transclude the user-given contents of the subheader
                    // the conventional way.
                    transclude(scope, function(clone) {
                        getContent(element).append(clone);
                    });
                    // Create another clone, that uses the outer and inner contents
                    // of the element, that will be 'stickied' as the user scrolls.
                    element.hasClass("md-no-sticky") || transclude(scope, function(clone) {
                        // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the
                        // compiled clone below will only be a comment tag (since they replace their elements with
                        // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own
                        // DIV to ensure we have something $mdSticky can use
                        var wrapperHtml = '<div class="md-subheader-wrapper">' + outerHTML + "</div>", stickyClone = $compile(wrapperHtml)(scope);
                        // Append the sticky
                        $mdSticky(scope, element, stickyClone);
                        // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before
                        // attempting to create the clone
                        $mdUtil.nextTick(function() {
                            getContent(stickyClone).append(clone);
                        });
                    });
                }
            };
        }
        /**
 * @ngdoc module
 * @name material.components.subheader
 * @description
 * SubHeader module
 *
 *  Subheaders are special list tiles that delineate distinct sections of a
 *  list or grid list and are typically related to the current filtering or
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or
 *  can be associated with content, for example, in an adjacent column.
 *
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain
 *  pinned until pushed on or off screen by the next subheader. @see [Material
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)
 *
 *  > To improve the visual grouping of content, use the system color for your subheaders.
 *
 */
        angular.module("material.components.subheader", [ "material.core", "material.components.sticky" ]).directive("mdSubheader", MdSubheaderDirective);
        MdSubheaderDirective.$inject = [ "$mdSticky", "$compile", "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        function getDirective(name) {
            /* @ngInject */
            function DirectiveFactory($parse) {
                function postLink(scope, element, attr) {
                    var fn = $parse(attr[directiveName]);
                    element.on(eventName, function(ev) {
                        scope.$apply(function() {
                            fn(scope, {
                                $event: ev
                            });
                        });
                    });
                }
                return {
                    restrict: "A",
                    link: postLink
                };
            }
            var directiveName = "md" + name, eventName = "$md." + name.toLowerCase();
            DirectiveFactory.$inject = [ "$parse" ];
            return DirectiveFactory;
        }
        /**
 * @ngdoc module
 * @name material.components.swipe
 * @description Swipe module!
 */
        /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeLeft
 *
 * @restrict A
 *
 * @description
 * The md-swipe-left directive allows you to specify custom behavior when an element is swiped
 * left.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>
 * </hljs>
 */
        /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeRight
 *
 * @restrict A
 *
 * @description
 * The md-swipe-right directive allows you to specify custom behavior when an element is swiped
 * right.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>
 * </hljs>
 */
        /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeUp
 *
 * @restrict A
 *
 * @description
 * The md-swipe-up directive allows you to specify custom behavior when an element is swiped
 * up.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-up="onSwipeUp()">Swipe me up!</div>
 * </hljs>
 */
        /**
 * @ngdoc directive
 * @module material.components.swipe
 * @name mdSwipeDown
 *
 * @restrict A
 *
 * @description
 * The md-swipe-down directive allows you to specify custom behavior when an element is swiped
 * down.
 *
 * @usage
 * <hljs lang="html">
 * <div md-swipe-down="onSwipDown()">Swipe me down!</div>
 * </hljs>
 */
        angular.module("material.components.swipe", [ "material.core" ]).directive("mdSwipeLeft", getDirective("SwipeLeft")).directive("mdSwipeRight", getDirective("SwipeRight")).directive("mdSwipeUp", getDirective("SwipeUp")).directive("mdSwipeDown", getDirective("SwipeDown"));
    }();
    !function() {
        /**
 * @private
 * @ngdoc directive
 * @module material.components.switch
 * @name mdSwitch
 * @restrict E
 *
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the switch is in the accent color by default. The primary color palette may be used with
 * the `md-primary` class.
 *
 * @param {string} ng-model Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {expression=} ng-disabled En/Disable based on the expression.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *
 * @usage
 * <hljs lang="html">
 * <md-switch ng-model="isActive" aria-label="Finished?">
 *   Finished ?
 * </md-switch>
 *
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
 *   No Ink Effects
 * </md-switch>
 *
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
 *   Disabled
 * </md-switch>
 *
 * </hljs>
 */
        function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {
            function mdSwitchCompile(element, attr) {
                var checkboxLink = checkboxDirective.compile(element, attr);
                // No transition on initial load.
                element.addClass("md-dragging");
                return function(scope, element, attr, ngModel) {
                    function onDragStart(ev) {
                        // Don't go if the switch is disabled.
                        if (!disabledGetter || !disabledGetter(scope)) {
                            ev.stopPropagation();
                            element.addClass("md-dragging");
                            drag = {
                                width: thumbContainer.prop("offsetWidth")
                            };
                            element.removeClass("transition");
                        }
                    }
                    function onDrag(ev) {
                        if (drag) {
                            ev.stopPropagation();
                            ev.srcEvent && ev.srcEvent.preventDefault();
                            var percent = ev.pointer.distanceX / drag.width, translate = ngModel.$viewValue ? 1 + percent : percent;
                            // Make sure the switch stays inside its bounds, 0-1%
                            translate = Math.max(0, Math.min(1, translate));
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "translate3d(" + 100 * translate + "%,0,0)");
                            drag.translate = translate;
                        }
                    }
                    function onDragEnd(ev) {
                        if (drag) {
                            ev.stopPropagation();
                            element.removeClass("md-dragging");
                            thumbContainer.css($mdConstant.CSS.TRANSFORM, "");
                            (ngModel.$viewValue ? drag.translate > .5 : drag.translate < .5) && applyModelValue(!ngModel.$viewValue);
                            drag = null;
                        }
                    }
                    function applyModelValue(newValue) {
                        scope.$apply(function() {
                            ngModel.$setViewValue(newValue);
                            ngModel.$render();
                        });
                    }
                    ngModel = ngModel || $mdUtil.fakeNgModel();
                    var disabledGetter = null;
                    null != attr.disabled ? disabledGetter = function() {
                        return !0;
                    } : attr.ngDisabled && (disabledGetter = $parse(attr.ngDisabled));
                    var thumbContainer = angular.element(element[0].querySelector(".md-thumb-container")), switchContainer = angular.element(element[0].querySelector(".md-container"));
                    // no transition on initial load
                    $$rAF(function() {
                        element.removeClass("md-dragging");
                    });
                    checkboxLink(scope, element, attr, ngModel);
                    disabledGetter && scope.$watch(disabledGetter, function(isDisabled) {
                        element.attr("tabindex", isDisabled ? -1 : 0);
                    });
                    // These events are triggered by setup drag
                    $mdGesture.register(switchContainer, "drag");
                    switchContainer.on("$md.dragstart", onDragStart).on("$md.drag", onDrag).on("$md.dragend", onDragEnd);
                    var drag;
                };
            }
            var checkboxDirective = mdCheckboxDirective[0];
            return {
                restrict: "E",
                priority: 210,
                // Run before ngAria
                transclude: !0,
                template: '<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',
                require: "?ngModel",
                compile: mdSwitchCompile
            };
        }
        /**
 * @private
 * @ngdoc module
 * @name material.components.switch
 */
        angular.module("material.components.switch", [ "material.core", "material.components.checkbox" ]).directive("mdSwitch", MdSwitch);
        MdSwitch.$inject = [ "mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture" ];
    }();
    !function() {
        /* @ngInject */
        function MdToastDirective($mdToast) {
            return {
                restrict: "E",
                link: function(scope, element, attr) {
                    // When navigation force destroys an interimElement, then
                    // listen and $destroy() that interim instance...
                    scope.$on("$destroy", function() {
                        $mdToast.destroy();
                    });
                }
            };
        }
        /**
  * @ngdoc service
  * @name $mdToast
  * @module material.components.toast
  *
  * @description
  * `$mdToast` is a service to build a toast notification on any position
  * on the screen with an optional duration, and provides a simple promise API.
  *
  * The toast will be always positioned at the `bottom`, when the screen size is
  * between `600px` and `959px` (`sm` breakpoint)
  *
  * ## Restrictions on custom toasts
  * - The toast's template must have an outer `<md-toast>` element.
  * - For a toast action, use element with class `md-action`.
  * - Add the class `md-capsule` for curved corners.
  *
  * ## Parent container notes
  *
  * The toast is positioned using absolute positioning relative to it's first non-static parent
  * container. Thus, if the requested parent container uses static positioning, we will temporarily
  * set it's positioning to `relative` while the toast is visible and reset it when the toast is
  * hidden.
  *
  * Because of this, it is usually best to ensure that the parent container has a fixed height and
  * prevents scrolling by setting the `overflow: hidden;` style. Since the position is based off of
  * the parent's height, the toast may be mispositioned if you allow the parent to scroll.
  *
  * You can, however, have a scrollable element inside of the container; just make sure the
  * container itself does not scroll.
  *
  * <hljs lang="html">
  * <div layout-fill id="toast-container">
  *   <md-content>
  *     I can have lots of content and scroll!
  *   </md-content>
  * </div>
  * </hljs>
  *
  * @usage
  * <hljs lang="html">
  * <div ng-controller="MyController">
  *   <md-button ng-click="openToast()">
  *     Open a Toast!
  *   </md-button>
  * </div>
  * </hljs>
  *
  * <hljs lang="js">
  * var app = angular.module('app', ['ngMaterial']);
  * app.controller('MyController', function($scope, $mdToast) {
  *   $scope.openToast = function($event) {
  *     $mdToast.show($mdToast.simple().textContent('Hello!'));
  *     // Could also do $mdToast.showSimple('Hello');
  *   };
  * });
  * </hljs>
  */
        /**
 * @ngdoc method
 * @name $mdToast#showSimple
 * 
 * @param {string} message The message to display inside the toast
 * @description
 * Convenience method which builds and shows a simple toast.
 *
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
 * rejected with `$mdToast.cancel()`.
 *
 */
        /**
  * @ngdoc method
  * @name $mdToast#simple
  *
  * @description
  * Builds a preconfigured toast.
  *
  * @returns {obj} a `$mdToastPreset` with the following chainable configuration methods.
  *
  * _**Note:** These configuration methods are provided in addition to the methods provided by
  *   the `build()` and `show()` methods below._
  *
  * - `.textContent(string)` - Sets the toast content to the specified string.
  *
  * - `.action(string)` - Adds an action button. If clicked, the promise (returned from `show()`)
  * will resolve with the value `'ok'`; otherwise, it is resolved with `true` after a `hideDelay`
  * timeout.
  *
  * - `.highlightAction(boolean)` - Whether or not the action button will have an additional
  * highlight class.
  *
  * - `.capsule(boolean)` - Whether or not to add the `md-capsule` class to the toast to provide
  * rounded corners.
  *
  * - `.theme(string)` - Sets the theme on the toast to the requested theme. Default is
  * `$mdThemingProvider`'s default.
  */
        /**
  * @ngdoc method
  * @name $mdToast#updateTextContent
  *
  * @description
  * Updates the content of an existing toast. Useful for updating things like counts, etc.
  *
  */
        /**
  * @ngdoc method
  * @name $mdToast#build
  *
  * @description
  * Creates a custom `$mdToastPreset` that you can configure.
  *
  * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).
  */
        /**
  * @ngdoc method
  * @name $mdToast#show
  *
  * @description Shows the toast.
  *
  * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`
  * and `build()`, or an options object with the following properties:
  *
  *   - `templateUrl` - `{string=}`: The url of an html template file that will
  *     be used as the content of the toast. Restrictions: the template must
  *     have an outer `md-toast` element.
  *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
  *     template string.
  *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template content with a
  *     `<div class="md-toast-content">` if one is not provided. Defaults to true. Can be disabled if you provide a
  *     custom toast directive.
  *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
  *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.
  *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
  *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay
  *     active before automatically closing.  Set to 0 or false to have the toast stay open until
  *     closed manually. Default: 3000.
  *   - `position` - `{string=}`: Where to place the toast. Available: any combination
  *     of 'bottom', 'left', 'top', 'right'. Default: 'bottom left'.
  *   - `controller` - `{string=}`: The controller to associate with this toast.
  *     The controller will be injected the local `$mdToast.hide( )`, which is a function
  *     used to hide the toast.
  *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
  *     be used as names of values to inject into the controller. For example,
  *     `locals: {three: 3}` would inject `three` into the controller with the value
  *     of 3.
  *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
  *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
  *     and the toast will not open until the promises resolve.
  *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
  *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending
  *     to the root element of the application.
  *
  * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
  * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean
  * value == 'true' or the value passed as an argument to `$mdToast.hide()`.
  * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'
  */
        /**
  * @ngdoc method
  * @name $mdToast#hide
  *
  * @description
  * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.
  *
  * @param {*=} response An argument for the resolved promise.
  *
  * @returns {promise} a promise that is called when the existing element is removed from the DOM.
  * The promise is resolved with either a Boolean value == 'true' or the value passed as the
  * argument to `.hide()`.
  *
  */
        /**
  * @ngdoc method
  * @name $mdToast#cancel
  *
  * @description
  * `DEPRECATED` - The promise returned from opening a toast is used only to notify about the closing of the toast.
  * As such, there isn't any reason to also allow that promise to be rejected,
  * since it's not clear what the difference between resolve and reject would be.
  *
  * Hide the existing toast and reject the promise returned from
  * `$mdToast.show()`.
  *
  * @param {*=} response An argument for the rejected promise.
  *
  * @returns {promise} a promise that is called when the existing element is removed from the DOM
  * The promise is resolved with a Boolean value == 'false'.
  *
  */
        function MdToastProvider($$interimElementProvider) {
            function updateTextContent(newContent) {
                activeToastContent = newContent;
            }
            /* @ngInject */
            function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {
                function onShow(scope, element, options) {
                    activeToastContent = options.textContent || options.content;
                    // support deprecated #content method
                    var isSmScreen = !$mdMedia("gt-sm");
                    element = $mdUtil.extractElementByName(element, "md-toast", !0);
                    options.element = element;
                    options.onSwipe = function(ev, gesture) {
                        //Add the relevant swipe class to the element so it can animate correctly
                        var swipe = ev.type.replace("$md.", ""), direction = swipe.replace("swipe", "");
                        // If the swipe direction is down/up but the toast came from top/bottom don't fade away
                        // Unless the screen is small, then the toast always on bottom
                        if (("down" !== direction || -1 == options.position.indexOf("top") || isSmScreen) && ("up" !== direction || -1 == options.position.indexOf("bottom") && !isSmScreen) && ("left" !== direction && "right" !== direction || !isSmScreen)) {
                            element.addClass("md-" + swipe);
                            $mdUtil.nextTick($mdToast.cancel);
                        }
                    };
                    options.openClass = toastOpenClass(options.position);
                    // 'top left' -> 'md-top md-left'
                    options.parent.addClass(options.openClass);
                    // static is the default position
                    $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "relative");
                    element.on(SWIPE_EVENTS, options.onSwipe);
                    element.addClass(isSmScreen ? "md-bottom" : options.position.split(" ").map(function(pos) {
                        return "md-" + pos;
                    }).join(" "));
                    options.parent && options.parent.addClass("md-toast-animating");
                    return $animate.enter(element, options.parent).then(function() {
                        options.parent && options.parent.removeClass("md-toast-animating");
                    });
                }
                function onRemove(scope, element, options) {
                    element.off(SWIPE_EVENTS, options.onSwipe);
                    options.parent && options.parent.addClass("md-toast-animating");
                    options.openClass && options.parent.removeClass(options.openClass);
                    return (1 == options.$destroy ? element.remove() : $animate.leave(element)).then(function() {
                        options.parent && options.parent.removeClass("md-toast-animating");
                        $mdUtil.hasComputedStyle(options.parent, "position", "static") && options.parent.css("position", "");
                    });
                }
                function toastOpenClass(position) {
                    return $mdMedia("gt-sm") ? "md-toast-open-" + (position.indexOf("top") > -1 ? "top" : "bottom") : "md-toast-open-bottom";
                }
                var SWIPE_EVENTS = "$md.swipeleft $md.swiperight $md.swipeup $md.swipedown";
                return {
                    onShow: onShow,
                    onRemove: onRemove,
                    position: "bottom left",
                    themable: !0,
                    hideDelay: 3e3,
                    autoWrap: !0,
                    transformTemplate: function(template, options) {
                        if (options.autoWrap && template && !/md-toast-content/g.test(template)) {
                            // Root element of template will be <md-toast>. We need to wrap all of its content inside of
                            // of <div class="md-toast-content">. All templates provided here should be static, developer-controlled
                            // content (meaning we're not attempting to guard against XSS).
                            var templateRoot = document.createElement("md-template");
                            templateRoot.innerHTML = template;
                            for (var i = 0; i < templateRoot.children.length; i++) if ("MD-TOAST" === templateRoot.children[i].nodeName) {
                                var wrapper = angular.element('<div class="md-toast-content">');
                                wrapper.append(templateRoot.children[i].children);
                                templateRoot.children[i].appendChild(wrapper[0]);
                            }
                            return templateRoot.outerHTML;
                        }
                        return template || "";
                    }
                };
            }
            // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).
            var activeToastContent, $mdToast = $$interimElementProvider("$mdToast").setDefaults({
                methods: [ "position", "hideDelay", "capsule", "parent" ],
                options: toastDefaultOptions
            }).addPreset("simple", {
                argOption: "textContent",
                methods: [ "textContent", "content", "action", "highlightAction", "theme", "parent" ],
                options: /* @ngInject */ [ "$mdToast", "$mdTheming", function($mdToast, $mdTheming) {
                    return {
                        template: '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">  <div class="md-toast-content">    <span flex role="alert" aria-relevant="all" aria-atomic="true">      {{ toast.content }}    </span>    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">      {{ toast.action }}    </md-button>  </div></md-toast>',
                        controller: /* @ngInject */ [ "$scope", function($scope) {
                            var self = this;
                            $scope.$watch(function() {
                                return activeToastContent;
                            }, function() {
                                self.content = activeToastContent;
                            });
                            this.resolve = function() {
                                $mdToast.hide("ok");
                            };
                        } ],
                        theme: $mdTheming.defaultTheme(),
                        controllerAs: "toast",
                        bindToController: !0
                    };
                } ]
            }).addMethod("updateTextContent", updateTextContent).addMethod("updateContent", updateTextContent);
            toastDefaultOptions.$inject = [ "$animate", "$mdToast", "$mdUtil", "$mdMedia" ];
            return $mdToast;
        }
        /**
  * @ngdoc module
  * @name material.components.toast
  * @description
  * Toast
  */
        angular.module("material.components.toast", [ "material.core", "material.components.button" ]).directive("mdToast", MdToastDirective).provider("$mdToast", MdToastProvider);
        MdToastDirective.$inject = [ "$mdToast" ];
        MdToastProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        /**
 * @ngdoc module
 * @name material.components.tabs
 * @description
 *
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.
 *
 *  Features include support for:
 *
 *  - static or dynamic tabs,
 *  - responsive designs,
 *  - accessibility support (ARIA),
 *  - tab pagination,
 *  - external or internal tab content,
 *  - focus indicators and arrow-key navigations,
 *  - programmatic lookup and access to tab controllers, and
 *  - dynamic transitions through different tab contents.
 *
 */
        /*
 * @see js folder for tabs implementation
 */
        angular.module("material.components.tabs", [ "material.core", "material.components.icon" ]);
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdToolbar
 * @module material.components.toolbar
 * @restrict E
 * @description
 * `md-toolbar` is used to place a toolbar in your app.
 *
 * Toolbars are usually used above a content area to display the title of the
 * current page, and show relevant action buttons for that page.
 *
 * You can change the height of the toolbar by adding either the
 * `md-medium-tall` or `md-tall` class to the toolbar.
 *
 * @usage
 * <hljs lang="html">
 * <div layout="column" layout-fill>
 *   <md-toolbar>
 *
 *     <div class="md-toolbar-tools">
 *       <span>My App's Title</span>
 *
 *       <!-- fill up the space between left and right area -->
 *       <span flex></span>
 *
 *       <md-button>
 *         Right Bar Button
 *       </md-button>
 *     </div>
 *
 *   </md-toolbar>
 *   <md-content>
 *     Hello!
 *   </md-content>
 * </div>
 * </hljs>
 *
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as
 * the user scrolls down, and reveal itself as the user scrolls up.
 *
 * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a
 * `md-content` element, placed before it. See the scroll shrink demo._
 *
 * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component
 * initialization, it does not watch for scope changes._
 *
 *
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink
 * at one fourth the rate at which the user scrolls down. Default 0.5.
 */
        function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {
            var translateY = angular.bind(null, $mdUtil.supplant, "translate3d(0,{0}px,0)");
            return {
                template: "",
                restrict: "E",
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    angular.isDefined(attr.mdScrollShrink) && function() {
                        /**
         *
         */
                        function onChangeScrollShrink(shrinkWithScroll) {
                            var closestContent = element.parent().find("md-content");
                            // If we have a content element, fake the call; this might still fail
                            // if the content element isn't a sibling of the toolbar
                            !contentElement && closestContent.length && onMdContentLoad(null, closestContent);
                            // Evaluate the expression
                            shrinkWithScroll = scope.$eval(shrinkWithScroll);
                            // Disable only if the attribute's expression evaluates to false
                            !1 === shrinkWithScroll ? disableScrollShrink() : disableScrollShrink = enableScrollShrink();
                        }
                        /**
         *
         */
                        function onMdContentLoad($event, newContentEl) {
                            // Toolbar and content must be siblings
                            if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {
                                // unhook old content event listener if exists
                                contentElement && contentElement.off("scroll", debouncedContentScroll);
                                contentElement = newContentEl;
                                disableScrollShrink = enableScrollShrink();
                            }
                        }
                        /**
         *
         */
                        function onContentScroll(e) {
                            var scrollTop = e ? e.target.scrollTop : prevScrollTop;
                            debouncedUpdateHeight();
                            y = Math.min(toolbarHeight / shrinkSpeedFactor, Math.max(0, y + scrollTop - prevScrollTop));
                            element.css($mdConstant.CSS.TRANSFORM, translateY([ -y * shrinkSpeedFactor ]));
                            contentElement.css($mdConstant.CSS.TRANSFORM, translateY([ (toolbarHeight - y) * shrinkSpeedFactor ]));
                            prevScrollTop = scrollTop;
                            $mdUtil.nextTick(function() {
                                var hasWhiteFrame = element.hasClass("md-whiteframe-z1");
                                hasWhiteFrame && !y ? $animate.removeClass(element, "md-whiteframe-z1") : !hasWhiteFrame && y && $animate.addClass(element, "md-whiteframe-z1");
                            });
                        }
                        /**
         *
         */
                        function enableScrollShrink() {
                            if (!contentElement) return angular.noop;
                            // no md-content
                            contentElement.on("scroll", debouncedContentScroll);
                            contentElement.attr("scroll-shrink", "true");
                            $$rAF(updateToolbarHeight);
                            return function() {
                                contentElement.off("scroll", debouncedContentScroll);
                                contentElement.attr("scroll-shrink", "false");
                                $$rAF(updateToolbarHeight);
                            };
                        }
                        /**
         *
         */
                        function updateToolbarHeight() {
                            toolbarHeight = element.prop("offsetHeight");
                            // Add a negative margin-top the size of the toolbar to the content el.
                            // The content will start transformed down the toolbarHeight amount,
                            // so everything looks normal.
                            //
                            // As the user scrolls down, the content will be transformed up slowly
                            // to put the content underneath where the toolbar was.
                            var margin = -toolbarHeight * shrinkSpeedFactor + "px";
                            contentElement.css({
                                "margin-top": margin,
                                "margin-bottom": margin
                            });
                            onContentScroll();
                        }
                        var toolbarHeight, contentElement, disableScrollShrink = angular.noop, y = 0, prevScrollTop = 0, shrinkSpeedFactor = attr.mdShrinkSpeedFactor || .5, debouncedContentScroll = $$rAF.throttle(onContentScroll), debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5e3);
                        // Wait for $mdContentLoaded event from mdContent directive.
                        // If the mdContent element is a sibling of our toolbar, hook it up
                        // to scroll events.
                        scope.$on("$mdContentLoaded", onMdContentLoad);
                        // If the toolbar is used inside an ng-if statement, we may miss the
                        // $mdContentLoaded event, so we attempt to fake it if we have a
                        // md-content close enough.
                        attr.$observe("mdScrollShrink", onChangeScrollShrink);
                        // If the toolbar has ngShow or ngHide we need to update height immediately as it changed
                        // and not wait for $mdUtil.debounce to happen
                        attr.ngShow && scope.$watch(attr.ngShow, updateToolbarHeight);
                        attr.ngHide && scope.$watch(attr.ngHide, updateToolbarHeight);
                        // If the scope is destroyed (which could happen with ng-if), make sure
                        // to disable scroll shrinking again
                        scope.$on("$destroy", disableScrollShrink);
                    }();
                }
            };
        }
        /**
 * @ngdoc module
 * @name material.components.toolbar
 */
        angular.module("material.components.toolbar", [ "material.core", "material.components.content" ]).directive("mdToolbar", mdToolbarDirective);
        mdToolbarDirective.$inject = [ "$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdTooltip
 * @module material.components.tooltip
 * @description
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).
 *
 * Place a `<md-tooltip>` as a child of the element it describes.
 *
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.
 *
 * @usage
 * <hljs lang="html">
 * <md-button class="md-fab md-accent" aria-label="Play">
 *   <md-tooltip>
 *     Play Music
 *   </md-tooltip>
 *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>
 * </md-button>
 * </hljs>
 *
 * @param {expression=} md-visible Boolean bound to whether the tooltip is currently visible.
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.
 * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 */
        function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement, $animate, $q) {
            function postLink(scope, element, attr) {
                function updateContentOrigin() {
                    var origin = "center top";
                    switch (scope.direction) {
                      case "left":
                        origin = "right center";
                        break;

                      case "right":
                        origin = "left center";
                        break;

                      case "top":
                        origin = "center bottom";
                        break;

                      case "bottom":
                        origin = "center top";
                    }
                    content.css("transform-origin", origin);
                }
                function setVisible(value) {
                    setVisible.value = !!value;
                    if (!setVisible.queued) if (value) {
                        setVisible.queued = !0;
                        $timeout(function() {
                            scope.visible = setVisible.value;
                            setVisible.queued = !1;
                        }, scope.delay);
                    } else $mdUtil.nextTick(function() {
                        scope.visible = !1;
                    });
                }
                function showTooltip() {
                    // Insert the element before positioning it, so we can get the position
                    // and check if we should display it
                    tooltipParent.append(element);
                    // Check if we should display it or not.
                    // This handles hide-* and show-* along with any user defined css
                    if ($mdUtil.hasComputedStyle(element, "display", "none")) {
                        scope.visible = !1;
                        element.detach();
                    } else {
                        updatePosition();
                        angular.forEach([ element, content ], function(element) {
                            $animate.addClass(element, "md-show");
                        });
                    }
                }
                function hideTooltip() {
                    var promises = [];
                    angular.forEach([ element, content ], function(it) {
                        it.parent() && it.hasClass("md-show") && promises.push($animate.removeClass(it, "md-show"));
                    });
                    $q.all(promises).then(function() {
                        scope.visible || element.detach();
                    });
                }
                function updatePosition() {
                    if (scope.visible) {
                        updateContentOrigin();
                        positionTooltip();
                    }
                }
                function positionTooltip() {
                    function fitInParent(pos) {
                        var newPosition = {
                            left: pos.left,
                            top: pos.top
                        };
                        newPosition.left = Math.min(newPosition.left, tooltipParent.prop("scrollWidth") - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.left = Math.max(newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.min(newPosition.top, tooltipParent.prop("scrollHeight") - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.max(newPosition.top, TOOLTIP_WINDOW_EDGE_SPACE);
                        return newPosition;
                    }
                    function getPosition(dir) {
                        return "left" === dir ? {
                            left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : "right" === dir ? {
                            left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : "top" === dir ? {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE
                        } : {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE
                        };
                    }
                    var tipRect = $mdUtil.offsetRect(element, tooltipParent), parentRect = $mdUtil.offsetRect(parent, tooltipParent), newPosition = getPosition(scope.direction), offsetParent = element.prop("offsetParent");
                    // If the user provided a direction, just nudge the tooltip onto the screen
                    // Otherwise, recalculate based on 'top' since default is 'bottom'
                    scope.direction ? newPosition = fitInParent(newPosition) : offsetParent && newPosition.top > offsetParent.scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE && (newPosition = fitInParent(getPosition("top")));
                    element.css({
                        left: newPosition.left + "px",
                        top: newPosition.top + "px"
                    });
                }
                $mdTheming(element);
                var parent = $mdUtil.getParentWithPointerEvents(element), content = angular.element(element[0].getElementsByClassName("md-content")[0]), tooltipParent = angular.element(document.body), debouncedOnResize = $$rAF.throttle(function() {
                    updatePosition();
                });
                $animate.pin && $animate.pin(element, parent);
                // Initialize element
                !function() {
                    angular.isDefined(attr.mdDelay) || (scope.delay = TOOLTIP_SHOW_DELAY);
                }();
                !function() {
                    element.detach();
                    element.attr("role", "tooltip");
                }();
                !function() {
                    function windowScrollHandler() {
                        setVisible(!1);
                    }
                    var mouseActive = !1, ngWindow = angular.element($window);
                    // add an mutationObserver when there is support for it
                    // and the need for it in the form of viable host(parent[0])
                    if (parent[0] && "MutationObserver" in $window) {
                        // use an mutationObserver to tackle #2602
                        var attributeObserver = new MutationObserver(function(mutations) {
                            mutations.forEach(function(mutation) {
                                if ("disabled" === mutation.attributeName && parent[0].disabled) {
                                    setVisible(!1);
                                    scope.$digest();
                                }
                            });
                        });
                        attributeObserver.observe(parent[0], {
                            attributes: !0
                        });
                    }
                    // Store whether the element was focused when the window loses focus.
                    var windowBlurHandler = function() {
                        elementFocusedOnWindowBlur = document.activeElement === parent[0];
                    }, elementFocusedOnWindowBlur = !1;
                    ngWindow.on("blur", windowBlurHandler);
                    ngWindow.on("resize", debouncedOnResize);
                    document.addEventListener("scroll", windowScrollHandler, !0);
                    scope.$on("$destroy", function() {
                        ngWindow.off("blur", windowBlurHandler);
                        ngWindow.off("resize", debouncedOnResize);
                        document.removeEventListener("scroll", windowScrollHandler, !0);
                        attributeObserver && attributeObserver.disconnect();
                    });
                    var enterHandler = function(e) {
                        // Prevent the tooltip from showing when the window is receiving focus.
                        if ("focus" === e.type && elementFocusedOnWindowBlur) elementFocusedOnWindowBlur = !1; else {
                            parent.on("blur mouseleave touchend touchcancel", leaveHandler);
                            setVisible(!0);
                        }
                    }, leaveHandler = function() {
                        if ((scope.hasOwnProperty("autohide") ? scope.autohide : attr.hasOwnProperty("mdAutohide")) || mouseActive || $document[0].activeElement !== parent[0]) {
                            parent.off("blur mouseleave touchend touchcancel", leaveHandler);
                            parent.triggerHandler("blur");
                            setVisible(!1);
                        }
                        mouseActive = !1;
                    };
                    // to avoid `synthetic clicks` we listen to mousedown instead of `click`
                    parent.on("mousedown", function() {
                        mouseActive = !0;
                    });
                    parent.on("focus mouseenter touchstart", enterHandler);
                }();
                // Default origin transform point is 'center top'
                // positionTooltip() is always relative to center top
                updateContentOrigin();
                !function() {
                    scope.$on("$destroy", function() {
                        scope.visible = !1;
                        element.remove();
                        angular.element($window).off("resize", debouncedOnResize);
                    });
                    scope.$watch("visible", function(isVisible) {
                        isVisible ? showTooltip() : hideTooltip();
                    });
                    scope.$watch("direction", updatePosition);
                }();
                !function() {
                    parent.attr("aria-label") || parent.text().trim() || parent.attr("aria-label", element.text().trim());
                }();
            }
            var TOOLTIP_SHOW_DELAY = 0, TOOLTIP_WINDOW_EDGE_SPACE = 8;
            return {
                restrict: "E",
                transclude: !0,
                priority: 210,
                // Before ngAria
                template: '<div class="md-content" ng-transclude></div>',
                scope: {
                    delay: "=?mdDelay",
                    visible: "=?mdVisible",
                    autohide: "=?mdAutohide",
                    direction: "@?mdDirection"
                },
                link: postLink
            };
        }
        /**
 * @ngdoc module
 * @name material.components.tooltip
 */
        angular.module("material.components.tooltip", [ "material.core" ]).directive("mdTooltip", MdTooltipDirective);
        MdTooltipDirective.$inject = [ "$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdVirtualRepeatContainer
 * @module material.components.virtualRepeat
 * @restrict E
 * @description
 * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.
 *
 * Virtual repeat is a limited substitute for ng-repeat that renders only
 * enough dom nodes to fill the container and recycling them as the user scrolls.
 *
 * @usage
 * <hljs lang="html">
 *
 * <md-virtual-repeat-container md-top-index="topIndex">
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 * </hljs>
 *
 * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll
 *     container to $scope. It can both read and set the scroll position.
 * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally
 *     (defaults to orientation and scrolling vertically).
 * @param {boolean=} md-auto-shrink When present, the container will shrink to fit
 *     the number of items when that number is less than its original size.
 * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink
 *     will shrink to (default: 0).
 */
        function VirtualRepeatContainerDirective() {
            return {
                controller: VirtualRepeatContainerController,
                template: virtualRepeatContainerTemplate,
                compile: function($element, $attrs) {
                    $element.addClass("md-virtual-repeat-container").addClass($attrs.hasOwnProperty("mdOrientHorizontal") ? "md-orient-horizontal" : "md-orient-vertical");
                }
            };
        }
        function virtualRepeatContainerTemplate($element) {
            return '<div class="md-virtual-repeat-scroller"><div class="md-virtual-repeat-sizer"></div><div class="md-virtual-repeat-offsetter">' + $element[0].innerHTML + "</div></div>";
        }
        /** @ngInject */
        function VirtualRepeatContainerController($$rAF, $mdUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {
            this.$rootScope = $rootScope;
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            /** @type {number} The width or height of the container */
            this.size = 0;
            /** @type {number} The scroll width or height of the scroller */
            this.scrollSize = 0;
            /** @type {number} The scrollLeft or scrollTop of the scroller */
            this.scrollOffset = 0;
            /** @type {boolean} Whether the scroller is oriented horizontally */
            this.horizontal = this.$attrs.hasOwnProperty("mdOrientHorizontal");
            /** @type {!VirtualRepeatController} The repeater inside of this container */
            this.repeater = null;
            /** @type {boolean} Whether auto-shrink is enabled */
            this.autoShrink = this.$attrs.hasOwnProperty("mdAutoShrink");
            /** @type {number} Minimum number of items to auto-shrink to */
            this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;
            /** @type {?number} Original container size when shrank */
            this.originalSize = null;
            /** @type {number} Amount to offset the total scroll size by. */
            this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;
            /** @type {?string} height or width element style on the container prior to auto-shrinking. */
            this.oldElementSize = null;
            if (this.$attrs.mdTopIndex) {
                /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */
                this.bindTopIndex = $parse(this.$attrs.mdTopIndex);
                /** @type {number} The index of the item that is at the top of the scroll container */
                this.topIndex = this.bindTopIndex(this.$scope);
                if (!angular.isDefined(this.topIndex)) {
                    this.topIndex = 0;
                    this.bindTopIndex.assign(this.$scope, 0);
                }
                this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {
                    newIndex !== this.topIndex && this.scrollToIndex(newIndex);
                }));
            } else this.topIndex = 0;
            this.scroller = $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0];
            this.sizer = this.scroller.getElementsByClassName("md-virtual-repeat-sizer")[0];
            this.offsetter = this.scroller.getElementsByClassName("md-virtual-repeat-offsetter")[0];
            // After the dom stablizes, measure the initial size of the container and
            // make a best effort at re-measuring as it changes.
            var boundUpdateSize = angular.bind(this, this.updateSize);
            $$rAF(angular.bind(this, function() {
                boundUpdateSize();
                var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, !1), jWindow = angular.element($window);
                // Make one more attempt to get the size if it is 0.
                // This is not by any means a perfect approach, but there's really no
                // silver bullet here.
                this.size || debouncedUpdateSize();
                jWindow.on("resize", debouncedUpdateSize);
                $scope.$on("$destroy", function() {
                    jWindow.off("resize", debouncedUpdateSize);
                });
                $scope.$emit("$md-resize-enable");
                $scope.$on("$md-resize", boundUpdateSize);
            }));
        }
        /**
 * @ngdoc directive
 * @name mdVirtualRepeat
 * @module material.components.virtualRepeat
 * @restrict A
 * @priority 1000
 * @description
 * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.
 *
 * Virtual repeat is a limited substitute for ng-repeat that renders only
 * enough dom nodes to fill the container and recycling them as the user scrolls.
 * Arrays, but not objects are supported for iteration.
 * Track by, as alias, and (key, value) syntax are not supported.
 *
 * @usage
 * <hljs lang="html">
 * <md-virtual-repeat-container>
 *   <div md-virtual-repeat="i in items">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 *
 * <md-virtual-repeat-container md-orient-horizontal>
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
 * </md-virtual-repeat-container>
 * </hljs>
 *
 * @param {number=} md-item-size The height or width of the repeated elements (which must be
 *   identical for each element). Optional. Will attempt to read the size from the dom if missing,
 *   but still assumes that all repeated nodes have same height or width.
 * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item
 *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).
 * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object
 *   that can fetch rows rather than an array.
 *
 *   **NOTE:** This object must implement the following interface with two (2) methods:
 *
 *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet
 *     loaded (it should start downloading the item in that case).
 *   - `getLength: function() [number]` The data length to which the repeater container
 *     should be sized. Ideally, when the count is known, this method should return it.
 *     Otherwise, return a higher number than the currently loaded items to produce an
 *     infinite-scroll behavior.
 */
        function VirtualRepeatDirective($parse) {
            return {
                controller: VirtualRepeatController,
                priority: 1e3,
                require: [ "mdVirtualRepeat", "^^mdVirtualRepeatContainer" ],
                restrict: "A",
                terminal: !0,
                transclude: "element",
                compile: function($element, $attrs) {
                    var expression = $attrs.mdVirtualRepeat, match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/), repeatName = match[1], repeatListExpression = $parse(match[2]), extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);
                    return function($scope, $element, $attrs, ctrl, $transclude) {
                        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
                    };
                }
            };
        }
        /** @ngInject */
        function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope, $$rAF) {
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.$browser = $browser;
            this.$document = $document;
            this.$rootScope = $rootScope;
            this.$$rAF = $$rAF;
            /** @type {boolean} Whether we are in on-demand mode. */
            this.onDemand = $attrs.hasOwnProperty("mdOnDemand");
            /** @type {!Function} Backup reference to $browser.$$checkUrlChange */
            this.browserCheckUrlChange = $browser.$$checkUrlChange;
            /** @type {number} Most recent starting repeat index (based on scroll offset) */
            this.newStartIndex = 0;
            /** @type {number} Most recent ending repeat index (based on scroll offset) */
            this.newEndIndex = 0;
            /** @type {number} Most recent end visible index (based on scroll offset) */
            this.newVisibleEnd = 0;
            /** @type {number} Previous starting repeat index (based on scroll offset) */
            this.startIndex = 0;
            /** @type {number} Previous ending repeat index (based on scroll offset) */
            this.endIndex = 0;
            // TODO: measure width/height of first element from dom if not provided.
            // getComputedStyle?
            /** @type {?number} Height/width of repeated elements. */
            this.itemSize = $scope.$eval($attrs.mdItemSize) || null;
            /** @type {boolean} Whether this is the first time that items are rendered. */
            this.isFirstRender = !0;
            /**
   * @private {boolean} Whether the items in the list are already being updated. Used to prevent
   *     nested calls to virtualRepeatUpdate_.
   */
            this.isVirtualRepeatUpdating_ = !1;
            /** @type {number} Most recently seen length of items. */
            this.itemsLength = 0;
            /**
   * @type {!Function} Unwatch callback for item size (when md-items-size is
   *     not specified), or angular.noop otherwise.
   */
            this.unwatchItemSize_ = angular.noop;
            /**
   * Presently rendered blocks by repeat index.
   * @type {Object<number, !VirtualRepeatController.Block}
   */
            this.blocks = {};
            /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */
            this.pooledBlocks = [];
            $scope.$on("$destroy", angular.bind(this, this.cleanupBlocks_));
        }
        /**
 * This VirtualRepeatModelArrayLike class enforces the interface requirements
 * for infinite scrolling within a mdVirtualRepeatContainer. An object with this
 * interface must implement the following interface with two (2) methods:
 *
 * getItemAtIndex: function(index) -> item at that index or null if it is not yet
 *     loaded (It should start downloading the item in that case).
 *
 * getLength: function() -> number The data legnth to which the repeater container
 *     should be sized. Ideally, when the count is known, this method should return it.
 *     Otherwise, return a higher number than the currently loaded items to produce an
 *     infinite-scroll behavior.
 *
 * @usage
 * <hljs lang="html">
 *  <md-virtual-repeat-container md-orient-horizontal>
 *    <div md-virtual-repeat="i in items" md-on-demand>
 *      Hello {{i}}!
 *    </div>
 *  </md-virtual-repeat-container>
 * </hljs>
 *
 */
        function VirtualRepeatModelArrayLike(model) {
            if (!angular.isFunction(model.getItemAtIndex) || !angular.isFunction(model.getLength)) throw Error("When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement functions getItemAtIndex() and getLength() ");
            this.model = model;
        }
        /**
 * @ngdoc module
 * @name material.components.virtualRepeat
 */
        angular.module("material.components.virtualRepeat", [ "material.core", "material.components.showHide" ]).directive("mdVirtualRepeatContainer", VirtualRepeatContainerDirective).directive("mdVirtualRepeat", VirtualRepeatDirective);
        VirtualRepeatContainerController.$inject = [ "$$rAF", "$mdUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs" ];
        /** Called by the md-virtual-repeat inside of the container at startup. */
        VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {
            this.repeater = repeaterCtrl;
            angular.element(this.scroller).on("scroll wheel touchmove touchend", angular.bind(this, this.handleScroll_));
        };
        /** @return {boolean} Whether the container is configured for horizontal scrolling. */
        VirtualRepeatContainerController.prototype.isHorizontal = function() {
            return this.horizontal;
        };
        /** @return {number} The size (width or height) of the container. */
        VirtualRepeatContainerController.prototype.getSize = function() {
            return this.size;
        };
        /**
 * Resizes the container.
 * @private
 * @param {number} The new size to set.
 */
        VirtualRepeatContainerController.prototype.setSize_ = function(size) {
            var dimension = this.getDimensionName_();
            this.size = size;
            this.$element[0].style[dimension] = size + "px";
        };
        VirtualRepeatContainerController.prototype.unsetSize_ = function() {
            this.$element[0].style[this.getDimensionName_()] = this.oldElementSize;
            this.oldElementSize = null;
        };
        /** Instructs the container to re-measure its size. */
        VirtualRepeatContainerController.prototype.updateSize = function() {
            if (!this.originalSize) {
                this.size = this.isHorizontal() ? this.$element[0].clientWidth : this.$element[0].clientHeight;
                // Recheck the scroll position after updating the size. This resolves
                // problems that can result if the scroll position was measured while the
                // element was display: none or detached from the document.
                this.handleScroll_();
                this.repeater && this.repeater.containerUpdated();
            }
        };
        /** @return {number} The container's scrollHeight or scrollWidth. */
        VirtualRepeatContainerController.prototype.getScrollSize = function() {
            return this.scrollSize;
        };
        VirtualRepeatContainerController.prototype.getDimensionName_ = function() {
            return this.isHorizontal() ? "width" : "height";
        };
        /**
 * Sets the scroller element to the specified size.
 * @private
 * @param {number} size The new size.
 */
        VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {
            var dimension = this.getDimensionName_(), crossDimension = this.isHorizontal() ? "height" : "width";
            // Clear any existing dimensions.
            this.sizer.innerHTML = "";
            // If the size falls within the browser's maximum explicit size for a single element, we can
            // set the size and be done. Otherwise, we have to create children that add up the the desired
            // size.
            if (size < 1533917) this.sizer.style[dimension] = size + "px"; else {
                this.sizer.style[dimension] = "auto";
                this.sizer.style[crossDimension] = "auto";
                // Divide the total size we have to render into N max-size pieces.
                var numChildren = Math.floor(size / 1533917), sizerChild = document.createElement("div");
                sizerChild.style[dimension] = "1533917px";
                sizerChild.style[crossDimension] = "1px";
                for (var i = 0; i < numChildren; i++) this.sizer.appendChild(sizerChild.cloneNode(!1));
                // Re-use the element template for the remainder.
                sizerChild.style[dimension] = size - 1533917 * numChildren + "px";
                this.sizer.appendChild(sizerChild);
            }
        };
        /**
 * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.
 * @private
 * @param {number} size The new size.
 */
        VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {
            var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());
            if (this.autoShrink && shrinkSize !== this.size) {
                null === this.oldElementSize && (this.oldElementSize = this.$element[0].style[this.getDimensionName_()]);
                var currentSize = this.originalSize || this.size;
                if (!currentSize || shrinkSize < currentSize) {
                    this.originalSize || (this.originalSize = this.size);
                    this.setSize_(shrinkSize);
                } else if (null !== this.originalSize) {
                    this.unsetSize_();
                    this.originalSize = null;
                    this.updateSize();
                }
                this.repeater.containerUpdated();
            }
        };
        /**
 * Sets the scrollHeight or scrollWidth. Called by the repeater based on
 * its item count and item size.
 * @param {number} itemsSize The total size of the items.
 */
        VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {
            var size = itemsSize + this.offsetSize;
            if (this.scrollSize !== size) {
                this.sizeScroller_(size);
                this.autoShrink_(size);
                this.scrollSize = size;
            }
        };
        /** @return {number} The container's current scroll offset. */
        VirtualRepeatContainerController.prototype.getScrollOffset = function() {
            return this.scrollOffset;
        };
        /**
 * Scrolls to a given scrollTop position.
 * @param {number} position
 */
        VirtualRepeatContainerController.prototype.scrollTo = function(position) {
            this.scroller[this.isHorizontal() ? "scrollLeft" : "scrollTop"] = position;
            this.handleScroll_();
        };
        /**
 * Scrolls the item with the given index to the top of the scroll container.
 * @param {number} index
 */
        VirtualRepeatContainerController.prototype.scrollToIndex = function(index) {
            var itemSize = this.repeater.getItemSize(), itemsLength = this.repeater.itemsLength;
            index > itemsLength && (index = itemsLength - 1);
            this.scrollTo(itemSize * index);
        };
        VirtualRepeatContainerController.prototype.resetScroll = function() {
            this.scrollTo(0);
        };
        VirtualRepeatContainerController.prototype.handleScroll_ = function() {
            var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;
            if (!(offset === this.scrollOffset || offset > this.scrollSize - this.size)) {
                var itemSize = this.repeater.getItemSize();
                if (itemSize) {
                    var numItems = Math.max(0, Math.floor(offset / itemSize) - 3), transform = (this.isHorizontal() ? "translateX(" : "translateY(") + numItems * itemSize + "px)";
                    this.scrollOffset = offset;
                    this.offsetter.style.webkitTransform = transform;
                    this.offsetter.style.transform = transform;
                    if (this.bindTopIndex) {
                        var topIndex = Math.floor(offset / itemSize);
                        if (topIndex !== this.topIndex && topIndex < this.repeater.getItemCount()) {
                            this.topIndex = topIndex;
                            this.bindTopIndex.assign(this.$scope, topIndex);
                            this.$rootScope.$$phase || this.$scope.$digest();
                        }
                    }
                    this.repeater.containerUpdated();
                }
            }
        };
        VirtualRepeatDirective.$inject = [ "$parse" ];
        VirtualRepeatController.$inject = [ "$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF" ];
        /**
 * An object representing a repeated item.
 * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}
 */
        VirtualRepeatController.Block;
        /**
 * Called at startup by the md-virtual-repeat postLink function.
 * @param {!VirtualRepeatContainerController} container The container's controller.
 * @param {!Function} transclude The repeated element's bound transclude function.
 * @param {string} repeatName The left hand side of the repeat expression, indicating
 *     the name for each item in the array.
 * @param {!Function} repeatListExpression A compiled expression based on the right hand side
 *     of the repeat expression. Points to the array to repeat over.
 * @param {string|undefined} extraName The optional extra repeatName.
 */
        VirtualRepeatController.prototype.link_ = function(container, transclude, repeatName, repeatListExpression, extraName) {
            this.container = container;
            this.transclude = transclude;
            this.repeatName = repeatName;
            this.rawRepeatListExpression = repeatListExpression;
            this.extraName = extraName;
            this.sized = !1;
            this.repeatListExpression = angular.bind(this, this.repeatListExpression_);
            this.container.register(this);
        };
        /** @private Cleans up unused blocks. */
        VirtualRepeatController.prototype.cleanupBlocks_ = function() {
            angular.forEach(this.pooledBlocks, function(block) {
                block.element.remove();
            });
        };
        /** @private Attempts to set itemSize by measuring a repeated element in the dom */
        VirtualRepeatController.prototype.readItemSize_ = function() {
            if (!this.itemSize) {
                this.items = this.repeatListExpression(this.$scope);
                this.parentNode = this.$element[0].parentNode;
                var block = this.getBlock_(0);
                block.element[0].parentNode || this.parentNode.appendChild(block.element[0]);
                this.itemSize = block.element[0][this.container.isHorizontal() ? "offsetWidth" : "offsetHeight"] || null;
                this.blocks[0] = block;
                this.poolBlock_(0);
                this.itemSize && this.containerUpdated();
            }
        };
        /**
 * Returns the user-specified repeat list, transforming it into an array-like
 * object in the case of infinite scroll/dynamic load mode.
 * @param {!angular.Scope} The scope.
 * @return {!Array|!Object} An array or array-like object for iteration.
 */
        VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {
            var repeatList = this.rawRepeatListExpression(scope);
            if (this.onDemand && repeatList) {
                var virtualList = new VirtualRepeatModelArrayLike(repeatList);
                virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);
                return virtualList;
            }
            return repeatList;
        };
        /**
 * Called by the container. Informs us that the containers scroll or size has
 * changed.
 */
        VirtualRepeatController.prototype.containerUpdated = function() {
            // If itemSize is unknown, attempt to measure it.
            if (this.itemSize) {
                this.sized || (this.items = this.repeatListExpression(this.$scope));
                if (!this.sized) {
                    this.unwatchItemSize_();
                    this.sized = !0;
                    this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items, oldItems) {
                        this.isVirtualRepeatUpdating_ || this.virtualRepeatUpdate_(items, oldItems);
                    }));
                }
                this.updateIndexes_();
                if (this.newStartIndex !== this.startIndex || this.newEndIndex !== this.endIndex || this.container.getScrollOffset() > this.container.getScrollSize()) {
                    this.items instanceof VirtualRepeatModelArrayLike && this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);
                    this.virtualRepeatUpdate_(this.items, this.items);
                }
            } else {
                this.unwatchItemSize_ = this.$scope.$watchCollection(this.repeatListExpression, angular.bind(this, function(items) {
                    items && items.length && this.$$rAF(angular.bind(this, this.readItemSize_));
                }));
                this.$rootScope.$$phase || this.$scope.$digest();
            }
        };
        /**
 * Called by the container. Returns the size of a single repeated item.
 * @return {?number} Size of a repeated item.
 */
        VirtualRepeatController.prototype.getItemSize = function() {
            return this.itemSize;
        };
        /**
 * Called by the container. Returns the size of a single repeated item.
 * @return {?number} Size of a repeated item.
 */
        VirtualRepeatController.prototype.getItemCount = function() {
            return this.itemsLength;
        };
        /**
 * Updates the order and visible offset of repeated blocks in response to scrolling
 * or items updates.
 * @private
 */
        VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {
            this.isVirtualRepeatUpdating_ = !0;
            var itemsLength = items && items.length || 0, lengthChanged = !1;
            // If the number of items shrank, scroll up to the top.
            if (this.items && itemsLength < this.items.length && 0 !== this.container.getScrollOffset()) {
                this.items = items;
                this.container.resetScroll();
            } else {
                if (itemsLength !== this.itemsLength) {
                    lengthChanged = !0;
                    this.itemsLength = itemsLength;
                }
                this.items = items;
                (items !== oldItems || lengthChanged) && this.updateIndexes_();
                this.parentNode = this.$element[0].parentNode;
                lengthChanged && this.container.setScrollSize(itemsLength * this.itemSize);
                if (this.isFirstRender) {
                    this.isFirstRender = !1;
                    var startIndex = this.$attrs.mdStartIndex ? this.$scope.$eval(this.$attrs.mdStartIndex) : this.container.topIndex;
                    this.container.scrollToIndex(startIndex);
                }
                // Detach and pool any blocks that are no longer in the viewport.
                Object.keys(this.blocks).forEach(function(blockIndex) {
                    var index = parseInt(blockIndex, 10);
                    (index < this.newStartIndex || index >= this.newEndIndex) && this.poolBlock_(index);
                }, this);
                // Add needed blocks.
                // For performance reasons, temporarily block browser url checks as we digest
                // the restored block scopes ($$checkUrlChange reads window.location to
                // check for changes and trigger route change, etc, which we don't need when
                // trying to scroll at 60fps).
                this.$browser.$$checkUrlChange = angular.noop;
                var i, block, newStartBlocks = [], newEndBlocks = [];
                // Collect blocks at the top.
                for (i = this.newStartIndex; i < this.newEndIndex && null == this.blocks[i]; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newStartBlocks.push(block);
                }
                // Update blocks that are already rendered.
                for (;null != this.blocks[i]; i++) this.updateBlock_(this.blocks[i], i);
                // Collect blocks at the end.
                for (var maxIndex = i - 1; i < this.newEndIndex; i++) {
                    block = this.getBlock_(i);
                    this.updateBlock_(block, i);
                    newEndBlocks.push(block);
                }
                // Attach collected blocks to the document.
                newStartBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newStartBlocks), this.$element[0].nextSibling);
                newEndBlocks.length && this.parentNode.insertBefore(this.domFragmentFromBlocks_(newEndBlocks), this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
                // Restore $$checkUrlChange.
                this.$browser.$$checkUrlChange = this.browserCheckUrlChange;
                this.startIndex = this.newStartIndex;
                this.endIndex = this.newEndIndex;
                this.isVirtualRepeatUpdating_ = !1;
            }
        };
        /**
 * @param {number} index Where the block is to be in the repeated list.
 * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.
 * @private
 */
        VirtualRepeatController.prototype.getBlock_ = function(index) {
            if (this.pooledBlocks.length) return this.pooledBlocks.pop();
            var block;
            this.transclude(angular.bind(this, function(clone, scope) {
                block = {
                    element: clone,
                    new: !0,
                    scope: scope
                };
                this.updateScope_(scope, index);
                this.parentNode.appendChild(clone[0]);
            }));
            return block;
        };
        /**
 * Updates and if not in a digest cycle, digests the specified block's scope to the data
 * at the specified index.
 * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.
 * @param {number} index The index to set.
 * @private
 */
        VirtualRepeatController.prototype.updateBlock_ = function(block, index) {
            this.blocks[index] = block;
            if (block.new || block.scope.$index !== index || block.scope[this.repeatName] !== this.items[index]) {
                block.new = !1;
                // Update and digest the block's scope.
                this.updateScope_(block.scope, index);
                // Perform digest before reattaching the block.
                // Any resulting synchronous dom mutations should be much faster as a result.
                // This might break some directives, but I'm going to try it for now.
                this.$rootScope.$$phase || block.scope.$digest();
            }
        };
        /**
 * Updates scope to the data at the specified index.
 * @param {!angular.Scope} scope The scope which should be updated.
 * @param {number} index The index to set.
 * @private
 */
        VirtualRepeatController.prototype.updateScope_ = function(scope, index) {
            scope.$index = index;
            scope[this.repeatName] = this.items && this.items[index];
            this.extraName && (scope[this.extraName(this.$scope)] = this.items[index]);
        };
        /**
 * Pools the block at the specified index (Pulls its element out of the dom and stores it).
 * @param {number} index The index at which the block to pool is stored.
 * @private
 */
        VirtualRepeatController.prototype.poolBlock_ = function(index) {
            this.pooledBlocks.push(this.blocks[index]);
            this.parentNode.removeChild(this.blocks[index].element[0]);
            delete this.blocks[index];
        };
        /**
 * Produces a dom fragment containing the elements from the list of blocks.
 * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements
 *     should be added to the document fragment.
 * @return {DocumentFragment}
 * @private
 */
        VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {
            var fragment = this.$document[0].createDocumentFragment();
            blocks.forEach(function(block) {
                fragment.appendChild(block.element[0]);
            });
            return fragment;
        };
        /**
 * Updates start and end indexes based on length of repeated items and container size.
 * @private
 */
        VirtualRepeatController.prototype.updateIndexes_ = function() {
            var itemsLength = this.items ? this.items.length : 0, containerLength = Math.ceil(this.container.getSize() / this.itemSize);
            this.newStartIndex = Math.max(0, Math.min(itemsLength - containerLength, Math.floor(this.container.getScrollOffset() / this.itemSize)));
            this.newVisibleEnd = this.newStartIndex + containerLength + 3;
            this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);
            this.newStartIndex = Math.max(0, this.newStartIndex - 3);
        };
        VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {
            for (var i = start; i < end; i++) this.hasOwnProperty(i) || (this[i] = this.model.getItemAtIndex(i));
            this.length = this.model.getLength();
        };
    }();
    !function() {
        /**
 * @private
 * @ngdoc directive
 * @module material.components.whiteframe
 * @name mdWhiteframe
 * @restrict A
 *
 * @description
 * The md-whiteframe directive allows you to apply an elevation shadow to an element.
 *
 * The attribute values needs to be a number between 1 and 24.
 *
 * ### Notes
 * - If there is no value specified it defaults to 4dp.
 * - If the value is not valid it defaults to 4dp.

 * @usage
 * <hljs lang="html">
 * <div md-whiteframe="3">
 *   <span>Elevation of 3dp</span>
 * </div>
 * </hljs>
 */
        function MdWhiteframeDirective($log) {
            function postLink(scope, element, attr) {
                var elevation = parseInt(attr.mdWhiteframe, 10) || DEFAULT_DP;
                if (elevation > MAX_DP || elevation < MIN_DP) {
                    $log.warn("md-whiteframe attribute value is invalid. It should be a number between " + MIN_DP + " and " + MAX_DP, element[0]);
                    elevation = DEFAULT_DP;
                }
                element.addClass("md-whiteframe-" + elevation + "dp");
            }
            var MIN_DP = 1, MAX_DP = 24, DEFAULT_DP = 4;
            return {
                restrict: "A",
                link: postLink
            };
        }
        /**
 * @ngdoc module
 * @name material.components.whiteframe
 */
        angular.module("material.components.whiteframe", [ "material.core" ]).directive("mdWhiteframe", MdWhiteframeDirective);
        MdWhiteframeDirective.$inject = [ "$log" ];
    }();
    !function() {
        // Padding provided by `md-input-container`
        function MdAutocompleteCtrl($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window, $animate, $rootElement, $attrs, $q) {
            /**
   * Calculates the dropdown's position and applies the new styles to the menu element
   * @returns {*}
   */
            function positionDropdown() {
                /**
     * Makes sure that the menu doesn't go off of the screen on either side.
     */
                function correctHorizontalAlignment() {
                    var dropdown = elements.scrollContainer.getBoundingClientRect(), styles = {};
                    dropdown.right > root.right - MENU_PADDING && (styles.left = hrect.right - dropdown.width + "px");
                    elements.$.scrollContainer.css(styles);
                }
                if (!elements) return $mdUtil.nextTick(positionDropdown, !1, $scope);
                var styles, hrect = elements.wrap.getBoundingClientRect(), vrect = elements.snap.getBoundingClientRect(), root = elements.root.getBoundingClientRect(), top = vrect.bottom - root.top, bot = root.bottom - vrect.top, left = hrect.left - root.left, width = hrect.width, offset = /**
     * Calculates the vertical offset for floating label examples to account for ngMessages
     * @returns {number}
     */
                function() {
                    var offset = 0, inputContainer = $element.find("md-input-container");
                    if (inputContainer.length) {
                        var input = inputContainer.find("input");
                        offset = inputContainer.prop("offsetHeight");
                        offset -= input.prop("offsetTop");
                        offset -= input.prop("offsetHeight");
                        // add in the height left up top for the floating label text
                        offset += inputContainer.prop("offsetTop");
                    }
                    return offset;
                }();
                // Adjust the width to account for the padding provided by `md-input-container`
                if ($attrs.mdFloatingLabel) {
                    left += INPUT_PADDING;
                    width -= 2 * INPUT_PADDING;
                }
                styles = {
                    left: left + "px",
                    minWidth: width + "px",
                    maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + "px"
                };
                if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {
                    styles.top = "auto";
                    styles.bottom = bot + "px";
                    styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + "px";
                } else {
                    styles.top = top - offset + "px";
                    styles.bottom = "auto";
                    styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom + $mdUtil.scrollTop() - hrect.bottom - MENU_PADDING) + "px";
                }
                elements.$.scrollContainer.css(styles);
                $mdUtil.nextTick(correctHorizontalAlignment, !1);
            }
            /**
   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.
   */
            function moveDropdown() {
                if (elements.$.root.length) {
                    $mdTheming(elements.$.scrollContainer);
                    elements.$.scrollContainer.detach();
                    elements.$.root.append(elements.$.scrollContainer);
                    $animate.pin && $animate.pin(elements.$.scrollContainer, $rootElement);
                }
            }
            /**
   * Sends focus to the input element.
   */
            function focusElement() {
                $scope.autofocus && elements.input.focus();
            }
            /**
   * Sets up any watchers used by autocomplete
   */
            function configureWatchers() {
                var wait = parseInt($scope.delay, 10) || 0;
                $attrs.$observe("disabled", function(value) {
                    ctrl.isDisabled = $mdUtil.parseAttributeBoolean(value, !1);
                });
                $attrs.$observe("required", function(value) {
                    ctrl.isRequired = $mdUtil.parseAttributeBoolean(value, !1);
                });
                $attrs.$observe("readonly", function(value) {
                    ctrl.isReadonly = $mdUtil.parseAttributeBoolean(value, !1);
                });
                $scope.$watch("searchText", wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);
                $scope.$watch("selectedItem", selectedItemChange);
                angular.element($window).on("resize", positionDropdown);
                $scope.$on("$destroy", cleanup);
            }
            /**
   * Removes any events or leftover elements created by this controller
   */
            function cleanup() {
                ctrl.hidden || $mdUtil.enableScrolling();
                angular.element($window).off("resize", positionDropdown);
                if (elements) {
                    var items = "ul scroller scrollContainer input".split(" ");
                    angular.forEach(items, function(key) {
                        elements.$[key].remove();
                    });
                }
            }
            /**
   * Gathers all of the elements needed for this controller
   */
            function gatherElements() {
                elements = {
                    main: $element[0],
                    scrollContainer: $element[0].getElementsByClassName("md-virtual-repeat-container")[0],
                    scroller: $element[0].getElementsByClassName("md-virtual-repeat-scroller")[0],
                    ul: $element.find("ul")[0],
                    input: $element.find("input")[0],
                    wrap: $element.find("md-autocomplete-wrap")[0],
                    root: document.body
                };
                elements.li = elements.ul.getElementsByTagName("li");
                elements.snap = getSnapTarget();
                elements.$ = getAngularElements(elements);
            }
            /**
   * Finds the element that the menu will base its position on
   * @returns {*}
   */
            function getSnapTarget() {
                for (var element = $element; element.length; element = element.parent()) if (angular.isDefined(element.attr("md-autocomplete-snap"))) return element[0];
                return elements.wrap;
            }
            /**
   * Gathers angular-wrapped versions of each element
   * @param elements
   * @returns {{}}
   */
            function getAngularElements(elements) {
                var obj = {};
                for (var key in elements) elements.hasOwnProperty(key) && (obj[key] = angular.element(elements[key]));
                return obj;
            }
            //-- event/change handlers
            /**
   * Handles changes to the `hidden` property.
   * @param hidden
   * @param oldHidden
   */
            function handleHiddenChange(hidden, oldHidden) {
                if (!hidden && oldHidden) {
                    positionDropdown();
                    elements && $mdUtil.nextTick(function() {
                        $mdUtil.disableScrollAround(elements.ul);
                    }, !1, $scope);
                } else hidden && !oldHidden && $mdUtil.nextTick(function() {
                    $mdUtil.enableScrolling();
                }, !1, $scope);
            }
            /**
   * When the user mouses over the dropdown menu, ignore blur events.
   */
            function onListEnter() {
                noBlur = !0;
            }
            /**
   * When the user's mouse leaves the menu, blur events may hide the menu again.
   */
            function onListLeave() {
                hasFocus || elements.input.focus();
                noBlur = !1;
                ctrl.hidden = shouldHide();
            }
            /**
   * When the mouse button is released, send focus back to the input field.
   */
            function onMouseup() {
                elements.input.focus();
            }
            /**
   * Handles changes to the selected item.
   * @param selectedItem
   * @param previousSelectedItem
   */
            function selectedItemChange(selectedItem, previousSelectedItem) {
                selectedItem && getDisplayValue(selectedItem).then(function(val) {
                    $scope.searchText = val;
                    handleSelectedItemChange(selectedItem, previousSelectedItem);
                });
                selectedItem !== previousSelectedItem && announceItemChange();
            }
            /**
   * Use the user-defined expression to announce changes each time a new item is selected
   */
            function announceItemChange() {
                angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));
            }
            /**
   * Use the user-defined expression to announce changes each time the search text is changed
   */
            function announceTextChange() {
                angular.isFunction($scope.textChange) && $scope.textChange();
            }
            /**
   * Calls any external watchers listening for the selected item.  Used in conjunction with
   * `registerSelectedItemWatcher`.
   * @param selectedItem
   * @param previousSelectedItem
   */
            function handleSelectedItemChange(selectedItem, previousSelectedItem) {
                selectedItemWatchers.forEach(function(watcher) {
                    watcher(selectedItem, previousSelectedItem);
                });
            }
            /**
   * Register a function to be called when the selected item changes.
   * @param cb
   */
            function registerSelectedItemWatcher(cb) {
                -1 == selectedItemWatchers.indexOf(cb) && selectedItemWatchers.push(cb);
            }
            /**
   * Unregister a function previously registered for selected item changes.
   * @param cb
   */
            function unregisterSelectedItemWatcher(cb) {
                var i = selectedItemWatchers.indexOf(cb);
                -1 != i && selectedItemWatchers.splice(i, 1);
            }
            /**
   * Handles changes to the searchText property.
   * @param searchText
   * @param previousSearchText
   */
            function handleSearchText(searchText, previousSearchText) {
                ctrl.index = getDefaultIndex();
                // do nothing on init
                searchText !== previousSearchText && getDisplayValue($scope.selectedItem).then(function(val) {
                    // clear selected item if search text no longer matches it
                    if (searchText !== val) {
                        $scope.selectedItem = null;
                        // trigger change event if available
                        searchText !== previousSearchText && announceTextChange();
                        // cancel results if search text is not long enough
                        if (isMinLengthMet()) handleQuery(); else {
                            ctrl.matches = [];
                            setLoading(!1);
                            updateMessages();
                        }
                    }
                });
            }
            /**
   * Handles input blur event, determines if the dropdown should hide.
   */
            function blur() {
                hasFocus = !1;
                noBlur || (ctrl.hidden = shouldHide());
            }
            /**
   * Force blur on input element
   * @param forceBlur
   */
            function doBlur(forceBlur) {
                if (forceBlur) {
                    noBlur = !1;
                    hasFocus = !1;
                }
                elements.input.blur();
            }
            /**
   * Handles input focus event, determines if the dropdown should show.
   */
            function focus() {
                hasFocus = !0;
                //-- if searchText is null, let's force it to be a string
                angular.isString($scope.searchText) || ($scope.searchText = "");
                ctrl.hidden = shouldHide();
                ctrl.hidden || handleQuery();
            }
            /**
   * Handles keyboard input.
   * @param event
   */
            function keydown(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.DOWN_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = Math.min(ctrl.index + 1, ctrl.matches.length - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.UP_ARROW:
                    if (ctrl.loading) return;
                    event.stopPropagation();
                    event.preventDefault();
                    ctrl.index = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);
                    updateScroll();
                    updateMessages();
                    break;

                  case $mdConstant.KEY_CODE.TAB:
                    // If we hit tab, assume that we've left the list so it will close
                    onListLeave();
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ENTER:
                    if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                    if (hasSelection()) return;
                    event.stopPropagation();
                    event.preventDefault();
                    select(ctrl.index);
                    break;

                  case $mdConstant.KEY_CODE.ESCAPE:
                    event.stopPropagation();
                    event.preventDefault();
                    clearValue();
                    // Force the component to blur if they hit escape
                    doBlur(!0);
                }
            }
            //-- getters
            /**
   * Returns the minimum length needed to display the dropdown.
   * @returns {*}
   */
            function getMinLength() {
                return angular.isNumber($scope.minLength) ? $scope.minLength : 1;
            }
            /**
   * Returns the display value for an item.
   * @param item
   * @returns {*}
   */
            function getDisplayValue(item) {
                /**
     * Getter function to invoke user-defined expression (in the directive)
     * to convert your object to a single string.
     */
                return $q.when(function(item) {
                    return item && $scope.itemText ? $scope.itemText(getItemAsNameVal(item)) : null;
                }(item) || item);
            }
            /**
   * Returns the locals object for compiling item templates.
   * @param item
   * @returns {{}}
   */
            function getItemAsNameVal(item) {
                if (!item) return undefined;
                var locals = {};
                ctrl.itemName && (locals[ctrl.itemName] = item);
                return locals;
            }
            /**
   * Returns the default index based on whether or not autoselect is enabled.
   * @returns {number}
   */
            function getDefaultIndex() {
                return $scope.autoselect ? 0 : -1;
            }
            /**
   * Sets the loading parameter and updates the hidden state.
   * @param value {boolean} Whether or not the component is currently loading.
   */
            function setLoading(value) {
                ctrl.loading != value && (ctrl.loading = value);
                // Always refresh the hidden variable as something else might have changed
                ctrl.hidden = shouldHide();
            }
            /**
   * Determines if the menu should be hidden.
   * @returns {boolean}
   */
            function shouldHide() {
                return !(!ctrl.loading || hasMatches()) || (!!hasSelection() || (!hasFocus || !shouldShow()));
            }
            /**
   * Determines if the menu should be shown.
   * @returns {boolean}
   */
            function shouldShow() {
                return isMinLengthMet() && hasMatches() || notFoundVisible();
            }
            /**
   * Returns true if the search text has matches.
   * @returns {boolean}
   */
            function hasMatches() {
                return !!ctrl.matches.length;
            }
            /**
   * Returns true if the autocomplete has a valid selection.
   * @returns {boolean}
   */
            function hasSelection() {
                return !!ctrl.scope.selectedItem;
            }
            /**
   * Returns true if the loading indicator is, or should be, visible.
   * @returns {boolean}
   */
            function loadingIsVisible() {
                return ctrl.loading && !hasSelection();
            }
            /**
   * Returns the display value of the current item.
   * @returns {*}
   */
            function getCurrentDisplayValue() {
                return getDisplayValue(ctrl.matches[ctrl.index]);
            }
            /**
   * Determines if the minimum length is met by the search text.
   * @returns {*}
   */
            function isMinLengthMet() {
                return ($scope.searchText || "").length >= getMinLength();
            }
            /**
   * Selects the item at the given index.
   * @param index
   */
            function select(index) {
                //-- force form to update state for validation
                $mdUtil.nextTick(function() {
                    getDisplayValue(ctrl.matches[index]).then(function(val) {
                        var ngModel = elements.$.input.controller("ngModel");
                        ngModel.$setViewValue(val);
                        ngModel.$render();
                    }).finally(function() {
                        $scope.selectedItem = ctrl.matches[index];
                        setLoading(!1);
                    });
                }, !1);
            }
            /**
   * Clears the searchText value and selected item.
   */
            function clearValue() {
                // Set the loading to true so we don't see flashes of content.
                // The flashing will only occour when an async request is running.
                // So the loading process will stop when the results had been retrieved.
                setLoading(!0);
                // Reset our variables
                ctrl.index = 0;
                ctrl.matches = [];
                $scope.searchText = "";
                // Per http://www.w3schools.com/jsref/event_oninput.asp
                var eventObj = document.createEvent("CustomEvent");
                eventObj.initCustomEvent("input", !0, !0, {
                    value: $scope.searchText
                });
                elements.input.dispatchEvent(eventObj);
                elements.input.focus();
            }
            /**
   * Fetches the results for the provided search text.
   * @param searchText
   */
            function fetchResults(searchText) {
                function handleResults(matches) {
                    cache[term] = matches;
                    if ((searchText || "") === ($scope.searchText || "")) {
                        //-- just cache the results if old request
                        ctrl.matches = matches;
                        ctrl.hidden = shouldHide();
                        // If loading is in progress, then we'll end the progress. This is needed for example,
                        // when the `clear` button was clicked, because there we always show the loading process, to prevent flashing.
                        ctrl.loading && setLoading(!1);
                        $scope.selectOnMatch && selectItemOnMatch();
                        updateMessages();
                        positionDropdown();
                    }
                }
                var items = $scope.$parent.$eval(itemExpr), term = searchText.toLowerCase(), isList = angular.isArray(items), isPromise = !!items.then;
                // Every promise should contain a `then` property
                isList ? handleResults(items) : isPromise && function(items) {
                    if (items) {
                        items = $q.when(items);
                        fetchesInProgress++;
                        setLoading(!0);
                        $mdUtil.nextTick(function() {
                            items.then(handleResults).finally(function() {
                                0 == --fetchesInProgress && setLoading(!1);
                            });
                        }, !0, $scope);
                    }
                }(items);
            }
            /**
   * Updates the ARIA messages
   */
            function updateMessages() {
                getCurrentDisplayValue().then(function(msg) {
                    ctrl.messages = [ getCountMessage(), msg ];
                });
            }
            /**
   * Returns the ARIA message for how many results match the current query.
   * @returns {*}
   */
            function getCountMessage() {
                if (lastCount === ctrl.matches.length) return "";
                lastCount = ctrl.matches.length;
                switch (ctrl.matches.length) {
                  case 0:
                    return "There are no matches available.";

                  case 1:
                    return "There is 1 match available.";

                  default:
                    return "There are " + ctrl.matches.length + " matches available.";
                }
            }
            /**
   * Makes sure that the focused element is within view.
   */
            function updateScroll() {
                if (elements.li[0]) {
                    var height = elements.li[0].offsetHeight, top = height * ctrl.index, bot = top + height, hgt = elements.scroller.clientHeight, scrollTop = elements.scroller.scrollTop;
                    top < scrollTop ? scrollTo(top) : bot > scrollTop + hgt && scrollTo(bot - hgt);
                }
            }
            function isPromiseFetching() {
                return 0 !== fetchesInProgress;
            }
            function scrollTo(offset) {
                elements.$.scrollContainer.controller("mdVirtualRepeatContainer").scrollTo(offset);
            }
            function notFoundVisible() {
                var textLength = (ctrl.scope.searchText || "").length;
                return ctrl.hasNotFound && !hasMatches() && (!ctrl.loading || isPromiseFetching()) && textLength >= getMinLength() && (hasFocus || noBlur) && !hasSelection();
            }
            /**
   * Starts the query to gather the results for the current searchText.  Attempts to return cached
   * results first, then forwards the process to `fetchResults` if necessary.
   */
            function handleQuery() {
                var searchText = $scope.searchText || "", term = searchText.toLowerCase();
                //-- if results are cached, pull in cached results
                if (!$scope.noCache && cache[term]) {
                    ctrl.matches = cache[term];
                    updateMessages();
                } else fetchResults(searchText);
                ctrl.hidden = shouldHide();
            }
            /**
   * If there is only one matching item and the search text matches its display value exactly,
   * automatically select that item.  Note: This function is only called if the user uses the
   * `md-select-on-match` flag.
   */
            function selectItemOnMatch() {
                var searchText = $scope.searchText, matches = ctrl.matches, item = matches[0];
                1 === matches.length && getDisplayValue(item).then(function(displayValue) {
                    var isMatching = searchText == displayValue;
                    $scope.matchInsensitive && !isMatching && (isMatching = searchText.toLowerCase() == displayValue.toLowerCase());
                    isMatching && select(0);
                });
            }
            //-- private variables
            var ctrl = this, itemParts = $scope.itemsExpr.split(/ in /i), itemExpr = itemParts[1], elements = null, cache = {}, noBlur = !1, selectedItemWatchers = [], hasFocus = !1, lastCount = 0, fetchesInProgress = 0;
            //-- public variables with handlers
            !//-- actions
            /**
   * Defines a public property with a handler and a default value.
   * @param key
   * @param handler
   * @param value
   */
            function(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler(newValue, oldValue);
                    }
                });
            }("hidden", handleHiddenChange, !0);
            //-- public variables
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.itemName = itemParts[0];
            ctrl.matches = [];
            ctrl.loading = !1;
            ctrl.hidden = !0;
            ctrl.index = null;
            ctrl.messages = [];
            ctrl.id = $mdUtil.nextUid();
            ctrl.isDisabled = null;
            ctrl.isRequired = null;
            ctrl.isReadonly = null;
            ctrl.hasNotFound = !1;
            //-- public methods
            ctrl.keydown = keydown;
            ctrl.blur = blur;
            ctrl.focus = focus;
            ctrl.clear = clearValue;
            ctrl.select = select;
            ctrl.listEnter = onListEnter;
            ctrl.listLeave = onListLeave;
            ctrl.mouseUp = onMouseup;
            ctrl.getCurrentDisplayValue = getCurrentDisplayValue;
            ctrl.registerSelectedItemWatcher = registerSelectedItemWatcher;
            ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;
            ctrl.notFoundVisible = notFoundVisible;
            ctrl.loadingIsVisible = loadingIsVisible;
            //-- initialization methods
            /**
   * Initialize the controller, setup watchers, gather elements
   */
            return function() {
                $mdUtil.initOptionalProperties($scope, $attrs, {
                    searchText: null,
                    selectedItem: null
                });
                $mdTheming($element);
                configureWatchers();
                $mdUtil.nextTick(function() {
                    gatherElements();
                    moveDropdown();
                    focusElement();
                    $element.on("focus", focusElement);
                });
            }();
        }
        angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl", MdAutocompleteCtrl);
        var MAX_HEIGHT = 225.5, MENU_PADDING = 8, INPUT_PADDING = 2;
        MdAutocompleteCtrl.$inject = [ "$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdAutocomplete
 * @module material.components.autocomplete
 *
 * @description
 * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a
 *     custom query. This component allows you to provide real-time suggestions as the user types
 *     in the input area.
 *
 * To start, you will need to specify the required parameters and provide a template for your
 *     results. The content inside `md-autocomplete` will be treated as a template.
 *
 * In more complex cases, you may want to include other content such as a message to display when
 *     no matches were found.  You can do this by wrapping your template in `md-item-template` and
 *     adding a tag for `md-not-found`.  An example of this is shown below.
 *
 * ### Validation
 *
 * You can use `ng-messages` to include validation the same way that you would normally validate;
 *     however, if you want to replicate a standard input with a floating label, you will have to
 *     do the following:
 *
 * - Make sure that your template is wrapped in `md-item-template`
 * - Add your `ng-messages` code inside of `md-autocomplete`
 * - Add your validation properties to `md-autocomplete` (ie. `required`)
 * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)
 *
 * There is an example below of how this should look.
 *
 *
 * @param {expression} md-items An expression in the format of `item in items` to iterate over
 *     matches for your search.
 * @param {expression=} md-selected-item-change An expression to be run each time a new item is
 *     selected
 * @param {expression=} md-search-text-change An expression to be run each time the search text
 *     updates
 * @param {expression=} md-search-text A model to bind the search query text to
 * @param {object=} md-selected-item A model to bind the selected item to
 * @param {expression=} md-item-text An expression that will convert your object to a single string.
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.
 * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete
 * @param {boolean=} ng-disabled Determines whether or not to disable the input field
 * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will
 *     make suggestions
 * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking
 *     for results
 * @param {boolean=} md-autofocus If true, the autocomplete will be automatically focused when a `$mdDialog`,
 *     `$mdBottomsheet` or `$mdSidenav`, which contains the autocomplete, is opening. <br/><br/>
 *     Also the autocomplete will immediately focus the input element.
 * @param {boolean=} md-no-asterisk When present, asterisk will not be appended to the floating label
 * @param {boolean=} md-autoselect If true, the first item will be selected by default
 * @param {string=} md-menu-class This will be applied to the dropdown menu for styling
 * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in
 *     `md-input-container`
 * @param {string=} md-input-name The name attribute given to the input element to be used with
 *     FormController
 * @param {string=} md-select-on-focus When present the inputs text will be automatically selected
 *     on focus.
 * @param {string=} md-input-id An ID to be added to the input element
 * @param {number=} md-input-minlength The minimum length for the input's value for validation
 * @param {number=} md-input-maxlength The maximum length for the input's value for validation
 * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact
 *     the item if the search text is an exact match
 * @param {boolean=} md-match-case-insensitive When set and using `md-select-on-match`, autocomplete
 *     will select on case-insensitive match
 *
 * @usage
 * ### Basic Example
 * <hljs lang="html">
 *   <md-autocomplete
 *       md-selected-item="selectedItem"
 *       md-search-text="searchText"
 *       md-items="item in getMatches(searchText)"
 *       md-item-text="item.display">
 *     <span md-highlight-text="searchText">{{item.display}}</span>
 *   </md-autocomplete>
 * </hljs>
 *
 * ### Example with "not found" message
 * <hljs lang="html">
 * <md-autocomplete
 *     md-selected-item="selectedItem"
 *     md-search-text="searchText"
 *     md-items="item in getMatches(searchText)"
 *     md-item-text="item.display">
 *   <md-item-template>
 *     <span md-highlight-text="searchText">{{item.display}}</span>
 *   </md-item-template>
 *   <md-not-found>
 *     No matches found.
 *   </md-not-found>
 * </md-autocomplete>
 * </hljs>
 *
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
 *     different parts that make up our component.
 *
 * ### Example with validation
 * <hljs lang="html">
 * <form name="autocompleteForm">
 *   <md-autocomplete
 *       required
 *       md-input-name="autocomplete"
 *       md-selected-item="selectedItem"
 *       md-search-text="searchText"
 *       md-items="item in getMatches(searchText)"
 *       md-item-text="item.display">
 *     <md-item-template>
 *       <span md-highlight-text="searchText">{{item.display}}</span>
 *     </md-item-template>
 *     <div ng-messages="autocompleteForm.autocomplete.$error">
 *       <div ng-message="required">This field is required</div>
 *     </div>
 *   </md-autocomplete>
 * </form>
 * </hljs>
 *
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
 *     different parts that make up our component.
 */
        function MdAutocomplete() {
            return {
                controller: "MdAutocompleteCtrl",
                controllerAs: "$mdAutocompleteCtrl",
                scope: {
                    inputName: "@mdInputName",
                    inputMinlength: "@mdInputMinlength",
                    inputMaxlength: "@mdInputMaxlength",
                    searchText: "=?mdSearchText",
                    selectedItem: "=?mdSelectedItem",
                    itemsExpr: "@mdItems",
                    itemText: "&mdItemText",
                    placeholder: "@placeholder",
                    noCache: "=?mdNoCache",
                    selectOnMatch: "=?mdSelectOnMatch",
                    matchInsensitive: "=?mdMatchCaseInsensitive",
                    itemChange: "&?mdSelectedItemChange",
                    textChange: "&?mdSearchTextChange",
                    minLength: "=?mdMinLength",
                    delay: "=?mdDelay",
                    autofocus: "=?mdAutofocus",
                    floatingLabel: "@?mdFloatingLabel",
                    autoselect: "=?mdAutoselect",
                    menuClass: "@?mdMenuClass",
                    inputId: "@?mdInputId"
                },
                link: function(scope, element, attrs, controller) {
                    // Retrieve the state of using a md-not-found template by using our attribute, which will
                    // be added to the element in the template function.
                    controller.hasNotFound = !!element.attr("md-has-not-found");
                },
                template: function(element, attr) {
                    var noItemsTemplate = function() {
                        var templateTag = element.find("md-not-found").detach(), template = templateTag.length ? templateTag.html() : "";
                        return template ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"                         md-autocomplete-parent-scope>' + template + "</li>" : "";
                    }(), itemTemplate = function() {
                        var templateTag = element.find("md-item-template").detach(), html = templateTag.length ? templateTag.html() : element.html();
                        templateTag.length || element.empty();
                        return "<md-autocomplete-parent-scope md-autocomplete-replace>" + html + "</md-autocomplete-parent-scope>";
                    }(), leftover = element.html(), tabindex = attr.tabindex;
                    // Set our attribute for the link function above which runs later.
                    // We will set an attribute, because otherwise the stored variables will be trashed when
                    // removing the element is hidden while retrieving the template. For example when using ngIf.
                    noItemsTemplate && element.attr("md-has-not-found", !0);
                    // Always set our tabindex of the autocomplete directive to -1, because our input
                    // will hold the actual tabindex.
                    element.attr("tabindex", "-1");
                    return '        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"            role="listbox">          ' + function() {
                        return attr.mdFloatingLabel ? '            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="$mdAutocompleteCtrl.isRequired"                  ng-readonly="$mdAutocompleteCtrl.isReadonly"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ' + (null != attr.mdNoAsterisk ? 'md-no-asterisk="' + attr.mdNoAsterisk + '"' : "") + '                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  ' + (null != attr.mdSelectOnFocus ? 'md-select-on-focus=""' : "") + '                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + "</div>            </md-input-container>" : '            <input flex type="search"                ' + (null != tabindex ? 'tabindex="' + tabindex + '"' : "") + '                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="$mdAutocompleteCtrl.isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-readonly="$mdAutocompleteCtrl.isReadonly"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                ' + (null != attr.mdSelectOnFocus ? 'md-select-on-focus=""' : "") + '                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                ';
                    }() + '          <md-progress-linear              class="' + (attr.mdFloatingLabel ? "md-inline" : "") + '"              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"              md-mode="indeterminate"></md-progress-linear>          <md-virtual-repeat-container              md-auto-shrink              md-auto-shrink-min="1"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"              ng-hide="$mdAutocompleteCtrl.hidden"              class="md-autocomplete-suggestions-container md-whiteframe-z1"              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"              role="presentation">            <ul class="md-autocomplete-suggestions"                ng-class="::menuClass"                id="ul-{{$mdAutocompleteCtrl.id}}">              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"                  ng-click="$mdAutocompleteCtrl.select($index)"                  md-extra-name="$mdAutocompleteCtrl.itemName">                  ' + itemTemplate + "                  </li>" + noItemsTemplate + '            </ul>          </md-virtual-repeat-container>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>        </aria-status>';
                }
            };
        }
        angular.module("material.components.autocomplete").directive("mdAutocomplete", MdAutocomplete);
    }();
    !function() {
        function MdAutocompleteItemScopeDirective($compile, $mdUtil) {
            function compile(tElement, tAttr, transclude) {
                return function(scope, element, attr) {
                    /**
       * Creates a watcher for variables that are copied from the parent scope
       * @param variable
       * @param alias
       */
                    function watchVariable(variable, alias) {
                        newScope[alias] = scope[variable];
                        scope.$watch(variable, function(value) {
                            $mdUtil.nextTick(function() {
                                newScope[alias] = value;
                            });
                        });
                    }
                    var ctrl = scope.$mdAutocompleteCtrl, newScope = ctrl.parent.$new(), itemName = ctrl.itemName;
                    // Watch for changes to our scope's variables and copy them to the new scope
                    watchVariable("$index", "$index");
                    watchVariable("item", itemName);
                    // Ensure that $digest calls on our scope trigger $digest on newScope.
                    !/**
       * Creates watchers on scope and newScope that ensure that for any
       * $digest of scope, newScope is also $digested.
       */
                    function() {
                        var scopeDigesting = !1, newScopeDigesting = !1;
                        scope.$watch(function() {
                            if (!newScopeDigesting && !scopeDigesting) {
                                scopeDigesting = !0;
                                scope.$$postDigest(function() {
                                    newScopeDigesting || newScope.$digest();
                                    scopeDigesting = newScopeDigesting = !1;
                                });
                            }
                        });
                        newScope.$watch(function() {
                            newScopeDigesting = !0;
                        });
                    }();
                    // Link the element against newScope.
                    transclude(newScope, function(clone) {
                        element.after(clone);
                    });
                };
            }
            return {
                restrict: "AE",
                compile: compile,
                terminal: !0,
                transclude: "element"
            };
        }
        angular.module("material.components.autocomplete").directive("mdAutocompleteParentScope", MdAutocompleteItemScopeDirective);
        MdAutocompleteItemScopeDirective.$inject = [ "$compile", "$mdUtil" ];
    }();
    !function() {
        function MdHighlightCtrl($scope, $element, $attrs) {
            function init(termExpr, unsafeTextExpr) {
                var text = null, regex = null, flags = $attrs.mdHighlightFlags || "", watcher = $scope.$watch(function($scope) {
                    return {
                        term: termExpr($scope),
                        unsafeText: unsafeTextExpr($scope)
                    };
                }, function(state, prevState) {
                    null !== text && state.unsafeText === prevState.unsafeText || (text = angular.element("<div>").text(state.unsafeText).html());
                    null !== regex && state.term === prevState.term || (regex = getRegExp(state.term, flags));
                    $element.html(text.replace(regex, '<span class="highlight">$&</span>'));
                }, !0);
                $element.on("$destroy", watcher);
            }
            function sanitize(term) {
                return term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, "\\$&");
            }
            function getRegExp(text, flags) {
                var str = "";
                flags.indexOf("^") >= 1 && (str += "^");
                str += text;
                flags.indexOf("$") >= 1 && (str += "$");
                return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ""));
            }
            this.init = init;
        }
        angular.module("material.components.autocomplete").controller("MdHighlightCtrl", MdHighlightCtrl);
        MdHighlightCtrl.$inject = [ "$scope", "$element", "$attrs" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdHighlightText
 * @module material.components.autocomplete
 *
 * @description
 * The `md-highlight-text` directive allows you to specify text that should be highlighted within
 *     an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can
 *     be styled through CSS.  Please note that child elements may not be used with this directive.
 *
 * @param {string} md-highlight-text A model to be searched for
 * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).
 * #### **Supported flags**:
 * - `g`: Find all matches within the provided text
 * - `i`: Ignore case when searching for matches
 * - `$`: Only match if the text ends with the search term
 * - `^`: Only match if the text begins with the search term
 *
 * @usage
 * <hljs lang="html">
 * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />
 * <ul>
 *   <li ng-repeat="result in results" md-highlight-text="searchTerm">
 *     {{result.text}}
 *   </li>
 * </ul>
 * </hljs>
 */
        function MdHighlight($interpolate, $parse) {
            return {
                terminal: !0,
                controller: "MdHighlightCtrl",
                compile: function(tElement, tAttr) {
                    var termExpr = $parse(tAttr.mdHighlightText), unsafeTextExpr = $interpolate(tElement.html());
                    return function(scope, element, attr, ctrl) {
                        ctrl.init(termExpr, unsafeTextExpr);
                    };
                }
            };
        }
        angular.module("material.components.autocomplete").directive("mdHighlightText", MdHighlight);
        MdHighlight.$inject = [ "$interpolate", "$parse" ];
    }();
    !function() {
        /**
 * MDChip Directive Definition
 *
 * @param $mdTheming
 * @param $mdInkRipple
 * @ngInject
 */
        function MdChip($mdTheming, $mdUtil) {
            function compile(element, attr) {
                // Append the delete template
                element.append($mdUtil.processTemplate(hintTemplate));
                return function(scope, element, attr, ctrl) {
                    element.addClass("md-chip");
                    $mdTheming(element);
                    ctrl && angular.element(element[0].querySelector(".md-chip-content")).on("blur", function() {
                        ctrl.resetSelectedChip();
                        ctrl.$scope.$applyAsync();
                    });
                };
            }
            var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);
            return {
                restrict: "E",
                require: "^?mdChips",
                compile: compile
            };
        }
        angular.module("material.components.chips").directive("mdChip", MdChip);
        /**
 * @ngdoc directive
 * @name mdChip
 * @module material.components.chips
 *
 * @description
 * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual
 * chips.
 *
 *
 * @usage
 * <hljs lang="html">
 *   <md-chip>{{$chip}}</md-chip>
 * </hljs>
 *
 */
        // This hint text is hidden within a chip but used by screen readers to
        // inform the user how they can interact with a chip.
        var DELETE_HINT_TEMPLATE = '    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';
        MdChip.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdChipRemove
 * @module material.components.chips
 *
 * @description
 * `<md-chip-remove>`
 * Designates an element to be used as the delete button for a chip. This
 * element is passed as a child of the `md-chips` element.
 *
 * @usage
 * <hljs lang="html">
 *   <md-chips><button md-chip-remove>DEL</button></md-chips>
 * </hljs>
 */
        /**
 * MdChipRemove Directive Definition.
 * 
 * @param $compile
 * @param $timeout
 * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}
 * @constructor
 */
        function MdChipRemove($timeout) {
            function postLink(scope, element, attr, ctrl) {
                element.on("click", function(event) {
                    scope.$apply(function() {
                        ctrl.removeChip(scope.$$replacedScope.$index);
                    });
                });
                // Child elements aren't available until after a $timeout tick as they are hidden by an
                // `ng-if`. see http://goo.gl/zIWfuw
                $timeout(function() {
                    element.attr({
                        tabindex: -1,
                        "aria-hidden": !0
                    });
                    element.find("button").attr("tabindex", "-1");
                });
            }
            return {
                restrict: "A",
                require: "^mdChips",
                scope: !1,
                link: postLink
            };
        }
        angular.module("material.components.chips").directive("mdChipRemove", MdChipRemove);
        MdChipRemove.$inject = [ "$timeout" ];
    }();
    !function() {
        function MdChipTransclude($compile) {
            function link(scope, element, attr) {
                var ctrl = scope.$parent.$mdChipsCtrl, newScope = ctrl.parent.$new(!1, ctrl.parent);
                newScope.$$replacedScope = scope;
                newScope.$chip = scope.$chip;
                newScope.$index = scope.$index;
                newScope.$mdChipsCtrl = ctrl;
                var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);
                element.html(newHtml);
                $compile(element.contents())(newScope);
            }
            return {
                restrict: "EA",
                terminal: !0,
                link: link,
                scope: !1
            };
        }
        angular.module("material.components.chips").directive("mdChipTransclude", MdChipTransclude);
        MdChipTransclude.$inject = [ "$compile" ];
    }();
    !function() {
        /**
 * Controller for the MdChips component. Responsible for adding to and
 * removing from the list of chips, marking chips as selected, and binding to
 * the models of various input components.
 *
 * @param $scope
 * @param $mdConstant
 * @param $log
 * @param $element
 * @param $mdUtil
 * @constructor
 */
        function MdChipsCtrl($scope, $mdConstant, $log, $element, $timeout, $mdUtil) {
            /** @type {$timeout} **/
            this.$timeout = $timeout;
            /** @type {Object} */
            this.$mdConstant = $mdConstant;
            /** @type {angular.$scope} */
            this.$scope = $scope;
            /** @type {angular.$scope} */
            this.parent = $scope.$parent;
            /** @type {$log} */
            this.$log = $log;
            /** @type {$element} */
            this.$element = $element;
            /** @type {angular.NgModelController} */
            this.ngModelCtrl = null;
            /** @type {angular.NgModelController} */
            this.userInputNgModelCtrl = null;
            /** @type {Element} */
            this.userInputElement = null;
            /** @type {Array.<Object>} */
            this.items = [];
            /** @type {number} */
            this.selectedChip = -1;
            /** @type {boolean} */
            this.hasAutocomplete = !1;
            /** @type {string} */
            this.enableChipEdit = $mdUtil.parseAttributeBoolean(this.mdEnableChipEdit);
            /**
   * Hidden hint text for how to delete a chip. Used to give context to screen readers.
   * @type {string}
   */
            this.deleteHint = "Press delete to remove this chip.";
            /**
   * Hidden label for the delete button. Used to give context to screen readers.
   * @type {string}
   */
            this.deleteButtonLabel = "Remove";
            /**
   * Model used by the input element.
   * @type {string}
   */
            this.chipBuffer = "";
            /**
   * Whether to use the onAppend expression to transform the chip buffer
   * before appending it to the list.
   * @type {boolean}
   *
   *
   * @deprecated Will remove in 1.0.
   */
            this.useOnAppend = !1;
            /**
   * Whether to use the transformChip expression to transform the chip buffer
   * before appending it to the list.
   * @type {boolean}
   */
            this.useTransformChip = !1;
            /**
   * Whether to use the onAdd expression to notify of chip additions.
   * @type {boolean}
   */
            this.useOnAdd = !1;
            /**
   * Whether to use the onRemove expression to notify of chip removals.
   * @type {boolean}
   */
            this.useOnRemove = !1;
            /**
   * Whether to use the onSelect expression to notify the component's user
   * after selecting a chip from the list.
   * @type {boolean}
   */
            this.useOnSelect = !1;
        }
        angular.module("material.components.chips").controller("MdChipsCtrl", MdChipsCtrl);
        MdChipsCtrl.$inject = [ "$scope", "$mdConstant", "$log", "$element", "$timeout", "$mdUtil" ];
        /**
 * Handles the keydown event on the input element: by default <enter> appends
 * the buffer to the chip list, while backspace removes the last chip in the
 * list if the current buffer is empty.
 * @param event
 */
        MdChipsCtrl.prototype.inputKeydown = function(event) {
            var chipBuffer = this.getChipBuffer();
            // If we have an autocomplete, and it handled the event, we have nothing to do
            if (!(this.hasAutocomplete && event.isDefaultPrevented && event.isDefaultPrevented())) if (event.keyCode !== this.$mdConstant.KEY_CODE.BACKSPACE) {
                // By default <enter> appends the buffer to the chip list.
                (!this.separatorKeys || this.separatorKeys.length < 1) && (this.separatorKeys = [ this.$mdConstant.KEY_CODE.ENTER ]);
                // Support additional separator key codes in an array of `md-separator-keys`.
                if (-1 !== this.separatorKeys.indexOf(event.keyCode)) {
                    if (this.hasAutocomplete && this.requireMatch || !chipBuffer) return;
                    event.preventDefault();
                    // Only append the chip and reset the chip buffer if the max chips limit isn't reached.
                    if (this.hasMaxChipsReached()) return;
                    this.appendChip(chipBuffer.trim());
                    this.resetChipBuffer();
                }
            } else {
                if (chipBuffer) return;
                event.preventDefault();
                event.stopPropagation();
                this.items.length && this.selectAndFocusChipSafe(this.items.length - 1);
            }
        };
        /**
 * Updates the content of the chip at given index
 * @param chipIndex
 * @param chipContents
 */
        MdChipsCtrl.prototype.updateChipContents = function(chipIndex, chipContents) {
            if (chipIndex >= 0 && chipIndex < this.items.length) {
                this.items[chipIndex] = chipContents;
                this.ngModelCtrl.$setDirty();
            }
        };
        /**
 * Returns true if a chip is currently being edited. False otherwise.
 * @return {boolean}
 */
        MdChipsCtrl.prototype.isEditingChip = function() {
            return !!this.$element[0].getElementsByClassName("md-chip-editing").length;
        };
        /**
 * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow
 * keys switch which chips is active
 * @param event
 */
        MdChipsCtrl.prototype.chipKeydown = function(event) {
            if (!this.getChipBuffer() && !this.isEditingChip()) switch (event.keyCode) {
              case this.$mdConstant.KEY_CODE.BACKSPACE:
              case this.$mdConstant.KEY_CODE.DELETE:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.removeAndSelectAdjacentChip(this.selectedChip);
                break;

              case this.$mdConstant.KEY_CODE.LEFT_ARROW:
                event.preventDefault();
                this.selectedChip < 0 && (this.selectedChip = this.items.length);
                this.items.length && this.selectAndFocusChipSafe(this.selectedChip - 1);
                break;

              case this.$mdConstant.KEY_CODE.RIGHT_ARROW:
                event.preventDefault();
                this.selectAndFocusChipSafe(this.selectedChip + 1);
                break;

              case this.$mdConstant.KEY_CODE.ESCAPE:
              case this.$mdConstant.KEY_CODE.TAB:
                if (this.selectedChip < 0) return;
                event.preventDefault();
                this.onFocus();
            }
        };
        /**
 * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`
 * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used
 * always.
 */
        MdChipsCtrl.prototype.getPlaceholder = function() {
            return this.items.length && ("" == this.secondaryPlaceholder || this.secondaryPlaceholder) ? this.secondaryPlaceholder : this.placeholder;
        };
        /**
 * Removes chip at {@code index} and selects the adjacent chip.
 * @param index
 */
        MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {
            var selIndex = this.getAdjacentChipIndex(index);
            this.removeChip(index);
            this.$timeout(angular.bind(this, function() {
                this.selectAndFocusChipSafe(selIndex);
            }));
        };
        /**
 * Sets the selected chip index to -1.
 */
        MdChipsCtrl.prototype.resetSelectedChip = function() {
            this.selectedChip = -1;
        };
        /**
 * Gets the index of an adjacent chip to select after deletion. Adjacency is
 * determined as the next chip in the list, unless the target chip is the
 * last in the list, then it is the chip immediately preceding the target. If
 * there is only one item in the list, -1 is returned (select none).
 * The number returned is the index to select AFTER the target has been
 * removed.
 * If the current chip is not selected, then -1 is returned to select none.
 */
        MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {
            var len = this.items.length - 1;
            return 0 == len ? -1 : index == len ? index - 1 : index;
        };
        /**
 * Append the contents of the buffer to the chip list. This method will first
 * call out to the md-transform-chip method, if provided.
 *
 * @param newChip
 */
        MdChipsCtrl.prototype.appendChip = function(newChip) {
            if (this.useTransformChip && this.transformChip) {
                var transformedChip = this.transformChip({
                    $chip: newChip
                });
                // Check to make sure the chip is defined before assigning it, otherwise, we'll just assume
                // they want the string version.
                angular.isDefined(transformedChip) && (newChip = transformedChip);
            }
            // If items contains an identical object to newChip, do not append
            if (angular.isObject(newChip)) {
                if (this.items.some(function(item) {
                    return angular.equals(newChip, item);
                })) return;
            }
            // Check for a null (but not undefined), or existing chip and cancel appending
            if (!(null == newChip || this.items.indexOf(newChip) + 1)) {
                // Append the new chip onto our list
                var index = this.items.push(newChip);
                // Update model validation
                this.ngModelCtrl.$setDirty();
                this.validateModel();
                // If they provide the md-on-add attribute, notify them of the chip addition
                this.useOnAdd && this.onAdd && this.onAdd({
                    $chip: newChip,
                    $index: index
                });
            }
        };
        /**
 * Sets whether to use the md-on-append expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code onAppend}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 *
 * @deprecated
 *
 * TODO: Remove deprecated md-on-append functionality in 1.0
 */
        MdChipsCtrl.prototype.useOnAppendExpression = function() {
            this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead");
            if (!this.useTransformChip || !this.transformChip) {
                this.useTransformChip = !0;
                this.transformChip = this.onAppend;
            }
        };
        /**
 * Sets whether to use the md-transform-chip expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code transformChip}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 */
        MdChipsCtrl.prototype.useTransformChipExpression = function() {
            this.useTransformChip = !0;
        };
        /**
 * Sets whether to use the md-on-add expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code onAdd}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 */
        MdChipsCtrl.prototype.useOnAddExpression = function() {
            this.useOnAdd = !0;
        };
        /**
 * Sets whether to use the md-on-remove expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code onRemove}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 */
        MdChipsCtrl.prototype.useOnRemoveExpression = function() {
            this.useOnRemove = !0;
        };
        /*
 * Sets whether to use the md-on-select expression. This expression is
 * bound to scope and controller in {@code MdChipsDirective} as
 * {@code onSelect}. Due to the nature of directive scope bindings, the
 * controller cannot know on its own/from the scope whether an expression was
 * actually provided.
 */
        MdChipsCtrl.prototype.useOnSelectExpression = function() {
            this.useOnSelect = !0;
        };
        /**
 * Gets the input buffer. The input buffer can be the model bound to the
 * default input item {@code this.chipBuffer}, the {@code selectedItem}
 * model of an {@code md-autocomplete}, or, through some magic, the model
 * bound to any inpput or text area element found within a
 * {@code md-input-container} element.
 * @return {Object|string}
 */
        MdChipsCtrl.prototype.getChipBuffer = function() {
            return this.userInputElement ? this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue : this.userInputElement[0].value : this.chipBuffer;
        };
        /**
 * Resets the input buffer for either the internal input or user provided input element.
 */
        MdChipsCtrl.prototype.resetChipBuffer = function() {
            if (this.userInputElement) if (this.userInputNgModelCtrl) {
                this.userInputNgModelCtrl.$setViewValue("");
                this.userInputNgModelCtrl.$render();
            } else this.userInputElement[0].value = ""; else this.chipBuffer = "";
        };
        MdChipsCtrl.prototype.hasMaxChipsReached = function() {
            angular.isString(this.maxChips) && (this.maxChips = parseInt(this.maxChips, 10) || 0);
            return this.maxChips > 0 && this.items.length >= this.maxChips;
        };
        /**
 * Updates the validity properties for the ngModel.
 */
        MdChipsCtrl.prototype.validateModel = function() {
            this.ngModelCtrl.$setValidity("md-max-chips", !this.hasMaxChipsReached());
        };
        /**
 * Removes the chip at the given index.
 * @param index
 */
        MdChipsCtrl.prototype.removeChip = function(index) {
            var removed = this.items.splice(index, 1);
            // Update model validation
            this.ngModelCtrl.$setDirty();
            this.validateModel();
            removed && removed.length && this.useOnRemove && this.onRemove && this.onRemove({
                $chip: removed[0],
                $index: index
            });
        };
        MdChipsCtrl.prototype.removeChipAndFocusInput = function(index) {
            this.removeChip(index);
            this.onFocus();
        };
        /**
 * Selects the chip at `index`,
 * @param index
 */
        MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {
            if (this.items.length) {
                if (index === this.items.length) return this.onFocus();
                index = Math.max(index, 0);
                index = Math.min(index, this.items.length - 1);
                this.selectChip(index);
                this.focusChip(index);
            } else {
                this.selectChip(-1);
                this.onFocus();
            }
        };
        /**
 * Marks the chip at the given index as selected.
 * @param index
 */
        MdChipsCtrl.prototype.selectChip = function(index) {
            if (index >= -1 && index <= this.items.length) {
                this.selectedChip = index;
                // Fire the onSelect if provided
                this.useOnSelect && this.onSelect && this.onSelect({
                    $chip: this.items[this.selectedChip]
                });
            } else this.$log.warn("Selected Chip index out of bounds; ignoring.");
        };
        /**
 * Selects the chip at `index` and gives it focus.
 * @param index
 */
        MdChipsCtrl.prototype.selectAndFocusChip = function(index) {
            this.selectChip(index);
            -1 != index && this.focusChip(index);
        };
        /**
 * Call `focus()` on the chip at `index`
 */
        MdChipsCtrl.prototype.focusChip = function(index) {
            this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();
        };
        /**
 * Configures the required interactions with the ngModel Controller.
 * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.
 * @param ngModelCtrl
 */
        MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;
            var self = this;
            ngModelCtrl.$render = function() {
                // model is updated. do something.
                self.items = self.ngModelCtrl.$viewValue;
            };
        };
        MdChipsCtrl.prototype.onFocus = function() {
            var input = this.$element[0].querySelector("input");
            input && input.focus();
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputFocus = function() {
            this.inputHasFocus = !0;
            this.resetSelectedChip();
        };
        MdChipsCtrl.prototype.onInputBlur = function() {
            this.inputHasFocus = !1;
        };
        /**
 * Configure event bindings on a user-provided input element.
 * @param inputElement
 */
        MdChipsCtrl.prototype.configureUserInput = function(inputElement) {
            this.userInputElement = inputElement;
            // Find the NgModelCtrl for the input element
            var ngModelCtrl = inputElement.controller("ngModel");
            // `.controller` will look in the parent as well.
            ngModelCtrl != this.ngModelCtrl && (this.userInputNgModelCtrl = ngModelCtrl);
            var scope = this.$scope, ctrl = this, scopeApplyFn = function(event, fn) {
                scope.$evalAsync(angular.bind(ctrl, fn, event));
            };
            // Bind to keydown and focus events of input
            inputElement.attr({
                tabindex: 0
            }).on("keydown", function(event) {
                scopeApplyFn(event, ctrl.inputKeydown);
            }).on("focus", function(event) {
                scopeApplyFn(event, ctrl.onInputFocus);
            }).on("blur", function(event) {
                scopeApplyFn(event, ctrl.onInputBlur);
            });
        };
        MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {
            if (ctrl) {
                this.hasAutocomplete = !0;
                ctrl.registerSelectedItemWatcher(angular.bind(this, function(item) {
                    if (item) {
                        // Only append the chip and reset the chip buffer if the max chips limit isn't reached.
                        if (this.hasMaxChipsReached()) return;
                        this.appendChip(item);
                        this.resetChipBuffer();
                    }
                }));
                this.$element.find("input").on("focus", angular.bind(this, this.onInputFocus)).on("blur", angular.bind(this, this.onInputBlur));
            }
        };
        MdChipsCtrl.prototype.hasFocus = function() {
            return this.inputHasFocus || this.selectedChip >= 0;
        };
    }();
    !function() {
        /**
   * MDChips Directive Definition
   */
        function MdChips($mdTheming, $mdUtil, $compile, $log, $timeout) {
            /**
     * Builds the final template for `md-chips` and returns the postLink function.
     *
     * Building the template involves 3 key components:
     * static chips
     * chip template
     * input control
     *
     * If no `ng-model` is provided, only the static chip work needs to be done.
     *
     * If no user-passed `md-chip-template` exists, the default template is used. This resulting
     * template is appended to the chip content element.
     *
     * The remove button may be overridden by passing an element with an md-chip-remove attribute.
     *
     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for
     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.
     * If no user input is provided, a default one is appended to the input container node in the
     * template.
     *
     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for
     * transclusion in the `postLink` function.
     *
     *
     * @param element
     * @param attr
     * @returns {Function}
     */
            function compile(element, attr) {
                function getTemplateByQuery(query) {
                    if (attr.ngModel) {
                        var element = userTemplate[0].querySelector(query);
                        return element && element.outerHTML;
                    }
                }
                // Grab the user template from attr and reset the attribute to null.
                var userTemplate = attr.$mdUserTemplate;
                attr.$mdUserTemplate = null;
                // Set the chip remove, chip contents and chip input templates. The link function will put
                // them on the scope for transclusion later.
                var chipRemoveTemplate = getTemplateByQuery("md-chips>*[md-chip-remove]") || templates.remove, chipContentsTemplate = getTemplateByQuery("md-chips>md-chip-template") || templates.default, chipInputTemplate = getTemplateByQuery("md-chips>md-autocomplete") || getTemplateByQuery("md-chips>input") || templates.input, staticChips = userTemplate.find("md-chip");
                // Warn of malformed template. See #2545
                userTemplate[0].querySelector("md-chip-template>*[md-chip-remove]") && $log.warn("invalid placement of md-chip-remove within md-chip-template.");
                /**
       * Configures controller and transcludes.
       */
                return function(scope, element, attrs, controllers) {
                    $mdUtil.initOptionalProperties(scope, attr);
                    $mdTheming(element);
                    var mdChipsCtrl = controllers[0];
                    mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;
                    mdChipsCtrl.chipRemoveTemplate = chipRemoveTemplate;
                    mdChipsCtrl.chipInputTemplate = chipInputTemplate;
                    element.attr({
                        "aria-hidden": !0,
                        tabindex: -1
                    }).on("focus", function() {
                        mdChipsCtrl.onFocus();
                    });
                    if (attr.ngModel) {
                        mdChipsCtrl.configureNgModel(element.controller("ngModel"));
                        // If an `md-transform-chip` attribute was set, tell the controller to use the expression
                        // before appending chips.
                        attrs.mdTransformChip && mdChipsCtrl.useTransformChipExpression();
                        // If an `md-on-append` attribute was set, tell the controller to use the expression
                        // when appending chips.
                        //
                        // DEPRECATED: Will remove in official 1.0 release
                        attrs.mdOnAppend && mdChipsCtrl.useOnAppendExpression();
                        // If an `md-on-add` attribute was set, tell the controller to use the expression
                        // when adding chips.
                        attrs.mdOnAdd && mdChipsCtrl.useOnAddExpression();
                        // If an `md-on-remove` attribute was set, tell the controller to use the expression
                        // when removing chips.
                        attrs.mdOnRemove && mdChipsCtrl.useOnRemoveExpression();
                        // If an `md-on-select` attribute was set, tell the controller to use the expression
                        // when selecting chips.
                        attrs.mdOnSelect && mdChipsCtrl.useOnSelectExpression();
                        // The md-autocomplete and input elements won't be compiled until after this directive
                        // is complete (due to their nested nature). Wait a tick before looking for them to
                        // configure the controller.
                        chipInputTemplate != templates.input && // The autocomplete will not appear until the readonly attribute is not true (i.e.
                        // false or undefined), so we have to watch the readonly and then on the next tick
                        // after the chip transclusion has run, we can configure the autocomplete and user
                        // input.
                        scope.$watch("$mdChipsCtrl.readonly", function(readonly) {
                            readonly || $mdUtil.nextTick(function() {
                                0 === chipInputTemplate.indexOf("<md-autocomplete") && mdChipsCtrl.configureAutocomplete(element.find("md-autocomplete").controller("mdAutocomplete"));
                                mdChipsCtrl.configureUserInput(element.find("input"));
                            });
                        });
                        // At the next tick, if we find an input, make sure it has the md-input class
                        $mdUtil.nextTick(function() {
                            var input = element.find("input");
                            input && input.toggleClass("md-input", !0);
                        });
                    }
                    // Compile with the parent's scope and prepend any static chips to the wrapper.
                    if (staticChips.length > 0) {
                        var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);
                        $timeout(function() {
                            element.find("md-chips-wrap").prepend(compiledStaticChips);
                        });
                    }
                };
            }
            // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols
            var templates = function() {
                return {
                    chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),
                    input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),
                    default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),
                    remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)
                };
            }();
            return {
                template: function(element, attrs) {
                    // Clone the element into an attribute. By prepending the attribute
                    // name with '$', Angular won't write it into the DOM. The cloned
                    // element propagates to the link function via the attrs argument,
                    // where various contained-elements can be consumed.
                    attrs.$mdUserTemplate = element.clone();
                    return templates.chips;
                },
                require: [ "mdChips" ],
                restrict: "E",
                controller: "MdChipsCtrl",
                controllerAs: "$mdChipsCtrl",
                bindToController: !0,
                compile: compile,
                scope: {
                    readonly: "=readonly",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    maxChips: "@mdMaxChips",
                    transformChip: "&mdTransformChip",
                    onAppend: "&mdOnAppend",
                    onAdd: "&mdOnAdd",
                    onRemove: "&mdOnRemove",
                    onSelect: "&mdOnSelect",
                    deleteHint: "@",
                    deleteButtonLabel: "@",
                    separatorKeys: "=?mdSeparatorKeys",
                    requireMatch: "=?mdRequireMatch"
                }
            };
        }
        angular.module("material.components.chips").directive("mdChips", MdChips);
        /**
   * @ngdoc directive
   * @name mdChips
   * @module material.components.chips
   *
   * @description
   * `<md-chips>` is an input component for building lists of strings or objects. The list items are
   * displayed as 'chips'. This component can make use of an `<input>` element or an 
   * `<md-autocomplete>` element.
   *
   * ### Custom templates
   * A custom template may be provided to render the content of each chip. This is achieved by
   * specifying an `<md-chip-template>` element containing the custom content as a child of
   * `<md-chips>`.
   *
   * Note: Any attributes on
   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The
   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing
   * the chip object and its index in the list of chips, respectively.
   * To override the chip delete control, include an element (ideally a button) with the attribute
   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element
   * is also placed as a sibling to the chip content (on which there are also click listeners) to
   * avoid a nested ng-click situation.
   *
   * <h3> Pending Features </h3>
   * <ul style="padding-left:20px;">
   *
   *   <ul>Style
   *     <li>Colours for hover, press states (ripple?).</li>
   *   </ul>
   *
   *   <ul>Validation
   *     <li>allow a validation callback</li>
   *     <li>hilighting style for invalid chips</li>
   *   </ul>
   *
   *   <ul>Item mutation
   *     <li>Support `
   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double
   *       click?
   *     </li>
   *   </ul>
   *
   *   <ul>Truncation and Disambiguation (?)
   *     <li>Truncate chip text where possible, but do not truncate entries such that two are
   *     indistinguishable.</li>
   *   </ul>
   *
   *   <ul>Drag and Drop
   *     <li>Drag and drop chips between related `<md-chips>` elements.
   *     </li>
   *   </ul>
   * </ul>
   *
   *  <span style="font-size:.8em;text-align:center">
   *    Warning: This component is a WORK IN PROGRESS. If you use it now,
   *    it will probably break on you in the future.
   *  </span>
   *
   * @param {string=|object=} ng-model A model to bind the list of items to
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
   *    displayed when there is at least one item in the list
   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding
   *    the input and delete buttons
   * @param {number=} md-max-chips The maximum number of chips allowed to add through user input.
   *    <br/><br/>The validation property `md-max-chips` can be used when the max chips
   *    amount is reached.
   * @param {expression} md-transform-chip An expression of form `myFunction($chip)` that when called
   *    expects one of the following return values:
   *    - an object representing the `$chip` input string
   *    - `undefined` to simply add the `$chip` input string, or
   *    - `null` to prevent the chip from being appended
   * @param {expression=} md-on-add An expression which will be called when a chip has been
   *    added.
   * @param {expression=} md-on-remove An expression which will be called when a chip has been
   *    removed.
   * @param {expression=} md-on-select An expression which will be called when a chip is selected.
   * @param {boolean} md-require-match If true, and the chips template contains an autocomplete,
   *    only allow selection of pre-defined chips (i.e. you cannot add new ones).
   * @param {string=} delete-hint A string read by screen readers instructing users that pressing
   *    the delete key will remove the chip.
   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by
   *    screen readers.
   * @param {expression=} md-separator-keys An array of key codes used to separate chips.
   *
   * @usage
   * <hljs lang="html">
   *   <md-chips
   *       ng-model="myItems"
   *       placeholder="Add an item"
   *       readonly="isReadOnly">
   *   </md-chips>
   * </hljs>
   *
   * <h3>Validation</h3>
   * When using [ngMessages](https://docs.angularjs.org/api/ngMessages), you can show errors based
   * on our custom validators.
   * <hljs lang="html">
   *   <form name="userForm">
   *     <md-chips
   *       name="fruits"
   *       ng-model="myItems"
   *       placeholder="Add an item"
   *       md-max-chips="5">
   *     </md-chips>
   *     <div ng-messages="userForm.fruits.$error" ng-if="userForm.$dirty">
   *       <div ng-message="md-max-chips">You reached the maximum amount of chips</div>
   *    </div>
   *   </form>
   * </hljs>
   *
   */
        var MD_CHIPS_TEMPLATE = '      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-click="!$mdChipsCtrl.readonly && $mdChipsCtrl.focusChip($index)"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div ng-if="!$mdChipsCtrl.readonly"               class="md-chip-remove-container"               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>', CHIP_INPUT_TEMPLATE = '        <input            class="md-input"            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-trim="false"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">', CHIP_DEFAULT_TEMPLATE = "      <span>{{$chip}}</span>", CHIP_REMOVE_TEMPLATE = '      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';
        MdChips.$inject = [ "$mdTheming", "$mdUtil", "$compile", "$log", "$timeout" ];
    }();
    !function() {
        /**
 * Controller for the MdContactChips component
 * @constructor
 */
        function MdContactChipsCtrl() {
            /** @type {Object} */
            this.selectedItem = null;
            /** @type {string} */
            this.searchText = "";
        }
        angular.module("material.components.chips").controller("MdContactChipsCtrl", MdContactChipsCtrl);
        MdContactChipsCtrl.prototype.queryContact = function(searchText) {
            var results = this.contactQuery({
                $query: searchText
            });
            return this.filterSelected ? results.filter(angular.bind(this, this.filterSelectedContacts)) : results;
        };
        MdContactChipsCtrl.prototype.itemName = function(item) {
            return item[this.contactName];
        };
        MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {
            return -1 == this.contacts.indexOf(contact);
        };
    }();
    !function() {
        /**
 * MDContactChips Directive Definition
 *
 * @param $mdTheming
 * @returns {*}
 * @ngInject
 */
        function MdContactChips($mdTheming, $mdUtil) {
            function compile(element, attr) {
                return function(scope, element, attrs, controllers) {
                    $mdUtil.initOptionalProperties(scope, attr);
                    $mdTheming(element);
                    element.attr("tabindex", "-1");
                };
            }
            return {
                template: function(element, attrs) {
                    return MD_CONTACT_CHIPS_TEMPLATE;
                },
                restrict: "E",
                controller: "MdContactChipsCtrl",
                controllerAs: "$mdContactChipsCtrl",
                bindToController: !0,
                compile: compile,
                scope: {
                    contactQuery: "&mdContacts",
                    placeholder: "@",
                    secondaryPlaceholder: "@",
                    contactName: "@mdContactName",
                    contactImage: "@mdContactImage",
                    contactEmail: "@mdContactEmail",
                    contacts: "=ngModel",
                    requireMatch: "=?mdRequireMatch",
                    highlightFlags: "@?mdHighlightFlags"
                }
            };
        }
        angular.module("material.components.chips").directive("mdContactChips", MdContactChips);
        /**
 * @ngdoc directive
 * @name mdContactChips
 * @module material.components.chips
 *
 * @description
 * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an
 * `md-autocomplete` element. The component allows the caller to supply a query expression which
 * returns  a list of possible contacts. The user can select one of these and add it to the list of
 * chips.
 *
 * You may also use the `md-highlight-text` directive along with its parameters to control the
 * appearance of the matched text inside of the contacts' autocomplete popup.
 *
 * @param {string=|object=} ng-model A model to bind the list of items to
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.
 * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
 *    displayed when there is at least on item in the list
 * @param {expression} md-contacts An expression expected to return contacts matching the search
 *    test, `$query`. If this expression involves a promise, a loading bar is displayed while
 *    waiting for it to resolve.
 * @param {string} md-contact-name The field name of the contact object representing the
 *    contact's name.
 * @param {string} md-contact-email The field name of the contact object representing the
 *    contact's email address.
 * @param {string} md-contact-image The field name of the contact object representing the
 *    contact's image.
 *
 *
 * @param {expression=} filter-selected Whether to filter selected contacts from the list of
 *    suggestions shown in the autocomplete. This attribute has been removed but may come back.
 *
 *
 *
 * @usage
 * <hljs lang="html">
 *   <md-contact-chips
 *       ng-model="ctrl.contacts"
 *       md-contacts="ctrl.querySearch($query)"
 *       md-contact-name="name"
 *       md-contact-image="image"
 *       md-contact-email="email"
 *       placeholder="To">
 *   </md-contact-chips>
 * </hljs>
 *
 */
        var MD_CONTACT_CHIPS_TEMPLATE = '      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.itemName(item)"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}"                  ng-if="item[$mdContactChipsCtrl.contactImage]" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';
        MdContactChips.$inject = [ "$mdTheming", "$mdUtil" ];
    }();
    !function() {
        /**
 * @ngdoc directive
 * @name mdIcon
 * @module material.components.icon
 *
 * @restrict E
 *
 * @description
 * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to
 * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.
 *
 * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`
 * inside a `md-button` to add hover and click features.
 *
 * ### Icon fonts
 * Icon fonts are a technique in which you use a font where the glyphs in the font are
 * your icons instead of text. Benefits include a straightforward way to bundle everything into a
 * single HTTP request, simple scaling, easy color changing, and more.
 *
 * `md-icon` lets you consume an icon font by letting you reference specific icons in that font
 * by name rather than character code.
 *
 * ### SVG
 * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take
 * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG
 * animation.
 *
 * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the
 * document. The most straightforward way of referencing an SVG icon is via URL, just like a
 * traditional `<img>`. `$mdIconProvider`, as a convenience, lets you _name_ an icon so you can
 * reference it by name instead of URL throughout your templates.
 *
 * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle
 * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can
 * also be given a name, which acts as a namespace for individual icons, so you can reference them
 * like `"social:cake"`.
 *
 * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be
 * easily loaded and used.When use font-icons, developers must following three (3) simple steps:
 *
 * <ol>
 * <li>Load the font library. e.g.<br/>
 *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"
 *    rel="stylesheet"&gt;
 * </li>
 * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
 * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; textual_name &lt;/md-icon&gt; or <br/>
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; numerical_character_reference &lt;/md-icon&gt;
 * </li>
 * </ol>
 *
 * Full details for these steps can be found:
 *
 * <ul>
 * <li>http://google.github.io/material-design-icons/</li>
 * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>
 * </ul>
 *
 * The Material Design icon style <code>.material-icons</code> and the icon font references are published in
 * Material Design Icons:
 *
 * <ul>
 * <li>http://www.google.com/design/icons/</li>
 * <li>https://www.google.com/design/icons/#ic_accessibility</li>
 * </ul>
 *
 * <h2 id="material_design_icons">Material Design Icons</h2>
 * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
 * determine its textual name and character reference code. Click on any icon to see the slide-up information
 * panel with details regarding a SVG download or information on the font-icon usage.
 *
 * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">
 * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"
 *      aria-label="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">
 * </a>
 *
 * <span class="image_caption">
 *  Click on the image above to link to the
 *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>.
 * </span>
 *
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.
 * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as
 * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;
 * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.
 * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an
 *     external SVG.
 * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;
 *     interpolated strings or expressions may also be used. Specific set names can be used with
 *     the syntax `<set name>:<icon name>`.<br/><br/>
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.
 * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no aria-label on the icon
 * nor a label on the parent element, a warning will be logged to the console.
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon
 * nor a label on the parent element, a warning will be logged to the console.
 *
 * @usage
 * When using SVGs:
 * <hljs lang="html">
 *
 *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->
 *  <md-icon md-svg-icon="social:android"    aria-label="android " ></md-icon>
 *
 *  <!-- Icon urls; may be preloaded in templateCache -->
 *  <md-icon md-svg-src="/android.svg"       aria-label="android " ></md-icon>
 *  <md-icon md-svg-src="{{ getAndroid() }}" aria-label="android " ></md-icon>
 *
 * </hljs>
 *
 * Use the <code>$mdIconProvider</code> to configure your application with
 * svg iconsets.
 *
 * <hljs lang="js">
 *  angular.module('appSvgIconSets', ['ngMaterial'])
 *    .controller('DemoCtrl', function($scope) {})
 *    .config(function($mdIconProvider) {
 *      $mdIconProvider
 *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)
 *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);
 *     });
 * </hljs>
 *
 *
 * When using Font Icons with classnames:
 * <hljs lang="html">
 *
 *  <md-icon md-font-icon="android" aria-label="android" ></md-icon>
 *  <md-icon class="icon_home"      aria-label="Home"    ></md-icon>
 *
 * </hljs>
 *
 * When using Material Font Icons with ligatures:
 * <hljs lang="html">
 *  <!--
 *  For Material Design Icons
 *  The class '.material-icons' is auto-added if a style has NOT been specified
 *  since `material-icons` is the default fontset. So your markup:
 *  -->
 *  <md-icon> face </md-icon>
 *  <!-- becomes this at runtime: -->
 *  <md-icon md-font-set="material-icons"> face </md-icon>
 *  <!-- If the fontset does not support ligature names, then we need to use the ligature unicode.-->
 *  <md-icon> &#xE87C; </md-icon>
 *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->
 *  <md-icon class="material-icons md-light md-48"> face </md-icon>
 * </hljs>
 *
 * When using other Font-Icon libraries:
 *
 * <hljs lang="js">
 *  // Specify a font-icon style alias
 *  angular.config(function($mdIconProvider) {
 *    $mdIconProvider.fontSet('md', 'material-icons');
 *  });
 * </hljs>
 *
 * <hljs lang="html">
 *  <md-icon md-font-set="md">favorite</md-icon>
 * </hljs>
 *
 */
        function mdIconDirective($mdIcon, $mdTheming, $mdAria) {
            /**
   * Directive postLink
   * Supports embedded SVGs, font-icons, & external SVGs
   */
            function postLink(scope, element, attr) {
                $mdTheming(element);
                !function() {
                    if (!attr.mdSvgIcon && !attr.mdSvgSrc) {
                        attr.mdFontIcon && element.addClass("md-font " + attr.mdFontIcon);
                        element.addClass($mdIcon.fontSet(attr.mdFontSet));
                    }
                }();
                // If using a font-icon, then the textual name of the icon itself
                // provides the aria-label.
                var label = attr.alt || attr.mdFontIcon || attr.mdSvgIcon || element.text(), attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || "");
                if (!attr["aria-label"]) if ("" === label || function() {
                    var parent = element.parent();
                    return !(!parent.attr("aria-label") && !parent.text()) || !(!parent.parent().attr("aria-label") && !parent.parent().text());
                }()) element.text() || // If not a font-icon with ligature, then
                // hide from the accessibility layer.
                $mdAria.expect(element, "aria-hidden", "true"); else {
                    $mdAria.expect(element, "aria-label", label);
                    $mdAria.expect(element, "role", "img");
                }
                attrName && // Use either pre-configured SVG or URL source, respectively.
                attr.$observe(attrName, function(attrVal) {
                    element.empty();
                    attrVal && $mdIcon(attrVal).then(function(svg) {
                        element.empty();
                        element.append(svg);
                    });
                });
            }
            return {
                restrict: "E",
                link: postLink
            };
        }
        angular.module("material.components.icon").directive("mdIcon", [ "$mdIcon", "$mdTheming", "$mdAria", mdIconDirective ]);
    }();
    !function() {
        function MdIconProvider() {}
        /**
    *  Configuration item stored in the Icon registry; used for lookups
    *  to load if not already cached in the `loaded` cache
    */
        function ConfigurationItem(url, viewBoxSize) {
            this.url = url;
            this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
        }
        /**
  * @ngdoc service
  * @name $mdIcon
  * @module material.components.icon
  *
  * @description
  * The `$mdIcon` service is a function used to lookup SVG icons.
  *
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.
  *
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
  * using the `$mdIconProvider`.
  *
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.
  *
  * @usage
  * <hljs lang="js">
  * function SomeDirective($mdIcon) {
  *
  *   // See if the icon has already been loaded, if not
  *   // then lookup the icon from the registry cache, load and cache
  *   // it for future requests.
  *   // NOTE: ID queries require configuration with $mdIconProvider
  *
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });
  *
  *   // Load and cache the external SVG using a URL
  *
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {
  *     element.append(iconEl);
  *   });
  * };
  * </hljs>
  *
  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate
  * SVG DOM elements.
  */
        /* @ngInject */
        function MdIconService(config, $http, $q, $log, $templateCache, $mdUtil) {
            /**
    * Actual $mdIcon service is essentially a lookup function
    */
            function getIcon(id) {
                id = id || "";
                // If already loaded and cached, use a clone of the cached icon.
                // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.
                if (iconCache[id]) return $q.when(transformClone(iconCache[id]));
                if (urlRegex.test(id) || dataUrlRegex.test(id)) return loadByURL(id).then(cacheIcon(id));
                -1 == id.indexOf(":") && (id = "$default:" + id);
                return (config[id] ? loadByID : loadFromIconSet)(id).then(cacheIcon(id));
            }
            /**
    * Lookup registered fontSet style using its alias...
    * If not found,
    */
            function findRegisteredFontSet(alias) {
                if (angular.isUndefined(alias) || !(alias && alias.length)) return config.defaultFontSet;
                var result = alias;
                angular.forEach(config.fontSets, function(it) {
                    it.alias == alias && (result = it.fontSet || result);
                });
                return result;
            }
            function transformClone(cacheElement) {
                var clone = cacheElement.clone(), cacheSuffix = "_cache" + $mdUtil.nextUid();
                // We need to modify for each cached icon the id attributes.
                // This is needed because SVG id's are treated as normal DOM ids
                // and should not have a duplicated id.
                clone.id && (clone.id += cacheSuffix);
                angular.forEach(clone.querySelectorAll("[id]"), function(item) {
                    item.id += cacheSuffix;
                });
                return clone;
            }
            /**
    * Prepare and cache the loaded icon for the specified `id`
    */
            function cacheIcon(id) {
                return function(icon) {
                    iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);
                    return iconCache[id].clone();
                };
            }
            /**
    * Lookup the configuration in the registry, if !registered throw an error
    * otherwise load the icon [on-demand] using the registered URL.
    *
    */
            function loadByID(id) {
                var iconConfig = config[id];
                return loadByURL(iconConfig.url).then(function(icon) {
                    return new Icon(icon, iconConfig);
                });
            }
            /**
    *    Loads the file as XML and uses querySelector( <id> ) to find
    *    the desired node...
    */
            function loadFromIconSet(id) {
                function extractFromSet(set) {
                    var iconName = id.slice(id.lastIndexOf(":") + 1), icon = set.querySelector("#" + iconName);
                    return icon ? new Icon(icon, iconSetConfig) : announceIdNotFound(id);
                }
                function announceIdNotFound(id) {
                    var msg = "icon " + id + " not found";
                    $log.warn(msg);
                    return $q.reject(msg || id);
                }
                var setName = id.substring(0, id.lastIndexOf(":")) || "$default", iconSetConfig = config[setName];
                return iconSetConfig ? loadByURL(iconSetConfig.url).then(extractFromSet) : announceIdNotFound(id);
            }
            /**
    * Load the icon by URL (may use the $templateCache).
    * Extract the data for later conversion to Icon
    */
            function loadByURL(url) {
                /* Load the icon from embedded data URL. */
                /* Load the icon by URL using HTTP. */
                return dataUrlRegex.test(url) ? function(url) {
                    var results = dataUrlRegex.exec(url), isBase64 = /base64/i.test(url), data = isBase64 ? window.atob(results[2]) : results[2];
                    return $q.when(angular.element(data)[0]);
                }(url) : function(url) {
                    return $http.get(url, {
                        cache: $templateCache
                    }).then(function(response) {
                        return angular.element("<div>").append(response.data).find("svg")[0];
                    }).catch(announceNotFound);
                }(url);
            }
            /**
    * Catch HTTP or generic errors not related to incorrect icon IDs.
    */
            function announceNotFound(err) {
                var msg = angular.isString(err) ? err : err.message || err.data || err.statusText;
                $log.warn(msg);
                return $q.reject(msg);
            }
            /**
    * Check target signature to see if it is an Icon instance.
    */
            function isIcon(target) {
                return angular.isDefined(target.element) && angular.isDefined(target.config);
            }
            /**
    *  Define the Icon class
    */
            function Icon(el, config) {
                el && "svg" != el.tagName && (el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0]);
                // Inject the namespace if not available...
                el.getAttribute("xmlns") || el.setAttribute("xmlns", "http://www.w3.org/2000/svg");
                this.element = el;
                this.config = config;
                this.prepare();
            }
            /**
    *  Prepare the DOM element that will be cached in the
    *  loaded iconCache store.
    */
            function prepareAndStyle() {
                var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
                angular.forEach({
                    fit: "",
                    height: "100%",
                    width: "100%",
                    preserveAspectRatio: "xMidYMid meet",
                    viewBox: this.element.getAttribute("viewBox") || "0 0 " + viewBoxSize + " " + viewBoxSize,
                    focusable: !1
                }, function(val, attr) {
                    this.element.setAttribute(attr, val);
                }, this);
            }
            /**
    * Clone the Icon DOM element.
    */
            function cloneSVG() {
                // If the element or any of its children have a style attribute, then a CSP policy without
                // 'unsafe-inline' in the style-src directive, will result in a violation.
                return this.element.cloneNode(!0);
            }
            var iconCache = {}, urlRegex = /[-\w@:%\+.~#?&\/\/=]{2,}\.[a-z]{2,4}\b(\/[-\w@:%\+.~#?&\/\/=]*)?/i, dataUrlRegex = /^data:image\/svg\+xml[\s*;\w\-\=]*?(base64)?,(.*)$/i;
            Icon.prototype = {
                clone: cloneSVG,
                prepare: prepareAndStyle
            };
            getIcon.fontSet = findRegisteredFontSet;
            // Publish service...
            return getIcon;
        }
        angular.module("material.components.icon").provider("$mdIcon", MdIconProvider);
        /**
    * @ngdoc service
    * @name $mdIconProvider
    * @module material.components.icon
    *
    * @description
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`
    * directives are compiled.
    *
    * If using font-icons, the developer is responsible for loading the fonts.
    *
    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,
    * the `$mdIcon` service searches its registry for the associated source URL;
    * that URL is used to on-demand load and parse the SVG dynamically.
    *
    * **Notice:** Most font-icons libraries do not support ligatures (for example `fontawesome`).<br/>
    *  In such cases you are not able to use the icon's ligature name - Like so:
    *
    *  <hljs lang="html">
    *    <md-icon md-font-set="fa">fa-bell</md-icon>
    *  </hljs>
    *
    * You should instead use the given unicode, instead of the ligature name.
    *
    * <p ng-hide="true"> ##// Notice we can't use a hljs element here, because the characters will be escaped.</p>
    *  ```html
    *    <md-icon md-font-set="fa">&#xf0f3</md-icon>
    *  ```
    *
    * All unicode ligatures are prefixed with the `&#x` string.
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultFontSet( 'fa' )                   // This sets our default fontset className.
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime
    * **startup** process (shown below):
    *
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Register a default set of SVG icon definitions
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')
    *
    *   })
    *   .run(function($http, $templateCache){
    *
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...
    *     // subsequent $http calls will look there first.
    *
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];
    *
    *     angular.forEach(urls, function(url) {
    *       $http.get(url, {cache: $templateCache});
    *     });
    *
    *   });
    *
    * </hljs>
    *
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.
    *
    */
        /**
    * @ngdoc method
    * @name $mdIconProvider#icon
    *
    * @description
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`
    *
    * @param {string} id Icon name/id used to register the icon
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.
    * It is ignored for icons with an existing viewBox. Default size is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
    *   });
    * </hljs>
    *
    */
        /**
    * @ngdoc method
    * @name $mdIconProvider#iconSet
    *
    * @description
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using
    * `$mdIcon(<icon set name>:<icon name>)`
    *
    * @param {string} id Icon name/id used to register the iconset
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
    * Default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set
    *   });
    * </hljs>
    *
    */
        /**
    * @ngdoc method
    * @name $mdIconProvider#defaultIconSet
    *
    * @description
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,
    * subsequent lookups of icons will failover to search this 'default' icon set.
    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`
    *
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
    * Default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set
    *   });
    * </hljs>
    *
    */
        /**
   * @ngdoc method
   * @name $mdIconProvider#defaultFontSet
   *
   * @description
   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically
   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library
   * class style that should be applied to the `<md-icon>`.
   *
   * Configuring the default means that the attributes
   * `md-font-set="material-icons"` or `class="material-icons"` do not need to be explicitly declared on the
   * `<md-icon>` markup. For example:
   *
   *  `<md-icon> face </md-icon>`
   *  will render as
   *  `<span class="material-icons"> face </span>`, and
   *
   *  `<md-icon md-font-set="fa"> face </md-icon>`
   *  will render as
   *  `<span class="fa"> face </span>`
   *
   * @param {string} name of the font-library style that should be applied to the md-icon DOM element
   *
   * @usage
   * <hljs lang="js">
   *   app.config(function($mdIconProvider) {
   *     $mdIconProvider.defaultFontSet( 'fa' );
   *   });
   * </hljs>
   *
   */
        /**
   * @ngdoc method
   * @name $mdIconProvider#fontSet
   *
   * @description
   * When using a font set for `<md-icon>` you must specify the correct font classname in the `md-font-set`
   * attribute. If the fonset className is really long, your markup may become cluttered... an easy
   * solution is to define an `alias` for your fontset:
   *
   * @param {string} alias of the specified fontset.
   * @param {string} className of the fontset.
   *
   * @usage
   * <hljs lang="js">
   *   app.config(function($mdIconProvider) {
   *     // In this case, we set an alias for the `material-icons` fontset.
   *     $mdIconProvider.fontSet('md', 'material-icons');
   *   });
   * </hljs>
   *
   */
        /**
    * @ngdoc method
    * @name $mdIconProvider#defaultViewBoxSize
    *
    * @description
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures
    * the default width **and** height used for all icons; unless overridden by specific CSS.
    * The default sizing is (24px, 24px).
    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.
    * All icons in a set should be the same size. The default value is 24.
    *
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
    *
    * @usage
    * <hljs lang="js">
    *   app.config(function($mdIconProvider) {
    *
    *     // Configure URLs for icons specified by [set:]id.
    *
    *     $mdIconProvider
    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)
    *   });
    * </hljs>
    *
    */
        var config = {
            defaultViewBoxSize: 24,
            defaultFontSet: "material-icons",
            fontSets: []
        };
        MdIconProvider.prototype = {
            icon: function(id, url, viewBoxSize) {
                -1 == id.indexOf(":") && (id = "$default:" + id);
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            iconSet: function(id, url, viewBoxSize) {
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },
            defaultIconSet: function(url, viewBoxSize) {
                config.$default || (config.$default = new ConfigurationItem(url, viewBoxSize));
                config.$default.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
                return this;
            },
            defaultViewBoxSize: function(viewBoxSize) {
                config.defaultViewBoxSize = viewBoxSize;
                return this;
            },
            /**
    * Register an alias name associated with a font-icon library style ;
    */
            fontSet: function(alias, className) {
                config.fontSets.push({
                    alias: alias,
                    fontSet: className || alias
                });
                return this;
            },
            /**
    * Specify a default style name associated with a font-icon library
    * fallback to Material Icons.
    *
    */
            defaultFontSet: function(className) {
                config.defaultFontSet = className || "";
                return this;
            },
            defaultIconSize: function(iconSize) {
                config.defaultIconSize = iconSize;
                return this;
            },
            preloadIcons: function($templateCache) {
                var iconProvider = this;
                [ {
                    id: "md-tabs-arrow",
                    url: "md-tabs-arrow.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
                }, {
                    id: "md-close",
                    url: "md-close.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
                }, {
                    id: "md-cancel",
                    url: "md-cancel.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
                }, {
                    id: "md-menu",
                    url: "md-menu.svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
                }, {
                    id: "md-toggle-arrow",
                    url: "md-toggle-arrow-svg",
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
                }, {
                    id: "md-calendar",
                    url: "md-calendar.svg",
                    svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
                } ].forEach(function(asset) {
                    iconProvider.icon(asset.id, asset.url);
                    $templateCache.put(asset.url, asset.svg);
                });
            },
            $get: [ "$http", "$q", "$log", "$templateCache", "$mdUtil", function($http, $q, $log, $templateCache, $mdUtil) {
                this.preloadIcons($templateCache);
                return MdIconService(config, $http, $q, $log, $templateCache, $mdUtil);
            } ]
        };
        MdIconService.$inject = [ "config", "$http", "$q", "$log", "$templateCache", "$mdUtil" ];
    }();
    !function() {
        /**
 * @ngInject
 */
        function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout, $rootScope, $q) {
            var menuContainer, triggerElement, self = this;
            this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;
            /**
   * Called by our linking fn to provide access to the menu-content
   * element removed during link
   */
            this.init = function(setMenuContainer, opts) {
                opts = opts || {};
                menuContainer = setMenuContainer;
                // Default element for ARIA attributes has the ngClick or ngMouseenter expression
                triggerElement = $element[0].querySelector("[ng-click],[ng-mouseenter]");
                triggerElement.setAttribute("aria-expanded", "false");
                this.isInMenuBar = opts.isInMenuBar;
                this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll(".md-nested-menu"));
                menuContainer.on("$mdInterimElementRemove", function() {
                    self.isOpen = !1;
                });
                var menuContainerId = "menu_container_" + $mdUtil.nextUid();
                menuContainer.attr("id", menuContainerId);
                angular.element(triggerElement).attr({
                    "aria-owns": menuContainerId,
                    "aria-haspopup": "true"
                });
                $scope.$on("$destroy", this.disableHoverListener);
                menuContainer.on("$destroy", function() {
                    $mdMenu.destroy();
                });
            };
            var openMenuTimeout, menuItems, deregisterScopeListeners = [];
            this.enableHoverListener = function() {
                deregisterScopeListeners.push($rootScope.$on("$mdMenuOpen", function(event, el) {
                    if (menuContainer[0].contains(el[0])) {
                        self.currentlyOpenMenu = el.controller("mdMenu");
                        self.isAlreadyOpening = !1;
                        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));
                    }
                }));
                deregisterScopeListeners.push($rootScope.$on("$mdMenuClose", function(event, el) {
                    menuContainer[0].contains(el[0]) && (self.currentlyOpenMenu = undefined);
                }));
                menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].children[0].children));
                menuItems.on("mouseenter", self.handleMenuItemHover);
                menuItems.on("mouseleave", self.handleMenuItemMouseLeave);
            };
            this.disableHoverListener = function() {
                for (;deregisterScopeListeners.length; ) deregisterScopeListeners.shift()();
                menuItems && menuItems.off("mouseenter", self.handleMenuItemHover);
                menuItems && menuItems.off("mouseleave", self.handleMenuMouseLeave);
            };
            this.handleMenuItemHover = function(event) {
                if (!self.isAlreadyOpening) {
                    var nestedMenu = event.target.querySelector("md-menu") || $mdUtil.getClosest(event.target, "MD-MENU");
                    openMenuTimeout = $timeout(function() {
                        nestedMenu && (nestedMenu = angular.element(nestedMenu).controller("mdMenu"));
                        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {
                            var closeTo = self.nestLevel + 1;
                            self.currentlyOpenMenu.close(!0, {
                                closeTo: closeTo
                            });
                            self.isAlreadyOpening = !0;
                            nestedMenu.open();
                        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {
                            self.isAlreadyOpening = !0;
                            nestedMenu.open();
                        }
                    }, nestedMenu ? 100 : 250);
                    var focusableTarget = event.currentTarget.querySelector(".md-button:not([disabled])");
                    focusableTarget && focusableTarget.focus();
                }
            };
            this.handleMenuItemMouseLeave = function() {
                if (openMenuTimeout) {
                    $timeout.cancel(openMenuTimeout);
                    openMenuTimeout = undefined;
                }
            };
            /**
   * Uses the $mdMenu interim element service to open the menu contents
   */
            this.open = function(ev) {
                ev && ev.stopPropagation();
                ev && ev.preventDefault();
                if (!self.isOpen) {
                    self.enableHoverListener();
                    self.isOpen = !0;
                    triggerElement = triggerElement || (ev ? ev.target : $element[0]);
                    triggerElement.setAttribute("aria-expanded", "true");
                    $scope.$emit("$mdMenuOpen", $element);
                    $mdMenu.show({
                        scope: $scope,
                        mdMenuCtrl: self,
                        nestLevel: self.nestLevel,
                        element: menuContainer,
                        target: triggerElement,
                        preserveElement: !0,
                        parent: "body"
                    }).finally(function() {
                        triggerElement.setAttribute("aria-expanded", "false");
                        self.disableHoverListener();
                    });
                }
            };
            // Expose a open function to the child scope for html to use
            $scope.$mdOpenMenu = this.open;
            $scope.$watch(function() {
                return self.isOpen;
            }, function(isOpen) {
                if (isOpen) {
                    menuContainer.attr("aria-hidden", "false");
                    $element[0].classList.add("md-open");
                    angular.forEach(self.nestedMenus, function(el) {
                        el.classList.remove("md-open");
                    });
                } else {
                    menuContainer.attr("aria-hidden", "true");
                    $element[0].classList.remove("md-open");
                }
                $scope.$mdMenuIsOpen = self.isOpen;
            });
            this.focusMenuContainer = function() {
                var focusTarget = menuContainer[0].querySelector("[md-menu-focus-target]");
                focusTarget || (focusTarget = menuContainer[0].querySelector(".md-button"));
                focusTarget.focus();
            };
            this.registerContainerProxy = function(handler) {
                this.containerProxy = handler;
            };
            this.triggerContainerProxy = function(ev) {
                this.containerProxy && this.containerProxy(ev);
            };
            this.destroy = function() {
                return self.isOpen ? $mdMenu.destroy() : $q.when(!1);
            };
            // Use the $mdMenu interim element service to close the menu contents
            this.close = function(skipFocus, closeOpts) {
                if (self.isOpen) {
                    self.isOpen = !1;
                    var eventDetails = angular.extend({}, closeOpts, {
                        skipFocus: skipFocus
                    });
                    $scope.$emit("$mdMenuClose", $element, eventDetails);
                    $mdMenu.hide(null, closeOpts);
                    if (!skipFocus) {
                        var el = self.restoreFocusTo || $element.find("button")[0];
                        el instanceof angular.element && (el = el[0]);
                        el && el.focus();
                    }
                }
            };
            /**
   * Build a nice object out of our string attribute which specifies the
   * target mode for left and top positioning
   */
            this.positionMode = function() {
                var attachment = ($attrs.mdPositionMode || "target").split(" ");
                // If attachment is a single item, duplicate it for our second value.
                // ie. 'target' -> 'target target'
                1 == attachment.length && attachment.push(attachment[0]);
                return {
                    left: attachment[0],
                    top: attachment[1]
                };
            };
            /**
   * Build a nice object out of our string attribute which specifies
   * the offset of top and left in pixels.
   */
            this.offsets = function() {
                var position = ($attrs.mdOffset || "0 0").split(" ").map(parseFloat);
                if (2 == position.length) return {
                    left: position[0],
                    top: position[1]
                };
                if (1 == position.length) return {
                    top: position[0],
                    left: position[0]
                };
                throw Error("Invalid offsets specified. Please follow format <x, y> or <n>");
            };
        }
        angular.module("material.components.menu").controller("mdMenuCtrl", MenuController);
        MenuController.$inject = [ "$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout", "$rootScope", "$q" ];
    }();
    !function() {
        /**
 * @ngInject
 */
        function MenuDirective($mdUtil) {
            function compile(templateElement) {
                templateElement.addClass("md-menu");
                var triggerElement = templateElement.children()[0];
                triggerElement.hasAttribute("ng-click") || (triggerElement = triggerElement.querySelector("[ng-click],[ng-mouseenter]") || triggerElement);
                !triggerElement || "MD-BUTTON" != triggerElement.nodeName && "BUTTON" != triggerElement.nodeName || triggerElement.hasAttribute("type") || triggerElement.setAttribute("type", "button");
                if (2 != templateElement.children().length) throw Error(INVALID_PREFIX + "Expected two children elements.");
                // Default element for ARIA attributes has the ngClick or ngMouseenter expression
                triggerElement && triggerElement.setAttribute("aria-haspopup", "true");
                var nestedMenus = templateElement[0].querySelectorAll("md-menu"), nestingDepth = parseInt(templateElement[0].getAttribute("md-nest-level"), 10) || 0;
                nestedMenus && angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {
                    menuEl.hasAttribute("md-position-mode") || menuEl.setAttribute("md-position-mode", "cascade");
                    menuEl.classList.add("md-nested-menu");
                    menuEl.setAttribute("md-nest-level", nestingDepth + 1);
                });
                return link;
            }
            function link(scope, element, attrs, ctrls) {
                var mdMenuCtrl = ctrls[0], isInMenuBar = ctrls[1] != undefined, menuContainer = angular.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'), menuContents = element.children()[1];
                menuContents.hasAttribute("role") || menuContents.setAttribute("role", "menu");
                menuContainer.append(menuContents);
                element.on("$destroy", function() {
                    menuContainer.remove();
                });
                element.append(menuContainer);
                menuContainer[0].style.display = "none";
                mdMenuCtrl.init(menuContainer, {
                    isInMenuBar: isInMenuBar
                });
            }
            var INVALID_PREFIX = "Invalid HTML for md-menu: ";
            return {
                restrict: "E",
                require: [ "mdMenu", "?^mdMenuBar" ],
                controller: "mdMenuCtrl",
                // empty function to be built by link
                scope: !0,
                compile: compile
            };
        }
        /**
 * @ngdoc directive
 * @name mdMenu
 * @module material.components.menu
 * @restrict E
 * @description
 *
 * Menus are elements that open when clicked. They are useful for displaying
 * additional options within the context of an action.
 *
 * Every `md-menu` must specify exactly two child elements. The first element is what is
 * left in the DOM and is used to open the menu. This element is called the trigger element.
 * The trigger element's scope has access to `$mdOpenMenu($event)`
 * which it may call to open the menu. By passing $event as argument, the
 * corresponding event is stopped from propagating up the DOM-tree.
 *
 * The second element is the `md-menu-content` element which represents the
 * contents of the menu when it is open. Typically this will contain `md-menu-item`s,
 * but you can do custom content as well.
 *
 * <hljs lang="html">
 * <md-menu>
 *  <!-- Trigger element is a md-button with an icon -->
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu">
 *    <md-icon md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>

 * ## Sizing Menus
 *
 * The width of the menu when it is open may be specified by specifying a `width`
 * attribute on the `md-menu-content` element.
 * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)
 * for more information.
 *
 *
 * ## Aligning Menus
 *
 * When a menu opens, it is important that the content aligns with the trigger element.
 * Failure to align menus can result in jarring experiences for users as content
 * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help
 * with alignment.
 *
 * ### Target Mode
 *
 * By default, `md-menu` will attempt to align the `md-menu-content` by aligning
 * designated child elements in both the trigger and the menu content.
 *
 * To specify the alignment element in the `trigger` you can use the `md-menu-origin`
 * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`
 * will be used as the origin element.
 *
 * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a
 * `md-menu-item` to specify the node that it should try and align with.
 *
 * In this example code, we specify an icon to be our origin element, and an
 * icon in our menu content to be our alignment target. This ensures that both
 * icons are aligned when the menu opens.
 *
 * <hljs lang="html">
 * <md-menu>
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open some menu">
 *    <md-icon md-menu-origin md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item>
 *      <md-button ng-click="doSomething()" aria-label="Do something">
 *        <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>
 *        Do Something
 *      </md-button>
 *    </md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>
 *
 * Sometimes we want to specify alignment on the right side of an element, for example
 * if we have a menu on the right side a toolbar, we want to right align our menu content.
 *
 * We can specify the origin by using the `md-position-mode` attribute on both
 * the `x` and `y` axis. Right now only the `x-axis` has more than one option.
 * You may specify the default mode of `target target` or
 * `target-right target` to specify a right-oriented alignment target. See the
 * position section of the demos for more examples.
 *
 * ### Menu Offsets
 *
 * It is sometimes unavoidable to need to have a deeper level of control for
 * the positioning of a menu to ensure perfect alignment. `md-menu` provides
 * the `md-offset` attribute to allow pixel level specificty of adjusting the
 * exact positioning.
 *
 * This offset is provided in the format of `x y` or `n` where `n` will be used
 * in both the `x` and `y` axis.
 *
 * For example, to move a menu by `2px` from the top, we can use:
 * <hljs lang="html">
 * <md-menu md-offset="2 0">
 *   <!-- menu-content -->
 * </md-menu>
 * </hljs>

 * ### Preventing close
 *
 * Sometimes you would like to be able to click on a menu item without having the menu
 * close. To do this, ngMaterial exposes the `md-prevent-menu-close` attribute which
 * can be added to a button inside a menu to stop the menu from automatically closing.
 * You can then close the menu programatically by injecting `$mdMenu` and calling 
 * `$mdMenu.hide()`.
 *
 * <hljs lang="html">
 * <md-menu-item>
 *   <md-button ng-click="doSomething()" aria-label="Do something" md-prevent-menu-close="md-prevent-menu-close">
 *     <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>
 *     Do Something
 *   </md-button>
 * </md-menu-item>
 * </hljs>
 *
 * @usage
 * <hljs lang="html">
 * <md-menu>
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button">
 *    <md-icon md-svg-icon="call:phone"></md-icon>
 *  </md-button>
 *  <md-menu-content>
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
 *  </md-menu-content>
 * </md-menu>
 * </hljs>
 *
 * @param {string} md-position-mode The position mode in the form of
 *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis
 *           also suppports `target-right`.
 * @param {string} md-offset An offset to apply to the dropdown after positioning
 *           `x`, `y`. Default value is `0`,`0`.
 *
 */
        angular.module("material.components.menu").directive("mdMenu", MenuDirective);
        MenuDirective.$inject = [ "$mdUtil" ];
    }();
    !function() {
        /*
 * Interim element provider for the menu.
 * Handles behavior for a menu while it is open, including:
 *    - handling animating the menu opening/closing
 *    - handling key/mouse events on the menu element
 *    - handling enabling/disabling scroll while the menu is open
 *    - handling redrawing during resizes and orientation changes
 *
 */
        function MenuProvider($$interimElementProvider) {
            /* @ngInject */
            function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
                /**
     * Show modal backdrop element...
     * @returns {function(): void} A function that removes this backdrop
     */
                function showBackdrop(scope, element, options) {
                    if (options.nestLevel) return angular.noop;
                    // If we are not within a dialog...
                    options.disableParentScroll && !$mdUtil.getClosest(options.target, "MD-DIALOG") ? // !! DO this before creating the backdrop; since disableScrollAround()
                    //    configures the scroll offset; which is used by mdBackDrop postLink()
                    options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent) : options.disableParentScroll = !1;
                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");
                        $animate.enter(options.backdrop, $document[0].body);
                    }
                    /**
       * Hide and destroys the backdrop created by showBackdrop()
       */
                    return function() {
                        options.backdrop && options.backdrop.remove();
                        options.disableParentScroll && options.restoreScroll();
                    };
                }
                /**
     * Removing the menu element from the DOM and remove all associated event listeners
     * and backdrop
     */
                function onRemove(scope, element, opts) {
                    /**
       * Detach the element
       */
                    function detachAndClean() {
                        element.removeClass("md-active");
                        detachElement(element, opts);
                        opts.alreadyOpen = !1;
                    }
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();
                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal
                    /**
       * For normal closes, animate the removal.
       * For forced closes (like $destroy events), skip the animations
       */
                    return !0 === opts.$destroy ? detachAndClean() : function() {
                        return $animateCss(element, {
                            addClass: "md-leave"
                        }).start();
                    }().then(detachAndClean);
                }
                /**
     * Inserts and configures the staged Menu element into the DOM, positioning it,
     * and wiring up various interaction events
     */
                function onShow(scope, element, opts) {
                    /**
       * Activate interaction on the menu. Wire up keyboard listerns for
       * clicks, keypresses, backdrop closing, etc.
       */
                    function activateInteraction() {
                        // ************************************
                        // internal functions
                        // ************************************
                        function onMenuKeyDown(ev) {
                            var handled;
                            switch (ev.keyCode) {
                              case $mdConstant.KEY_CODE.ESCAPE:
                                opts.mdMenuCtrl.close(!1, {
                                    closeAll: !0
                                });
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.UP_ARROW:
                                focusMenuItem(ev, opts.menuContentEl, opts, -1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.DOWN_ARROW:
                                focusMenuItem(ev, opts.menuContentEl, opts, 1) || opts.nestLevel || opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.LEFT_ARROW:
                                opts.nestLevel ? opts.mdMenuCtrl.close() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                                break;

                              case $mdConstant.KEY_CODE.RIGHT_ARROW:
                                var parentMenu = $mdUtil.getClosest(ev.target, "MD-MENU");
                                parentMenu && parentMenu != opts.parent[0] ? ev.target.click() : opts.mdMenuCtrl.triggerContainerProxy(ev);
                                handled = !0;
                            }
                            if (handled) {
                                ev.preventDefault();
                                ev.stopImmediatePropagation();
                            }
                        }
                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            scope.$apply(function() {
                                opts.mdMenuCtrl.close(!0, {
                                    closeAll: !0
                                });
                            });
                        }
                        // Close menu on menu item click, if said menu-item is not disabled
                        function captureClickListener(e) {
                            function hasAnyAttribute(target, attrs) {
                                if (!target) return !1;
                                for (var attr, i = 0; attr = attrs[i]; ++i) for (var rawAttr, altForms = [ attr, "data-" + attr, "x-" + attr ], j = 0; rawAttr = altForms[j]; ++j) if (target.hasAttribute(rawAttr)) return !0;
                                return !1;
                            }
                            var target = e.target;
                            // Traverse up the event until we get to the menuContentEl to see if
                            // there is an ng-click and that the ng-click is not disabled
                            do {
                                if (target == opts.menuContentEl[0]) return;
                                if ((hasAnyAttribute(target, [ "ng-click", "ng-href", "ui-sref" ]) || "BUTTON" == target.nodeName || "MD-BUTTON" == target.nodeName) && !hasAnyAttribute(target, [ "md-prevent-menu-close" ])) {
                                    var closestMenu = $mdUtil.getClosest(target, "MD-MENU");
                                    target.hasAttribute("disabled") || closestMenu && closestMenu != opts.parent[0] || function() {
                                        scope.$apply(function() {
                                            opts.mdMenuCtrl.close(!0, {
                                                closeAll: !0
                                            });
                                        });
                                    }();
                                    break;
                                }
                            } while (target = target.parentNode);
                        }
                        element.addClass("md-clickable");
                        // close on backdrop click
                        opts.backdrop && opts.backdrop.on("click", onBackdropClick);
                        // Wire up keyboard listeners.
                        // - Close on escape,
                        // - focus next item on down arrow,
                        // - focus prev item on up
                        opts.menuContentEl.on("keydown", onMenuKeyDown);
                        opts.menuContentEl[0].addEventListener("click", captureClickListener, !0);
                        // kick off initial focus in the menu on the first element
                        var focusTarget = opts.menuContentEl[0].querySelector("[md-menu-focus-target]");
                        if (!focusTarget) {
                            var firstChild = opts.menuContentEl[0].firstElementChild;
                            focusTarget = firstChild && (firstChild.querySelector(".md-button:not([disabled])") || firstChild.firstElementChild);
                        }
                        focusTarget && focusTarget.focus();
                        return function() {
                            element.removeClass("md-clickable");
                            opts.backdrop && opts.backdrop.off("click", onBackdropClick);
                            opts.menuContentEl.off("keydown", onMenuKeyDown);
                            opts.menuContentEl[0].removeEventListener("click", captureClickListener, !0);
                        };
                    }
                    !/**
       * Check for valid opts and set some sane defaults
       */
                    function() {
                        if (!opts.target) throw Error("$mdMenu.show() expected a target to animate from in options.target");
                        angular.extend(opts, {
                            alreadyOpen: !1,
                            isRemoved: !1,
                            target: angular.element(opts.target),
                            //make sure it's not a naked dom node
                            parent: angular.element(opts.parent),
                            menuContentEl: angular.element(element[0].querySelector("md-menu-content"))
                        });
                    }();
                    // Wire up theming on our menu element
                    $mdTheming.inherit(opts.menuContentEl, opts.target);
                    // Register various listeners to move menu on resize/orientation change
                    opts.cleanupResizing = /**
       * Configure various resize listeners for screen changes
       */
                    function() {
                        var repositionMenu = function(target, options) {
                            return $$rAF.throttle(function() {
                                if (!opts.isRemoved) {
                                    var position = calculateMenuPosition(target, options);
                                    target.css(animator.toCss(position));
                                }
                            });
                        }(element, opts);
                        $window.addEventListener("resize", repositionMenu);
                        $window.addEventListener("orientationchange", repositionMenu);
                        return function() {
                            // Disable resizing handlers
                            $window.removeEventListener("resize", repositionMenu);
                            $window.removeEventListener("orientationchange", repositionMenu);
                        };
                    }();
                    opts.hideBackdrop = showBackdrop(scope, element, opts);
                    // Return the promise for when our menu is done animating in
                    /**
       * Place the menu into the DOM and call positioning related functions
       */
                    return function() {
                        opts.parent.append(element);
                        element[0].style.display = "";
                        return $q(function(resolve) {
                            var position = calculateMenuPosition(element, opts);
                            element.removeClass("md-leave");
                            // Animate the menu scaling, and opacity [from its position origin (default == top-left)]
                            // to normal scale.
                            $animateCss(element, {
                                addClass: "md-active",
                                from: animator.toCss(position),
                                to: animator.toCss({
                                    transform: ""
                                })
                            }).start().then(resolve);
                        });
                    }().then(function(response) {
                        opts.alreadyOpen = !0;
                        opts.cleanupInteraction = activateInteraction();
                        return response;
                    });
                }
                /**
     * Takes a keypress event and focuses the next/previous menu
     * item from the emitting element
     * @param {event} e - The origin keypress event
     * @param {angular.element} menuEl - The menu element
     * @param {object} opts - The interim element options for the mdMenu
     * @param {number} direction - The direction to move in (+1 = next, -1 = prev)
     */
                function focusMenuItem(e, menuEl, opts, direction) {
                    for (var didFocus, currentItem = $mdUtil.getClosest(e.target, "MD-MENU-ITEM"), items = $mdUtil.nodesToArray(menuEl[0].children), currentIndex = items.indexOf(currentItem), i = currentIndex + direction; i >= 0 && i < items.length; i += direction) {
                        didFocus = attemptFocus(items[i].querySelector(".md-button"));
                        if (didFocus) break;
                    }
                    return didFocus;
                }
                /**
     * Attempts to focus an element. Checks whether that element is the currently
     * focused element after attempting.
     * @param {HTMLElement} el - the element to attempt focus on
     * @returns {bool} - whether the element was successfully focused
     */
                function attemptFocus(el) {
                    if (el && -1 != el.getAttribute("tabindex")) {
                        el.focus();
                        return $document[0].activeElement == el;
                    }
                }
                /**
     * Use browser to remove this element without triggering a $destroy event
     */
                function detachElement(element, opts) {
                    opts.preserveElement ? toNode(element).style.display = "none" : toNode(element).parentNode === toNode(opts.parent) && toNode(opts.parent).removeChild(toNode(element));
                }
                /**
     * Computes menu position and sets the style on the menu container
     * @param {HTMLElement} el - the menu container element
     * @param {object} opts - the interim element options object
     */
                function calculateMenuPosition(el, opts) {
                    var alignTarget, containerNode = el[0], openMenuNode = el[0].firstElementChild, openMenuNodeRect = openMenuNode.getBoundingClientRect(), boundryNode = $document[0].body, boundryNodeRect = boundryNode.getBoundingClientRect(), menuStyle = $window.getComputedStyle(openMenuNode), originNode = opts.target[0].querySelector("[md-menu-origin]") || opts.target[0], originNodeRect = originNode.getBoundingClientRect(), bounds = {
                        left: boundryNodeRect.left + MENU_EDGE_MARGIN,
                        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,
                        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
                        right: boundryNodeRect.right - MENU_EDGE_MARGIN
                    }, alignTargetRect = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, existingOffsets = {
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0
                    }, positionMode = opts.mdMenuCtrl.positionMode();
                    if ("target" == positionMode.top || "target" == positionMode.left || "target-right" == positionMode.left) {
                        alignTarget = /**
       * Gets the first visible child in the openMenuNode
       * Necessary incase menu nodes are being dynamically hidden
       */
                        function() {
                            for (var i = 0; i < openMenuNode.children.length; ++i) if ("none" != $window.getComputedStyle(openMenuNode.children[i]).display) return openMenuNode.children[i];
                        }();
                        if (alignTarget) {
                            // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child
                            alignTarget = alignTarget.firstElementChild || alignTarget;
                            alignTarget = alignTarget.querySelector("[md-menu-align-target]") || alignTarget;
                            alignTargetRect = alignTarget.getBoundingClientRect();
                            existingOffsets = {
                                top: parseFloat(containerNode.style.top || 0),
                                left: parseFloat(containerNode.style.left || 0)
                            };
                        }
                    }
                    var position = {}, transformOrigin = "top ";
                    switch (positionMode.top) {
                      case "target":
                        position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;
                        break;

                      case "cascade":
                        position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;
                        break;

                      case "bottom":
                        position.top = originNodeRect.top + originNodeRect.height;
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');
                    }
                    switch (positionMode.left) {
                      case "target":
                        position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;
                        transformOrigin += "left";
                        break;

                      case "target-right":
                        position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
                        transformOrigin += "right";
                        break;

                      case "cascade":
                        var willFitRight = originNodeRect.right + openMenuNodeRect.width < bounds.right;
                        position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
                        transformOrigin += willFitRight ? "left" : "right";
                        break;

                      case "left":
                        position.left = originNodeRect.left;
                        transformOrigin += "left";
                        break;

                      default:
                        throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');
                    }
                    var offsets = opts.mdMenuCtrl.offsets();
                    position.top += offsets.top;
                    position.left += offsets.left;
                    !/**
       * Clamps the repositioning of the menu within the confines of
       * bounding element (often the screen/body)
       */
                    function(pos) {
                        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);
                        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);
                    }(position);
                    var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1)) / 100, scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1)) / 100;
                    return {
                        top: Math.round(position.top),
                        left: Math.round(position.left),
                        // Animate a scale out if we aren't just repositioning
                        transform: opts.alreadyOpen ? undefined : $mdUtil.supplant("scale({0},{1})", [ scaleX, scaleY ]),
                        transformOrigin: transformOrigin
                    };
                }
                var animator = $mdUtil.dom.animator;
                return {
                    parent: "body",
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: !0,
                    disableParentScroll: !0,
                    skipCompile: !0,
                    preserveScope: !0,
                    skipHide: !0,
                    themable: !0
                };
            }
            function toNode(el) {
                el instanceof angular.element && (el = el[0]);
                return el;
            }
            var MENU_EDGE_MARGIN = 8;
            menuDefaultOptions.$inject = [ "$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate" ];
            return $$interimElementProvider("$mdMenu").setDefaults({
                methods: [ "target" ],
                options: menuDefaultOptions
            });
        }
        angular.module("material.components.menu").provider("$mdMenu", MenuProvider);
        MenuProvider.$inject = [ "$$interimElementProvider" ];
    }();
    !function() {
        /**
 * @ngInject
 */
        function MenuBarController($scope, $rootScope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$mdConstant = $mdConstant;
            this.$mdUtil = $mdUtil;
            this.$document = $document;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$timeout = $timeout;
            var self = this;
            angular.forEach(BOUND_MENU_METHODS, function(methodName) {
                self[methodName] = angular.bind(self, self[methodName]);
            });
        }
        angular.module("material.components.menuBar").controller("MenuBarController", MenuBarController);
        var BOUND_MENU_METHODS = [ "handleKeyDown", "handleMenuHover", "scheduleOpenHoveredMenu", "cancelScheduledOpen" ];
        MenuBarController.$inject = [ "$scope", "$rootScope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout" ];
        MenuBarController.prototype.init = function() {
            var $element = this.$element, $mdUtil = this.$mdUtil, $scope = this.$scope, self = this, deregisterFns = [];
            $element.on("keydown", this.handleKeyDown);
            this.parentToolbar = $mdUtil.getClosest($element, "MD-TOOLBAR");
            deregisterFns.push(this.$rootScope.$on("$mdMenuOpen", function(event, el) {
                if (-1 != self.getMenus().indexOf(el[0])) {
                    $element[0].classList.add("md-open");
                    el[0].classList.add("md-open");
                    self.currentlyOpenMenu = el.controller("mdMenu");
                    self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);
                    self.enableOpenOnHover();
                }
            }));
            deregisterFns.push(this.$rootScope.$on("$mdMenuClose", function(event, el, opts) {
                var rootMenus = self.getMenus();
                if (-1 != rootMenus.indexOf(el[0])) {
                    $element[0].classList.remove("md-open");
                    el[0].classList.remove("md-open");
                }
                if ($element[0].contains(el[0])) {
                    for (var parentMenu = el[0]; parentMenu && -1 == rootMenus.indexOf(parentMenu); ) parentMenu = $mdUtil.getClosest(parentMenu, "MD-MENU", !0);
                    if (parentMenu) {
                        opts.skipFocus || parentMenu.querySelector("button:not([disabled])").focus();
                        self.currentlyOpenMenu = undefined;
                        self.disableOpenOnHover();
                        self.setKeyboardMode(!0);
                    }
                }
            }));
            $scope.$on("$destroy", function() {
                for (;deregisterFns.length; ) deregisterFns.shift()();
            });
            this.setKeyboardMode(!0);
        };
        MenuBarController.prototype.setKeyboardMode = function(enabled) {
            enabled ? this.$element[0].classList.add("md-keyboard-mode") : this.$element[0].classList.remove("md-keyboard-mode");
        };
        MenuBarController.prototype.enableOpenOnHover = function() {
            if (!this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !0;
                var parentToolbar;
                if (parentToolbar = this.parentToolbar) {
                    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute("style");
                    parentToolbar.style.position = "relative";
                    parentToolbar.style.zIndex = 100;
                }
                angular.element(this.getMenus()).on("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.handleMenuHover = function(e) {
            this.setKeyboardMode(!1);
            this.openOnHoverEnabled && this.scheduleOpenHoveredMenu(e);
        };
        MenuBarController.prototype.disableOpenOnHover = function() {
            if (this.openOnHoverEnabled) {
                this.openOnHoverEnabled = !1;
                var parentToolbar;
                (parentToolbar = this.parentToolbar) && (parentToolbar.style.cssText = parentToolbar.dataset.mdRestoreStyle || "");
                angular.element(this.getMenus()).off("mouseenter", this.handleMenuHover);
            }
        };
        MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {
            var menuEl = angular.element(e.currentTarget), menuCtrl = menuEl.controller("mdMenu");
            this.setKeyboardMode(!1);
            this.scheduleOpenMenu(menuCtrl);
        };
        MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {
            var self = this, $timeout = this.$timeout;
            if (menuCtrl != self.currentlyOpenMenu) {
                $timeout.cancel(self.pendingMenuOpen);
                self.pendingMenuOpen = $timeout(function() {
                    self.pendingMenuOpen = undefined;
                    self.currentlyOpenMenu && self.currentlyOpenMenu.close(!0, {
                        closeAll: !0
                    });
                    menuCtrl.open();
                }, 200, !1);
            }
        };
        MenuBarController.prototype.handleKeyDown = function(e) {
            var keyCodes = this.$mdConstant.KEY_CODE, currentMenu = this.currentlyOpenMenu, wasOpen = currentMenu && currentMenu.isOpen;
            this.setKeyboardMode(!0);
            var handled, newMenu, newMenuCtrl;
            switch (e.keyCode) {
              case keyCodes.DOWN_ARROW:
                currentMenu ? currentMenu.focusMenuContainer() : this.openFocusedMenu();
                handled = !0;
                break;

              case keyCodes.UP_ARROW:
                currentMenu && currentMenu.close();
                handled = !0;
                break;

              case keyCodes.LEFT_ARROW:
                newMenu = this.focusMenu(-1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
                break;

              case keyCodes.RIGHT_ARROW:
                newMenu = this.focusMenu(1);
                if (wasOpen) {
                    newMenuCtrl = angular.element(newMenu).controller("mdMenu");
                    this.scheduleOpenMenu(newMenuCtrl);
                }
                handled = !0;
            }
            if (handled) {
                e && e.preventDefault && e.preventDefault();
                e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            }
        };
        MenuBarController.prototype.focusMenu = function(direction) {
            var menus = this.getMenus(), focusedIndex = this.getFocusedMenuIndex();
            -1 == focusedIndex && (focusedIndex = this.getOpenMenuIndex());
            var changed = !1;
            if (-1 == focusedIndex) {
                focusedIndex = 0;
                changed = !0;
            } else if (direction < 0 && focusedIndex > 0 || direction > 0 && focusedIndex < menus.length - direction) {
                focusedIndex += direction;
                changed = !0;
            }
            if (changed) {
                menus[focusedIndex].querySelector("button").focus();
                return menus[focusedIndex];
            }
        };
        MenuBarController.prototype.openFocusedMenu = function() {
            var menu = this.getFocusedMenu();
            menu && angular.element(menu).controller("mdMenu").open();
        };
        MenuBarController.prototype.getMenus = function() {
            var $element = this.$element;
            return this.$mdUtil.nodesToArray($element[0].children).filter(function(el) {
                return "MD-MENU" == el.nodeName;
            });
        };
        MenuBarController.prototype.getFocusedMenu = function() {
            return this.getMenus()[this.getFocusedMenuIndex()];
        };
        MenuBarController.prototype.getFocusedMenuIndex = function() {
            var $mdUtil = this.$mdUtil, focusedEl = $mdUtil.getClosest(this.$document[0].activeElement, "MD-MENU");
            return focusedEl ? this.getMenus().indexOf(focusedEl) : -1;
        };
        MenuBarController.prototype.getOpenMenuIndex = function() {
            for (var menus = this.getMenus(), i = 0; i < menus.length; ++i) if (menus[i].classList.contains("md-open")) return i;
            return -1;
        };
    }();
    !function() {
        /* @ngInject */
        function MenuBarDirective($mdUtil, $mdTheming) {
            return {
                restrict: "E",
                require: "mdMenuBar",
                controller: "MenuBarController",
                compile: function(templateEl, templateAttrs) {
                    templateAttrs.ariaRole || templateEl[0].setAttribute("role", "menubar");
                    angular.forEach(templateEl[0].children, function(menuEl) {
                        if ("MD-MENU" == menuEl.nodeName) {
                            if (!menuEl.hasAttribute("md-position-mode")) {
                                menuEl.setAttribute("md-position-mode", "left bottom");
                                menuEl.querySelector("button,a").setAttribute("role", "menuitem");
                            }
                            var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll("md-menu-content"));
                            angular.forEach(contentEls, function(contentEl) {
                                contentEl.classList.add("md-menu-bar-menu");
                                contentEl.classList.add("md-dense");
                                contentEl.hasAttribute("width") || contentEl.setAttribute("width", 5);
                            });
                        }
                    });
                    return function(scope, el, attrs, ctrl) {
                        $mdTheming(scope, el);
                        ctrl.init();
                    };
                }
            };
        }
        /**
 * @ngdoc directive
 * @name mdMenuBar
 * @module material.components.menu-bar
 * @restrict E
 * @description
 *
 * Menu bars are containers that hold multiple menus. They change the behavior and appearence
 * of the `md-menu` directive to behave similar to an operating system provided menu.
 *
 * @usage
 * <hljs lang="html">
 * <md-menu-bar>
 *   <md-menu>
 *     <button ng-click="$mdOpenMenu()">
 *       File
 *     </button>
 *     <md-menu-content>
 *       <md-menu-item>
 *         <md-button ng-click="ctrl.sampleAction('share', $event)">
 *           Share...
 *         </md-button>
 *       </md-menu-item>
 *       <md-menu-divider></md-menu-divider>
 *       <md-menu-item>
 *       <md-menu-item>
 *         <md-menu>
 *           <md-button ng-click="$mdOpenMenu()">New</md-button>
 *           <md-menu-content>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *           </md-menu-content>
 *         </md-menu>
 *       </md-menu-item>
 *     </md-menu-content>
 *   </md-menu>
 * </md-menu-bar>
 * </hljs>
 *
 * ## Menu Bar Controls
 *
 * You may place `md-menu-items` that function as controls within menu bars.
 * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.
 * `type="checkbox"` will function as a boolean control for the `ng-model` attribute of the
 * `md-menu-item`. `type="radio"` will function like a radio button, setting the `ngModel`
 * to the `string` value of the `value` attribute. If you need non-string values, you can use
 * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.
 *
 * <hljs lang="html">
 * <md-menu-bar>
 *  <md-menu>
 *    <button ng-click="$mdOpenMenu()">
 *      Sample Menu
 *    </button>
 *    <md-menu-content>
 *      <md-menu-item type="checkbox" ng-model="settings.allowChanges">Allow changes</md-menu-item>
 *      <md-menu-divider></md-menu-divider>
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 1</md-menu-item>
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 2</md-menu-item>
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 3</md-menu-item>
 *    </md-menu-content>
 *  </md-menu>
 * </md-menu-bar>
 * </hljs>
 *
 *
 * ### Nesting Menus
 *
 * Menus may be nested within menu bars. This is commonly called cascading menus.
 * To nest a menu place the nested menu inside the content of the `md-menu-item`.
 * <hljs lang="html">
 * <md-menu-item>
 *   <md-menu>
 *     <button ng-click="$mdOpenMenu()">New</md-button>
 *     <md-menu-content>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *     </md-menu-content>
 *   </md-menu>
 * </md-menu-item>
 * </hljs>
 *
 */
        angular.module("material.components.menuBar").directive("mdMenuBar", MenuBarDirective);
        MenuBarDirective.$inject = [ "$mdUtil", "$mdTheming" ];
    }();
    !function() {
        function MenuDividerDirective() {
            return {
                restrict: "E",
                compile: function(templateEl, templateAttrs) {
                    templateAttrs.role || templateEl[0].setAttribute("role", "separator");
                }
            };
        }
        angular.module("material.components.menuBar").directive("mdMenuDivider", MenuDividerDirective);
    }();
    !function() {
        /**
 * @ngInject
 */
        function MenuItemController($scope, $element, $attrs) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$scope = $scope;
        }
        angular.module("material.components.menuBar").controller("MenuItemController", MenuItemController);
        MenuItemController.$inject = [ "$scope", "$element", "$attrs" ];
        MenuItemController.prototype.init = function(ngModel) {
            var $element = this.$element, $attrs = this.$attrs;
            this.ngModel = ngModel;
            if ("checkbox" == $attrs.type || "radio" == $attrs.type) {
                this.mode = $attrs.type;
                this.iconEl = $element[0].children[0];
                this.buttonEl = $element[0].children[1];
                ngModel && // Clear ngAria set attributes
                this.initClickListeners();
            }
        };
        // ngAria auto sets attributes on a menu-item with a ngModel.
        // We don't want this because our content (buttons) get the focus
        // and set their own aria attributes appropritately. Having both
        // breaks NVDA / JAWS. This undeoes ngAria's attrs.
        MenuItemController.prototype.clearNgAria = function() {
            var el = this.$element[0], clearAttrs = [ "role", "tabindex", "aria-invalid", "aria-checked" ];
            angular.forEach(clearAttrs, function(attr) {
                el.removeAttribute(attr);
            });
        };
        MenuItemController.prototype.initClickListeners = function() {
            function isSelected() {
                if ("radio" == mode) {
                    var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;
                    return ngModel.$modelValue == val;
                }
                return ngModel.$modelValue;
            }
            function setDisabled(disabled) {
                disabled ? button.off("click", handleClick) : button.on("click", handleClick);
            }
            var self = this, ngModel = this.ngModel, $scope = this.$scope, $attrs = this.$attrs, mode = (this.$element, 
            this.mode);
            this.handleClick = angular.bind(this, this.handleClick);
            var icon = this.iconEl, button = angular.element(this.buttonEl), handleClick = this.handleClick;
            $attrs.$observe("disabled", setDisabled);
            setDisabled($attrs.disabled);
            ngModel.$render = function() {
                self.clearNgAria();
                if (isSelected()) {
                    icon.style.display = "";
                    button.attr("aria-checked", "true");
                } else {
                    icon.style.display = "none";
                    button.attr("aria-checked", "false");
                }
            };
            $scope.$$postDigest(ngModel.$render);
        };
        MenuItemController.prototype.handleClick = function(e) {
            var newVal, mode = this.mode, ngModel = this.ngModel, $attrs = this.$attrs;
            "checkbox" == mode ? newVal = !ngModel.$modelValue : "radio" == mode && (newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value);
            ngModel.$setViewValue(newVal);
            ngModel.$render();
        };
    }();
    !function() {
        /* @ngInject */
        function MenuItemDirective() {
            return {
                require: [ "mdMenuItem", "?ngModel" ],
                priority: 210,
                // ensure that our post link runs after ngAria
                compile: function(templateEl, templateAttrs) {
                    function setDefault(attr, val, el) {
                        el = el || templateEl;
                        el instanceof angular.element && (el = el[0]);
                        el.hasAttribute(attr) || el.setAttribute(attr, val);
                    }
                    function moveAttrToButton(attr) {
                        if (templateEl[0].hasAttribute(attr)) {
                            var val = templateEl[0].getAttribute(attr);
                            buttonEl[0].setAttribute(attr, val);
                            templateEl[0].removeAttribute(attr);
                        }
                    }
                    if ("checkbox" == templateAttrs.type || "radio" == templateAttrs.type) {
                        var text = templateEl[0].textContent, buttonEl = angular.element('<md-button type="button"></md-button>');
                        buttonEl.html(text);
                        buttonEl.attr("tabindex", "0");
                        templateEl.html("");
                        templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));
                        templateEl.append(buttonEl);
                        templateEl[0].classList.add("md-indent");
                        setDefault("role", "checkbox" == templateAttrs.type ? "menuitemcheckbox" : "menuitemradio", buttonEl);
                        angular.forEach([ "ng-disabled" ], moveAttrToButton);
                    } else setDefault("role", "menuitem", templateEl[0].querySelector("md-button,button,a"));
                    return function(scope, el, attrs, ctrls) {
                        var ctrl = ctrls[0], ngModel = ctrls[1];
                        ctrl.init(ngModel);
                    };
                },
                controller: "MenuItemController"
            };
        }
        angular.module("material.components.menuBar").directive("mdMenuItem", MenuItemDirective);
    }();
    !function() {
        function MdTab() {
            function postLink(scope, element, attr, ctrl) {
                if (ctrl) {
                    var index = ctrl.getTabElementIndex(element), body = firstChild(element, "md-tab-body").remove(), label = firstChild(element, "md-tab-label").remove(), data = ctrl.insertTab({
                        scope: scope,
                        parent: scope.$parent,
                        index: index,
                        element: element,
                        template: body.html(),
                        label: label.html()
                    }, index);
                    scope.select = scope.select || angular.noop;
                    scope.deselect = scope.deselect || angular.noop;
                    scope.$watch("active", function(active) {
                        active && ctrl.select(data.getIndex(), !0);
                    });
                    scope.$watch("disabled", function() {
                        ctrl.refreshIndex();
                    });
                    scope.$watch(function() {
                        return ctrl.getTabElementIndex(element);
                    }, function(newIndex) {
                        data.index = newIndex;
                        ctrl.updateTabOrder();
                    });
                    scope.$on("$destroy", function() {
                        ctrl.removeTab(data);
                    });
                }
            }
            function firstChild(element, tagName) {
                for (var children = element[0].children, i = 0, len = children.length; i < len; i++) {
                    var child = children[i];
                    if (child.tagName === tagName.toUpperCase()) return angular.element(child);
                }
                return angular.element();
            }
            return {
                require: "^?mdTabs",
                terminal: !0,
                compile: function(element, attr) {
                    var label = firstChild(element, "md-tab-label"), body = firstChild(element, "md-tab-body");
                    if (0 == label.length) {
                        label = angular.element("<md-tab-label></md-tab-label>");
                        attr.label ? label.text(attr.label) : label.append(element.contents());
                        if (0 == body.length) {
                            var contents = element.contents().detach();
                            body = angular.element("<md-tab-body></md-tab-body>");
                            body.append(contents);
                        }
                    }
                    element.append(label);
                    body.html() && element.append(body);
                    return postLink;
                },
                scope: {
                    active: "=?mdActive",
                    disabled: "=?ngDisabled",
                    select: "&?mdOnSelect",
                    deselect: "&?mdOnDeselect"
                }
            };
        }
        /**
 * @ngdoc directive
 * @name mdTab
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested
 * markup of the `<md-tab>` is used as the tab header markup.
 *
 * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This
 * is to define a clear separation between the tab content and the tab label.
 *
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can
 * be initiated via data binding changes, programmatic invocation, or user gestures.
 *
 * @param {string=} label Optional attribute to specify a simple string as the tab label
 * @param {boolean=} ng-disabled If present and expression evaluates to truthy, disabled tab selection.
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.
 * @param {boolean=} md-active When true, sets the active tab.  Note: There can only be one active tab at a time.
 *
 *
 * @usage
 *
 * <hljs lang="html">
 * <md-tab label="" ng-disabled md-on-select="" md-on-deselect="" >
 *   <h3>My Tab content</h3>
 * </md-tab>
 *
 * <md-tab >
 *   <md-tab-label>
 *     <h3>My Tab content</h3>
 *   </md-tab-label>
 *   <md-tab-body>
 *     <p>
 *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
 *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae
 *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
 *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
 *     </p>
 *   </md-tab-body>
 * </md-tab>
 * </hljs>
 *
 */
        angular.module("material.components.tabs").directive("mdTab", MdTab);
    }();
    !function() {
        function MdTabItem() {
            return {
                require: "^?mdTabs",
                link: function(scope, element, attr, ctrl) {
                    ctrl && ctrl.attachRipple(scope, element);
                }
            };
        }
        angular.module("material.components.tabs").directive("mdTabItem", MdTabItem);
    }();
    !function() {
        function MdTabLabel() {
            return {
                terminal: !0
            };
        }
        angular.module("material.components.tabs").directive("mdTabLabel", MdTabLabel);
    }();
    !function() {
        function MdTabScroll($parse) {
            return {
                restrict: "A",
                compile: function($element, attr) {
                    var fn = $parse(attr.mdTabScroll, null, !0);
                    return function(scope, element) {
                        element.on("mousewheel", function(event) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    };
                }
            };
        }
        angular.module("material.components.tabs").directive("mdTabScroll", MdTabScroll);
        MdTabScroll.$inject = [ "$parse" ];
    }();
    !function() {
        /**
 * @ngInject
 */
        function MdTabsController($scope, $element, $window, $mdConstant, $mdTabInkRipple, $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {
            /**
   * Compiles the template provided by the user.  This is passed as an attribute from the tabs
   * directive's template function.
   */
            function compileTemplate() {
                var template = $attrs.$mdTabsTemplate, element = angular.element(elements.data);
                element.html(template);
                $compile(element.contents())(ctrl.parent);
                delete $attrs.$mdTabsTemplate;
            }
            /**
   * Binds events used by the tabs component.
   */
            function bindEvents() {
                angular.element($window).on("resize", handleWindowResize);
                $scope.$on("$destroy", cleanup);
            }
            /**
   * Configure watcher(s) used by Tabs
   */
            function configureWatchers() {
                $scope.$watch("$mdTabsCtrl.selectedIndex", handleSelectedIndexChange);
            }
            /**
   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value
   * will be treated as being truthy)
   * @param key
   * @param handler
   */
            function defineBooleanAttribute(key, handler) {
                function updateValue(newValue) {
                    ctrl[key] = "false" !== newValue;
                }
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.hasOwnProperty(attr) && updateValue($attrs[attr]);
                $attrs.$observe(attr, updateValue);
            }
            /**
   * Remove any events defined by this controller
   */
            function cleanup() {
                destroyed = !0;
                angular.element($window).off("resize", handleWindowResize);
            }
            // Change handlers
            /**
   * Toggles stretch tabs class and updates inkbar when tab stretching changes
   * @param stretchTabs
   */
            function handleStretchTabs(stretchTabs) {
                angular.element(elements.wrapper).toggleClass("md-stretch-tabs", shouldStretchTabs());
                updateInkBarStyles();
            }
            function handleCenterTabs(newValue) {
                ctrl.shouldCenterTabs = shouldCenterTabs();
            }
            function handleMaxTabWidth(newWidth, oldWidth) {
                if (newWidth !== oldWidth) {
                    angular.forEach(elements.tabs, function(tab) {
                        tab.style.maxWidth = newWidth + "px";
                    });
                    $mdUtil.nextTick(ctrl.updateInkBarStyles);
                }
            }
            function handleShouldPaginate(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.maxTabWidth = getMaxTabWidth();
                    ctrl.shouldCenterTabs = shouldCenterTabs();
                    $mdUtil.nextTick(function() {
                        ctrl.maxTabWidth = getMaxTabWidth();
                        adjustOffset(ctrl.selectedIndex);
                    });
                }
            }
            /**
   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`
   * @param hasContent
   */
            function handleHasContent(hasContent) {
                $element[hasContent ? "removeClass" : "addClass"]("md-no-tab-content");
            }
            /**
   * Apply ctrl.offsetLeft to the paging element when it changes
   * @param left
   */
            function handleOffsetChange(left) {
                var newValue = ctrl.shouldCenterTabs ? "" : "-" + left + "px";
                angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, "translate3d(" + newValue + ", 0, 0)");
                $scope.$broadcast("$mdTabsPaginationChanged");
            }
            /**
   * Update the UI whenever `ctrl.focusIndex` is updated
   * @param newIndex
   * @param oldIndex
   */
            function handleFocusIndexChange(newIndex, oldIndex) {
                if (newIndex !== oldIndex && elements.tabs[newIndex]) {
                    adjustOffset();
                    redirectFocus();
                }
            }
            /**
   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.
   * @param newValue
   * @param oldValue
   */
            function handleSelectedIndexChange(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.selectedIndex = getNearestSafeIndex(newValue);
                    ctrl.lastSelectedIndex = oldValue;
                    ctrl.updateInkBarStyles();
                    updateHeightFromContent();
                    adjustOffset(newValue);
                    $scope.$broadcast("$mdTabsChanged");
                    ctrl.tabs[oldValue] && ctrl.tabs[oldValue].scope.deselect();
                    ctrl.tabs[newValue] && ctrl.tabs[newValue].scope.select();
                }
            }
            function getTabElementIndex(tabEl) {
                var tabs = $element[0].getElementsByTagName("md-tab");
                return Array.prototype.indexOf.call(tabs, tabEl[0]);
            }
            /**
   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is
   * hidden.
   */
            function handleResizeWhenVisible() {
                // if there is already a watcher waiting for resize, do nothing
                handleResizeWhenVisible.watcher || (// otherwise, we will abuse the $watch function to check for visible
                handleResizeWhenVisible.watcher = $scope.$watch(function() {
                    // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates
                    $mdUtil.nextTick(function() {
                        // if the watcher has already run (ie. multiple digests in one cycle), do nothing
                        if (handleResizeWhenVisible.watcher && $element.prop("offsetParent")) {
                            handleResizeWhenVisible.watcher();
                            handleResizeWhenVisible.watcher = null;
                            handleWindowResize();
                        }
                    }, !1);
                }));
            }
            // Event handlers / actions
            /**
   * Handle user keyboard interactions
   * @param event
   */
            function keydown(event) {
                switch (event.keyCode) {
                  case $mdConstant.KEY_CODE.LEFT_ARROW:
                    event.preventDefault();
                    incrementIndex(-1, !0);
                    break;

                  case $mdConstant.KEY_CODE.RIGHT_ARROW:
                    event.preventDefault();
                    incrementIndex(1, !0);
                    break;

                  case $mdConstant.KEY_CODE.SPACE:
                  case $mdConstant.KEY_CODE.ENTER:
                    event.preventDefault();
                    locked || (ctrl.selectedIndex = ctrl.focusIndex);
                }
                ctrl.lastClick = !1;
            }
            /**
   * Update the selected index. Triggers a click event on the original `md-tab` element in order
   * to fire user-added click events if canSkipClick or `md-no-select-click` are false.
   * @param index
   * @param canSkipClick Optionally allow not firing the click event if `md-no-select-click` is also true.
   */
            function select(index, canSkipClick) {
                locked || (ctrl.focusIndex = ctrl.selectedIndex = index);
                ctrl.lastClick = !0;
                // skip the click event if noSelectClick is enabled
                canSkipClick && ctrl.noSelectClick || // nextTick is required to prevent errors in user-defined click events
                $mdUtil.nextTick(function() {
                    ctrl.tabs[index].element.triggerHandler("click");
                }, !1);
            }
            /**
   * When pagination is on, this makes sure the selected index is in view.
   * @param event
   */
            function scroll(event) {
                if (ctrl.shouldPaginate) {
                    event.preventDefault();
                    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);
                }
            }
            /**
   * Slides the tabs over approximately one page forward.
   */
            function nextPage() {
                var i, tab, viewportWidth = elements.canvas.clientWidth, totalWidth = viewportWidth + ctrl.offsetLeft;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft);
            }
            /**
   * Slides the tabs over approximately one page backward.
   */
            function previousPage() {
                var i, tab;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);
            }
            /**
   * Update size calculations when the window is resized.
   */
            function handleWindowResize() {
                ctrl.lastSelectedIndex = ctrl.selectedIndex;
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                $mdUtil.nextTick(function() {
                    ctrl.updateInkBarStyles();
                    updatePagination();
                });
            }
            function handleInkBar(hide) {
                angular.element(elements.inkBar).toggleClass("ng-hide", hide);
            }
            /**
   * Toggle dynamic height class when value changes
   * @param value
   */
            function handleDynamicHeight(value) {
                $element.toggleClass("md-dynamic-height", value);
            }
            /**
   * Remove a tab from the data and select the nearest valid tab.
   * @param tabData
   */
            function removeTab(tabData) {
                if (!destroyed) {
                    var selectedIndex = ctrl.selectedIndex, tab = ctrl.tabs.splice(tabData.getIndex(), 1)[0];
                    refreshIndex();
                    // when removing a tab, if the selected index did not change, we have to manually trigger the
                    //   tab select/deselect events
                    if (ctrl.selectedIndex === selectedIndex) {
                        tab.scope.deselect();
                        ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    }
                    $mdUtil.nextTick(function() {
                        updatePagination();
                        ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                    });
                }
            }
            /**
   * Create an entry in the tabs array for a new tab at the specified index.
   * @param tabData
   * @param index
   * @returns {*}
   */
            function insertTab(tabData, index) {
                var hasLoaded = loaded, proto = {
                    getIndex: function() {
                        return ctrl.tabs.indexOf(tab);
                    },
                    isActive: function() {
                        return this.getIndex() === ctrl.selectedIndex;
                    },
                    isLeft: function() {
                        return this.getIndex() < ctrl.selectedIndex;
                    },
                    isRight: function() {
                        return this.getIndex() > ctrl.selectedIndex;
                    },
                    shouldRender: function() {
                        return !ctrl.noDisconnect || this.isActive();
                    },
                    hasFocus: function() {
                        return !ctrl.lastClick && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;
                    },
                    id: $mdUtil.nextUid()
                }, tab = angular.extend(proto, tabData);
                angular.isDefined(index) ? ctrl.tabs.splice(index, 0, tab) : ctrl.tabs.push(tab);
                processQueue();
                updateHasContent();
                $mdUtil.nextTick(function() {
                    updatePagination();
                    // if autoselect is enabled, select the newly added tab
                    hasLoaded && ctrl.autoselect && $mdUtil.nextTick(function() {
                        $mdUtil.nextTick(function() {
                            select(ctrl.tabs.indexOf(tab));
                        });
                    });
                });
                return tab;
            }
            // Getter methods
            /**
   * Gathers references to all of the DOM elements used by this controller.
   * @returns {{}}
   */
            function getElements() {
                var elements = {};
                // gather tab bar elements
                elements.wrapper = $element[0].getElementsByTagName("md-tabs-wrapper")[0];
                elements.data = $element[0].getElementsByTagName("md-tab-data")[0];
                elements.canvas = elements.wrapper.getElementsByTagName("md-tabs-canvas")[0];
                elements.paging = elements.canvas.getElementsByTagName("md-pagination-wrapper")[0];
                elements.tabs = elements.paging.getElementsByTagName("md-tab-item");
                elements.dummies = elements.canvas.getElementsByTagName("md-dummy-tab");
                elements.inkBar = elements.paging.getElementsByTagName("md-ink-bar")[0];
                // gather tab content elements
                elements.contentsWrapper = $element[0].getElementsByTagName("md-tabs-content-wrapper")[0];
                elements.contents = elements.contentsWrapper.getElementsByTagName("md-tab-content");
                return elements;
            }
            /**
   * Determines whether or not the left pagination arrow should be enabled.
   * @returns {boolean}
   */
            function canPageBack() {
                return ctrl.offsetLeft > 0;
            }
            /**
   * Determines whether or not the right pagination arrow should be enabled.
   * @returns {*|boolean}
   */
            function canPageForward() {
                var lastTab = elements.tabs[elements.tabs.length - 1];
                return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth + ctrl.offsetLeft;
            }
            /**
   * Determines if the UI should stretch the tabs to fill the available space.
   * @returns {*}
   */
            function shouldStretchTabs() {
                switch (ctrl.stretchTabs) {
                  case "always":
                    return !0;

                  case "never":
                    return !1;

                  default:
                    return !ctrl.shouldPaginate && $window.matchMedia("(max-width: 600px)").matches;
                }
            }
            /**
   * Determines if the tabs should appear centered.
   * @returns {string|boolean}
   */
            function shouldCenterTabs() {
                return ctrl.centerTabs && !ctrl.shouldPaginate;
            }
            /**
   * Determines if pagination is necessary to display the tabs within the available space.
   * @returns {boolean}
   */
            function shouldPaginate() {
                if (ctrl.noPagination || !loaded) return !1;
                var canvasWidth = $element.prop("clientWidth");
                angular.forEach(getElements().dummies, function(tab) {
                    canvasWidth -= tab.offsetWidth;
                });
                return canvasWidth < 0;
            }
            /**
   * Finds the nearest tab index that is available.  This is primarily used for when the active
   * tab is removed.
   * @param newIndex
   * @returns {*}
   */
            function getNearestSafeIndex(newIndex) {
                if (-1 === newIndex) return -1;
                var i, tab, maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex);
                for (i = 0; i <= maxOffset; i++) {
                    tab = ctrl.tabs[newIndex + i];
                    if (tab && !0 !== tab.scope.disabled) return tab.getIndex();
                    tab = ctrl.tabs[newIndex - i];
                    if (tab && !0 !== tab.scope.disabled) return tab.getIndex();
                }
                return newIndex;
            }
            // Utility methods
            /**
   * Defines a property using a getter and setter in order to trigger a change handler without
   * using `$watch` to observe changes.
   * @param key
   * @param handler
   * @param value
   */
            function defineProperty(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler && handler(newValue, oldValue);
                    }
                });
            }
            /**
   * Updates whether or not pagination should be displayed.
   */
            function updatePagination() {
                shouldStretchTabs() || updatePagingWidth();
                ctrl.maxTabWidth = getMaxTabWidth();
                ctrl.shouldPaginate = shouldPaginate();
            }
            function updatePagingWidth() {
                var width = 1;
                angular.forEach(getElements().dummies, function(element) {
                    //-- Uses the larger value between `getBoundingClientRect().width` and `offsetWidth`.  This
                    //   prevents `offsetWidth` value from being rounded down and causing wrapping issues, but
                    //   also handles scenarios where `getBoundingClientRect()` is inaccurate (ie. tabs inside
                    //   of a dialog)
                    width += Math.max(element.offsetWidth, element.getBoundingClientRect().width);
                });
                angular.element(elements.paging).css("width", Math.ceil(width) + "px");
            }
            function getMaxTabWidth() {
                return $element.prop("clientWidth");
            }
            /**
   * Re-orders the tabs and updates the selected and focus indexes to their new positions.
   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.
   */
            function updateTabOrder() {
                var selectedItem = ctrl.tabs[ctrl.selectedIndex], focusItem = ctrl.tabs[ctrl.focusIndex];
                ctrl.tabs = ctrl.tabs.sort(function(a, b) {
                    return a.index - b.index;
                });
                ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);
                ctrl.focusIndex = ctrl.tabs.indexOf(focusItem);
            }
            /**
   * This moves the selected or focus index left or right.  This is used by the keydown handler.
   * @param inc
   */
            function incrementIndex(inc, focus) {
                var newIndex, key = focus ? "focusIndex" : "selectedIndex", index = ctrl[key];
                for (newIndex = index + inc; ctrl.tabs[newIndex] && ctrl.tabs[newIndex].scope.disabled; newIndex += inc) ;
                ctrl.tabs[newIndex] && (ctrl[key] = newIndex);
            }
            /**
   * This is used to forward focus to dummy elements.  This method is necessary to avoid animation
   * issues when attempting to focus an item that is out of view.
   */
            function redirectFocus() {
                getElements().dummies[ctrl.focusIndex].focus();
            }
            /**
   * Forces the pagination to move the focused tab into view.
   */
            function adjustOffset(index) {
                null == index && (index = ctrl.focusIndex);
                if (elements.tabs[index] && !ctrl.shouldCenterTabs) {
                    var tab = elements.tabs[index], left = tab.offsetLeft, right = tab.offsetWidth + left;
                    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 64));
                    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));
                }
            }
            /**
   * Iterates through all queued functions and clears the queue.  This is used for functions that
   * are called before the UI is ready, such as size calculations.
   */
            function processQueue() {
                queue.forEach(function(func) {
                    $mdUtil.nextTick(func);
                });
                queue = [];
            }
            /**
   * Determines if the tab content area is needed.
   */
            function updateHasContent() {
                var hasContent = !1;
                angular.forEach(ctrl.tabs, function(tab) {
                    tab.template && (hasContent = !0);
                });
                ctrl.hasContent = hasContent;
            }
            /**
   * Moves the indexes to their nearest valid values.
   */
            function refreshIndex() {
                ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);
                ctrl.focusIndex = getNearestSafeIndex(ctrl.focusIndex);
            }
            /**
   * Calculates the content height of the current tab.
   * @returns {*}
   */
            function updateHeightFromContent() {
                if (!ctrl.dynamicHeight) return $element.css("height", "");
                if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);
                var tabContent = elements.contents[ctrl.selectedIndex], contentHeight = tabContent ? tabContent.offsetHeight : 0, tabsHeight = elements.wrapper.offsetHeight, newHeight = contentHeight + tabsHeight, currentHeight = $element.prop("clientHeight");
                if (currentHeight !== newHeight) {
                    // Adjusts calculations for when the buttons are bottom-aligned since this relies on absolute
                    // positioning.  This should probably be cleaned up if a cleaner solution is possible.
                    if ("bottom" === $element.attr("md-align-tabs")) {
                        currentHeight -= tabsHeight;
                        newHeight -= tabsHeight;
                        // Need to include bottom border in these calculations
                        $element.attr("md-border-bottom") !== undefined && ++currentHeight;
                    }
                    // Lock during animation so the user can't change tabs
                    locked = !0;
                    var fromHeight = {
                        height: currentHeight + "px"
                    }, toHeight = {
                        height: newHeight + "px"
                    };
                    // Set the height to the current, specific pixel height to fix a bug on iOS where the height
                    // first animates to 0, then back to the proper height causing a visual glitch
                    $element.css(fromHeight);
                    // Animate the height from the old to the new
                    $animateCss($element, {
                        from: fromHeight,
                        to: toHeight,
                        easing: "cubic-bezier(0.35, 0, 0.25, 1)",
                        duration: .5
                    }).start().done(function() {
                        // Then (to fix the same iOS issue as above), disable transitions and remove the specific
                        // pixel height so the height can size with browser width/content changes, etc.
                        $element.css({
                            transition: "none",
                            height: ""
                        });
                        // In the next tick, re-allow transitions (if we do it all at once, $element.css is "smart"
                        // enough to batch it for us instead of doing it immediately, which undoes the original
                        // transition: none)
                        $mdUtil.nextTick(function() {
                            $element.css("transition", "");
                        });
                        // And unlock so tab changes can occur
                        locked = !1;
                    });
                }
            }
            /**
   * Repositions the ink bar to the selected tab.
   * @returns {*}
   */
            function updateInkBarStyles() {
                if (elements.tabs[ctrl.selectedIndex]) {
                    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);
                    // if the element is not visible, we will not be able to calculate sizes until it is
                    // we should treat that as a resize event rather than just updating the ink bar
                    if (!$element.prop("offsetParent")) return handleResizeWhenVisible();
                    var tabWidth, index = ctrl.selectedIndex, totalWidth = elements.paging.offsetWidth, tab = elements.tabs[index], left = tab.offsetLeft, right = totalWidth - left - tab.offsetWidth;
                    if (ctrl.shouldCenterTabs) {
                        tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function(value, element) {
                            return value + element.offsetWidth;
                        }, 0);
                        totalWidth > tabWidth && $mdUtil.nextTick(updateInkBarStyles, !1);
                    }
                    updateInkBarClassName();
                    angular.element(elements.inkBar).css({
                        left: left + "px",
                        right: right + "px"
                    });
                } else angular.element(elements.inkBar).css({
                    left: "auto",
                    right: "auto"
                });
            }
            /**
   * Adds left/right classes so that the ink bar will animate properly.
   */
            function updateInkBarClassName() {
                var newIndex = ctrl.selectedIndex, oldIndex = ctrl.lastSelectedIndex, ink = angular.element(elements.inkBar);
                angular.isNumber(oldIndex) && ink.toggleClass("md-left", newIndex < oldIndex).toggleClass("md-right", newIndex > oldIndex);
            }
            /**
   * Takes an offset value and makes sure that it is within the min/max allowed values.
   * @param value
   * @returns {*}
   */
            function fixOffset(value) {
                if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;
                var lastTab = elements.tabs[elements.tabs.length - 1], totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;
                value = Math.max(0, value);
                value = Math.min(totalWidth - elements.canvas.clientWidth, value);
                return value;
            }
            /**
   * Attaches a ripple to the tab item element.
   * @param scope
   * @param element
   */
            function attachRipple(scope, element) {
                var options = {
                    colorElement: angular.element(elements.inkBar)
                };
                $mdTabInkRipple.attach(scope, element, options);
            }
            // define private properties
            var ctrl = this, locked = !1, elements = getElements(), queue = [], destroyed = !1, loaded = !1;
            // define one-way bindings
            !/**
   * Creates a one-way binding manually rather than relying on Angular's isolated scope
   * @param key
   * @param handler
   */
            function(key, handler) {
                var attr = $attrs.$normalize("md-" + key);
                handler && defineProperty(key, handler);
                $attrs.$observe(attr, function(newValue) {
                    ctrl[key] = newValue;
                });
            }("stretchTabs", handleStretchTabs);
            // define public properties with change handlers
            defineProperty("focusIndex", handleFocusIndexChange, ctrl.selectedIndex || 0);
            defineProperty("offsetLeft", handleOffsetChange, 0);
            defineProperty("hasContent", handleHasContent, !1);
            defineProperty("maxTabWidth", handleMaxTabWidth, getMaxTabWidth());
            defineProperty("shouldPaginate", handleShouldPaginate, !1);
            // define boolean attributes
            defineBooleanAttribute("noInkBar", handleInkBar);
            defineBooleanAttribute("dynamicHeight", handleDynamicHeight);
            defineBooleanAttribute("noPagination");
            defineBooleanAttribute("swipeContent");
            defineBooleanAttribute("noDisconnect");
            defineBooleanAttribute("autoselect");
            defineBooleanAttribute("noSelectClick");
            defineBooleanAttribute("centerTabs", handleCenterTabs);
            defineBooleanAttribute("enableDisconnect");
            // define public properties
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.tabs = [];
            ctrl.lastSelectedIndex = null;
            ctrl.hasFocus = !1;
            ctrl.lastClick = !0;
            ctrl.shouldCenterTabs = shouldCenterTabs();
            // define public methods
            ctrl.updatePagination = $mdUtil.debounce(updatePagination, 100);
            ctrl.redirectFocus = redirectFocus;
            ctrl.attachRipple = attachRipple;
            ctrl.insertTab = insertTab;
            ctrl.removeTab = removeTab;
            ctrl.select = select;
            ctrl.scroll = scroll;
            ctrl.nextPage = nextPage;
            ctrl.previousPage = previousPage;
            ctrl.keydown = keydown;
            ctrl.canPageForward = canPageForward;
            ctrl.canPageBack = canPageBack;
            ctrl.refreshIndex = refreshIndex;
            ctrl.incrementIndex = incrementIndex;
            ctrl.getTabElementIndex = getTabElementIndex;
            ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);
            ctrl.updateTabOrder = $mdUtil.debounce(updateTabOrder, 100);
            !/**
   * Perform initialization for the controller, setup events and watcher(s)
   */
            function() {
                ctrl.selectedIndex = ctrl.selectedIndex || 0;
                compileTemplate();
                configureWatchers();
                bindEvents();
                $mdTheming($element);
                $mdUtil.nextTick(function() {
                    updateHeightFromContent();
                    adjustOffset();
                    updateInkBarStyles();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    loaded = !0;
                    updatePagination();
                });
            }();
        }
        angular.module("material.components.tabs").controller("MdTabsController", MdTabsController);
        MdTabsController.$inject = [ "$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming" ];
    }();
    !function() {
        function MdTabs() {
            return {
                scope: {
                    selectedIndex: "=?mdSelected"
                },
                template: function(element, attr) {
                    attr.$mdTabsTemplate = element.html();
                    return '<md-tabs-wrapper> <md-tab-data></md-tab-data> <md-prev-button tabindex="-1" role="button" aria-label="Previous Page" aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.previousPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-prev-button> <md-next-button tabindex="-1" role="button" aria-label="Next Page" aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.nextPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-next-button> <md-tabs-canvas tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ng-focus="$mdTabsCtrl.redirectFocus()" ng-class="{ \'md-paginated\': $mdTabsCtrl.shouldPaginate, \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ng-keydown="$mdTabsCtrl.keydown($event)" role="tablist"> <md-pagination-wrapper ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" md-tab-scroll="$mdTabsCtrl.scroll($event)"> <md-tab-item tabindex="-1" class="md-tab" ng-repeat="tab in $mdTabsCtrl.tabs" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-click="$mdTabsCtrl.select(tab.getIndex())" ng-class="{ \'md-active\':    tab.isActive(), \'md-focused\':   tab.hasFocus(), \'md-disabled\':  tab.scope.disabled }" ng-disabled="tab.scope.disabled" md-swipe-left="$mdTabsCtrl.nextPage()" md-swipe-right="$mdTabsCtrl.previousPage()" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-tab-item> <md-ink-bar></md-ink-bar> </md-pagination-wrapper> <div class="md-visually-hidden md-dummy-wrapper"> <md-dummy-tab class="md-tab" tabindex="-1" id="tab-item-{{::tab.id}}" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-focus="$mdTabsCtrl.hasFocus = true" ng-blur="$mdTabsCtrl.hasFocus = false" ng-repeat="tab in $mdTabsCtrl.tabs" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-dummy-tab> </div> </md-tabs-canvas> </md-tabs-wrapper> <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> <md-tab-content id="tab-content-{{::tab.id}}" role="tabpanel" aria-labelledby="tab-item-{{::tab.id}}" md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ng-if="$mdTabsCtrl.hasContent" ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ng-class="{ \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, \'md-active\':        tab.isActive(), \'md-left\':          tab.isLeft(), \'md-right\':         tab.isRight(), \'md-no-scroll\':     $mdTabsCtrl.dynamicHeight }"> <div md-tabs-template="::tab.template" md-connected-if="tab.isActive()" md-scope="::tab.parent" ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> </md-tab-content> </md-tabs-content-wrapper>';
                },
                controller: "MdTabsController",
                controllerAs: "$mdTabsCtrl",
                bindToController: !0
            };
        }
        /**
 * @ngdoc directive
 * @name mdTabs
 * @module material.components.tabs
 *
 * @restrict E
 *
 * @description
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.
 *
 * Below is the markup for its simplest usage:
 *
 *  <hljs lang="html">
 *  <md-tabs>
 *    <md-tab label="Tab #1"></md-tab>
 *    <md-tab label="Tab #2"></md-tab>
 *    <md-tab label="Tab #3"></md-tab>
 *  </md-tabs>
 *  </hljs>
 *
 * Tabs supports three (3) usage scenarios:
 *
 *  1. Tabs (buttons only)
 *  2. Tabs with internal view content
 *  3. Tabs with external view content
 *
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *
 * Additional features also include:
 *
 * *  Content can include any markup.
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.
 *
 * ### Explanation of tab stretching
 *
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *
 * On desktops, by default, stretching will never occur.
 *
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *
 * `md-stretch-tabs` | mobile    | desktop
 * ------------------|-----------|--------
 * `auto`            | stretched | ---
 * `always`          | stretched | stretched
 * `never`           | ---       | ---
 *
 * @param {integer=} md-selected Index of the active/selected tab
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.
 * @param {boolean=} md-no-ink-bar If present, disables the selection ink bar.
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
 * @param {boolean=} md-border-bottom If present, shows a solid `1px` border between the tabs and their content
 * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination
 * @param {boolean=} md-no-pagination When enabled, pagination will remain off
 * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs
 * @param {boolean=} md-enable-disconnect When enabled, scopes will be disconnected for tabs that are not being displayed.  This provides a performance boost, but may also cause unexpected issues and is not recommended for most users.
 * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected
 * @param {boolean=} md-no-select-click When enabled, click events will not be fired when selecting tabs
 *
 * @usage
 * <hljs lang="html">
 * <md-tabs md-selected="selectedIndex" >
 *   <img ng-src="img/angular.png" class="centered">
 *   <md-tab
 *       ng-repeat="tab in tabs | orderBy:predicate:reversed"
 *       md-on-select="onTabSelected(tab)"
 *       md-on-deselect="announceDeselected(tab)"
 *       ng-disabled="tab.disabled">
 *     <md-tab-label>
 *       {{tab.title}}
 *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">
 *     </md-tab-label>
 *     <md-tab-body>
 *       {{tab.content}}
 *     </md-tab-body>
 *   </md-tab>
 * </md-tabs>
 * </hljs>
 *
 */
        angular.module("material.components.tabs").directive("mdTabs", MdTabs);
    }();
    !function() {
        function MdTabsTemplate($compile, $mdUtil) {
            function link(scope, element, attr, ctrl) {
                function handleScope() {
                    scope.$watch("connected", function(value) {
                        !1 === value ? disconnect() : reconnect();
                    });
                    scope.$on("$destroy", reconnect);
                }
                function disconnect() {
                    ctrl.enableDisconnect && $mdUtil.disconnectScope(compileScope);
                }
                function reconnect() {
                    ctrl.enableDisconnect && $mdUtil.reconnectScope(compileScope);
                }
                if (ctrl) {
                    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;
                    element.html(scope.template);
                    $compile(element.contents())(compileScope);
                    element.on("DOMSubtreeModified", function() {
                        ctrl.updatePagination();
                        ctrl.updateInkBarStyles();
                    });
                    return $mdUtil.nextTick(handleScope);
                }
            }
            return {
                restrict: "A",
                link: link,
                scope: {
                    template: "=mdTabsTemplate",
                    connected: "=?mdConnectedIf",
                    compileScope: "=mdScope"
                },
                require: "^?mdTabs"
            };
        }
        angular.module("material.components.tabs").directive("mdTabsTemplate", MdTabsTemplate);
        MdTabsTemplate.$inject = [ "$compile", "$mdUtil" ];
    }();
    !function() {
        angular.module("material.core").constant("$MD_THEME_CSS", "/*  Only used with Theme processes */html.md-THEME_NAME-theme, body.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) md-icon {    color: '{{background-900}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-indeterminate[disabled] .md-container {  color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages, md-input-container.md-THEME_NAME-theme [ng-messages],md-input-container.md-THEME_NAME-theme ng-message, md-input-container.md-THEME_NAME-theme data-ng-message, md-input-container.md-THEME_NAME-theme x-ng-message,md-input-container.md-THEME_NAME-theme [ng-message], md-input-container.md-THEME_NAME-theme [data-ng-message], md-input-container.md-THEME_NAME-theme [x-ng-message],md-input-container.md-THEME_NAME-theme [ng-message-exp], md-input-container.md-THEME_NAME-theme [data-ng-message-exp], md-input-container.md-THEME_NAME-theme [x-ng-message-exp] {  color: '{{warn-A700}}'; }  md-input-container.md-THEME_NAME-theme ng-messages .md-char-counter, md-input-container.md-THEME_NAME-theme [ng-messages] .md-char-counter,  md-input-container.md-THEME_NAME-theme ng-message .md-char-counter, md-input-container.md-THEME_NAME-theme data-ng-message .md-char-counter, md-input-container.md-THEME_NAME-theme x-ng-message .md-char-counter,  md-input-container.md-THEME_NAME-theme [ng-message] .md-char-counter, md-input-container.md-THEME_NAME-theme [data-ng-message] .md-char-counter, md-input-container.md-THEME_NAME-theme [x-ng-message] .md-char-counter,  md-input-container.md-THEME_NAME-theme [ng-message-exp] .md-char-counter, md-input-container.md-THEME_NAME-theme [data-ng-message-exp] .md-char-counter, md-input-container.md-THEME_NAME-theme [x-ng-message-exp] .md-char-counter {    color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }.md-panel {  background-color: '{{background-900-0.0}}'; }  .md-panel._md-panel-backdrop.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }.md-checkbox-enabled.md-THEME_NAME-theme .md-ripple {  color: '{{primary-600}}'; }.md-checkbox-enabled.md-THEME_NAME-theme[selected] .md-ripple {  color: '{{background-600}}'; }.md-checkbox-enabled.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }.md-checkbox-enabled.md-THEME_NAME-theme[selected] .md-ink-ripple {  color: '{{primary-color-0.87}}'; }.md-checkbox-enabled.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }.md-checkbox-enabled.md-THEME_NAME-theme[selected] .md-icon {  background-color: '{{primary-color-0.87}}'; }.md-checkbox-enabled.md-THEME_NAME-theme[selected].md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }.md-checkbox-enabled.md-THEME_NAME-theme[selected] .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }.md-checkbox-enabled.md-THEME_NAME-theme .md-indeterminate[disabled] .md-container {  color: '{{foreground-3}}'; }.md-checkbox-enabled.md-THEME_NAME-theme md-option .md-text {  color: '{{background-900-0.87}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }");
    }();
}(window, window.angular);

window.ngMaterial = {
    version: {
        full: "1.0.9"
    }
};

!function(root, factory) {
    "function" == typeof define && define.amd ? // AMD. Register as an anonymous module.
    define([ "angular" ], factory) : "object" == typeof exports ? // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require("angular")) : // Browser globals (root is window)
    root.returnExports = factory(root.angular);
}(this, function(angular) {
    /**
   * @ngdoc service
   * @name ngMeta.ngMeta
   * @description
   * # A metatags service for single-page applications
   * that supports setting arbitrary meta tags
   */
    return angular.module("ngMeta", []).provider("ngMeta", function() {
        "use strict";
        function Meta($rootScope, $injector) {
            /**
         * @ngdoc method
         * @name ngMeta#setTitle
         * @description
         * Sets the title of the page, optionally
         * appending a title suffix.
         *
         * If suffix usage is enabled and the title suffix
         * parameter is missing, the default title suffix
         * (if available) is used as a fallback.
         *
         * @example
         * //title and titleSuffix
         * ngMeta.setTitle('Page name', ' - Site name | Tagline of the site');
         *
         * //title only (default titleSuffix may be suffixed,
         * //depending on useTitleSuffix configuration)
         * ngMeta.setTitle('Page name');
         *
         * @returns {Object} self
         */
            var setTitle = function(title, titleSuffix) {
                if (!$rootScope.ngMeta) throw new Error("Cannot call setTitle when ngMeta is undefined. Did you forget to call ngMeta.init() in the run block? \nRefer: https://github.com/vinaygopinath/ngMeta#getting-started");
                $rootScope.ngMeta.title = angular.isDefined(title) ? title : defaults.title || "";
                config.useTitleSuffix && ($rootScope.ngMeta.title += angular.isDefined(titleSuffix) ? titleSuffix : defaults.titleSuffix || "");
                return this;
            }, setTag = function(tag, value) {
                if (!$rootScope.ngMeta) throw new Error("Cannot call setTag when ngMeta is undefined. Did you forget to call ngMeta.init() in the run block? \nRefer: https://github.com/vinaygopinath/ngMeta#getting-started");
                if ("title" === tag || "titleSuffix" === tag) throw new Error("Attempt to set '" + tag + "' through 'setTag': 'title' and 'titleSuffix' are reserved tag names. Please use 'ngMeta.setTitle' instead");
                $rootScope.ngMeta[tag] = angular.isDefined(value) ? value : defaults[tag];
                return this;
            }, setDefaultTag = function(tag, value) {
                if (!$rootScope.ngMeta) throw new Error("Cannot call setDefaultTag when ngMeta is undefined. Did you forget to call ngMeta.init() in the run block? \nRefer: https://github.com/vinaygopinath/ngMeta#getting-started");
                defaults[tag] = value;
                "title" === tag || "titleSuffix" === tag ? this.setTitle($rootScope.ngMeta.title, $rootScope.ngMeta.titleSuffix) : this.setTag(tag, $rootScope.ngMeta[tag]);
                return this;
            }, readRouteMeta = function(meta) {
                meta = meta || {};
                if (meta.disableUpdate) return !1;
                setTitle(meta.title, meta.titleSuffix);
                var def = angular.copy(defaults);
                delete meta.title;
                delete meta.titleSuffix;
                delete def.title;
                delete def.titleSuffix;
                for (var metaKeys = Object.keys(meta), i = 0; i < metaKeys.length; i++) {
                    def.hasOwnProperty(metaKeys[i]) && delete def[metaKeys[i]];
                    setTag(metaKeys[i], meta[metaKeys[i]]);
                }
                for (var defaultKeys = Object.keys(def), j = 0; j < defaultKeys.length; j++) setTag(defaultKeys[j], def[defaultKeys[j]]);
            }, update = function(event, current) {
                readRouteMeta(angular.copy(current.meta || current.data && current.data.meta));
            }, resetMeta = function() {
                readRouteMeta();
                return this;
            };
            return {
                init: function() {
                    $rootScope.ngMeta = {};
                    $rootScope.$on("$routeChangeSuccess", update);
                    $rootScope.$on("$stateChangeSuccess", update);
                    if ($injector.has("$transitions")) {
                        $injector.get("$transitions").onSuccess({}, function(transition) {
                            update(0, transition.$to());
                        });
                    }
                },
                setTitle: setTitle,
                setTag: setTag,
                setDefaultTag: setDefaultTag,
                resetMeta: resetMeta
            };
        }
        //Object for storing default tag/values
        var defaults = {}, config = {
            useTitleSuffix: !1
        };
        /* Set defaults */
        /**
       * @ngdoc method
       * @name ngMetaProvider#setDefaultTitle
       * @param {string} titleStr The default title of the page. If a
       * route/state does not define a `title` param in its meta object, this
       * value is used instead.
       *
       * @description
       * Sets the default title for all routes that are missing a custom `title`
       * property in their meta objects.
       *
       * @returns {Object} self
       */
        this.setDefaultTitle = function(titleStr) {
            defaults.title = titleStr;
            return this;
        };
        /**
       * @ngdoc method
       * @name ngMetaProvider#setDefaultTitleSuffix
       * @param {string} titleSuffix The default title suffix of the page. If a
       * route/state does not define a `titleSuffix` param in its meta object,
       * this value is used instead.
       *
       * @description
       * Sets the default title suffix for all routes that are missing a custom
       * `titleSuffix` property in their meta objects.
       *
       * @returns {Object} self
       */
        this.setDefaultTitleSuffix = function(titleSuffix) {
            defaults.titleSuffix = titleSuffix;
            return this;
        };
        /**
       * @ngdoc method
       * @name ngMetaProvider#setDefaultTag
       * @param {string} tag The default tag name. The default tag can be
       * overridden by defining a custom property of the same name in the meta
       * object of any route.
       *
       * @param {string} value The value of the tag.
       *
       * @description
       * Sets the default tag for all routes that are missing a custom
       * `tag` property in their meta objects.
       *
       * @returns {Object} self
       */
        this.setDefaultTag = function(tag, value) {
            defaults[tag] = value;
            return this;
        };
        /* One-time config */
        /**
       * @ngdoc method
       * @name ngMetaProvider#useTitleSuffix
       * @param {boolean} bool A boolean indicating the use of title suffix.
       * Defaults to false.
       *
       * @description
       * Toggles the use of the title suffix throughout the site.
       *
       * @returns {Object} self
       */
        this.useTitleSuffix = function(bool) {
            config.useTitleSuffix = !!bool;
            return this;
        };
        /**
       * @ngdoc method
       * @name ngMetaProvider#mergeNestedStateData
       * @param {string} mergeNestedStateData [Optional] method to deep merge
       * meta data for nested views.
       *
       * @description
       * Helper function to Extend $stateProvider.decorator('state') to merge nested
       * view meta data if using ui-router.
       *
       * @returns {Object} data
       */
        this.mergeNestedStateData = function(state, parentDecoratorFn) {
            // original data
            var originalData = parentDecoratorFn(state) || {}, parentMetaData = state.parent && state.parent.data && state.parent.data.meta;
            //Assign the merged meta if necessary to current state and return
            if (originalData.meta || parentMetaData) {
                var mergedMeta = angular.merge({}, parentMetaData, originalData.meta);
                originalData.meta = mergedMeta;
            }
            state.self.data = originalData;
            return originalData;
        };
        this.$get = [ "$rootScope", "$injector", function($rootScope, $injector) {
            return new Meta($rootScope, $injector);
        } ];
    });
});

/**
 * Satellizer 0.13.4
 * (c) 2016 Sahat Yalkabov
 * License: MIT
 */
// CommonJS package manager support.
"undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "satellizer");

!function(window, angular, undefined) {
    "use strict";
    window.location.origin || (window.location.origin = window.location.protocol + "//" + window.location.host);
    angular.module("satellizer", []).constant("SatellizerConfig", {
        httpInterceptor: function() {
            return !0;
        },
        withCredentials: !1,
        tokenRoot: null,
        cordova: !1,
        baseUrl: "/",
        loginUrl: "/auth/login",
        signupUrl: "/auth/signup",
        unlinkUrl: "/auth/unlink/",
        tokenName: "token",
        tokenPrefix: "satellizer",
        authHeader: "Authorization",
        authToken: "Bearer",
        storageType: "localStorage",
        providers: {
            facebook: {
                name: "facebook",
                url: "/auth/facebook",
                authorizationEndpoint: "https://www.facebook.com/v2.5/dialog/oauth",
                redirectUri: window.location.origin + "/",
                requiredUrlParams: [ "display", "scope" ],
                scope: [ "email" ],
                scopeDelimiter: ",",
                display: "popup",
                oauthType: "2.0",
                popupOptions: {
                    width: 580,
                    height: 400
                }
            },
            google: {
                name: "google",
                url: "/auth/google",
                authorizationEndpoint: "https://accounts.google.com/o/oauth2/auth",
                redirectUri: window.location.origin,
                requiredUrlParams: [ "scope" ],
                optionalUrlParams: [ "display" ],
                scope: [ "profile", "email" ],
                scopePrefix: "openid",
                scopeDelimiter: " ",
                display: "popup",
                oauthType: "2.0",
                popupOptions: {
                    width: 452,
                    height: 633
                }
            },
            github: {
                name: "github",
                url: "/auth/github",
                authorizationEndpoint: "https://github.com/login/oauth/authorize",
                redirectUri: window.location.origin,
                optionalUrlParams: [ "scope" ],
                scope: [ "user:email" ],
                scopeDelimiter: " ",
                oauthType: "2.0",
                popupOptions: {
                    width: 1020,
                    height: 618
                }
            },
            instagram: {
                name: "instagram",
                url: "/auth/instagram",
                authorizationEndpoint: "https://api.instagram.com/oauth/authorize",
                redirectUri: window.location.origin,
                requiredUrlParams: [ "scope" ],
                scope: [ "basic" ],
                scopeDelimiter: "+",
                oauthType: "2.0"
            },
            linkedin: {
                name: "linkedin",
                url: "/auth/linkedin",
                authorizationEndpoint: "https://www.linkedin.com/uas/oauth2/authorization",
                redirectUri: window.location.origin,
                requiredUrlParams: [ "state" ],
                scope: [ "r_emailaddress" ],
                scopeDelimiter: " ",
                state: "STATE",
                oauthType: "2.0",
                popupOptions: {
                    width: 527,
                    height: 582
                }
            },
            twitter: {
                name: "twitter",
                url: "/auth/twitter",
                authorizationEndpoint: "https://api.twitter.com/oauth/authenticate",
                redirectUri: window.location.origin,
                oauthType: "1.0",
                popupOptions: {
                    width: 495,
                    height: 645
                }
            },
            twitch: {
                name: "twitch",
                url: "/auth/twitch",
                authorizationEndpoint: "https://api.twitch.tv/kraken/oauth2/authorize",
                redirectUri: window.location.origin,
                requiredUrlParams: [ "scope" ],
                scope: [ "user_read" ],
                scopeDelimiter: " ",
                display: "popup",
                oauthType: "2.0",
                popupOptions: {
                    width: 500,
                    height: 560
                }
            },
            live: {
                name: "live",
                url: "/auth/live",
                authorizationEndpoint: "https://login.live.com/oauth20_authorize.srf",
                redirectUri: window.location.origin,
                requiredUrlParams: [ "display", "scope" ],
                scope: [ "wl.emails" ],
                scopeDelimiter: " ",
                display: "popup",
                oauthType: "2.0",
                popupOptions: {
                    width: 500,
                    height: 560
                }
            },
            yahoo: {
                name: "yahoo",
                url: "/auth/yahoo",
                authorizationEndpoint: "https://api.login.yahoo.com/oauth2/request_auth",
                redirectUri: window.location.origin,
                scope: [],
                scopeDelimiter: ",",
                oauthType: "2.0",
                popupOptions: {
                    width: 559,
                    height: 519
                }
            },
            bitbucket: {
                name: "bitbucket",
                url: "/auth/bitbucket",
                authorizationEndpoint: "https://bitbucket.org/site/oauth2/authorize",
                redirectUri: window.location.origin + "/",
                requiredUrlParams: [ "scope" ],
                scope: [ "email" ],
                scopeDelimiter: " ",
                oauthType: "2.0",
                popupOptions: {
                    width: 1028,
                    height: 529
                }
            }
        }
    }).provider("$auth", [ "SatellizerConfig", function(config) {
        Object.defineProperties(this, {
            httpInterceptor: {
                get: function() {
                    return config.httpInterceptor;
                },
                set: function(value) {
                    config.httpInterceptor = "function" == typeof value ? value : function() {
                        return value;
                    };
                }
            },
            baseUrl: {
                get: function() {
                    return config.baseUrl;
                },
                set: function(value) {
                    config.baseUrl = value;
                }
            },
            loginUrl: {
                get: function() {
                    return config.loginUrl;
                },
                set: function(value) {
                    config.loginUrl = value;
                }
            },
            signupUrl: {
                get: function() {
                    return config.signupUrl;
                },
                set: function(value) {
                    config.signupUrl = value;
                }
            },
            tokenRoot: {
                get: function() {
                    return config.tokenRoot;
                },
                set: function(value) {
                    config.tokenRoot = value;
                }
            },
            tokenName: {
                get: function() {
                    return config.tokenName;
                },
                set: function(value) {
                    config.tokenName = value;
                }
            },
            tokenPrefix: {
                get: function() {
                    return config.tokenPrefix;
                },
                set: function(value) {
                    config.tokenPrefix = value;
                }
            },
            unlinkUrl: {
                get: function() {
                    return config.unlinkUrl;
                },
                set: function(value) {
                    config.unlinkUrl = value;
                }
            },
            authHeader: {
                get: function() {
                    return config.authHeader;
                },
                set: function(value) {
                    config.authHeader = value;
                }
            },
            authToken: {
                get: function() {
                    return config.authToken;
                },
                set: function(value) {
                    config.authToken = value;
                }
            },
            withCredentials: {
                get: function() {
                    return config.withCredentials;
                },
                set: function(value) {
                    config.withCredentials = value;
                }
            },
            cordova: {
                get: function() {
                    return config.cordova;
                },
                set: function(value) {
                    config.cordova = value;
                }
            },
            storageType: {
                get: function() {
                    return config.storageType;
                },
                set: function(value) {
                    config.storageType = value;
                }
            }
        });
        angular.forEach(Object.keys(config.providers), function(provider) {
            this[provider] = function(params) {
                return angular.extend(config.providers[provider], params);
            };
        }, this);
        var oauth = function(params) {
            config.providers[params.name] = config.providers[params.name] || {};
            angular.extend(config.providers[params.name], params);
        };
        this.oauth1 = function(params) {
            oauth(params);
            config.providers[params.name].oauthType = "1.0";
        };
        this.oauth2 = function(params) {
            oauth(params);
            config.providers[params.name].oauthType = "2.0";
        };
        this.$get = [ "$q", "SatellizerShared", "SatellizerLocal", "SatellizerOauth", function($q, shared, local, oauth) {
            var $auth = {};
            $auth.login = function(user, opts) {
                return local.login(user, opts);
            };
            $auth.signup = function(user, options) {
                return local.signup(user, options);
            };
            $auth.logout = function() {
                return shared.logout();
            };
            $auth.authenticate = function(name, userData) {
                return oauth.authenticate(name, userData);
            };
            $auth.link = function(name, userData) {
                return oauth.authenticate(name, userData);
            };
            $auth.unlink = function(provider, opts) {
                return oauth.unlink(provider, opts);
            };
            $auth.isAuthenticated = function() {
                return shared.isAuthenticated();
            };
            $auth.getToken = function() {
                return shared.getToken();
            };
            $auth.setToken = function(token) {
                shared.setToken({
                    access_token: token
                });
            };
            $auth.removeToken = function() {
                return shared.removeToken();
            };
            $auth.getPayload = function() {
                return shared.getPayload();
            };
            $auth.setStorageType = function(type) {
                return shared.setStorageType(type);
            };
            return $auth;
        } ];
    } ]).factory("SatellizerShared", [ "$q", "$window", "$log", "SatellizerConfig", "SatellizerStorage", function($q, $window, $log, config, storage) {
        var Shared = {}, tokenName = config.tokenPrefix ? [ config.tokenPrefix, config.tokenName ].join("_") : config.tokenName;
        Shared.getToken = function() {
            return storage.get(tokenName);
        };
        Shared.getPayload = function() {
            var token = storage.get(tokenName);
            if (token && 3 === token.split(".").length) try {
                var base64Url = token.split(".")[1], base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
                return JSON.parse(decodeURIComponent(escape(window.atob(base64))));
            } catch (e) {
                return;
            }
        };
        Shared.setToken = function(response) {
            if (!response) return $log.warn("Can't set token without passing a value");
            var token, accessToken = response && response.access_token;
            accessToken && (angular.isObject(accessToken) && angular.isObject(accessToken.data) ? response = accessToken : angular.isString(accessToken) && (token = accessToken));
            if (!token && response) {
                var tokenRootData = config.tokenRoot && config.tokenRoot.split(".").reduce(function(o, x) {
                    return o[x];
                }, response.data);
                token = tokenRootData ? tokenRootData[config.tokenName] : response.data && response.data[config.tokenName];
            }
            if (!token) {
                var tokenPath = config.tokenRoot ? config.tokenRoot + "." + config.tokenName : config.tokenName;
                return $log.warn('Expecting a token named "' + tokenPath);
            }
            storage.set(tokenName, token);
        };
        Shared.removeToken = function() {
            storage.remove(tokenName);
        };
        /**
         * @returns {boolean}
         */
        Shared.isAuthenticated = function() {
            var token = storage.get(tokenName);
            // A token is present
            if (token) {
                // Token with a valid JWT format XXX.YYY.ZZZ
                if (3 === token.split(".").length) // Could be a valid JWT or an access token with the same format
                try {
                    var base64Url = token.split(".")[1], base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/"), exp = JSON.parse($window.atob(base64)).exp;
                    // JWT with an optonal expiration claims
                    if (exp) {
                        if (Math.round(new Date().getTime() / 1e3) >= exp) {
                            // FAIL: Expired token
                            storage.remove(tokenName);
                            return !1;
                        }
                        // PASS: Non-expired token
                        return !0;
                    }
                } catch (e) {
                    // PASS: Non-JWT token that looks like JWT
                    return !0;
                }
                // PASS: All other tokens
                return !0;
            }
            // FAIL: No token at all
            return !1;
        };
        Shared.logout = function() {
            storage.remove(tokenName);
            return $q.when();
        };
        Shared.setStorageType = function(type) {
            config.storageType = type;
        };
        return Shared;
    } ]).factory("SatellizerOauth", [ "$q", "$http", "SatellizerConfig", "SatellizerUtils", "SatellizerShared", "SatellizerOauth1", "SatellizerOauth2", function($q, $http, config, utils, shared, Oauth1, Oauth2) {
        var Oauth = {};
        Oauth.authenticate = function(name, userData) {
            var provider = "1.0" === config.providers[name].oauthType ? new Oauth1() : new Oauth2(), deferred = $q.defer();
            provider.open(config.providers[name], userData || {}).then(function(response) {
                // This is for a scenario when someone wishes to opt out from
                // Satellizer's magic by doing authorization code exchange and
                // saving a token manually.
                config.providers[name].url && shared.setToken(response, !1);
                deferred.resolve(response);
            }).catch(function(error) {
                deferred.reject(error);
            });
            return deferred.promise;
        };
        Oauth.unlink = function(provider, opts) {
            opts = opts || {};
            opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.unlinkUrl);
            opts.data = {
                provider: provider
            } || opts.data;
            opts.method = opts.method || "POST";
            opts.withCredentials = opts.withCredentials || config.withCredentials;
            return $http(opts);
        };
        return Oauth;
    } ]).factory("SatellizerLocal", [ "$http", "SatellizerUtils", "SatellizerShared", "SatellizerConfig", function($http, utils, shared, config) {
        var Local = {};
        Local.login = function(user, opts) {
            opts = opts || {};
            opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.loginUrl);
            opts.data = user || opts.data;
            opts.method = opts.method || "POST";
            opts.withCredentials = opts.withCredentials || config.withCredentials;
            return $http(opts).then(function(response) {
                shared.setToken(response);
                return response;
            });
        };
        Local.signup = function(user, opts) {
            opts = opts || {};
            opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.signupUrl);
            opts.data = user || opts.data;
            opts.method = opts.method || "POST";
            opts.withCredentials = opts.withCredentials || config.withCredentials;
            return $http(opts);
        };
        return Local;
    } ]).factory("SatellizerOauth2", [ "$q", "$http", "$window", "SatellizerPopup", "SatellizerUtils", "SatellizerConfig", "SatellizerStorage", function($q, $http, $window, popup, utils, config, storage) {
        return function() {
            var Oauth2 = {}, defaults = {
                defaultUrlParams: [ "response_type", "client_id", "redirect_uri" ],
                responseType: "code",
                responseParams: {
                    code: "code",
                    clientId: "clientId",
                    redirectUri: "redirectUri"
                }
            };
            Oauth2.open = function(options, userData) {
                defaults = utils.merge(options, defaults);
                var url, openPopup, stateName = defaults.name + "_state";
                angular.isFunction(defaults.state) ? storage.set(stateName, defaults.state()) : angular.isString(defaults.state) && storage.set(stateName, defaults.state);
                url = [ defaults.authorizationEndpoint, Oauth2.buildQueryString() ].join("?");
                openPopup = config.cordova ? popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).eventListener(defaults.redirectUri) : popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).pollPopup();
                return openPopup.then(function(oauthData) {
                    // When no server URL provided, return popup params as-is.
                    // This is for a scenario when someone wishes to opt out from
                    // Satellizer's magic by doing authorization code exchange and
                    // saving a token manually.
                    // When no server URL provided, return popup params as-is.
                    // This is for a scenario when someone wishes to opt out from
                    // Satellizer's magic by doing authorization code exchange and
                    // saving a token manually.
                    return "token" !== defaults.responseType && defaults.url ? oauthData.state && oauthData.state !== storage.get(stateName) ? $q.reject('OAuth "state" mismatch') : Oauth2.exchangeForToken(oauthData, userData) : oauthData;
                });
            };
            Oauth2.exchangeForToken = function(oauthData, userData) {
                var data = angular.extend({}, userData);
                angular.forEach(defaults.responseParams, function(value, key) {
                    switch (key) {
                      case "code":
                        data[value] = oauthData.code;
                        break;

                      case "clientId":
                        data[value] = defaults.clientId;
                        break;

                      case "redirectUri":
                        data[value] = defaults.redirectUri;
                        break;

                      default:
                        data[value] = oauthData[key];
                    }
                });
                oauthData.state && (data.state = oauthData.state);
                var exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;
                return $http.post(exchangeForTokenUrl, data, {
                    withCredentials: config.withCredentials
                });
            };
            Oauth2.buildQueryString = function() {
                var keyValuePairs = [], urlParamsCategories = [ "defaultUrlParams", "requiredUrlParams", "optionalUrlParams" ];
                angular.forEach(urlParamsCategories, function(paramsCategory) {
                    angular.forEach(defaults[paramsCategory], function(paramName) {
                        var camelizedName = utils.camelCase(paramName), paramValue = angular.isFunction(defaults[paramName]) ? defaults[paramName]() : defaults[camelizedName];
                        if ("redirect_uri" !== paramName || paramValue) {
                            if ("state" === paramName) {
                                var stateName = defaults.name + "_state";
                                paramValue = encodeURIComponent(storage.get(stateName));
                            }
                            if ("scope" === paramName && Array.isArray(paramValue)) {
                                paramValue = paramValue.join(defaults.scopeDelimiter);
                                defaults.scopePrefix && (paramValue = [ defaults.scopePrefix, paramValue ].join(defaults.scopeDelimiter));
                            }
                            keyValuePairs.push([ paramName, paramValue ]);
                        }
                    });
                });
                return keyValuePairs.map(function(pair) {
                    return pair.join("=");
                }).join("&");
            };
            return Oauth2;
        };
    } ]).factory("SatellizerOauth1", [ "$q", "$http", "SatellizerPopup", "SatellizerConfig", "SatellizerUtils", function($q, $http, popup, config, utils) {
        return function() {
            var Oauth1 = {}, defaults = {
                url: null,
                name: null,
                popupOptions: null,
                redirectUri: null,
                authorizationEndpoint: null
            };
            Oauth1.open = function(options, userData) {
                angular.extend(defaults, options);
                var popupWindow, serverUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;
                config.cordova || (popupWindow = popup.open("", defaults.name, defaults.popupOptions, defaults.redirectUri));
                return $http.post(serverUrl, defaults).then(function(response) {
                    var url = [ defaults.authorizationEndpoint, Oauth1.buildQueryString(response.data) ].join("?");
                    config.cordova ? popupWindow = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri) : popupWindow.popupWindow.location = url;
                    var popupListener;
                    popupListener = config.cordova ? popupWindow.eventListener(defaults.redirectUri) : popupWindow.pollPopup();
                    return popupListener.then(function(response) {
                        return Oauth1.exchangeForToken(response, userData);
                    });
                });
            };
            Oauth1.exchangeForToken = function(oauthData, userData) {
                var data = angular.extend({}, userData, oauthData), exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;
                return $http.post(exchangeForTokenUrl, data, {
                    withCredentials: config.withCredentials
                });
            };
            Oauth1.buildQueryString = function(obj) {
                var str = [];
                angular.forEach(obj, function(value, key) {
                    str.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
                });
                return str.join("&");
            };
            return Oauth1;
        };
    } ]).factory("SatellizerPopup", [ "$q", "$interval", "$window", "SatellizerConfig", "SatellizerUtils", function($q, $interval, $window, config, utils) {
        var Popup = {};
        Popup.url = "";
        Popup.popupWindow = null;
        Popup.open = function(url, name, options) {
            Popup.url = url;
            var stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options)), UA = $window.navigator.userAgent, windowName = config.cordova || UA.indexOf("CriOS") > -1 ? "_blank" : name;
            Popup.popupWindow = $window.open(url, windowName, stringifiedOptions);
            $window.popup = Popup.popupWindow;
            Popup.popupWindow && Popup.popupWindow.focus && Popup.popupWindow.focus();
            return Popup;
        };
        Popup.eventListener = function(redirectUri) {
            var deferred = $q.defer();
            Popup.popupWindow.addEventListener("loadstart", function(event) {
                if (0 === event.url.indexOf(redirectUri)) {
                    var parser = document.createElement("a");
                    parser.href = event.url;
                    if (parser.search || parser.hash) {
                        var queryParams = parser.search.substring(1).replace(/\/$/, ""), hashParams = parser.hash.substring(1).replace(/\/$/, ""), hash = utils.parseQueryString(hashParams), qs = utils.parseQueryString(queryParams);
                        angular.extend(qs, hash);
                        qs.error || deferred.resolve(qs);
                        Popup.popupWindow.close();
                    }
                }
            });
            Popup.popupWindow.addEventListener("loaderror", function() {
                deferred.reject("Authorization Failed");
            });
            return deferred.promise;
        };
        Popup.pollPopup = function() {
            var deferred = $q.defer(), polling = $interval(function() {
                try {
                    var documentOrigin = document.location.host;
                    if (Popup.popupWindow.location.host === documentOrigin && (Popup.popupWindow.location.search || Popup.popupWindow.location.hash)) {
                        var queryParams = Popup.popupWindow.location.search.substring(1).replace(/\/$/, ""), hashParams = Popup.popupWindow.location.hash.substring(1).replace(/[\/$]/, ""), hash = utils.parseQueryString(hashParams), qs = utils.parseQueryString(queryParams);
                        angular.extend(qs, hash);
                        qs.error ? deferred.reject(qs) : deferred.resolve(qs);
                        $interval.cancel(polling);
                        Popup.popupWindow.close();
                    }
                } catch (error) {}
                Popup.popupWindow && !Popup.popupWindow.closed && void 0 !== Popup.popupWindow.closed || $interval.cancel(polling);
            }, 20);
            return deferred.promise;
        };
        Popup.prepareOptions = function(options) {
            options = options || {};
            var width = options.width || 500, height = options.height || 500;
            return angular.extend({
                width: width,
                height: height,
                left: $window.screenX + ($window.outerWidth - width) / 2,
                top: $window.screenY + ($window.outerHeight - height) / 2.5
            }, options);
        };
        Popup.stringifyOptions = function(options) {
            var parts = [];
            angular.forEach(options, function(value, key) {
                parts.push(key + "=" + value);
            });
            return parts.join(",");
        };
        return Popup;
    } ]).service("SatellizerUtils", function() {
        this.camelCase = function(name) {
            return name.replace(/([\:\-\_]+(.))/g, function(_, separator, letter, offset) {
                return offset ? letter.toUpperCase() : letter;
            });
        };
        this.parseQueryString = function(keyValue) {
            var key, value, obj = {};
            angular.forEach((keyValue || "").split("&"), function(keyValue) {
                if (keyValue) {
                    value = keyValue.split("=");
                    key = decodeURIComponent(value[0]);
                    obj[key] = !angular.isDefined(value[1]) || decodeURIComponent(value[1]);
                }
            });
            return obj;
        };
        this.joinUrl = function(baseUrl, url) {
            if (/^(?:[a-z]+:)?\/\//i.test(url)) return url;
            var joined = [ baseUrl, url ].join("/");
            return function(str) {
                return str.replace(/[\/]+/g, "/").replace(/\/\?/g, "?").replace(/\/\#/g, "#").replace(/\:\//g, "://");
            }(joined);
        };
        this.merge = function(obj1, obj2) {
            var result = {};
            for (var i in obj1) obj1.hasOwnProperty(i) && (i in obj2 && "object" == typeof obj1[i] && null !== i ? result[i] = this.merge(obj1[i], obj2[i]) : result[i] = obj1[i]);
            for (i in obj2) if (obj2.hasOwnProperty(i)) {
                if (i in result) continue;
                result[i] = obj2[i];
            }
            return result;
        };
    }).factory("SatellizerStorage", [ "$window", "$log", "SatellizerConfig", function($window, $log, config) {
        var store = {}, isStorageAvailable = function() {
            try {
                var supported = config.storageType in $window && null !== $window[config.storageType];
                if (supported) {
                    var key = Math.random().toString(36).substring(7);
                    $window[config.storageType].setItem(key, "");
                    $window[config.storageType].removeItem(key);
                }
                return supported;
            } catch (e) {
                return !1;
            }
        }();
        isStorageAvailable || $log.warn(config.storageType + " is not available.");
        return {
            get: function(key) {
                return isStorageAvailable ? $window[config.storageType].getItem(key) : store[key];
            },
            set: function(key, value) {
                return isStorageAvailable ? $window[config.storageType].setItem(key, value) : store[key] = value;
            },
            remove: function(key) {
                return isStorageAvailable ? $window[config.storageType].removeItem(key) : delete store[key];
            }
        };
    } ]).factory("SatellizerInterceptor", [ "$q", "SatellizerConfig", "SatellizerStorage", "SatellizerShared", function($q, config, storage, shared) {
        return {
            request: function(request) {
                if (request.skipAuthorization) return request;
                if (shared.isAuthenticated() && config.httpInterceptor(request)) {
                    var tokenName = config.tokenPrefix ? config.tokenPrefix + "_" + config.tokenName : config.tokenName, token = storage.get(tokenName);
                    config.authHeader && config.authToken && (token = config.authToken + " " + token);
                    request.headers[config.authHeader] = token;
                }
                return request;
            },
            responseError: function(response) {
                return $q.reject(response);
            }
        };
    } ]).config([ "$httpProvider", function($httpProvider) {
        $httpProvider.interceptors.push("SatellizerInterceptor");
    } ]);
}(window, window.angular);

!function() {
    "use strict";
    angular.module("app", [ "ngAnimate", "ngResource", "ngSanitize", "angularytics", "nemLogging", "ngFileSaver", "satellizer", "monospaced.elastic", "ngMeta", "naif.base64", "uiGmapgoogle-maps", "ui.router", "ui.mask", "duScroll", "ngMaterial", "ngAria", "app.index", "app.question", "app.testimonial", "app.about", "app.privacy", "app.terms", "app.member", "app.account", "app.user" ]);
}();

!function() {
    "use strict";
    function config($compileProvider, $urlRouterProvider, AngularyticsProvider, uiGmapGoogleMapApiProvider) {
        uiGmapGoogleMapApiProvider.configure({
            //    key: 'your api key',
            v: "3.17",
            libraries: "weather,geometry,visualization"
        });
        // AngularyticsProvider.setEventHandlers(['Console', 'GoogleUniversal']);
        var angularyticsEventHandlers = [];
        window.location.href.match(/local/) ? angularyticsEventHandlers.push("Console") : angularyticsEventHandlers.push("GoogleUniversal");
        AngularyticsProvider.setEventHandlers(angularyticsEventHandlers);
        $urlRouterProvider.otherwise("/404");
        $urlRouterProvider.rule(function($injector, $location) {
            var path = $location.url();
            return "/" === path[path.length - 1] ? path.replace(/\/$/, "") : path.indexOf("/?") > 0 && path.replace("/?", "?");
        });
    }
    angular.module("app").config(config);
    config.$inject = [ "$compileProvider", "$urlRouterProvider", "AngularyticsProvider", "uiGmapGoogleMapApiProvider" ];
}();

!function() {
    "use strict";
    function routes($authProvider, $locationProvider, $stateProvider, ngMetaProvider) {
        function loginRequired($q, $state, $auth) {
            var deferred = $q.defer();
            $auth.isAuthenticated() ? deferred.resolve() : $state.go("login");
            return deferred.promise;
        }
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend", {
            url: "/",
            abstract: !0,
            views: {
                "header@": {
                    templateUrl: "/public/html/header/header.html",
                    controller: "Header"
                },
                "footer@": {
                    templateUrl: "/public/html/footer/footer.html"
                }
            }
        }).state("member", {
            url: "/nrx/:id",
            abstract: !0,
            resolve: {
                accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                    var ItemId = $stateParams.id;
                    return account.show({
                        id: ItemId
                    }).$promise;
                } ]
            },
            views: {
                "header@": {
                    templateUrl: "/public/html/header/header-member.html",
                    controller: "HeaderMember"
                },
                "footer@": {
                    templateUrl: "footer/footer.html"
                }
            }
        }).state("backend", {
            url: "/admin",
            abstract: !0,
            views: {
                "header@": {
                    templateUrl: "/public/html/header/header-backend.html",
                    resolve: {
                        loginRequired: loginRequired
                    },
                    controller: "HeaderBackend"
                },
                "footer@": {
                    templateUrl: "/public/html/footer/footer.html"
                }
            }
        });
    }
    angular.module("app").config(routes);
    routes.$inject = [ "$authProvider", "$locationProvider", "$stateProvider", "ngMetaProvider" ];
}();

!function() {
    "use strict";
    function runBlock($rootScope, $state, $stateParams, $location, Angularytics) {
        $rootScope.$on("$routeChangeSuccess", function(event, current, previous) {
            $rootScope.title = current.$$route.title;
        });
        Angularytics.init();
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;
        $state.go("frontend.index");
    }
    angular.module("app").run(runBlock);
    runBlock.$inject = [ "$rootScope", "$state", "$stateParams", "$location", "Angularytics" ];
}();

!function() {
    "use strict";
    function Header($scope, $mdSidenav) {
        $scope.display = !1;
        $scope.open = function() {
            $scope.display = !0;
            $mdSidenav("navigationPanel").open();
        };
        $scope.close = function() {
            $scope.display = !1;
            $mdSidenav("navigationPanel").close();
        };
    }
    angular.module("app").controller("Header", Header);
    Header.$inject = [ "$scope", "$mdSidenav" ];
}();

!function() {
    "use strict";
    function HeaderMember($scope, $mdSidenav, accountResolve) {
        $scope.display = !1;
        $scope.member = accountResolve;
        console.log($scope.member);
        $scope.openMemberdNavigation = function() {
            $scope.display = !0;
            $mdSidenav("memberNavigationPanel").open();
        };
        $scope.closeMemberdNavigation = function() {
            $scope.display = !1;
            $mdSidenav("memberNavigationPanel").close();
        };
    }
    angular.module("app").controller("HeaderMember", HeaderMember);
    HeaderMember.$inject = [ "$scope", "$mdSidenav", "accountResolve" ];
}();

!function() {
    "use strict";
    function HeaderBackend($auth, $scope, $state, $mdSidenav) {
        $scope.display = !1;
        $scope.openBackendNavigation = function() {
            $scope.display = !0;
            $mdSidenav("backendNavigationPanel").open();
        };
        $scope.closeBackendNavigation = function() {
            $scope.display = !1;
            $mdSidenav("backendNavigationPanel").close();
        };
        $scope.logout = function() {
            $auth.isAuthenticated() && $auth.logout().then(function() {
                // toastr.info('You have been logged out');
                $state.go("login");
            });
        };
    }
    angular.module("app").controller("HeaderBackend", HeaderBackend);
    HeaderBackend.$inject = [ "$auth", "$scope", "$state", "$mdSidenav" ];
}();

!function() {
    "use strict";
    angular.module("app.index", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider, ngMetaProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.index", {
            meta: {
                title: "Welcome To The National RX Card | National RX Card",
                description: "We provide a free RX prescription card, that provides amazing discounts at over 63,000 pharmacies nationwide."
            },
            url: "",
            views: {
                "page@": {
                    templateUrl: "/public/html/index/index.html",
                    controller: "Index"
                }
            }
        }).state("frontend.index.text", {
            meta: {
                title: "Text The National RX Card | National RX Card",
                description: "Text the National RX Card, and use this card at over 63,000 pharmacies nationwide."
            },
            url: "text-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/text.modal.html",
                    controller: "Text"
                }
            }
        }).state("frontend.index.text.confirmation", {
            meta: {
                title: "Your National RX Card Has Been Texted | National RX Card",
                description: "The National RX Card has been successfully texted, use this card at over 63,000 pharmacies nationwide."
            },
            url: "/sent",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/text.modal.confirmation.html",
                    controller: "Text"
                }
            }
        }).state("frontend.index.email", {
            meta: {
                title: "Email The National RX Card | National RX Card",
                description: "Email the National RX Card, and use this card at over 63,000 pharmacies nationwide."
            },
            url: "email-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/email.modal.html",
                    controller: "Email"
                }
            }
        }).state("frontend.index.email.confirmation", {
            meta: {
                title: "Your National RX Card Has Been Emailed | National RX Card",
                description: "The National RX Card has been successfully emailed, use this card at over 63,000 pharmacies nationwide."
            },
            url: "/sent",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/email.modal.confirmation.html",
                    controller: "Email"
                }
            }
        }).state("frontend.index.save", {
            meta: {
                title: "Save Your National RX Card | National RX Card",
                description: "Save the National RX Card, and use this card at over 63,000 pharmacies nationwide."
            },
            url: "save-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/save.modal.html",
                    controller: "Save"
                }
            }
        }).state("frontend.index.print", {
            meta: {
                title: "Print Your National RX Card | National RX Card",
                description: "Print the National RX Card, and use this card at over 63,000 pharmacies nationwide."
            },
            url: "print-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/index/modal/print.modal.html",
                    controller: "Print"
                }
            }
        });
    }
    angular.module("app.index").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider", "ngMetaProvider" ];
}();

!function() {
    "use strict";
    function escKey($document) {
        return function(scope, element, attrs) {
            $document.bind("keydown keypress", function(event) {
                if (27 === event.which) {
                    scope.$apply(function() {
                        scope.$eval(attrs.escKey);
                    });
                    event.preventDefault();
                }
            });
        };
    }
    angular.module("app.index").directive("escKey", escKey);
    escKey.$inject = [ "$document" ];
}();

!function() {
    "use strict";
    function index($resource) {
        return $resource("/api/index/:id", {
            id: "@_id"
        }, {
            create: {
                method: "POST"
            },
            query: {
                method: "GET",
                isArray: !0
            },
            show: {
                method: "GET",
                isArray: !1
            },
            update: {
                method: "PUT"
            },
            destroy: {
                method: "DELETE"
            }
        });
    }
    angular.module("app.index").factory("index", index);
    index.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function text($resource) {
        return $resource("/api/text/:id", {
            id: "@_id"
        }, {
            create: {
                method: "POST"
            }
        });
    }
    angular.module("app.index").factory("text", text);
    text.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function mail($resource) {
        return $resource("/api/mail/:id", {
            id: "@_id"
        }, {
            create: {
                method: "POST"
            }
        });
    }
    angular.module("app.index").factory("mail", mail);
    mail.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function location($resource) {
        return $resource("/api/location/:id", {
            id: "@_id"
        }, {
            query: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.index").factory("location", location);
    location.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function zip($resource) {
        return $resource("/api/zip/:id", {
            id: "@_id"
        }, {
            query: {
                method: "GET",
                isArray: !0
            }
        });
    }
    angular.module("app.index").factory("zip", zip);
    zip.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function stateFactory() {
        var state = {
            clean: "",
            plan: {
                title: "NationalRx",
                bin: "018398",
                pcn: "48300712",
                group: "96100245",
                patient_id: "NRX43710"
            },
            organization: "NationalRx",
            email: "info@nationalrxcard.com",
            file_url: "https://s3.amazonaws.com/nationalrx/card/national_rx_card.png"
        };
        state.setState = function(data) {};
        state.getState = function() {
            return this;
        };
        return state;
    }
    angular.module("app.index").factory("stateFactory", stateFactory);
    stateFactory.$inject = [];
}();

!function() {
    "use strict";
    function Index($sce, $document, $scope, $state, $stateParams, location, zip) {
        $scope.display = !1;
        $scope.stateData = [];
        $scope.cities = [];
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.zip = function() {
            return zip.query({
                id: $scope.location.zip
            }).$promise.then(function(success) {
                $scope.location.state = "";
                $scope.location.city = "";
                $scope.results = [];
                $scope.results = success;
            });
        };
        $scope.stateUpdate = function() {
            $scope.location.city = "";
            return location.query({
                id: $scope.location.state
            }).$promise.then(function(success) {
                $scope.stateData = success;
                $scope.citiesList();
            });
        };
        $scope.citiesList = function() {
            $scope.cities = [];
            var list = [];
            angular.forEach($scope.stateData, function(item) {
                item.state === $scope.location.state && list.push(item.city);
            });
            $scope.cities = list.filter(function(elem, index, self) {
                return index === self.indexOf(elem);
            });
        };
        $scope.cityResult = function() {
            // $scope.cities = [];
            var list = [];
            angular.forEach($scope.stateData, function(item) {
                item.city === $scope.location.city && list.push(item);
            });
            $scope.location.zip = "";
            $scope.results = [];
            $scope.results = list;
        };
        $scope.makeFilterUpdate = function() {
            $scope.modelFilter = null;
            $scope.modelsList();
        };
        $scope.textModal = function() {
            $scope.toTheTop();
            $state.go("frontend.index.text");
        };
        $scope.emailModal = function() {
            $scope.toTheTop();
            $state.go("frontend.index.email");
        };
        $scope.saveModal = function() {
            $scope.toTheTop();
            $state.go("frontend.index.save");
        };
        $scope.printModal = function() {
            $scope.toTheTop();
            $state.go("frontend.index.print");
        };
        $scope.states = [ "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "District Of Columbia", "Florida", "Georgia", "Guam", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Mexico", "New Hampshire", "New Jersey", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Puerto Rico", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virgin Islands", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" ];
    }
    angular.module("app.index").controller("Index", Index);
    Index.$inject = [ "$sce", "$document", "$scope", "$state", "$stateParams", "location", "zip" ];
}();

!function() {
    "use strict";
    function Text($document, $scope, $state, stateFactory, text) {
        $scope.display = !0;
        $scope.account = stateFactory.getState();
        $scope.close = function() {
            $scope.display = !1;
            $state.go("frontend.index");
        };
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.text = function() {
            text.create({
                number: $scope.data.number,
                file: $scope.account.file_url
            });
            $scope.data = {};
            $scope.toTheTop();
            $state.go("frontend.index.text.confirmation");
        };
    }
    angular.module("app.index").controller("Text", Text);
    Text.$inject = [ "$document", "$scope", "$state", "stateFactory", "text" ];
}();

!function() {
    "use strict";
    function Email($document, $scope, $state, mail, stateFactory) {
        $scope.display = !0;
        $scope.account = stateFactory.getState();
        $scope.close = function() {
            $scope.display = !1;
            $state.go("frontend.index");
        };
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.email = function() {
            mail.create({
                email: $scope.data.email,
                file: $scope.account.file_url
            }).$promise.then(function() {
                $scope.data = {};
                $scope.toTheTop();
                $state.go("frontend.index.email.confirmation");
            });
        };
    }
    angular.module("app.index").controller("Email", Email);
    Email.$inject = [ "$document", "$scope", "$state", "mail", "stateFactory" ];
}();

!function() {
    "use strict";
    function Save($scope, $state, $window, stateFactory) {
        $scope.display = !0;
        $scope.account = stateFactory.getState();
        $scope.close = function() {
            $scope.display = !1;
            $state.go("frontend.index");
        };
    }
    angular.module("app.index").controller("Save", Save);
    Save.$inject = [ "$scope", "$state", "$window", "stateFactory" ];
}();

!function() {
    "use strict";
    function Print($document, $scope, $window, $state, stateFactory) {
        $scope.display = !0;
        $scope.account = stateFactory.getState();
        $scope.close = function() {
            $scope.display = !1;
            $state.go("frontend.index");
        };
        $scope.print = function() {
            $window.print();
        };
    }
    angular.module("app.index").controller("Print", Print);
    Print.$inject = [ "$document", "$scope", "$window", "$state", "stateFactory" ];
}();

!function() {
    "use strict";
    angular.module("app.question", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider, ngMetaProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.question", {
            meta: {
                title: "Frequently Asked Questions | National RX Card",
                description: "Find the answers to frequently asked questions regarding the National RX Card."
            },
            url: "questions",
            views: {
                "page@": {
                    templateUrl: "/public/html/question/question.html",
                    controller: "Question"
                }
            }
        });
    }
    angular.module("app.question").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider", "ngMetaProvider" ];
}();

!function() {
    "use strict";
    function Question($scope) {
        $scope.reset = function() {
            $scope.search = "";
        };
        $scope.answers = [ {
            title: "Does Every Family Member Need A Card?",
            content: "Yes, each family member needs to go back to the website and create a new card for each member of the family. However, other family members and friends may use your discount coupon card.",
            keywords: [ {
                value: "Card"
            }, {
                value: "Family"
            } ]
        }, {
            title: "How Much Does This Program Cost Me?",
            content: "We provide you with the free discount card at no cost. We provide this service to any and all individuals and families that wish to save on their prescription prices.",
            keywords: [ {
                value: "Cost"
            }, {
                value: "Family"
            } ]
        }, {
            title: "Which Pharmacies Can I Visit With The Card?",
            content: "We have over 63,000 participating major chain and local pharmacies participating in our program nationwide. Use our pharmacy locator to search by state, city and/or zip code.",
            keywords: [ {
                value: "Card"
            }, {
                value: "Pharmacies"
            } ]
        }, {
            title: "Can I Use The Discount Card For My Pet Medications?",
            content: "Yes, once you have the written prescription from your vet, take the script to your participating pharmacy and they will tell you what the discount will be.",
            keywords: [ {
                value: "Drug"
            }, {
                value: "Price"
            }, {
                value: "Pet"
            } ]
        }, {
            title: "Can I Use The Discount Card When I'm Traveling And I Need A Prescription?",
            content: "Yes, just download the card on your mobile device or print the card and take it to the participating pharmacy. Your discount card is a very good product, one that you can feel good about and have confidence with the final results.",
            keywords: [ {
                value: "Drug"
            }, {
                value: "Price"
            }, {
                value: "Travel"
            } ]
        }, {
            title: "Once I Download My Card How Do I Use It?",
            content: "Once your card is created you simply download to your mobile device by text, email or save the card to your device or you can print the card out and take it with you to the pharmacy. Once at the pharmacy please present them with the mobile card and or the printed card. The card has your static identification number along with all of the pbm required pharmacy numbers. Your pharmacy will input your information into the computer where they will tell you the discount that will be applied to the prescription. Always keep a copy of the card on your mobile device and remember to show the pharmacy your discount card every time you visit the pharmacy.",
            keywords: [ {
                value: "Card"
            }, {
                value: "Use"
            } ]
        }, {
            title: "What If I Change Pharmacies?",
            content: "When ever you change pharmacies or go to a different pharmacy your new pharmacy must put your information in the computer. Please show them the discount card that you downloaded on your mobile device or show them the printed card. It is very easy to use and the savings are incredible. *Go back to the website and create a new card. If you have lost your card just create a new one. If you’re travelling have the pharmacy go online and create a new card. You are never alone or without the ability to get your card and discount.",
            keywords: [ {
                value: "Drug"
            }, {
                value: "Pharmacies"
            }, {
                value: "Prescription"
            }, {
                value: "Card"
            } ]
        }, {
            title: "Can I Use This Coupon/card With My Current Insurance? For High, Deductibles Or Co Pays And Rx Exclusions. Gaps Formulary Limitations And Donut Holes In My Rx Coverage?",
            content: 'Generally "yes", but refer to your contract of insurance for specific answers. Take your discount card to the participating pharmacy and show them your card and the pharmacist will tell you the best option for you. The discount card produces the greatest discounts on generic drugs, upto 75% on some scripts.',
            keywords: [ {
                value: "Drug"
            }, {
                value: "Price"
            }, {
                value: "Prescription"
            }, {
                value: "Pet"
            } ]
        } ];
    }
    angular.module("app.question").controller("Question", Question);
    Question.$inject = [ "$scope" ];
}();

!function() {
    "use strict";
    angular.module("app.testimonial", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider, ngMetaProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.testimonial", {
            meta: {
                title: "Testimonials | National RX Card",
                description: "User stories and testimonials using the National RX Card."
            },
            url: "testimonials",
            views: {
                "page@": {
                    templateUrl: "/public/html/testimonial/testimonial.html"
                }
            }
        });
    }
    angular.module("app.testimonial").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider", "ngMetaProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.about", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider, ngMetaProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.about", {
            meta: {
                title: "About National RX Card, LLC | National RX Card",
                description: "Contact us regarding any coments, issues and user feedback."
            },
            url: "about-us",
            views: {
                "page@": {
                    templateUrl: "/public/html/about/about.html",
                    controller: "About"
                }
            }
        });
    }
    angular.module("app.about").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider", "ngMetaProvider" ];
}();

!function() {
    "use strict";
    function contact($resource) {
        return $resource("/api/contact/:id", {
            id: "@_id"
        }, {
            create: {
                method: "POST"
            }
        });
    }
    angular.module("app.about").factory("contact", contact);
    contact.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function About($scope, $document, contact, uiGmapGoogleMapApi) {
        $scope.contacted = !1;
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.sendContact = function() {
            contact.create({
                id: "",
                name: $scope.data.name,
                email: $scope.data.email,
                phone: $scope.data.phone,
                message: $scope.data.message
            });
            $scope.data = {};
            $scope.contacted = !0;
            $scope.toTheTop();
        };
        $scope.map = {
            center: {
                latitude: 40.751798,
                longitude: -111.572597
            },
            zoom: 14
        };
        $scope.options = {
            disableDefaultUI: !1,
            draggable: !1,
            mapTypeControl: !1,
            maxZoom: 14,
            minZoom: 14,
            scrollwheel: !1,
            streetViewControl: !1,
            zoomControl: !1
        };
        $scope.marker = {
            id: 1,
            coords: {
                latitude: 40.751798,
                longitude: -111.572597
            },
            options: {
                draggable: !1
            }
        };
        uiGmapGoogleMapApi.then(function(maps) {});
    }
    angular.module("app.about").controller("About", About);
    About.$inject = [ "$scope", "$document", "contact", "uiGmapGoogleMapApi" ];
}();

!function() {
    "use strict";
    angular.module("app.privacy", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.privacy", {
            url: "privacy",
            views: {
                "page@": {
                    templateUrl: "/public/html/privacy/privacy.html"
                }
            }
        });
    }
    angular.module("app.privacy").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.terms", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("frontend.terms", {
            url: "terms",
            views: {
                "page@": {
                    templateUrl: "/public/html/terms/terms.html"
                }
            }
        });
    }
    angular.module("app.terms").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider" ];
}();

!function() {
    "use strict";
    angular.module("app.member", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("member.view", {
            meta: {
                title: "",
                description: ""
            },
            url: "",
            views: {
                "page@": {
                    templateUrl: "/public/html/member/member.view.html",
                    resolve: {
                        accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "View"
                }
            }
        }).state("member.view.text", {
            url: "/text-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/member/member.text.modal.html",
                    resolve: {
                        accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "MemberTextModal"
                }
            }
        }).state("member.view.email", {
            url: "/email-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/member/member.email.modal.html",
                    resolve: {
                        accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "MemberEmailModal"
                }
            }
        }).state("member.view.save", {
            url: "/save-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/member/member.save.modal.html",
                    resolve: {
                        accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "MemberSaveModal"
                }
            }
        }).state("member.view.print", {
            url: "/print-a-free-rx-card",
            views: {
                "modal@": {
                    templateUrl: "/public/html/member/member.print.modal.html",
                    resolve: {
                        accountResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "MemberPrintModal"
                }
            }
        }).state("member.question", {
            url: "/questions",
            views: {
                "page@": {
                    templateUrl: "/public/html/question/question.html",
                    controller: "Question"
                }
            }
        }).state("member.testimonial", {
            url: "/testimonial",
            views: {
                "page@": {
                    templateUrl: "/public/html/testimonial/testimonial.html"
                }
            }
        }).state("member.about", {
            url: "/about-us",
            views: {
                "page@": {
                    templateUrl: "/public/html/about/about.html",
                    controller: "About"
                }
            }
        });
    }
    angular.module("app.member").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider" ];
}();

!function() {
    "use strict";
    function Member($scope, member) {
        $scope.item = {};
        $scope.addItem = function() {
            console.log($scope.item.pdf);
            member.create({
                plan: $scope.item.plan,
                organization: $scope.item.organization,
                email: $scope.item.email,
                file: $scope.item.file
            });
            $scope.item = {};
            $scope.item.pdf = {};
        };
    }
    angular.module("app.member").controller("Member", Member);
    Member.$inject = [ "$scope", "member" ];
}();

!function() {
    "use strict";
    function View($document, $scope, $state, accountResolve) {
        $scope.member = accountResolve;
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.textModal = function() {
            $scope.toTheTop();
            $state.go("member.view.text");
        };
        $scope.emailModal = function() {
            $scope.toTheTop();
            $state.go("member.view.email");
        };
        $scope.saveModal = function() {
            $scope.toTheTop();
            $state.go("member.view.save");
        };
        $scope.printModal = function() {
            $scope.toTheTop();
            $state.go("member.view.print");
        };
    }
    angular.module("app.member").controller("View", View);
    View.$inject = [ "$document", "$scope", "$state", "accountResolve" ];
}();

!function() {
    "use strict";
    function MemberTextModal($document, $scope, $state, accountResolve, text) {
        $scope.display = !0;
        $scope.member = accountResolve;
        $scope.close = function() {
            $scope.display = !1;
            $state.go("member.view");
        };
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.text = function() {
            text.create({
                destination: $scope.data.destination,
                file: $scope.member.file_url
            });
            $scope.data = {};
            $scope.display = !1;
            $scope.toTheTop();
            $scope.close();
        };
    }
    angular.module("app.member").controller("MemberTextModal", MemberTextModal);
    MemberTextModal.$inject = [ "$document", "$scope", "$state", "accountResolve", "text" ];
}();

!function() {
    "use strict";
    function MemberEmailModal($document, $scope, $state, mail, accountResolve) {
        $scope.display = !0;
        $scope.member = accountResolve;
        console.log($scope.member);
        $scope.close = function() {
            $scope.display = !1;
            $state.go("member.view");
        };
        $scope.toTheTop = function() {
            $document.scrollTopAnimated(0);
        };
        $scope.email = function() {
            mail.create({
                email: $scope.data.email,
                file: $scope.member.file_url
            });
            $scope.user = {};
            $scope.display = !1;
            $scope.toTheTop();
            $scope.close();
        };
    }
    angular.module("app.member").controller("MemberEmailModal", MemberEmailModal);
    MemberEmailModal.$inject = [ "$document", "$scope", "$state", "mail", "accountResolve" ];
}();

!function() {
    "use strict";
    function MemberSaveModal($scope, $state, $window, accountResolve) {
        $scope.display = !0;
        $scope.member = accountResolve;
        $scope.close = function() {
            $scope.display = !1;
            $state.go("member.view");
        };
    }
    angular.module("app.member").controller("MemberSaveModal", MemberSaveModal);
    MemberSaveModal.$inject = [ "$scope", "$state", "$window", "accountResolve" ];
}();

!function() {
    "use strict";
    function MemberPrintModal($document, $scope, $window, $state, accountResolve) {
        $scope.display = !0;
        $scope.member = accountResolve;
        console.log($scope.member);
        $scope.close = function() {
            $scope.display = !1;
            $state.go("member.view");
        };
        $scope.print = function() {
            $window.print();
        };
    }
    angular.module("app.member").controller("MemberPrintModal", MemberPrintModal);
    MemberPrintModal.$inject = [ "$document", "$scope", "$window", "$state", "accountResolve" ];
}();

!function() {
    "use strict";
    angular.module("app.account", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider) {
        $locationProvider.html5Mode(!0);
        $stateProvider.state("backend.list", {
            meta: {
                title: "",
                description: ""
            },
            url: "list",
            views: {
                "page@": {
                    templateUrl: "/public/html/account/account.list.html",
                    resolve: {
                        listResolve: [ "account", function(account) {
                            return account.query().$promise;
                        } ]
                    },
                    controller: "List"
                }
            }
        }).state("backend.add", {
            meta: {
                title: "",
                description: ""
            },
            url: "add",
            views: {
                "page@": {
                    templateUrl: "account/account.add.html",
                    controller: "Add"
                }
            }
        }).state("backend.edit", {
            meta: {
                title: "",
                description: ""
            },
            url: ":id",
            views: {
                "page@": {
                    templateUrl: "account/account.edit.html",
                    resolve: {
                        itemResolve: [ "$stateParams", "account", function($stateParams, account) {
                            var ItemId = $stateParams.id;
                            return account.show({
                                id: ItemId
                            }).$promise;
                        } ]
                    },
                    controller: "Edit"
                }
            }
        });
    }
    angular.module("app.account").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider" ];
}();

!function() {
    "use strict";
    function account($resource) {
        return $resource("/api/account/:id", {
            id: "@_id"
        }, {
            create: {
                method: "POST"
            },
            query: {
                method: "GET",
                isArray: !0
            },
            show: {
                method: "GET",
                isArray: !1
            },
            update: {
                method: "PUT"
            },
            destroy: {
                method: "DELETE"
            }
        });
    }
    angular.module("app.account").factory("account", account);
    account.$inject = [ "$resource" ];
}();

!function() {
    "use strict";
    function List($scope, listResolve) {
        $scope.items = listResolve;
        console.log($scope.items);
        $scope.reset = function() {
            $scope.textFilter = "";
        };
    }
    angular.module("app.account").controller("List", List);
    List.$inject = [ "$scope", "listResolve" ];
}();

!function() {
    "use strict";
    function Add($document, $scope, $state, account) {
        $scope.readOnly = !0;
        $scope.createClean = function() {
            $scope.item.clean = $scope.item.organization.replace(/[\s:,!?]/g, "-").replace(/--/g, "-").replace(/-$/, "").toLowerCase();
            $scope.item.organization && ($scope.item.url = "http://nationalrxcard.com/nrx/" + $scope.item.clean);
        };
        $scope.item = {
            file_url: "https://s3.amazonaws.com/nationalrx/card/",
            plan: {
                bin: "018398",
                pcn: "48300712",
                group: "96100245"
            }
        };
        $scope.updateImageState = function() {
            $scope.item.imageState = !$scope.item.imageState;
        };
        $scope.addItem = function() {
            $scope.createClean();
            account.create({
                clean: $scope.item.clean,
                image: $scope.item.image,
                imageState: $scope.item.imageState,
                plan: {
                    bin: $scope.item.plan.bin,
                    pcn: $scope.item.plan.pcn,
                    group: $scope.item.plan.group,
                    patient_id: $scope.item.plan.patient_id
                },
                organization: $scope.item.organization,
                email: $scope.item.email,
                file_url: $scope.item.file_url
            }).$promise.then(function() {
                $scope.item = {};
                $scope.item.image = {};
                $state.go("backend.list", {}, {
                    reload: !0
                });
            });
        };
    }
    angular.module("app.account").controller("Add", Add);
    Add.$inject = [ "$document", "$scope", "$state", "account" ];
}();

!function() {
    "use strict";
    function Edit($document, $scope, $state, account, itemResolve) {
        $scope.item = itemResolve;
        $scope.url = "http://www.nationalrxcard.com/nrx/" + $scope.item.clean;
        $scope.createClean = function() {
            $scope.item.clean = $scope.item.organization.replace(/[\s:,!?]/g, "-").replace(/--/g, "-").replace(/-$/, "").toLowerCase();
            $scope.item.organization && ($scope.url = "http://www.nationalrxcard.com/nrx/" + $scope.item.clean);
        };
        $scope.saveImage = function(content) {
            account.update({
                id: $scope.item._id
            }, {
                $set: {
                    image: content
                }
            }).$promise.then(function(data) {
                $scope.item.image = data.image;
            });
            $scope.new = null;
        };
        $scope.updateImageState = function() {
            $scope.item.imageState = !$scope.item.imageState;
            account.update({
                id: $scope.item._id
            }, {
                imageState: $scope.item.imageState
            });
        };
        $scope.updateOrganization = function() {
            $scope.createClean();
            account.update({
                id: $scope.item._id
            }, {
                clean: $scope.item.clean,
                organization: $scope.item.organization
            });
            $state.go($state.current, {
                id: $scope.item.clean
            }, {
                notify: !1
            });
        };
        $scope.updateEmail = function() {
            account.update({
                id: $scope.item._id
            }, {
                email: $scope.item.email
            });
        };
        $scope.updateURL = function() {
            account.update({
                id: $scope.item._id
            }, {
                file_url: $scope.item.file_url
            });
        };
        $scope.updateBIN = function() {
            account.update({
                id: $scope.item._id
            }, {
                "plan.bin": $scope.item.plan.bin
            });
        };
        $scope.updatePCN = function() {
            account.update({
                id: $scope.item._id
            }, {
                "plan.pcn": $scope.item.plan.pcn
            });
        };
        $scope.updateGroup = function() {
            account.update({
                id: $scope.item._id
            }, {
                "plan.group": $scope.item.plan.group
            });
        };
        $scope.updatePatientID = function() {
            account.update({
                id: $scope.item._id
            }, {
                "plan.patient_id": $scope.item.plan.patient_id
            });
        };
        $scope.deleteItem = function(data) {
            account.destroy({
                id: data
            });
            $state.go("backend.list", {}, {
                reload: !0
            });
        };
    }
    angular.module("app.account").controller("Edit", Edit);
    Edit.$inject = [ "$document", "$scope", "$state", "account", "itemResolve" ];
}();

!function() {
    "use strict";
    angular.module("app.user", []);
}();

!function() {
    "use strict";
    function routes($locationProvider, $stateProvider, $authProvider) {
        function skipIfLoggedIn($q, $auth, $state) {
            var deferred = $q.defer();
            if ($auth.isAuthenticated()) {
                deferred.reject();
                $state.go("backend.list");
            } else deferred.resolve();
            return deferred.promise;
        }
        $locationProvider.html5Mode(!0);
        $stateProvider.state("login", {
            data: {
                title: ""
            },
            url: "login",
            views: {
                "page@": {
                    templateUrl: "/public/html/user/user.login.html",
                    controller: "Login",
                    resolve: {
                        skipIfLoggedIn: skipIfLoggedIn
                    }
                }
            }
        }).state("register", {
            meta: {
                title: "",
                description: "This is the description shown in Google search results"
            },
            url: "register",
            views: {
                "page@": {
                    templateUrl: "/public/html/user/user.register.html",
                    controller: "Register",
                    resolve: {
                        skipIfLoggedIn: skipIfLoggedIn
                    }
                }
            }
        });
    }
    angular.module("app.user").config(routes);
    routes.$inject = [ "$locationProvider", "$stateProvider", "$authProvider" ];
}();

!function() {
    "use strict";
    function Login($auth, $state, $scope) {
        $scope.login = function() {
            $auth.login($scope.user).then(function() {
                // toastr.success('You have successfully signed in!');
                $state.go("backend.list");
            }).catch(function(error) {});
        };
    }
    angular.module("app.user").controller("Login", Login);
    Login.$inject = [ "$auth", "$state", "$scope" ];
}();

!function() {
    "use strict";
    function Register($auth, $state, $scope) {
        $scope.signup = function() {
            $auth.signup($scope.user).then(function(response) {
                $auth.setToken(response);
                $state.go("backend.list");
            }).catch(function(response) {});
        };
    }
    angular.module("app.user").controller("Register", Register);
    Register.$inject = [ "$auth", "$state", "$scope" ];
}();